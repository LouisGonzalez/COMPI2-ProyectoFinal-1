package gramaticaJAVA;
import java_cup.runtime.*;
import Tablas.*;
import Operaciones.*;
import verificaciones.*;
import cuartetos.*;
import objetosApoyo.*;
import manejoCuartetos.*;
import java.util.*;
import interfaz.*;
import manejoExe.*;

parser code {:

    public int jerarquia = 0;
    public String tipoActual = "";
    public TablaSimbolos tabla;
    public OperacionesJAVA op = new OperacionesJAVA();
    public VerifJAVA verif = new VerifJAVA();
    public static boolean todoCorrecto = true;
    public String tipoMetodo = "";

    /*Variables para los cuartetos*/

    public int contVars = 0;
    public String idSwitch = "";
    ArrayList<String> arrayFinales = new ArrayList<>();
    public int contFinales = 0;
    public static String aux2, aux3;
    public ArrayList<Nodo> auxCuarpeta = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaFor = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<Boolean> usoPila = new ArrayList<>();
    public static boolean inst = false;
    public ArrayList<String> pilaEtInst = new ArrayList<>();
    public static String etInst = "";
    public ManejoCondiciones manejo = new ManejoCondiciones();
    public ManejoJava manejoJV = new ManejoJava();
    
    /*---------------------------------------- CODIGO EJECUTABLE ---------------------------------------------*/

    public String metodo = "", clase = "";
    public ExeJava exe = new ExeJava();

    public SintaxJAVA(AnalizadorLexico lex, TablaSimbolos tabla){
        super(lex);
        this.tabla = tabla;
        contVars = tabla.getObJava().getContVars();
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
        int fila = s.left + PanelPrincipal.totalLineas;
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+fila,"");   
        PanelPrincipal.errores += "Fila: "+fila+" Columna:"+s.right+" Tipo de error: SINTACTICO.\n";
    }

   /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna:"+s.right+" Tipo de error: SINTACTICO.\n";
    }*/

:}

    terminal coma, punto, tipoInt, tipoChar, tipoFloat, tipoVoid, condIf, condElse, condFor, condWhile, condDo, 
             condSwitch, tipoPublic, clase, llave_a, llave_b, agrupacion_a, agrupacion_b, puntoComa, dosPuntos,
             admiracion, igual, mas, menos, por, div, porcentaje, ampersand, pleca, comilla, guionBajo,
             numero, id, resto, mayor, menor, comillaSimple, quiebre, parentesis_a, parentesis_b, noCase, def,
             retorno, mensaje, mensaje2, intInput, charInput, floatInput, condReturn, condFalse, condTrue, and, or,
             comentario_a, comentario_b, comentario_c, condThis, enter;
                 
    non terminal AA, A, B, VARIABLES, METODOS, VARIABLES2, OPERACION2,  
                 MENSAJE, CONC_VAR_DEF, CONC_VAR_AS, PARAM_CONSTRUCTOR, PARAM_CONSTRUCTOR2,
                 AND, OR, CONSTRUCTOR, ASIGNACIONES, EXT, ENTER, ENTER2, 
                  LECTURA_DATOS, COMENTARIO_A, COMENTARIO_B, METODO_VOID;

    non terminal String TEXTO, TEXTO2, VAL_TEXTO, TEXTO_PLANO, VAR, TIPO_INPUT, INT, TIPO_METODO, TEXTO_PLANO2;

    non terminal String PARAMETROS, PARAMETROS2, METODO_OP;

    non terminal Boolean CUERPO_METODO;

    non terminal String BOOLEAN, VAL_FOR;

    non terminal Boolean IF, ELSE, FOR, WHILE, DO_WHILE, SWITCH, CASOS_SWITCH, RETORNO, RETORNO_SWITCH;

    non terminal ArrayList<NodoBoolean> PARAM, PARAM2, PARAM_METODOS;

    non terminal NodoBoolean OP_COND, VAL_COND, METODO_COND;

    non terminal String OPERACION, TIPO_VAL, VALOR, C, INC, VAL_SWITCH, OP_FOR, TIPO_FOR;

    non terminal ArrayList<Nodo> BOOLEAN3, EXT2;

    non terminal String OP2, OP;

    precedence left mas, menos;         
    precedence left por, div, porcentaje;

    precedence left or;
    precedence left and;
                                    
    start with AA;
                 
    AA ::= ENTER2 A     
;                

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    A ::= A tipoPublic clase id:a               {:  parser.clase = a.toString();
                                                    parser.exe.agregarClase(parser.tabla, a.toString());
                                                    parser.op.agregarNuevaClase(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright); :} 
            llave_a ENTER B llave_b ENTER       {:  parser.clase = ""; :}
    |               
;                       

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    B ::= VARIABLES B  
    |     METODOS B
    |     CONSTRUCTOR B
    |     ASIGNACIONES B
    |     COMENTARIO_A B
    |     COMENTARIO_B B
    |         
    |     error B
;                   

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    VARIABLES ::= VAR:a id:b                    {:  parser.tipoActual = a;
                                                    parser.exe.agregarVariable(parser.tabla, b.toString(), parser.metodo, parser.clase, a); :} 
                  C:c                           {:  if(c!=null){   
                                                        /*VER ESTE IF Y REVISAR QUE PROCEDE*/
                                                        parser.manejoJV.agregarValVariable(parser.tabla, b.toString(), c, parser.metodo, parser.clase);
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, b.toString(), a.toString(), true, bleft+PanelPrincipal.totalLineas, bright);  
                                                    } else { 
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, b.toString(), a.toString(), false, bleft+PanelPrincipal.totalLineas, bright); 
                                                    } :} 
                  CONC_VAR_DEF
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    ASIGNACIONES ::= id:a igual                 {:  parser.tipoActual = ""; 
                                                    parser.tipoActual = parser.op.devolverTipoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, aleft+PanelPrincipal.totalLineas, aright); :} 
                     VALOR:b                    {:  parser.manejoJV.agregarValVariable(parser.tabla, a.toString(), b, parser.metodo, parser.clase);
                                                    parser.op.agregarValorVar(parser.tabla.getObJava(), parser.jerarquia, a.toString());  :} 
                    CONC_VAR_AS
    |               condThis punto id:a igual   {:  parser.tipoActual = ""; 
                                                    parser.tipoActual = parser.op.devolverTipoVar(parser.tabla.getObJava(), a.toString(), 0, parser.tabla.getObJava().getMisClases().size()-1, aleft+PanelPrincipal.totalLineas, aright); :} 
                    VALOR:b                     {:  parser.manejoJV.agregarValVariable2(parser.tabla, a.toString(), b, parser.metodo, parser.clase);
                                                    parser.op.agregarValorVar(parser.tabla.getObJava(), 0, a.toString());  :} 
                    CONC_VAR_AS
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    CONC_VAR_DEF ::= coma id:a                      {: parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodo, parser.clase, parser.tipoActual); :} 
                     C:c                            {:  if(c!=null){ 
                                                        parser.manejoJV.agregarValVariable(parser.tabla, a.toString(), c, parser.metodo, parser.clase);
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, a.toString(), parser.tipoActual, true, aleft+PanelPrincipal.totalLineas, aright); 
                                                    } else { 
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, a.toString(), parser.tipoActual, false, aleft+PanelPrincipal.totalLineas, aright); 
                                                    } :} 
                     CONC_VAR_DEF
    |                puntoComa ENTER
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    CONC_VAR_AS ::= id:a igual                  {:  parser.tipoActual=""; 
                                                    parser.tipoActual = parser.op.devolverTipoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, aleft+PanelPrincipal.totalLineas, aright); :} 
                    VALOR:b                     {:  parser.manejoJV.agregarValVariable(parser.tabla, a.toString(), b, parser.metodo, parser.clase);
                                                    parser.op.agregarValorVar(parser.tabla.getObJava(), parser.jerarquia, a.toString()); :} 
                    CONC_VAR_AS
    |               puntoComa ENTER
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    C ::= igual VALOR:a                 {: RESULT=a; :}
    |                                   {: RESULT= null; :}
;
    VAR ::= tipoInt                     {: RESULT="Integer"; :}
    |       tipoChar                    {: RESULT="Char"; :}
    |       tipoFloat                   {: RESULT="Float"; :}
;
    VALOR ::= OPERACION:a               {: RESULT=a; :}
;
    OPERACION ::= parentesis_a OPERACION:a parentesis_b             {: RESULT=a; :}
    |             OPERACION:a mas OPERACION:b                       {: RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "suma"); :}
    |             OPERACION:a menos OPERACION:b                     {: RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "resta"); :}
    |             OPERACION:a por OPERACION:b                       {: RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "mult"); :}
    |             OPERACION:a div OPERACION:b                       {: RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "div");  :}
    |             OPERACION:a porcentaje OPERACION:b                {: RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "modulo"); :}
    |             TIPO_VAL:a                                        {: RESULT = parser.manejoJV.operacionIndividual(parser.tabla, a, parser.metodo, parser.clase); :}
;                         
    TIPO_VAL ::= id:a                                               {:  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); RESULT=a.toString(); :}
    |            numero:a                                           {:  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), aleft+PanelPrincipal.totalLineas, aright);  RESULT=a.toString(); :}
    |            METODO_COND:a                                      {:  if(!a.getTipo().equals(parser.tipoActual)){
                                                                            if(parser.verif.verificarPadreVar(parser.tabla.getObJava(), a.getTipo(), parser.tipoActual)){
                                                                                PanelPrincipal.errores += "Fila: " + aleft+PanelPrincipal.totalLineas + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                            }
                                                                        }
                                                                        RESULT = a.getId(); :}        
    |            menos METODO_COND:a                                      {:  if(!a.getTipo().equals(parser.tipoActual)){
                                                                            if(parser.verif.verificarPadreVar(parser.tabla.getObJava(), a.getTipo(), parser.tipoActual)){
                                                                                PanelPrincipal.errores += "Fila: " + aleft+PanelPrincipal.totalLineas + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                            }
                                                                        }
                                                                        RESULT = "-"+a.getId(); :}        
    |            numero:a punto:b numero:c                          {:  String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT=a.toString()+b.toString()+c.toString(); :}  
    |            comillaSimple:a id:b comillaSimple:c               {:  RESULT=a.toString()+b.toString()+c.toString();  :}
    |            comillaSimple:a numero:b comillaSimple:c           {:  RESULT=a.toString()+b.toString()+c.toString();  :}
    |            menos:d comillaSimple:a id:b comillaSimple:c       {:  RESULT=d.toString()+a.toString()+b.toString()+c.toString();  :}
    |            menos:d comillaSimple:a numero:b comillaSimple:c   {:  RESULT=d.toString()+a.toString()+b.toString()+c.toString();  :}
    |            menos:a id:b                                       {:  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString(); :}
    |            menos:a numero:b                                   {:  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString(); :}
    |            menos:a numero:b punto:c numero:d                  {: String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString()+c.toString()+d.toString(); :}  
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    METODO_COND ::= id:a parentesis_a PARAM_METODOS:b parentesis_b puntoComa      {:  boolean existe = parser.verif.verificarMetodo(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                                    String et = parser.manejoJV.devolverEtiquetaMetodo(parser.tabla, a.toString(), parser.clase, b, aleft+PanelPrincipal.totalLineas);
                                                                                    String tip = "";
                                                                                    if(existe){
                                                                                        tip = parser.tabla.getObJava().getMisClases().get(parser.tabla.getObJava().getMisClases().size()-1).getMisMetodos().get(VerifJAVA.iterador).getRetorno();
                                                                                    }
                                                                                    RESULT = new NodoBoolean(tip, et);   :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    METODO_OP ::= id:a parentesis_a PARAM_METODOS:b parentesis_b puntoComa        {:  parser.verif.verificarMetodo(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                                      RESULT = parser.manejoJV.devolverEtiquetaMetodo(parser.tabla, a.toString(), parser.clase, b, aleft+PanelPrincipal.totalLineas);   :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    METODO_VOID ::= id:a parentesis_a PARAM_METODOS:b parentesis_b puntoComa      {:    parser.verif.verificarMetodo(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                                        parser.manejoJV.invocarMetodo(parser.tabla, a.toString(), parser.clase, b, aleft+PanelPrincipal.totalLineas);   :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    PARAM_METODOS ::= PARAM:a                       {: RESULT = a; :}
    |                                               {: RESULT = new ArrayList<>(); :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    PARAM ::= PARAM2:a OP_COND:b                                    {:  if(a != null){
                                                                        if(!b.getTipo().equals("")){
                                                                            a.add(b);
                                                                            RESULT = a;
                                                                        } else {
                                                                            RESULT = null;
                                                                        }
                                                                    }  :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    PARAM2 ::= PARAM2:a OP_COND:b coma                          {:  if(a != null){
                                                                        if(!b.getTipo().equals("")){
                                                                            a.add(b);
                                                                            RESULT = a;
                                                                        } else {
                                                                            RESULT = null;
                                                                        }
                                                                    } :}
    |                                                           {:  RESULT = new ArrayList<>(); :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    METODOS ::= tipoPublic TIPO_METODO:a id:b parentesis_a              {:  parser.tipoMetodo=a; 
                                                                            parser.jerarquia++;
                                                                            parser.metodo = b.toString();
                                                                            parser.exe.agregarMetodo(parser.tabla, b.toString(), a, parser.clase);
                                                                            parser.op.agregarNuevoMetodo(b.toString(), parser.tabla.getObJava(), parser.tabla.getObJava().getMisClases().size()-1, a.toString(), bleft+PanelPrincipal.totalLineas, bright); :} 
                PARAMETROS:h parentesis_b                               {:  
                                                                            parser.exe.agregarParametros(parser.tabla, parser.metodo, parser.clase, h);
                                                                            if(!h.equals("")){
                                                                                parser.metodo = b.toString() + "_"+h;
                                                                                parser.exe.actualizarParametrosMetodo(parser.tabla, parser.clase, parser.metodo);
                                                                            }
                                                                            parser.manejoJV.crearMetodo(parser.tabla.getObJava(), b.toString(), h, a);      :}  
                llave_a ENTER CUERPO_METODO:f RETORNO:g                 {:  parser.op.comprobarReturnMetodo(parser.tabla.getObJava(), f, g, b.toString(), a);     :} 
                llave_b ENTER                                           {:  parser.manejoJV.finMetodo(parser.tabla.getObJava());  
                                                                            parser.jerarquia--;
                                                                            parser.metodo = ""; :}
    |           tipoPublic TIPO_METODO:a id:b parentesis_a parentesis_b {:  parser.tipoMetodo=a; 
                                                                            parser.jerarquia++; 
                                                                            parser.exe.agregarMetodo(parser.tabla, b.toString(), a, parser.clase);
                                                                            parser.op.agregarNuevoMetodo(b.toString(), parser.tabla.getObJava(), parser.tabla.getObJava().getMisClases().size()-1, a.toString(), bleft+PanelPrincipal.totalLineas, bright);  
                                                                            parser.manejoJV.crearMetodo(parser.tabla.getObJava(), b.toString(), "", a);    :} 
                llave_a ENTER CUERPO_METODO:f RETORNO:g                 {:  parser.op.comprobarReturnMetodo(parser.tabla.getObJava(), f, g, b.toString(), a); :} 
                llave_b ENTER                                           {:  parser.metodo = "";
                                                                            parser.manejoJV.finMetodo(parser.tabla.getObJava());  
                                                                            parser.jerarquia--; :}
;       

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    CONSTRUCTOR ::= tipoPublic id:a parentesis_a        {:  parser.jerarquia++; 
                                                            parser.metodo = a.toString();
                                                            parser.exe.agregarConstructor(parser.tabla, a.toString());
                                                            parser.op.agregarNuevoConstructor(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); :} 
                    PARAMETROS:h parentesis_b           {:  parser.manejoJV.crearMetodo(parser.tabla.getObJava(), a.toString(), h, "void");
                                                            parser.exe.agregarParametros(parser.tabla, parser.metodo, parser.clase, h);  
                                                            if(!h.equals("")){
                                                                parser.metodo = a.toString()+"_"+h;
                                                                parser.exe.actualizarParametrosMetodo(parser.tabla, parser.clase, parser.metodo);
                                                            }    
                                                            parser.manejoJV.inicializarThis(parser.tabla, parser.metodo, parser.clase);    :} 
                    llave_a ENTER CUERPO_METODO:b       {:  if(b){                      
                                                                System.out.println("Constructor incapaz de retornar un valor"); 
                                                            }  
                                                            //parser.exe.agregarReturn(parser.tabla, parser.metodo, parser.clase); :} 
                    llave_b ENTER                       {:  parser.manejoJV.finMetodo(parser.tabla.getObJava()); 
                                                            parser.metodo = "";
                                                            parser.jerarquia--; :}
    |               tipoPublic id:a parentesis_a        {:  parser.jerarquia++; 
                                                            parser.metodo = a.toString();
                                                            parser.exe.agregarConstructor(parser.tabla, a.toString());
                                                            parser.op.agregarNuevoConstructor(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); :} 
                    parentesis_b                        {:  parser.manejoJV.crearMetodo(parser.tabla.getObJava(), a.toString(), "", "void");  
                                                            parser.manejoJV.inicializarThis(parser.tabla, parser.metodo, parser.clase); :} 
                    llave_a ENTER CUERPO_METODO:b       {:  if(b){ 
                                                                System.out.println("Constructor incapaz de retornar un valor"); 
                                                            }   
                                                            //parser.exe.agregarReturn(parser.tabla, parser.metodo, parser.clase);    :} 
                    llave_b ENTER                       {:  parser.manejoJV.finMetodo(parser.tabla.getObJava());
                                                            parser.metodo = "";
                                                            parser.jerarquia--;  :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    PARAMETROS ::= PARAMETROS2:a VAR:b id:c             {:  parser.op.agregarVarMetodo(c.toString(), parser.tabla.getObJava(), b, true, parser.jerarquia, cleft+PanelPrincipal.totalLineas, cright);  
                                                            parser.exe.agregarParametro(parser.tabla, c.toString(), parser.clase, parser.metodo, b);
                                                            parser.op.agregarParametrosMetodo(c.toString(), parser.tabla.getObJava(), b, cleft+PanelPrincipal.totalLineas, cright);
                                                            if(a.equals("")){
                                                                RESULT = b.toString();
                                                            } else {
                                                                RESULT = a + "_" + b.toString();
                                                            } :}
;                      

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    PARAMETROS2 ::= PARAMETROS2:a VAR:b id:c coma       {:  parser.op.agregarVarMetodo(c.toString(), parser.tabla.getObJava(), b, true, parser.jerarquia, cleft+PanelPrincipal.totalLineas, cright);   
                                                            parser.op.agregarParametrosMetodo(c.toString(), parser.tabla.getObJava(), b, cleft+PanelPrincipal.totalLineas, cright);
                                                            parser.exe.agregarParametro(parser.tabla, c.toString(), parser.clase, parser.metodo, b);
                                                            if(a.equals("")){
                                                                RESULT = b.toString();
                                                            } else {
                                                                RESULT = a + "_" + b.toString();
                                                            } :} 
    |                                                   {:  RESULT=""; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    TIPO_METODO ::= tipoChar    {: RESULT="Char"; :}
    |               tipoFloat   {: RESULT="Float"; :}
    |               tipoInt     {: RESULT="Integer"; :}
    |               tipoVoid    {: RESULT="void"; :}
;
    CUERPO_METODO ::= CUERPO_METODO:a VARIABLES         {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } :}
    |                 CUERPO_METODO:a ASIGNACIONES      {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } :}
    |                 CUERPO_METODO:a IF:b              {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } :}
    |                 CUERPO_METODO:a FOR:b             {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } :}
    |                 CUERPO_METODO:a WHILE:b           {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } :}
    |                 CUERPO_METODO:a DO_WHILE:b        {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } :}
    |                 CUERPO_METODO:a MENSAJE           {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } :} 
    |                 CUERPO_METODO:a SWITCH:b          {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } :} 
    |                 CUERPO_METODO:a LECTURA_DATOS     {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } :}
    |                 CUERPO_METODO:a COMENTARIO_B      {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } :}
    |                 CUERPO_METODO:a COMENTARIO_A      {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } :}
    |                 CUERPO_METODO:a METODO_VOID       {: if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } :}
    |                                                   {: RESULT=false; :}
    |                 CUERPO_METODO:a error             {: RESULT = a; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    RETORNO ::= retorno                                 {:  parser.tipoActual = parser.tipoMetodo; 
                                                            parser.exe.agregarReturn(parser.tabla, parser.metodo, parser.clase); :} 
                OPERACION:a puntoComa ENTER             {:  parser.manejoJV.crearReturn(parser.tabla, a, parser.metodo, parser.clase);  
                                                            RESULT=true; :}
    |                                                   {: RESULT=false; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    IF ::= condIf parentesis_a                                              {:  parser.pilaFalsas.add(new ArrayList<>()); 
                                                                                parser.usoPila.add(false); :} 
           EXT2:h                                                           {:  parser.jerarquia++; 
                                                                                parser.manejoJV.primerChequeoIf(parser.tabla.getObJava(), h);  :} 
           parentesis_b  llave_a ENTER CUERPO_METODO:a RETORNO:b llave_b    {:  parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia);     
                                                                                parser.manejoJV.segundoChequeoIf(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);      
                                                                                parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.jerarquia--; :} 
           ELSE:c                                                           {:  RESULT=parser.op.retornoIf(a, b, c); :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    ELSE ::= condElse condIf parentesis_a                                   {:  parser.usoPila.add(false); 
                                                                                parser.pilaFalsas.add(new ArrayList<>()); :} 
             EXT2:h                                                         {:  parser.jerarquia++;  
                                                                                parser.manejoJV.primerChequeoIf(parser.tabla.getObJava(), h); :} 
             parentesis_b  llave_a ENTER CUERPO_METODO:a RETORNO:b llave_b  {:  parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.manejoJV.segundoChequeoIf(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                                parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.jerarquia--; :} 
             ELSE:c                                                         {:  RESULT=parser.op.retornoIf(a, b, c); :}
    |        condElse                                                       {:  parser.jerarquia++; :} 
             llave_a ENTER CUERPO_METODO:a RETORNO:b llave_b ENTER          {:  parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.manejo.agregarEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.jerarquia--; 
                                                                                if(a != null){ 
                                                                                    if(a && b){ 
                                                                                        RESULT=null; 
                                                                                    } else if((!a && b) || (a && !b)){ 
                                                                                        RESULT=true; 
                                                                                    } else if(!a && !b){ 
                                                                                        RESULT=false; 
                                                                                    } 
                                                                                } else { 
                                                                                    RESULT=null; 
                                                                                } :}
    |       ENTER                                                           {:  parser.manejo.agregarEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia);  
                                                                                RESULT=false; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    FOR ::= condFor                                                             {:  parser.usoPila.add(false); 
                                                                                    parser.jerarquia++; 
                                                                                    parser.pilaFor.add(new ArrayList<>()); 
                                                                                    parser.pilaFalsas.add(new ArrayList<>()); :} 
            parentesis_a INT:a id:b                                             {:  parser.verif.agregarVarFor(parser.tabla.getObJava(), b.toString(), a, parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright);
                                                                                    if(!a.equals("")){
                                                                                        parser.exe.agregarVariable(parser.tabla, b.toString(), parser.metodo, parser.clase, a); 
                                                                                    } :} 
            igual VAL_FOR:c puntoComa EXT2:d puntoComa id:f INC:g parentesis_b  {:  parser.manejoJV.agregarFor(parser.tabla, b.toString(), c, d, parser.jerarquia, parser.metodo, parser.clase);  
                                                                                    boolean idInc = parser.verif.verificarTipadoVar(parser.tabla.getObJava(), f.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer", fleft+PanelPrincipal.totalLineas, fright);  
                                                                                    parser.verif.comprobarFor(parser.tabla.getObJava(), b.toString(), a.toString(), parser.jerarquia); :} 
            llave_a ENTER CUERPO_METODO:j llave_b ENTER                         {:  parser.manejoJV.retornoFor(parser.tabla, parser.usoPila, parser.pilaFor, f.toString(), parser.pilaCuarpeta, parser.pilaFalsas, g, parser.jerarquia, parser.metodo, parser.clase);  
                                                                                    parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia);  
                                                                                    parser.jerarquia--;  
                                                                                    if(j!=null){ 
                                                                                        RESULT=false; 
                                                                                    } else { 
                                                                                        RESULT=null; 
                                                                                    }  :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    INT ::= tipoInt                             {: RESULT="Integer"; :}
    |                                           {: RESULT=""; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    INC ::= igual                               {:  parser.tipoActual="Integer"; :} 
            OP_FOR:a                            {:  RESULT=a; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    OP_FOR ::= parentesis_a OP_FOR:a parentesis_b               {: RESULT=a; :}
    |             OP_FOR:a mas OP_FOR:b                         {: RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "suma"); :}
    |             OP_FOR:a menos OP_FOR:b                       {: RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "resta"); :}
    |             OP_FOR:a por OP_FOR:b                         {: RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "mult"); :}
    |             OP_FOR:a div OP_FOR:b                         {: RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "div"); :}
    |             OP_FOR:a porcentaje OP_FOR:b                  {: RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "modulo"); :}
    |             TIPO_FOR:a                                    {: RESULT = parser.manejoJV.operacionIndividual(parser.tabla, a, parser.metodo, parser.clase); :}
;                         

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    TIPO_FOR ::= id:a                                           {: parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); RESULT=a.toString(); :}
    |            numero:a                                       {:  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), aleft+PanelPrincipal.totalLineas, aright);  RESULT=a.toString(); :}
    |            numero:a punto:b numero:c                      {: String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT=a.toString()+b.toString()+c.toString(); :}  
    |            comillaSimple:a id:b comillaSimple:c           {: RESULT=a.toString()+b.toString()+c.toString();  :}
    |            comillaSimple:a numero:b comillaSimple:c       {: RESULT=a.toString()+b.toString()+c.toString();  :}
    |            menos:a id:b                                   {: parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString(); :}
    |            menos:a numero:b                               {: String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString(); :}
    |            menos:a numero:b punto:c numero:d              {: String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString()+c.toString()+d.toString(); :}  
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    OP ::= menor igual          {: RESULT = "<="; :}
    |      menor                {: RESULT = "<"; :}
    |      mayor igual          {: RESULT = ">="; :}
    |      mayor                {: RESULT = ">"; :}
    |      igual                {: RESULT = "="; :}
    |      igual igual          {: RESULT = "=="; :}
    |      admiracion igual     {: RESULT = "!="; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    VAL_FOR ::= id:a                    {:  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer", aleft+PanelPrincipal.totalLineas, aright); 
                                            RESULT=a.toString(); :}
    |           menos:a id:b            {:  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer", bleft+PanelPrincipal.totalLineas, bright); 
                                            RESULT=a.toString()+b.toString(); :}
    |           numero:a                {:  RESULT=a.toString();  :}
    |           menos:a numero:b        {:  RESULT=a.toString()+b.toString(); :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    WHILE ::= condWhile                                                             {:  parser.usoPila.add(false); 
                                                                                        parser.jerarquia++; 
                                                                                        parser.pilaFalsas.add(new ArrayList<>()); :} 
              parentesis_a EXT2:h                                                   {:  parser.manejoJV.agregarWhile(parser.tabla.getObJava(), h, parser.jerarquia);     :} 
              parentesis_b llave_a ENTER  CUERPO_METODO:a RETORNO:b llave_b ENTER   {:  parser.manejoJV.retornoWhile(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                                        parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                        parser.jerarquia--;  
                                                                                        if(a != null){ 
                                                                                            RESULT=false; 
                                                                                        } else { 
                                                                                            RESULT=null; 
                                                                                        } :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    DO_WHILE ::= condDo                                                                                                         {:  parser.usoPila.add(false);  
                                                                                                                                    parser.jerarquia++; 
                                                                                                                                    parser.pilaFalsas.add(new ArrayList<>());  
                                                                                                                                    parser.manejoJV.agregarDoWhile(parser.tabla.getObJava(), parser.jerarquia);      
                                                                                                                                    /*parser.manejo.agregarDoWhile(parser.tabla.getObJava(), parser.jerarquia);*/ :} 
                 llave_a ENTER CUERPO_METODO:a RETORNO:b llave_b condWhile parentesis_a EXT2:h parentesis_b puntoComa ENTER     {:  parser.manejoJV.agregarCondicionWhile(parser.tabla.getObJava(), parser.usoPila, h, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                                                                                    parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                                                                    parser.jerarquia--; 
                                                                                                                                    if(a != null){ 
                                                                                                                                        RESULT=false; 
                                                                                                                                    } else { 
                                                                                                                                        RESULT=null; 
                                                                                                                                    } :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    SWITCH ::= condSwitch                                               {:  parser.jerarquia++; :}   
               parentesis_a VAL_SWITCH:a                                {:  parser.arrayFinales.add("etFinal_"+parser.contFinales); 
                                                                            parser.contFinales++;  
                                                                            parser.idSwitch = a; :} 
               parentesis_b llave_a ENTER CASOS_SWITCH llave_b ENTER    {:  parser.tabla.getObJava().getCuarpeta().add(new Nodo("ETIQUETA", parser.arrayFinales.get(parser.arrayFinales.size()-1), null, null, parser.jerarquia)); 
                                                                            parser.arrayFinales.remove(parser.arrayFinales.size()-1); 
                                                                            parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); parser.jerarquia--; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    CASOS_SWITCH ::= noCase VAL_SWITCH:h dosPuntos ENTER                {:  parser.jerarquia++; 
                                                                            parser.manejoJV.agregarCaseSwitch(parser.tabla.getObJava(), parser.jerarquia, parser.idSwitch, h, "==");  :} 
                     CUERPO_METODO:a RETORNO_SWITCH:b                   {:  parser.manejoJV.agregarFinCase(parser.tabla.getObJava(), parser.arrayFinales, parser.jerarquia);  
                                                                            parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                            parser.jerarquia--; :} 
                     CASOS_SWITCH:c                                     {:  RESULT=parser.op.retornarBoolCase(a, b, c); :}
    |                def dosPuntos ENTER                                {:  parser.jerarquia++; :} 
                     CUERPO_METODO RETORNO_SWITCH:a                     {:  parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                            parser.jerarquia--;  
                                                                            RESULT=a; :}                  
    |                                                                   {:  RESULT = false; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    RETORNO_SWITCH ::= quiebre puntoComa ENTER {: RESULT=false; :}
    |                  RETORNO:a {: RESULT=a; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    VAL_SWITCH ::= id:a                                 {: parser.verif.verifVarSwitch(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                           RESULT = parser.manejoJV.devolverVarSwitch(parser.tabla, a.toString(), parser.metodo, parser.clase);  :}
    |              comillaSimple:a id:b comillaSimple:c {: RESULT=a.toString()+b.toString()+c.toString();  :}
    |              numero:a                             {: RESULT=a.toString(); :}
;   

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    EXT2 ::= EXT2:a and EXT2:b                                  {: RESULT = parser.manejoJV.manejoAnd(a, b); :}
    |        EXT2:a or                                          {: parser.aux3 = parser.aux2; :} 
             EXT2:b                                             {: parser.manejoJV.manejoOr(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta,  a, b, parser.jerarquia);  :}
    |        BOOLEAN3:a                                         {: RESULT=a;  :}
    |        admiracion parentesis_a BOOLEAN3:a parentesis_b    {: RESULT = parser.manejoJV.cambiarGotos(a); :}
    |        admiracion BOOLEAN3:a                              {: RESULT = parser.manejoJV.cambiarGotos(a); :} 
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    BOOLEAN3 ::= OP_COND:a OP2:c OP_COND:b           {: RESULT=parser.manejoJV.agregarBooleans(parser.tabla.getObJava(), parser.pilaFalsas, a, b, c, parser.jerarquia);  :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    OP_COND ::= parentesis_a OP_COND:a parentesis_b         {: RESULT=a; :}
    |           OP_COND:a mas OP_COND:b                     {: RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "suma"); :}
    |           OP_COND:a menos OP_COND:b                   {: RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "resta"); :}
    |           OP_COND:a por OP_COND:b                     {: RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "mult"); :}
    |           OP_COND:a div OP_COND:b                     {: RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "div"); :}
    |           OP_COND:a porcentaje OP_COND:b              {: RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "modulo"); :} 
    |           VAL_COND:a                                  {: RESULT = parser.manejoJV.devEtiquetaIndividual(parser.tabla, a, parser.metodo, parser.clase); :}
;  

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    VAL_COND ::= id:a                                               {:  String tip = parser.op.buscarVariable(parser.tabla.getObJava(), a.toString(), parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoBoolean(tip, a.toString()); :}
    |            numero:a                                           {:  RESULT = new NodoBoolean("Integer", a.toString()); :}
    |            numero:a punto:b numero:c                          {:  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); :} 
    |            METODO_COND:a                                      {:  RESULT = a; :}
    |            menos METODO_COND:a                                {:  String et = "-"+a.getId();
                                                                        RESULT = new NodoBoolean(a.getTipo(), et); :}
    |            comillaSimple:a id:b comillaSimple:c               {:  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); :}
    |            comillaSimple:a numero:b comillaSimple:c           {:  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString());  :}
    |            menos:d comillaSimple:a id:b comillaSimple:c       {:  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); :}
    |            menos:d comillaSimple:a numero:b comillaSimple:c   {:  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString());  :}
    |            menos:a id:b                                       {:  String tip=parser.op.buscarVariable(parser.tabla.getObJava(), a.toString(), parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright);  RESULT = new NodoBoolean(tip, a.toString()+b.toString()); :}
    |            menos:a numero:b                                   {:  RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); :}
    |            menos:a numero:b punto:c numero:d                  {:  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString());  :} 
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    OP2 ::= mayor                                                   {: RESULT=">"; :}
    |       mayor igual                                             {: RESULT=">="; :}
    |       menor                                                   {: RESULT="<"; :} 
    |       menor igual                                             {: RESULT="<="; :}
    |       igual igual                                             {: RESULT="=="; :}             
    |       admiracion igual                                        {: RESULT="!="; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    LECTURA_DATOS ::= id:a igual TIPO_INPUT:b parentesis_a TEXTO:c parentesis_b puntoComa       {:  parser.manejoJV.mostrarMensaje(parser.tabla.getObJava(), c); 
                                                                                                    parser.manejoJV.crearScanf(parser.tabla, a.toString(), b, parser.metodo, parser.clase);  
                                                                                                    parser.verif.verifInput(parser.tabla.getObJava(), a.toString(), b, aleft+PanelPrincipal.totalLineas, aright); :} ENTER 
    |                 id:a igual TIPO_INPUT:b parentesis_a parentesis_b puntoComa               {:  parser.manejoJV.crearScanf(parser.tabla, a.toString(), b, parser.metodo, parser.clase);   
                                                                                                    parser.verif.verifInput(parser.tabla.getObJava(), a.toString(), b, aleft+PanelPrincipal.totalLineas, aright); :} ENTER 
    |                 TIPO_INPUT:a parentesis_a TEXTO:c parentesis_b puntoComa                  {:  parser.manejoJV.mostrarMensaje(parser.tabla.getObJava(), c);   
                                                                                                    parser.manejoJV.crearScanf(parser.tabla, "", a, parser.metodo, parser.clase); :} ENTER 
    |                 TIPO_INPUT:a parentesis_a parentesis_b puntoComa                          {:  parser.manejoJV.crearScanf(parser.tabla, "", a, parser.metodo, parser.clase); :} ENTER 
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    TIPO_INPUT ::= intInput:a               {: RESULT="Integer"; :}
    |              charInput:a              {: RESULT="Char"; :}
    |              floatInput:a             {: RESULT="Float"; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    MENSAJE ::= mensaje parentesis_a TEXTO:a parentesis_b puntoComa ENTER   {: parser.manejoJV.mostrarMensaje(parser.tabla.getObJava(), a); :}
    |           mensaje2 parentesis_a TEXTO:a parentesis_b puntoComa ENTER  {: parser.manejoJV.mostrarMensaje(parser.tabla.getObJava(), a);  :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    TEXTO ::= VAL_TEXTO:a TEXTO2:b                                  {: RESULT = parser.manejoJV.concatenarMensaje(parser.tabla.getObJava(), a, b); :}
    |         comilla:a TEXTO_PLANO:b comilla:c TEXTO2:d            {: RESULT = parser.manejoJV.concatenarMensaje(parser.tabla.getObJava(), a.toString()+b.toString()+c.toString(), d); :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    VAL_TEXTO ::= id:a                                              {:  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Float", aleft+PanelPrincipal.totalLineas, aright); 
                                                                        RESULT = parser.manejoJV.devolverVarSwitch(parser.tabla, a.toString(), parser.metodo, parser.clase); :}
    |           numero:a                                            {:  RESULT=a.toString();  :}
    |           numero:a punto:b numero:c                           {:  RESULT = a.toString()+b.toString()+c.toString(); :}
    |           menos:b id:a                                        {:  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Float", aleft+PanelPrincipal.totalLineas, aright); 
                                                                        String devolver = parser.manejoJV.devolverVarSwitch(parser.tabla, a.toString(), parser.metodo, parser.clase);
                                                                        RESULT = b.toString()+devolver; :}
    |           menos:a numero:b                                    {:  RESULT = a.toString()+b.toString(); :}
    |           menos:a numero:b punto:c numero:d                   {:  RESULT = a.toString()+b.toString()+c.toString()+d.toString(); :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    TEXTO2 ::= mas TEXTO:a {: RESULT = a; :}
    |   {: RESULT = ""; :}
;

/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    COMENTARIO_A ::= comentario_a TEXTO_PLANO ENTER
;
    COMENTARIO_B ::= comentario_b TEXTO_PLANO2 comentario_c ENTER
;
    ENTER ::= ENTER enter
    |         enter
;
    ENTER2 ::= ENTER enter
    |          enter
    |          
;
    TEXTO_PLANO ::= TEXTO_PLANO:a coma:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a punto:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a tipoInt:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a tipoChar:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a tipoFloat:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a tipoVoid:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a condIf:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a condElse:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a condDo:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a condSwitch:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a noCase:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a condWhile:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a quiebre:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a def:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a retorno:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a condFor:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a mensaje:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a mensaje2:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a tipoPublic:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a clase:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a llave_a:b {: RESULT = a + b.toString(); :} 
    |               TEXTO_PLANO:a llave_b:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a agrupacion_a:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a agrupacion_b:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a parentesis_a:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a condThis:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a parentesis_b:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a puntoComa:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a dosPuntos:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a admiracion:b {: RESULT = a + b.toString(); :} 
    |               TEXTO_PLANO:a igual:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a mas:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a menos:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a por:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a div:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a porcentaje:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a menor:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a mayor:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a ampersand:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a pleca:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a comillaSimple:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a guionBajo:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a numero:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a id:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a condFalse:b {: RESULT= a + b.toString(); :}
    |               TEXTO_PLANO:a condTrue:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO:a resto:b {: RESULT = a + b.toString(); :}
    |               {: RESULT=""; :}
 
;
    TEXTO_PLANO2 ::= TEXTO_PLANO2:a coma:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a punto:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a tipoInt:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a tipoChar:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a tipoFloat:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a tipoVoid:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a condIf:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a condElse:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a condFor:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a condDo:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a condSwitch:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a noCase:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a condWhile:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a quiebre:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a def:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a retorno:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a mensaje:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a condThis:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a mensaje2:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a tipoPublic:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a clase:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a llave_a:b {: RESULT = a + b.toString(); :} 
    |               TEXTO_PLANO2:a llave_b:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a agrupacion_a:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a agrupacion_b:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a parentesis_a:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a parentesis_b:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a puntoComa:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a dosPuntos:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a admiracion:b {: RESULT = a + b.toString(); :} 
    |               TEXTO_PLANO2:a igual:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a mas:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a menos:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a por:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a div:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a porcentaje:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a menor:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a mayor:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a ampersand:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a pleca:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a comillaSimple:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a guionBajo:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a numero:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a id:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a enter {: RESULT = a + "\n"; :}
    |               TEXTO_PLANO2:a condFalse:b {: RESULT= a + b.toString(); :}
    |               TEXTO_PLANO2:a condTrue:b {: RESULT = a + b.toString(); :}
    |               TEXTO_PLANO2:a resto:b {: RESULT = a + b.toString(); :}
    |               {: RESULT=""; :}
;    




