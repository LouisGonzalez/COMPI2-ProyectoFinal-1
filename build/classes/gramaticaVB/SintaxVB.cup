package gramaticaVB;
import java_cup.runtime.*;
import objetos.*;
import java.util.*;
import Operaciones.*;
import manejoReturn.*;
import verificaciones.*;
import Tablas.*;
import manejoCuartetos.*;
import manejoExe.*;
import objetosApoyo.*;
import cuartetos.*;
import interfaz.*;

parser code {:


    public int jerarquia = 0;
    public String metodo = "";
    public String tipoMetodo = "";
    public String tipoActual = "";
    public OperacionesVB operacion = new OperacionesVB();
    public TablaSimbolos tabla;
    public VerifVB verif = new VerifVB();
    public ArrayList<String> variablesTipo = new ArrayList<>();

    //booleano para controlar el manejo de los returns
    public  static Boolean isReturn  = false;

    /*-----------------------------------Variables para los cuartetos-------------------------------------------*/

    public int contFinales = 0;
    public ArrayList<String> arrayFinales = new ArrayList<>();
    public ManejoVb manejoVB = new ManejoVb();
    public ManejoCondiciones manejo = new ManejoCondiciones();
    public ArrayList<Boolean> usoPila = new ArrayList<>();
    public static String aux2 = "", aux3 = "";
    public String idSwitch = "";
    public static boolean inst = false;
    public static String etInst = "";
    public String idFor = "";
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaFor = new ArrayList<>();

    /*------------------------------------------Codigo Ejecutable---------------------------------------------*/

    public ExeVb exe = new ExeVb();
    public String metodoExe = "";

    public SintaxVB(AnalizadorLexico3 lex, TablaSimbolos tabla){
        super(lex);
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
       // setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");      
      int fila = s.left + PanelPrincipal.totalLineas;
            PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" Token no reconocido: "+s.toString()+"\n";
    }

   /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
       int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" ";
    }*/

    public void traspasoVariables(ArrayList<Variable> listParam, ArrayList<Variable> original){
        for(int i = 0; i < listParam.size(); i++){
            original.add(listParam.get(i));
        }
    } 


:}

    terminal coma, punto, tipoPublic, fin, tipoDim, tipoInt, tipoFloat, tipoChar, tipoSub, tipoFuncion,
             condIf, condThen, condElse, condAs, condDo, condWhile, condLoop, condFor, condTo, condStep,
             condNext, condAnd, condOr, condNot, intInput, charInput, floatInput, mensaje, mensaje2, 
             comillaSimple, comilla, mas, menos, por, div, igual, menor, mayor, menorIgual, mayorIgual, menorIgual2,
             mayorIgual2, condLike, condIs, condIsNot, parentesis_a, parentesis_b, agrupacion_a, agrupacion_b, 
             dosPuntos, enter, numero, id, resto, potencia, contraDiagonal, condReturn, condTP, condSelect, condCase,
             condUntil, condElseIf, ampersand, modulo, comentario_a, comentario_b, comentario_c, byVal;

    non terminal AA, MODULO, B, VARIABLES, C, ASIGNACIONES, ASIGNACIONES2, BYVAL,
                 OPERACION2, METODOS, N, COMENTARIO_A, COMENTARIO_B, THEN, METODO_VOID, 
                 TIPO_CASE, DATOS_WHILE, TIPO_CONT, WHILE2, DATOS_FOR, ID,
                 MENSAJE, LECTURA_DATOS, RESTO_MENSAJE, ENTER, RETORNO2, ENTER2;

    non terminal String TEXTO, TIPO_VARIABLE, RETORNO,  TIPO_INPUT, TEXTO2;

    non terminal Boolean STEP, RETURN;

    non terminal String TIPO_VAL, OPERACION, VALOR_VAR, TIPO_VARIABLE2;

    non terminal ArrayList<Variable> PARAMETROS, PARAMETROS2;

    non terminal Boolean CONTENIDO, IF, ELSE, WHILE, DO_WHILE, FOR, SELECT, CASES;

    non terminal String OP, VAL_SELECT;

    non terminal NodoBoolean OP_COND, VAL_COND, METODO_COND;

    non terminal ArrayList<NodoBoolean> PARAM_METODOS, PARAM, PARAM2;

    non terminal String TEXTO3, TEXTO_CONT, VAL_TEXTO;

    non terminal ArrayList<Nodo> CONDICION, EXT;

    precedence left mas, menos;
    precedence left por, div, modulo;
    
    precedence left condOr;
    precedence left condAnd;

    start with AA;

    AA ::= ENTER2 B
;
    B ::= B METODOS 
    |     
    |     B error
;

/*------------------------------------------------------------------------------------------------------------------------------------*/

    VARIABLES ::= tipoDim id:a TIPO_VARIABLE:b      {:  if(b.equals("")){ 
                                                            parser.variablesTipo.add(a.toString()); 
                                                        }   
                                                        parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas);  
                                                        
                                                        parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);
                                                    :}  C
    
    |             tipoDim id:a TIPO_VARIABLE2:b     {:   parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas);  
                                                         parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);   
                                                    :} ENTER               
;


/*-----------------------------------------------------------------------------------------------------------------------------*/


    TIPO_VARIABLE ::= condAs tipoInt:a          {: RESULT="Integer"; :}
    |                 condAs tipoFloat:a        {: RESULT="Float"; :}
    |                 condAs tipoChar:a         {: RESULT="Char"; :}
    |                                           {: RESULT=""; :}
;
    TIPO_VARIABLE2 ::= condAs tipoInt:a         {: RESULT="Integer"; :}
    |                 condAs tipoFloat:a        {: RESULT="Float"; :}
    |                 condAs tipoChar:a         {: RESULT="Char"; :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    C ::= coma id:a TIPO_VARIABLE:b             {:  if(b.equals("")){ 
                                                        parser.variablesTipo.add(a.toString()); 
                                                    }  
                                                    parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                    parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);
                                                :} C
    | dosPuntos VARIABLES

    | coma id:a TIPO_VARIABLE2:b ENTER          {:  parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas);    
                                                    parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);
                                                    parser.exe.agregarTipo(parser.tabla, parser.variablesTipo, a.toString(), b);
                                                    parser.operacion.modificarTipos(parser.tabla.getObVb(), parser.variablesTipo, b);  
                                                :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    ASIGNACIONES ::= id:a igual                 {:  parser.tipoActual=parser.verif.verificarVarAsignar(a.toString(), parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, aleft+PanelPrincipal.totalLineas, aright); :}  
                    VALOR_VAR:b 
                                                {:  parser.manejoVB.agregarValorVar(parser.tabla, a.toString(), b, parser.metodoExe);  parser.operacion.agregarValorVar(a.toString(), parser.tabla.getObVb(), parser.jerarquia, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); :} 
                    ASIGNACIONES2
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    ASIGNACIONES2 ::= coma id:a igual           {:  parser.tipoActual=parser.verif.verificarVarAsignar(a.toString(), parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, aleft+PanelPrincipal.totalLineas, aright); :} 
                      VALOR_VAR:b 
                                                {:  parser.manejoVB.agregarValorVar(parser.tabla, a.toString(), b, parser.metodoExe);   
                                                    if(!parser.isReturn){ 
                                                        parser.operacion.agregarValorVar(a.toString(), parser.tabla.getObVb(), parser.jerarquia, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                    } else { 
                                                        System.out.println("Error, instrucciones luego de un return"); 
                                                        parser.isReturn =null; }   
                                                :} 
                      ASIGNACIONES2
    |                 ENTER  
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    VALOR_VAR ::= OPERACION:a                   {: RESULT=a; :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    METODOS ::= tipoPublic tipoFuncion id:a     {:  parser.metodo=a.toString();
                                                    parser.metodoExe = a.toString();
                                                    parser.operacion.crearMetodo(parser.tabla.getObVb(), a.toString(), true, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                    parser.exe.agregarMetodo(parser.tabla, a.toString(), null);   
                                                :} 
                parentesis_a PARAMETROS:c parentesis_b RETORNO:b 
                                                {:  parser.manejoVB.crearMetodo(parser.tabla.getObVb(), a.toString(), c, b);  
                                                    parser.exe.agregarTipoMetodo(parser.tabla, b, c);   
                                                    String param = parser.exe.agregarParametrosMetodo(parser.tabla, c);
                                                    if(!param.equals("")){
                                                        parser.metodoExe = a.toString() + "_"+param;
                                                        parser.exe.actualizarParametrosMetodo(parser.tabla, parser.metodoExe);
                                                    }
                                                    parser.tipoMetodo = b.toString(); 
                                                    parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).setRetorno(b.toString());  
                                                    parser.traspasoVariables(c, parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisVariables());  
                                                :}   
                ENTER CONTENIDO:d RETURN:e 
                                                {:  parser.manejoVB.finMetodo(parser.tabla.getObVb()); 
                                                    parser.operacion.retornoMetodo(d, e, a.toString(), eleft+PanelPrincipal.totalLineas, eright);  
                                                :} 
                fin tipoFuncion 
                                                {:  parser.jerarquia=0;
                                                    parser.metodoExe = "";    
                                                :} ENTER


    |           tipoPublic tipoSub id:a         {:  parser.metodo=a.toString(); 
                                                    parser.metodoExe = a.toString();
                                                    parser.exe.agregarMetodo(parser.tabla, a.toString(), "void");
                                                    parser.operacion.crearMetodo(parser.tabla.getObVb(), a.toString(), false, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                :} 
                parentesis_a PARAMETROS:c parentesis_b 
                                                {:  parser.exe.agregarTipoMetodo(parser.tabla, "void", c);
                                                    String param = parser.exe.agregarParametrosMetodo(parser.tabla, c);
                                                    if(!param.equals("")){
                                                        parser.metodoExe = a.toString() + "_" +param;   
                                                        parser.exe.actualizarParametrosMetodo(parser.tabla, parser.metodoExe);
                                                    }
                                                    parser.manejoVB.crearMetodo(parser.tabla.getObVb(), a.toString(), c, "void");  
                                                    parser.traspasoVariables(c, parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisVariables());  
                                                :} 
                ENTER CONTENIDO fin tipoSub 
                                                {:  parser.manejoVB.finMetodo(parser.tabla.getObVb());  
                                                    parser.jerarquia=0; :} ENTER
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    METODO_COND ::= id:a parentesis_a PARAM_METODOS:b parentesis_b  {:  boolean existe = parser.verif.verificarMetodo(parser.tabla, a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                                        String et = parser.manejoVB.devolverEtiquetaMetodo(parser.tabla, a.toString(), b, aleft+PanelPrincipal.totalLineas);
                                                                        String tip = "";
                                                                        if(existe){
                                                                            tip = parser.tabla.getObVb().getMisMetodos().get(VerifVB.iteradorVar).getRetorno();
                                                                        }
                                                                        RESULT = new NodoBoolean(tip, et);      :}
;
    
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    METODO_VOID ::= id:a parentesis_a PARAM_METODOS:b parentesis_b ENTER    {:  parser.verif.verificarMetodo(parser.tabla, a.toString(), aleft+PanelPrincipal.totalLineas, aright);  
                                                                                parser.manejoVB.invocarMetodo(parser.tabla, a.toString(), b, aleft+PanelPrincipal.totalLineas);   :}    
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    PARAM_METODOS ::= PARAM:a                                   {:  RESULT = a; :}
    |                                                           {:  RESULT = new ArrayList<>(); :}       
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    PARAM ::= PARAM2:a OP_COND:b                            {:  if(a != null){
                                                                    if(!b.getTipo().equals("")){
                                                                        a.add(b);
                                                                        RESULT = a;
                                                                    } else {
                                                                        RESULT = null;
                                                                    }
                                                                } :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    PARAM2 ::= PARAM2:a OP_COND:b coma                      {:  if(a != null){
                                                                    if(!b.getTipo().equals("")){
                                                                        a.add(b);
                                                                        RESULT = a;
                                                                    } else {
                                                                        RESULT = null;
                                                                    }
                                                                } :}
    |                                                       {:  RESULT = new ArrayList<>(); :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    OPERACION ::= parentesis_a OPERACION:a parentesis_b     {: RESULT = a; :}
    |             OPERACION:a mas OPERACION:b               {: RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "suma", parser.metodoExe); :}
    |             OPERACION:a menos OPERACION:b             {: RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "resta", parser.metodoExe); :}
    |             OPERACION:a por OPERACION:b               {: RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "mult", parser.metodoExe); :}
    |             OPERACION:a div OPERACION:b               {:  RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "div", parser.metodoExe); :}
    |             OPERACION:a modulo OPERACION:b            {: RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "modulo", parser.metodoExe);  :}
    |             TIPO_VAL:a                                {: RESULT = a; :}   
;   

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    TIPO_VAL ::= id:a                                       {:  parser.verif.verifVarOp(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), parser.tipoActual, parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright); 
                                                                RESULT = parser.manejoVB.etiquetaId(parser.tabla, a.toString(), parser.metodoExe);      :}
    |            METODO_COND:a                              {:  if(!a.getTipo().equals(parser.tipoActual)){
                                                                    if(!parser.verif.verificarPadre(parser.tabla.getObVb(), a.getTipo(), parser.tipoActual, parser.tabla.getObVb().getTablaTipos())){
                                                                        PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                    }
                                                                } 
                                                                RESULT = a.getId();    :}
    |            menos METODO_COND:a                              {:  if(!a.getTipo().equals(parser.tipoActual)){
                                                                    if(!parser.verif.verificarPadre(parser.tabla.getObVb(), a.getTipo(), parser.tipoActual, parser.tabla.getObVb().getTablaTipos())){
                                                                        PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                    }
                                                                } 
                                                                RESULT = "-"+a.getId();    :}
    |            numero:a                                   {:  String tipoNum = "Integer"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright, a.toString()); RESULT = a.toString(); :}
    |            numero:a punto:b numero:c                  {:  String tipoNum = "Float"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright, a.toString()+b.toString()+c.toString()); RESULT=a.toString()+b.toString()+c.toString(); :}
    |            comillaSimple:a id:b comillaSimple:c       {:  RESULT = a.toString()+b.toString()+c.toString(); :}
    |            comillaSimple:a numero:b comillaSimple:c   {:  RESULT = a.toString()+b.toString()+c.toString(); :}    
    |            menos:b id:a                               {:  parser.verif.verifVarOp(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), parser.tipoActual, parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright); 
                                                                String et = parser.manejoVB.etiquetaId(parser.tabla, a.toString(), parser.metodoExe);
                                                                RESULT = b.toString() + et;  :}
    |            menos:a numero:b                           {:  String tipoNum = "Integer"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright, a.toString()+b.toString()); RESULT = a.toString() + b.toString(); :}
    |            menos:a numero:b punto:c numero:d          {:  String tipoNum = "Float"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright, a.toString()+b.toString()+c.toString()+d.toString()); RESULT = a.toString() + b.toString() + c.toString() + d.toString(); :}
;                                                           

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    RETURN ::= condReturn {:    parser.tipoActual=parser.tipoMetodo; 
                                parser.exe.agregarReturn(parser.tabla, parser.metodoExe);
                                parser.tipoMetodo=""; :} 
               VALOR_VAR:a {:   parser.manejoVB.crearReturn(parser.tabla, a, parser.metodoExe);  
                                RESULT = true; :} ENTER
    | {: RESULT=false; :}                                               
;                                                                           

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    PARAMETROS ::= PARAMETROS2:a BYVAL id:b RETORNO:c   {:  if(parser.verif.verificarIdParam(a, b.toString())){ 
                                                                System.out.println("ya existe una variable "+b.toString()); 
                                                            } else { 
                                                                parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().add(new Parametro(parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().size()-1, c));  
                                                                a.add(new Variable(b.toString(), c.toString(), true, parser.jerarquia)); a.get(a.size()-1).getListAsignaciones().add(parser.jerarquia); 
                                                                parser.exe.agregarParametro(parser.tabla, b.toString(), parser.metodoExe, c);
                                                            } RESULT=a;  :}
    |                                                   {: RESULT=new ArrayList<>(); :}                                   

;                                                                               

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    PARAMETROS2 ::= PARAMETROS2:a BYVAL id:b RETORNO:c coma {:  if(parser.verif.verificarIdParam(a, b.toString())){ 
                                                                    System.out.println("ya existe una variable "+b.toString()); 
                                                                } else { 
                                                                    parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().add(new Parametro(parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().size()-1, c)); 
                                                                    a.add(new Variable(b.toString(), c.toString(), true, parser.jerarquia)); a.get(a.size()-1).getListAsignaciones().add(parser.jerarquia); 
                                                                    parser.exe.agregarParametro(parser.tabla, b.toString(), parser.metodoExe, c);
                                                                } RESULT=a; :}
    |                                                       {: RESULT=new ArrayList<>(); :}                                                   
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    BYVAL ::= byVal
    |   
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    RETORNO ::= condAs tipoInt:a            {: RESULT="Integer"; :}
    |           condAs tipoChar:a           {: RESULT="Char"; :}
    |           condAs tipoFloat:a          {: RESULT="Float"; :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    CONTENIDO ::= CONTENIDO:a VARIABLES         {: if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; }  }  :}
    |             CONTENIDO:a ASIGNACIONES      {: if(parser.isReturn!=null && a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { if(parser.isReturn){ parser.isReturn=false; RESULT=true; } else { RESULT=false; } }  } :}
    |             CONTENIDO:a IF:b              {: if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { if(b!=null){ if(b){ RESULT=true; } else { RESULT=false; } } } } :}
    |             CONTENIDO:a SELECT:b          {: if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { if(b!=null){ if(b){ RESULT=true; } else { RESULT=false; } } } } :}  
    |             CONTENIDO:a DO_WHILE:b        {: if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; }  }  :}
    |             CONTENIDO:a FOR:b             {: if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=b; } } :}
    |             CONTENIDO:a WHILE:b           {: if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } :}
    |             CONTENIDO:a MENSAJE           {: if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } :}
    |             CONTENIDO:a LECTURA_DATOS     {: if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } :} 
    |             CONTENIDO:a COMENTARIO_A      {: if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } :}
    |             CONTENIDO:a COMENTARIO_B      {: if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } :}
    |                                           {: RESULT=false; :}
    |             CONTENIDO:a error             {: RESULT = a; :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    IF ::= condIf {: parser.usoPila.add(false); parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); :} EXT:h {: parser.manejoVB.primerChequeoIf(parser.tabla.getObVb(), h); :} THEN ENTER CONTENIDO:a {:  parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);  parser.manejoVB.segundoChequeoIf(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);          parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1);   parser.jerarquia--;  :} ELSE:b fin condIf ENTER {: RESULT=parser.operacion.retornoIf(a, b, hleft+PanelPrincipal.totalLineas, hright);  :}
;        

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    THEN ::= condThen
    |
;                       

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    ELSE ::= condElse {: parser.jerarquia++; :} ENTER CONTENIDO:a {:  parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia); parser.manejo.agregarEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);       parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size() - 1); parser.jerarquia--;  RESULT=a; :}
    |        condElseIf {: parser.usoPila.add(false);  parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); :} EXT:h {: parser.manejoVB.primerChequeoIf(parser.tabla.getObVb(), h); :} THEN ENTER CONTENIDO:a {: parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);  parser.manejoVB.segundoChequeoIf(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1);  parser.jerarquia--;  :} ELSE:b {: RESULT=parser.operacion.retornoIf(a, b, hleft+PanelPrincipal.totalLineas, hright); :}
    |       {:  parser.manejo.agregarEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia); RESULT=false; :}
; 

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    EXT ::= EXT:a condAnd EXT:b                             {: RESULT = parser.manejoVB.manejoAnd(a, b); :}
    |       EXT:a condOr                                    {: parser.aux3 = parser.aux2; :}  EXT:b {: parser.manejoVB.manejoOr(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, a, b, parser.jerarquia); :}
    |       CONDICION:a                                     {: RESULT = a; :}
    |       condNot parentesis_a CONDICION:a parentesis_b   {: RESULT = parser.manejoVB.cambiarGotos(a); :}
    |       condNot CONDICION:a                             {: RESULT = parser.manejoVB.cambiarGotos(a); :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    CONDICION ::=  OP_COND:a OP:c OP_COND:b                  {: RESULT = parser.manejoVB.agregarBooleans(parser.tabla.getObVb(), parser.pilaFalsas, a, b, c, parser.jerarquia);  :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    OP_COND ::= parentesis_a OP_COND:a parentesis_b     {: RESULT=a; :}
    |           OP_COND:a mas OP_COND:b                 {: RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "suma"); :}
    |           OP_COND:a menos OP_COND:b               {: RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "resta");  :} 
    |           OP_COND:a por OP_COND:b                 {: RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "mult"); :} 
    |           OP_COND:a div OP_COND:b                 {: RESULT= parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "div"); :}
    |           OP_COND:a modulo OP_COND:b              {: RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "modulo"); :}
    |           VAL_COND:a                              {: RESULT= a; :}
;   

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    VAL_COND ::= id:a                                       {: String tip = parser.operacion.buscarVariable(parser.tabla.getObVb(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                               RESULT = parser.manejoVB.devolverEtiquetaId(parser.tabla, a.toString(), parser.metodoExe, tip, false); :}
    |            METODO_COND:a                              {: RESULT = a; :}
    |            menos METODO_COND:a                        {: String et = "-"+a.getId();
                                                               RESULT = new NodoBoolean(a.getTipo(), et);  :}
    |            numero:a                                   {: RESULT = new NodoBoolean("Integer", a.toString()); :}
    |            numero:a punto:b numero:c                  {: RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); :}
    |            comillaSimple:a id:b comillaSimple:c       {: RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); :}
    |            comillaSimple:a numero:b comillaSimple:c   {: RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); :}
    |            menos:b id:a                               {: String tip = parser.operacion.buscarVariable(parser.tabla.getObVb(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                               RESULT = parser.manejoVB.devolverEtiquetaId(parser.tabla, a.toString(), parser.metodoExe, tip, true); :}
    |            menos:a numero:b                           {: RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); :}
    |            menos:a numero:b punto:c numero:d          {: RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString()); :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    OP ::= mayor            {: RESULT = ">"; :}
    |      menor            {: RESULT = "<"; :}
    |      mayorIgual       {: RESULT = ">="; :}
    |      mayorIgual2      {: RESULT = ">="; :}
    |      menorIgual       {: RESULT = "<="; :}
    |      menorIgual2      {: RESULT = "<="; :}
    |      menor mayor      {: RESULT = "<>"; :}
    |      igual            {: RESULT = "=="; :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    SELECT ::= condSelect condCase {: parser.jerarquia++; :} VAL_SELECT:a {: parser.arrayFinales.add("etFinal_"+parser.contFinales); parser.contFinales++; parser.idSwitch = a;  parser.verif.verifVarSelect(parser.tabla.getObVb(), a, aleft+PanelPrincipal.totalLineas, aright); :} ENTER CASES:b fin condSelect ENTER {: parser.jerarquia--; parser.tabla.getObVb().getCuarpeta().add(new Nodo("ETIQUETA", parser.arrayFinales.get(parser.arrayFinales.size()-1), null, null, parser.jerarquia));  parser.arrayFinales.remove(parser.arrayFinales.size()-1);    RESULT=b; :}
;                                                                                                   

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    VAL_SELECT ::= id:a                                 {: RESULT = parser.manejoVB.devolverVarSwitch(parser.tabla, a.toString(), parser.metodoExe); :}                                        
    |              comillaSimple:a id:b comillaSimple:c {: RESULT = a.toString() + b.toString() + c.toString(); :}
    |              numero:a                             {: RESULT = a.toString(); :}                                            
;                                                                                           

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    CASES ::= condCase VAL_SELECT:h {: parser.jerarquia++; parser.manejoVB.agregarCaseSwitch(parser.tabla.getObVb(), parser.jerarquia, parser.idSwitch, h, "=="); :} ENTER CONTENIDO:a {:  parser.manejoVB.agregarFinCase(parser.tabla.getObVb(), parser.arrayFinales, parser.jerarquia);    parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1);  parser.jerarquia--; :} CASES:b {: RESULT=parser.operacion.retornoCaseSelect(a, b, hleft+PanelPrincipal.totalLineas, hright); :}
    |         condCase condElse {: parser.jerarquia++; :} ENTER CONTENIDO:a {: parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1); parser.jerarquia--;  RESULT=a; :}         
    |         {: RESULT=false; :}                                                           
;                                   

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    DO_WHILE ::= condDo {: parser.usoPila.add(false); parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); parser.manejoVB.agregarDoWhile(parser.tabla.getObVb(), parser.jerarquia); :} ENTER CONTENIDO:a condLoop WHILE2 EXT:h ENTER {: parser.manejoVB.agregarCondicionWhile(parser.tabla.getObVb(), parser.usoPila, h, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.jerarquia--;  if(a!=null){ RESULT=false; } else { RESULT=null; } :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    TIPO_CONT ::= condDo
    |             condWhile
    |             condFor
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    WHILE ::= condWhile  {: parser.usoPila.add(false); parser.jerarquia++;  parser.pilaFalsas.add(new ArrayList<>());  :} EXT:h {: parser.manejoVB.agregarWhile(parser.tabla.getObVb(), h, parser.jerarquia); :} ENTER CONTENIDO:a fin condWhile {: parser.manejoVB.retornoWhile(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);        parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size() - 1);  parser.jerarquia--; :} ENTER {: if(a!=null){ RESULT=false; } else { RESULT=null; }  :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    WHILE2 ::= condWhile 
    |          condUntil
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    FOR ::= condFor {: parser.usoPila.add(false); parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); parser.pilaFor.add(new ArrayList<>()); :} id:a {: parser.idFor = a.toString(); :} TIPO_VARIABLE:b igual OPERACION:c condTo OPERACION:d STEP:e {: parser.manejoVB.agregarFor(parser.tabla.getObVb(), parser.pilaFalsas, a.toString(), c, d, parser.jerarquia, b); parser.verif.verificarVarFor(a.toString(), b, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, parser.tabla.getObVb().getTablaTipos(), parser.jerarquia, e, aleft+PanelPrincipal.totalLineas, aright, parser.jerarquia); :} ENTER  CONTENIDO:h condNext ID  ENTER {: parser.manejoVB.retornoFor(parser.tabla.getObVb(), parser.usoPila, parser.pilaFor, a.toString(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size() - 1); parser.jerarquia--; RESULT=parser.operacion.retornoFor(h); :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    STEP ::= condStep numero:a                  {: parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString(), parser.idFor); RESULT=true; :}
    |        condStep menos:a numero:b          {: parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString()+b.toString(), parser.idFor); RESULT = true; :}
    |        condStep id:a                      {:  parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString(), parser.idFor);  RESULT = parser.verif.verifVarOp(parser.tabla.getObVb(),  parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), "Float", parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright);  :}
    |        condStep menos:a id:b              {: parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString()+b.toString(), parser.idFor); RESULT = parser.verif.verifVarOp(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, b.toString(), "Float", parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright);  :}
    |                                           {: parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, "1", parser.idFor); RESULT = true; :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    ID ::= OPERACION
    |
;
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    MENSAJE ::=  mensaje parentesis_a TEXTO3:a parentesis_b ENTER
    |           mensaje2 parentesis_a TEXTO3:a parentesis_b ENTER
    |           mensaje parentesis_a parentesis_b ENTER
    |           mensaje2 parentesis_a parentesis_b ENTER
;   

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    TEXTO3 ::=  VAL_TEXTO:a                         {:  parser.manejoVB.mostrarMensaje(parser.tabla.getObVb(), a); :}
                TEXTO_CONT:b                
    |           comilla:a TEXTO:b comilla:c         {:  String et = a.toString()+b+c.toString();
                                                        parser.manejoVB.mostrarMensaje(parser.tabla.getObVb(), et);  :}
                TEXTO_CONT:d    
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    TEXTO_CONT ::= ampersand TEXTO3:a                       {: RESULT = a; :}
    |              mas TEXTO3:a                             {: RESULT = a; :}
    | {: RESULT = null; :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    VAL_TEXTO ::= id:a                                      {: parser.verif.verifVarMensaje(parser.tabla.getObVb(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);  RESULT = a.toString(); :}
    |            numero:a                                   {: RESULT = a.toString(); :}
    |            numero:a punto:b numero:c                  {: RESULT = a.toString()+b.toString()+c.toString(); :}
    |            menos:a id:b                               {: parser.verif.verifVarMensaje(parser.tabla.getObVb(), b.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = a.toString()+b.toString(); :}
    |            menos:a numero:b                           {: RESULT = a.toString()+b.toString(); :}
    |            menos:a numero:b punto:c numero:d          {: RESULT =  a.toString()+b.toString()+c.toString()+d.toString(); :}
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    ENTER ::= enter ENTER
    |          enter
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    ENTER2 ::= enter ENTER
    |          enter
    |
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    LECTURA_DATOS ::= id:a igual TIPO_INPUT:b parentesis_a TEXTO3:c parentesis_b    {:  parser.manejoVB.mostrarMensaje(parser.tabla.getObVb(), c);  
                                                                                        parser.manejoVB.crearScanf(parser.tabla, a.toString(), b, parser.metodoExe);     
                                                                                        if(parser.verif.verificarVarInput(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), b, parser.tabla.getObVb().getTablaTipos(), parser.jerarquia)){
                                                                                        } else {
                                                                                        }  
                                                                                    :} ENTER
    |                 id:a igual TIPO_INPUT:b parentesis_a parentesis_b             {:  parser.manejoVB.crearScanf(parser.tabla, a.toString(), b, parser.metodoExe);  
                                                                                        if(parser.verif.verificarVarInput(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), b, parser.tabla.getObVb().getTablaTipos(), parser.jerarquia)){  
                                                                                        } else {  
                                                                                        }  
                                                                                    :} ENTER
    |                 TIPO_INPUT:b parentesis_a TEXTO3:c parentesis_b               {:  parser.manejoVB.mostrarMensaje(parser.tabla.getObVb(), c);  
                                                                                        parser.manejoVB.crearScanf(parser.tabla, null, b, parser.metodoExe); 
                                                                                    :} ENTER
    |                 TIPO_INPUT:b parentesis_a parentesis_b                        {: parser.manejoVB.crearScanf(parser.tabla, null, b.toString(), parser.metodoExe); :} ENTER
;

/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

    TIPO_INPUT ::= intInput             {: RESULT="Integer"; :}
    |              charInput            {: RESULT="Char"; :}
    |              floatInput           {: RESULT="Float"; :}
;
    COMENTARIO_A ::= comentario_a TEXTO2 ENTER
;
    COMENTARIO_B ::= comentario_b TEXTO comentario_c ENTER
    |                comentario_b TEXTO comentario_c 
;
    TEXTO ::= TEXTO:a coma:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a punto:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoPublic:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a fin:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoDim:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condReturn:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoInt:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoFloat:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoChar:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoSub:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoFuncion:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condIf:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condThen:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condElse:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condElseIf:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condAs:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condDo:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condWhile:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condUntil:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condLoop:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condFor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condTo:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condStep:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condNext:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condAnd:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condOr:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condNot:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condTP:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a intInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a charInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a floatInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condSelect:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condCase:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mensaje:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mensaje2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mas:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a menos:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a por:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a div:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a potencia:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a contraDiagonal:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a igual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a menor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mayor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a menorIgual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mayorIgual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a menorIgual2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mayorIgual2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condLike:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condIs:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condIsNot:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a parentesis_a:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a parentesis_b:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a agrupacion_a:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a agrupacion_b:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a dosPuntos:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a enter {: RESULT=a.toString()+"\n"; :}
    |         TEXTO:a numero:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a id:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a resto:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         {: RESULT=""; :}
;
    TEXTO2 ::= TEXTO2:a coma:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a punto:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoPublic:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a fin:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoDim:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condReturn:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoInt:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoFloat:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoChar:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoSub:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoFuncion:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condIf:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condThen:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condElse:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condElseIf:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condAs:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condDo:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condWhile:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condUntil:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condLoop:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condFor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condTo:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condStep:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condNext:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condAnd:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condOr:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condNot:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condTP:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a intInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a charInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a floatInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condSelect:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condCase:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mensaje:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mensaje2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mas:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a menos:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a por:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a div:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a potencia:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a contraDiagonal:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a igual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a menor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mayor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a menorIgual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mayorIgual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a menorIgual2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mayorIgual2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condLike:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condIs:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condIsNot:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a parentesis_a:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a parentesis_b:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a agrupacion_a:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a agrupacion_b:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a dosPuntos:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a numero:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a id:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a resto:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         {: RESULT=""; :}
;

    
