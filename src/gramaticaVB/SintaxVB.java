
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 24 23:45:55 CST 2020
//----------------------------------------------------

package gramaticaVB;

import java_cup.runtime.*;
import objetos.*;
import java.util.*;
import Operaciones.*;
import manejoReturn.*;
import verificaciones.*;
import Tablas.*;
import manejoCuartetos.*;
import manejoExe.*;
import objetosApoyo.*;
import cuartetos.*;
import interfaz.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 24 23:45:55 CST 2020
  */
public class SintaxVB extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxVB() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxVB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxVB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\004\004\000\002\072\002" +
    "\000\002\005\007\000\002\073\002\000\002\005\007\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\002\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\074\002\000\002\006\007\000\002\006\004" +
    "\000\002\006\006\000\002\075\002\000\002\076\002\000" +
    "\002\007\010\000\002\077\002\000\002\100\002\000\002" +
    "\010\011\000\002\010\003\000\002\045\003\000\002\101" +
    "\002\000\002\102\002\000\002\103\002\000\002\104\002" +
    "\000\002\013\023\000\002\105\002\000\002\106\002\000" +
    "\002\107\002\000\002\013\020\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\004\000\002\043\004\000\002" +
    "\043\006\000\002\110\002\000\002\111\002\000\002\042" +
    "\007\000\002\042\002\000\002\047\006\000\002\047\002" +
    "\000\002\050\007\000\002\050\002\000\002\011\003\000" +
    "\002\011\002\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\004\000\002\051\002\000\002" +
    "\051\004\000\002\112\002\000\002\113\002\000\002\114" +
    "\002\000\002\052\016\000\002\017\003\000\002\017\002" +
    "\000\002\115\002\000\002\053\006\000\002\116\002\000" +
    "\002\117\002\000\002\120\002\000\002\053\013\000\002" +
    "\053\002\000\002\071\005\000\002\121\002\000\002\071" +
    "\006\000\002\071\003\000\002\071\006\000\002\071\004" +
    "\000\002\070\005\000\002\063\005\000\002\063\005\000" +
    "\002\063\005\000\002\063\005\000\002\063\005\000\002" +
    "\063\005\000\002\063\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\005\000\002\064\005\000\002\064\005" +
    "\000\002\064\004\000\002\064\004\000\002\064\006\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\004\000\002\061\003\000\002\122\002\000\002\123\002" +
    "\000\002\057\014\000\002\062\003\000\002\062\005\000" +
    "\002\062\003\000\002\124\002\000\002\125\002\000\002" +
    "\060\011\000\002\126\002\000\002\060\007\000\002\060" +
    "\002\000\002\127\002\000\002\055\012\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\130\002\000" +
    "\002\131\002\000\002\132\002\000\002\054\014\000\002" +
    "\023\003\000\002\023\003\000\002\133\002\000\002\134" +
    "\002\000\002\135\002\000\002\056\022\000\002\041\004" +
    "\000\002\041\005\000\002\041\004\000\002\041\005\000" +
    "\002\041\002\000\002\025\003\000\002\025\002\000\002" +
    "\136\002\000\002\026\010\000\002\137\002\000\002\026" +
    "\010\000\002\026\006\000\002\026\006\000\002\065\004" +
    "\000\002\065\006\000\002\066\004\000\002\066\004\000" +
    "\002\066\002\000\002\067\003\000\002\067\003\000\002" +
    "\067\005\000\002\067\004\000\002\067\004\000\002\067" +
    "\006\000\002\031\004\000\002\031\003\000\002\033\004" +
    "\000\002\033\003\000\002\033\002\000\002\140\002\000" +
    "\002\027\012\000\002\141\002\000\002\027\011\000\002" +
    "\142\002\000\002\027\010\000\002\143\002\000\002\027" +
    "\007\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\015\005\000\002\016\006\000\002\016\005\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\002\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\004\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\004\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\004\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\004\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\004\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\004\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\004\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\004\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d0\000\012\002\uff51\003\uff51\006\uff51\066\006\001" +
    "\002\000\010\002\ufffe\003\ufffe\006\ufffe\001\002\000\004" +
    "\002\012\001\002\000\012\002\uff52\003\uff52\006\uff52\066" +
    "\010\001\002\000\010\002\uff53\003\uff53\006\uff53\001\002" +
    "\000\064\002\uff54\003\uff54\006\uff54\007\uff54\010\uff54\016" +
    "\uff54\020\uff54\022\uff54\023\uff54\024\uff54\025\uff54\030\uff54" +
    "\034\uff54\035\uff54\036\uff54\037\uff54\040\uff54\066\010\070" +
    "\uff54\074\uff54\076\uff54\077\uff54\101\uff54\104\uff54\105\uff54" +
    "\001\002\000\062\002\uff55\003\uff55\006\uff55\007\uff55\010" +
    "\uff55\016\uff55\020\uff55\022\uff55\023\uff55\024\uff55\025\uff55" +
    "\030\uff55\034\uff55\035\uff55\036\uff55\037\uff55\040\uff55\070" +
    "\uff55\074\uff55\076\uff55\077\uff55\101\uff55\104\uff55\105\uff55" +
    "\001\002\000\004\002\001\001\002\000\010\002\000\003" +
    "\014\006\015\001\002\000\010\002\ufffd\003\ufffd\006\ufffd" +
    "\001\002\000\006\014\017\015\020\001\002\000\010\002" +
    "\uffff\003\uffff\006\uffff\001\002\000\004\070\u01c7\001\002" +
    "\000\004\070\021\001\002\000\004\061\uffe5\001\002\000" +
    "\004\061\023\001\002\000\010\062\uffc8\070\uffc6\107\uffc6" +
    "\001\002\000\006\070\uffc4\107\u01c3\001\002\000\004\062" +
    "\026\001\002\000\004\021\030\001\002\000\004\066\uffe4" +
    "\001\002\000\010\011\031\012\032\013\033\001\002\000" +
    "\010\004\uffc3\062\uffc3\066\uffc3\001\002\000\010\004\uffc1" +
    "\062\uffc1\066\uffc1\001\002\000\010\004\uffc2\062\uffc2\066" +
    "\uffc2\001\002\000\004\066\010\001\002\000\044\003\uffb5" +
    "\007\uffb5\010\uffb5\016\uffb5\022\uffb5\023\uffb5\025\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\070\uffb5\074\uffb5" +
    "\076\uffb5\104\uffb5\105\uffb5\001\002\000\044\003\066\007" +
    "\uffca\010\037\016\072\022\042\023\040\025\063\034\050" +
    "\035\041\036\051\037\053\040\047\070\065\074\062\076" +
    "\055\104\056\105\054\001\002\000\004\070\u01ae\001\002" +
    "\000\016\033\uff77\041\uff77\044\uff77\061\uff77\067\uff77\070" +
    "\uff77\001\002\000\004\061\uff47\001\002\000\004\066\uff7c" +
    "\001\002\000\056\003\uffb8\007\uffb8\010\uffb8\016\uffb8\020" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\030\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\070\uffb8\074\uffb8\076" +
    "\uffb8\077\uffb8\101\uffb8\104\uffb8\105\uffb8\001\002\000\056" +
    "\003\uffbd\007\uffbd\010\uffbd\016\uffbd\020\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\030\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\070\uffbd\074\uffbd\076\uffbd\077\uffbd\101" +
    "\uffbd\104\uffbd\105\uffbd\001\002\000\056\003\uffba\007\uffba" +
    "\010\uffba\016\uffba\020\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\030\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\070\uffba\074\uffba\076\uffba\077\uffba\101\uffba\104\uffba\105" +
    "\uffba\001\002\000\004\007\uffe3\001\002\000\004\061\u0190" +
    "\001\002\000\004\061\uff48\001\002\000\004\061\uff46\001" +
    "\002\000\056\003\uffbe\007\uffbe\010\uffbe\016\uffbe\020\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\030\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\070\uffbe\074\uffbe\076\uffbe" +
    "\077\uffbe\101\uffbe\104\uffbe\105\uffbe\001\002\000\004\061" +
    "\u0189\001\002\000\174\004\uff06\005\uff06\006\uff06\007\uff06" +
    "\010\uff06\011\uff06\012\uff06\013\uff06\014\uff06\015\uff06\016" +
    "\uff06\017\uff06\020\uff06\021\uff06\022\uff06\023\uff06\024\uff06" +
    "\025\uff06\026\uff06\027\uff06\030\uff06\031\uff06\032\uff06\033" +
    "\uff06\034\uff06\035\uff06\036\uff06\037\uff06\040\uff06\043\uff06" +
    "\044\uff06\045\uff06\046\uff06\047\uff06\050\uff06\051\uff06\052" +
    "\uff06\053\uff06\054\uff06\055\uff06\056\uff06\057\uff06\060\uff06" +
    "\061\uff06\062\uff06\063\uff06\064\uff06\065\uff06\066\uff06\067" +
    "\uff06\070\uff06\071\uff06\072\uff06\073\uff06\074\uff06\075\uff06" +
    "\076\uff06\077\uff06\100\uff06\101\uff06\106\uff06\001\002\000" +
    "\004\077\u016d\001\002\000\172\004\ufeca\005\ufeca\006\ufeca" +
    "\007\ufeca\010\ufeca\011\ufeca\012\ufeca\013\ufeca\014\ufeca\015" +
    "\ufeca\016\ufeca\017\ufeca\020\ufeca\021\ufeca\022\ufeca\023\ufeca" +
    "\024\ufeca\025\ufeca\026\ufeca\027\ufeca\030\ufeca\031\ufeca\032" +
    "\ufeca\033\ufeca\034\ufeca\035\ufeca\036\ufeca\037\ufeca\040\ufeca" +
    "\043\ufeca\044\ufeca\045\ufeca\046\ufeca\047\ufeca\050\ufeca\051" +
    "\ufeca\052\ufeca\053\ufeca\054\ufeca\055\ufeca\056\ufeca\057\ufeca" +
    "\060\ufeca\061\ufeca\062\ufeca\063\ufeca\064\ufeca\065\ufeca\066" +
    "\ufeca\067\ufeca\070\ufeca\071\ufeca\072\ufeca\073\ufeca\074\ufeca" +
    "\075\ufeca\076\ufeca\077\ufeca\100\ufeca\101\ufeca\001\002\000" +
    "\056\003\uffbf\007\uffbf\010\uffbf\016\uffbf\020\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\030\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\070\uffbf\074\uffbf\076\uffbf\077\uffbf" +
    "\101\uffbf\104\uffbf\105\uffbf\001\002\000\004\061\u0128\001" +
    "\002\000\056\003\uffc0\007\uffc0\010\uffc0\016\uffc0\020\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\030\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\070\uffc0\074\uffc0\076\uffc0" +
    "\077\uffc0\101\uffc0\104\uffc0\105\uffc0\001\002\000\014\041" +
    "\uffcd\044\uffcd\061\uffcd\067\uffcd\070\uffcd\001\002\000\004" +
    "\070\uff71\001\002\000\056\003\uffbc\007\uffbc\010\uffbc\016" +
    "\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\030\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\070\uffbc\074" +
    "\uffbc\076\uffbc\077\uffbc\101\uffbc\104\uffbc\105\uffbc\001\002" +
    "\000\004\047\210\001\002\000\056\003\uffb4\007\uffb4\010" +
    "\uffb4\016\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\030\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\070" +
    "\uffb4\074\uffb4\076\uffb4\077\uffb4\101\uffb4\104\uffb4\105\uffb4" +
    "\001\002\000\056\003\uffb6\007\uffb6\010\uffb6\016\uffb6\020" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\030\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\070\uffb6\074\uffb6\076" +
    "\uffb6\077\uffb6\101\uffb6\104\uffb6\105\uffb6\001\002\000\056" +
    "\003\uffb7\007\uffb7\010\uffb7\016\uffb7\020\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\030\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\070\uffb7\074\uffb7\076\uffb7\077\uffb7\101" +
    "\uffb7\104\uffb7\105\uffb7\001\002\000\056\003\uffbb\007\uffbb" +
    "\010\uffbb\016\uffbb\020\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\030\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\070\uffbb\074\uffbb\076\uffbb\077\uffbb\101\uffbb\104\uffbb\105" +
    "\uffbb\001\002\000\016\033\uffb3\041\uffb3\044\uffb3\061\uffb3" +
    "\067\uffb3\070\uffb3\001\002\000\056\003\uffb9\007\uffb9\010" +
    "\uffb9\016\uffb9\020\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\030\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\070" +
    "\uffb9\074\uffb9\076\uffb9\077\uffb9\101\uffb9\104\uffb9\105\uffb9" +
    "\001\002\000\016\033\077\041\105\044\100\061\103\067" +
    "\101\070\075\001\002\000\044\017\uff98\031\uff98\032\uff98" +
    "\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051" +
    "\uff98\052\uff98\053\uff98\054\uff98\055\uff98\062\uff98\066\uff98" +
    "\103\uff98\001\002\000\044\017\uff99\031\uff99\032\uff99\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\055\uff99\062\uff99\066\uff99\103" +
    "\uff99\001\002\000\014\041\105\044\100\061\203\067\101" +
    "\070\075\001\002\000\006\067\177\070\200\001\002\000" +
    "\046\005\175\017\uff97\031\uff97\032\uff97\043\uff97\044\uff97" +
    "\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053" +
    "\uff97\054\uff97\055\uff97\062\uff97\066\uff97\103\uff97\001\002" +
    "\000\032\043\152\044\154\045\151\046\155\047\172\050" +
    "\165\051\171\052\166\053\164\054\167\055\170\103\153" +
    "\001\002\000\014\041\105\044\100\061\103\067\101\070" +
    "\075\001\002\000\012\017\uffb2\031\115\032\113\066\uffb2" +
    "\001\002\000\006\067\107\070\110\001\002\000\012\017" +
    "\uffa3\031\uffa3\032\uffa3\066\uffa3\001\002\000\004\041\112" +
    "\001\002\000\004\041\111\001\002\000\044\017\uff95\031" +
    "\uff95\032\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\062" +
    "\uff95\066\uff95\103\uff95\001\002\000\044\017\uff94\031\uff94" +
    "\032\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050" +
    "\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\062\uff94" +
    "\066\uff94\103\uff94\001\002\000\016\033\uffa5\041\uffa5\044" +
    "\uffa5\061\uffa5\067\uffa5\070\uffa5\001\002\000\006\017\120" +
    "\066\uffae\001\002\000\016\033\077\041\105\044\100\061" +
    "\103\067\101\070\075\001\002\000\012\017\uffa6\031\uffa6" +
    "\032\uffa6\066\uffa6\001\002\000\004\066\010\001\002\000" +
    "\004\066\uffaf\001\002\000\046\003\uffb5\007\uffb5\010\uffb5" +
    "\016\uffb5\020\uffb5\022\uffb5\023\uffb5\025\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\070\uffb5\076\uffb5\101\uffb5" +
    "\104\uffb5\105\uffb5\001\002\000\046\003\066\007\uffb1\010" +
    "\037\016\072\020\uffb1\022\042\023\040\025\063\034\050" +
    "\035\041\036\051\037\053\040\047\070\065\076\055\101" +
    "\uffb1\104\056\105\054\001\002\000\010\007\uffa7\020\126" +
    "\101\124\001\002\000\016\033\uffab\041\uffab\044\uffab\061" +
    "\uffab\067\uffab\070\uffab\001\002\000\004\007\132\001\002" +
    "\000\004\066\uffad\001\002\000\004\066\010\001\002\000" +
    "\042\003\uffb5\007\uffb5\010\uffb5\016\uffb5\022\uffb5\023\uffb5" +
    "\025\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\070" +
    "\uffb5\076\uffb5\104\uffb5\105\uffb5\001\002\000\042\003\066" +
    "\007\uffac\010\037\016\072\022\042\023\040\025\063\034" +
    "\050\035\041\036\051\037\053\040\047\070\065\076\055" +
    "\104\056\105\054\001\002\000\004\016\133\001\002\000" +
    "\004\066\010\001\002\000\056\003\uffb0\007\uffb0\010\uffb0" +
    "\016\uffb0\020\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\030" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\070\uffb0" +
    "\074\uffb0\076\uffb0\077\uffb0\101\uffb0\104\uffb0\105\uffb0\001" +
    "\002\000\016\033\077\041\105\044\100\061\103\067\101" +
    "\070\075\001\002\000\012\017\uffaa\031\115\032\113\066" +
    "\uffaa\001\002\000\006\017\120\066\uffae\001\002\000\004" +
    "\066\010\001\002\000\046\003\uffb5\007\uffb5\010\uffb5\016" +
    "\uffb5\020\uffb5\022\uffb5\023\uffb5\025\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\070\uffb5\076\uffb5\101\uffb5\104" +
    "\uffb5\105\uffb5\001\002\000\046\003\066\007\uffa9\010\037" +
    "\016\072\020\uffa9\022\042\023\040\025\063\034\050\035" +
    "\041\036\051\037\053\040\047\070\065\076\055\101\uffa9" +
    "\104\056\105\054\001\002\000\010\007\uffa7\020\126\101" +
    "\124\001\002\000\004\007\uffa8\001\002\000\016\033\077" +
    "\041\105\044\100\061\103\067\101\070\075\001\002\000" +
    "\012\017\uffa4\031\115\032\uffa4\066\uffa4\001\002\000\016" +
    "\043\152\044\154\045\151\046\155\062\150\103\153\001" +
    "\002\000\044\017\uff9f\031\uff9f\032\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\062\uff9f\066\uff9f\103\uff9f\001\002" +
    "\000\014\041\105\044\100\061\103\067\101\070\075\001" +
    "\002\000\014\041\105\044\100\061\103\067\101\070\075" +
    "\001\002\000\014\041\105\044\100\061\103\067\101\070" +
    "\075\001\002\000\014\041\105\044\100\061\103\067\101" +
    "\070\075\001\002\000\014\041\105\044\100\061\103\067" +
    "\101\070\075\001\002\000\044\017\uff9b\031\uff9b\032\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\062\uff9b\066\uff9b" +
    "\103\uff9b\001\002\000\044\017\uff9d\031\uff9d\032\uff9d\043" +
    "\uff9d\044\uff9d\045\151\046\155\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\062\uff9d\066\uff9d\103" +
    "\153\001\002\000\044\017\uff9a\031\uff9a\032\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\062\uff9a\066\uff9a\103\uff9a" +
    "\001\002\000\044\017\uff9e\031\uff9e\032\uff9e\043\uff9e\044" +
    "\uff9e\045\151\046\155\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\062\uff9e\066\uff9e\103\153\001" +
    "\002\000\044\017\uff9c\031\uff9c\032\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\062\uff9c\066\uff9c\103\uff9c\001\002" +
    "\000\014\041\105\044\100\061\103\067\101\070\075\001" +
    "\002\000\014\041\uff8e\044\uff8e\061\uff8e\067\uff8e\070\uff8e" +
    "\001\002\000\016\041\uff8f\044\uff8f\051\173\061\uff8f\067" +
    "\uff8f\070\uff8f\001\002\000\014\041\uff8c\044\uff8c\061\uff8c" +
    "\067\uff8c\070\uff8c\001\002\000\014\041\uff8b\044\uff8b\061" +
    "\uff8b\067\uff8b\070\uff8b\001\002\000\014\041\uff8d\044\uff8d" +
    "\061\uff8d\067\uff8d\070\uff8d\001\002\000\014\041\uff90\044" +
    "\uff90\061\uff90\067\uff90\070\uff90\001\002\000\014\041\uff89" +
    "\044\uff89\061\uff89\067\uff89\070\uff89\001\002\000\014\041" +
    "\uff8a\044\uff8a\061\uff8a\067\uff8a\070\uff8a\001\002\000\026" +
    "\017\uffa0\031\uffa0\032\uffa0\043\152\044\154\045\151\046" +
    "\155\062\uffa0\066\uffa0\103\153\001\002\000\004\067\176" +
    "\001\002\000\044\017\uff96\031\uff96\032\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\062\uff96\066\uff96\103\uff96\001" +
    "\002\000\046\005\201\017\uff92\031\uff92\032\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\054\uff92\055\uff92\062\uff92\066\uff92\103\uff92" +
    "\001\002\000\044\017\uff93\031\uff93\032\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93" +
    "\053\uff93\054\uff93\055\uff93\062\uff93\066\uff93\103\uff93\001" +
    "\002\000\004\067\202\001\002\000\044\017\uff91\031\uff91" +
    "\032\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\062\uff91" +
    "\066\uff91\103\uff91\001\002\000\014\041\105\044\100\061" +
    "\103\067\101\070\075\001\002\000\012\017\uffa1\031\uffa1" +
    "\032\uffa1\066\uffa1\001\002\000\004\062\207\001\002\000" +
    "\034\043\152\044\154\045\151\046\155\047\172\050\165" +
    "\051\171\052\166\053\164\054\167\055\170\062\150\103" +
    "\153\001\002\000\012\017\uffa2\031\uffa2\032\uffa2\066\uffa2" +
    "\001\002\000\022\034\050\035\041\036\051\041\uffed\044" +
    "\uffed\061\uffed\067\uffed\070\uffed\001\002\000\014\041\344" +
    "\044\346\061\343\067\342\070\351\001\002\000\004\061" +
    "\213\001\002\000\014\042\221\044\220\062\214\067\215" +
    "\070\222\001\002\000\004\066\uff4e\001\002\000\012\005" +
    "\336\043\uff5a\062\uff5a\102\uff5a\001\002\000\004\062\333" +
    "\001\002\000\010\043\322\062\uff5c\102\321\001\002\000" +
    "\006\067\326\070\327\001\002\000\174\004\uff06\005\uff06" +
    "\006\uff06\007\uff06\010\uff06\011\uff06\012\uff06\013\uff06\014" +
    "\uff06\015\uff06\016\uff06\017\uff06\020\uff06\021\uff06\022\uff06" +
    "\023\uff06\024\uff06\025\uff06\026\uff06\027\uff06\030\uff06\031" +
    "\uff06\032\uff06\033\uff06\034\uff06\035\uff06\036\uff06\037\uff06" +
    "\040\uff06\042\uff06\043\uff06\044\uff06\045\uff06\046\uff06\047" +
    "\uff06\050\uff06\051\uff06\052\uff06\053\uff06\054\uff06\055\uff06" +
    "\056\uff06\057\uff06\060\uff06\061\uff06\062\uff06\063\uff06\064" +
    "\uff06\065\uff06\066\uff06\067\uff06\070\uff06\071\uff06\072\uff06" +
    "\073\uff06\074\uff06\075\uff06\076\uff06\077\uff06\100\uff06\101" +
    "\uff06\001\002\000\010\043\uff5b\062\uff5b\102\uff5b\001\002" +
    "\000\174\004\241\005\270\006\264\007\302\010\233\011" +
    "\306\012\273\013\250\014\266\015\253\016\252\017\301" +
    "\020\272\021\307\022\314\023\236\024\247\025\320\026" +
    "\277\027\312\030\246\031\225\032\244\033\224\034\237" +
    "\035\240\036\304\037\271\040\234\042\227\043\262\044" +
    "\256\045\267\046\310\047\242\050\257\051\265\052\245" +
    "\053\263\054\315\055\303\056\260\057\243\060\261\061" +
    "\300\062\276\063\317\064\316\065\235\066\311\067\255" +
    "\070\275\071\313\072\274\073\254\074\232\075\230\076" +
    "\226\077\231\100\305\101\251\001\002\000\176\004\uff28" +
    "\005\uff28\006\uff28\007\uff28\010\uff28\011\uff28\012\uff28\013" +
    "\uff28\014\uff28\015\uff28\016\uff28\017\uff28\020\uff28\021\uff28" +
    "\022\uff28\023\uff28\024\uff28\025\uff28\026\uff28\027\uff28\030" +
    "\uff28\031\uff28\032\uff28\033\uff28\034\uff28\035\uff28\036\uff28" +
    "\037\uff28\040\uff28\042\uff28\043\uff28\044\uff28\045\uff28\046" +
    "\uff28\047\uff28\050\uff28\051\uff28\052\uff28\053\uff28\054\uff28" +
    "\055\uff28\056\uff28\057\uff28\060\uff28\061\uff28\062\uff28\063" +
    "\uff28\064\uff28\065\uff28\066\uff28\067\uff28\070\uff28\071\uff28" +
    "\072\uff28\073\uff28\074\uff28\075\uff28\076\uff28\077\uff28\100" +
    "\uff28\101\uff28\106\uff28\001\002\000\176\004\uff2a\005\uff2a" +
    "\006\uff2a\007\uff2a\010\uff2a\011\uff2a\012\uff2a\013\uff2a\014" +
    "\uff2a\015\uff2a\016\uff2a\017\uff2a\020\uff2a\021\uff2a\022\uff2a" +
    "\023\uff2a\024\uff2a\025\uff2a\026\uff2a\027\uff2a\030\uff2a\031" +
    "\uff2a\032\uff2a\033\uff2a\034\uff2a\035\uff2a\036\uff2a\037\uff2a" +
    "\040\uff2a\042\uff2a\043\uff2a\044\uff2a\045\uff2a\046\uff2a\047" +
    "\uff2a\050\uff2a\051\uff2a\052\uff2a\053\uff2a\054\uff2a\055\uff2a" +
    "\056\uff2a\057\uff2a\060\uff2a\061\uff2a\062\uff2a\063\uff2a\064" +
    "\uff2a\065\uff2a\066\uff2a\067\uff2a\070\uff2a\071\uff2a\072\uff2a" +
    "\073\uff2a\074\uff2a\075\uff2a\076\uff2a\077\uff2a\100\uff2a\101" +
    "\uff2a\106\uff2a\001\002\000\176\004\uff23\005\uff23\006\uff23" +
    "\007\uff23\010\uff23\011\uff23\012\uff23\013\uff23\014\uff23\015" +
    "\uff23\016\uff23\017\uff23\020\uff23\021\uff23\022\uff23\023\uff23" +
    "\024\uff23\025\uff23\026\uff23\027\uff23\030\uff23\031\uff23\032" +
    "\uff23\033\uff23\034\uff23\035\uff23\036\uff23\037\uff23\040\uff23" +
    "\042\uff23\043\uff23\044\uff23\045\uff23\046\uff23\047\uff23\050" +
    "\uff23\051\uff23\052\uff23\053\uff23\054\uff23\055\uff23\056\uff23" +
    "\057\uff23\060\uff23\061\uff23\062\uff23\063\uff23\064\uff23\065" +
    "\uff23\066\uff23\067\uff23\070\uff23\071\uff23\072\uff23\073\uff23" +
    "\074\uff23\075\uff23\076\uff23\077\uff23\100\uff23\101\uff23\106" +
    "\uff23\001\002\000\010\043\322\062\uff5c\102\321\001\002" +
    "\000\176\004\uff27\005\uff27\006\uff27\007\uff27\010\uff27\011" +
    "\uff27\012\uff27\013\uff27\014\uff27\015\uff27\016\uff27\017\uff27" +
    "\020\uff27\021\uff27\022\uff27\023\uff27\024\uff27\025\uff27\026" +
    "\uff27\027\uff27\030\uff27\031\uff27\032\uff27\033\uff27\034\uff27" +
    "\035\uff27\036\uff27\037\uff27\040\uff27\042\uff27\043\uff27\044" +
    "\uff27\045\uff27\046\uff27\047\uff27\050\uff27\051\uff27\052\uff27" +
    "\053\uff27\054\uff27\055\uff27\056\uff27\057\uff27\060\uff27\061" +
    "\uff27\062\uff27\063\uff27\064\uff27\065\uff27\066\uff27\067\uff27" +
    "\070\uff27\071\uff27\072\uff27\073\uff27\074\uff27\075\uff27\076" +
    "\uff27\077\uff27\100\uff27\101\uff27\106\uff27\001\002\000\176" +
    "\004\uff22\005\uff22\006\uff22\007\uff22\010\uff22\011\uff22\012" +
    "\uff22\013\uff22\014\uff22\015\uff22\016\uff22\017\uff22\020\uff22" +
    "\021\uff22\022\uff22\023\uff22\024\uff22\025\uff22\026\uff22\027" +
    "\uff22\030\uff22\031\uff22\032\uff22\033\uff22\034\uff22\035\uff22" +
    "\036\uff22\037\uff22\040\uff22\042\uff22\043\uff22\044\uff22\045" +
    "\uff22\046\uff22\047\uff22\050\uff22\051\uff22\052\uff22\053\uff22" +
    "\054\uff22\055\uff22\056\uff22\057\uff22\060\uff22\061\uff22\062" +
    "\uff22\063\uff22\064\uff22\065\uff22\066\uff22\067\uff22\070\uff22" +
    "\071\uff22\072\uff22\073\uff22\074\uff22\075\uff22\076\uff22\077" +
    "\uff22\100\uff22\101\uff22\106\uff22\001\002\000\176\004\uff3d" +
    "\005\uff3d\006\uff3d\007\uff3d\010\uff3d\011\uff3d\012\uff3d\013" +
    "\uff3d\014\uff3d\015\uff3d\016\uff3d\017\uff3d\020\uff3d\021\uff3d" +
    "\022\uff3d\023\uff3d\024\uff3d\025\uff3d\026\uff3d\027\uff3d\030" +
    "\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d\036\uff3d" +
    "\037\uff3d\040\uff3d\042\uff3d\043\uff3d\044\uff3d\045\uff3d\046" +
    "\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d\053\uff3d\054\uff3d" +
    "\055\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d\062\uff3d\063" +
    "\uff3d\064\uff3d\065\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d" +
    "\072\uff3d\073\uff3d\074\uff3d\075\uff3d\076\uff3d\077\uff3d\100" +
    "\uff3d\101\uff3d\106\uff3d\001\002\000\176\004\uff3e\005\uff3e" +
    "\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e\013\uff3e\014" +
    "\uff3e\015\uff3e\016\uff3e\017\uff3e\020\uff3e\021\uff3e\022\uff3e" +
    "\023\uff3e\024\uff3e\025\uff3e\026\uff3e\027\uff3e\030\uff3e\031" +
    "\uff3e\032\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e" +
    "\040\uff3e\042\uff3e\043\uff3e\044\uff3e\045\uff3e\046\uff3e\047" +
    "\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e\055\uff3e" +
    "\056\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e\063\uff3e\064" +
    "\uff3e\065\uff3e\066\uff3e\067\uff3e\070\uff3e\071\uff3e\072\uff3e" +
    "\073\uff3e\074\uff3e\075\uff3e\076\uff3e\077\uff3e\100\uff3e\101" +
    "\uff3e\106\uff3e\001\002\000\176\004\uff20\005\uff20\006\uff20" +
    "\007\uff20\010\uff20\011\uff20\012\uff20\013\uff20\014\uff20\015" +
    "\uff20\016\uff20\017\uff20\020\uff20\021\uff20\022\uff20\023\uff20" +
    "\024\uff20\025\uff20\026\uff20\027\uff20\030\uff20\031\uff20\032" +
    "\uff20\033\uff20\034\uff20\035\uff20\036\uff20\037\uff20\040\uff20" +
    "\042\uff20\043\uff20\044\uff20\045\uff20\046\uff20\047\uff20\050" +
    "\uff20\051\uff20\052\uff20\053\uff20\054\uff20\055\uff20\056\uff20" +
    "\057\uff20\060\uff20\061\uff20\062\uff20\063\uff20\064\uff20\065" +
    "\uff20\066\uff20\067\uff20\070\uff20\071\uff20\072\uff20\073\uff20" +
    "\074\uff20\075\uff20\076\uff20\077\uff20\100\uff20\101\uff20\106" +
    "\uff20\001\002\000\176\004\uff0b\005\uff0b\006\uff0b\007\uff0b" +
    "\010\uff0b\011\uff0b\012\uff0b\013\uff0b\014\uff0b\015\uff0b\016" +
    "\uff0b\017\uff0b\020\uff0b\021\uff0b\022\uff0b\023\uff0b\024\uff0b" +
    "\025\uff0b\026\uff0b\027\uff0b\030\uff0b\031\uff0b\032\uff0b\033" +
    "\uff0b\034\uff0b\035\uff0b\036\uff0b\037\uff0b\040\uff0b\042\uff0b" +
    "\043\uff0b\044\uff0b\045\uff0b\046\uff0b\047\uff0b\050\uff0b\051" +
    "\uff0b\052\uff0b\053\uff0b\054\uff0b\055\uff0b\056\uff0b\057\uff0b" +
    "\060\uff0b\061\uff0b\062\uff0b\063\uff0b\064\uff0b\065\uff0b\066" +
    "\uff0b\067\uff0b\070\uff0b\071\uff0b\072\uff0b\073\uff0b\074\uff0b" +
    "\075\uff0b\076\uff0b\077\uff0b\100\uff0b\101\uff0b\106\uff0b\001" +
    "\002\000\176\004\uff31\005\uff31\006\uff31\007\uff31\010\uff31" +
    "\011\uff31\012\uff31\013\uff31\014\uff31\015\uff31\016\uff31\017" +
    "\uff31\020\uff31\021\uff31\022\uff31\023\uff31\024\uff31\025\uff31" +
    "\026\uff31\027\uff31\030\uff31\031\uff31\032\uff31\033\uff31\034" +
    "\uff31\035\uff31\036\uff31\037\uff31\040\uff31\042\uff31\043\uff31" +
    "\044\uff31\045\uff31\046\uff31\047\uff31\050\uff31\051\uff31\052" +
    "\uff31\053\uff31\054\uff31\055\uff31\056\uff31\057\uff31\060\uff31" +
    "\061\uff31\062\uff31\063\uff31\064\uff31\065\uff31\066\uff31\067" +
    "\uff31\070\uff31\071\uff31\072\uff31\073\uff31\074\uff31\075\uff31" +
    "\076\uff31\077\uff31\100\uff31\101\uff31\106\uff31\001\002\000" +
    "\176\004\uff26\005\uff26\006\uff26\007\uff26\010\uff26\011\uff26" +
    "\012\uff26\013\uff26\014\uff26\015\uff26\016\uff26\017\uff26\020" +
    "\uff26\021\uff26\022\uff26\023\uff26\024\uff26\025\uff26\026\uff26" +
    "\027\uff26\030\uff26\031\uff26\032\uff26\033\uff26\034\uff26\035" +
    "\uff26\036\uff26\037\uff26\040\uff26\042\uff26\043\uff26\044\uff26" +
    "\045\uff26\046\uff26\047\uff26\050\uff26\051\uff26\052\uff26\053" +
    "\uff26\054\uff26\055\uff26\056\uff26\057\uff26\060\uff26\061\uff26" +
    "\062\uff26\063\uff26\064\uff26\065\uff26\066\uff26\067\uff26\070" +
    "\uff26\071\uff26\072\uff26\073\uff26\074\uff26\075\uff26\076\uff26" +
    "\077\uff26\100\uff26\101\uff26\106\uff26\001\002\000\176\004" +
    "\uff25\005\uff25\006\uff25\007\uff25\010\uff25\011\uff25\012\uff25" +
    "\013\uff25\014\uff25\015\uff25\016\uff25\017\uff25\020\uff25\021" +
    "\uff25\022\uff25\023\uff25\024\uff25\025\uff25\026\uff25\027\uff25" +
    "\030\uff25\031\uff25\032\uff25\033\uff25\034\uff25\035\uff25\036" +
    "\uff25\037\uff25\040\uff25\042\uff25\043\uff25\044\uff25\045\uff25" +
    "\046\uff25\047\uff25\050\uff25\051\uff25\052\uff25\053\uff25\054" +
    "\uff25\055\uff25\056\uff25\057\uff25\060\uff25\061\uff25\062\uff25" +
    "\063\uff25\064\uff25\065\uff25\066\uff25\067\uff25\070\uff25\071" +
    "\uff25\072\uff25\073\uff25\074\uff25\075\uff25\076\uff25\077\uff25" +
    "\100\uff25\101\uff25\106\uff25\001\002\000\176\004\uff42\005" +
    "\uff42\006\uff42\007\uff42\010\uff42\011\uff42\012\uff42\013\uff42" +
    "\014\uff42\015\uff42\016\uff42\017\uff42\020\uff42\021\uff42\022" +
    "\uff42\023\uff42\024\uff42\025\uff42\026\uff42\027\uff42\030\uff42" +
    "\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42\036\uff42\037" +
    "\uff42\040\uff42\042\uff42\043\uff42\044\uff42\045\uff42\046\uff42" +
    "\047\uff42\050\uff42\051\uff42\052\uff42\053\uff42\054\uff42\055" +
    "\uff42\056\uff42\057\uff42\060\uff42\061\uff42\062\uff42\063\uff42" +
    "\064\uff42\065\uff42\066\uff42\067\uff42\070\uff42\071\uff42\072" +
    "\uff42\073\uff42\074\uff42\075\uff42\076\uff42\077\uff42\100\uff42" +
    "\101\uff42\106\uff42\001\002\000\176\004\uff19\005\uff19\006" +
    "\uff19\007\uff19\010\uff19\011\uff19\012\uff19\013\uff19\014\uff19" +
    "\015\uff19\016\uff19\017\uff19\020\uff19\021\uff19\022\uff19\023" +
    "\uff19\024\uff19\025\uff19\026\uff19\027\uff19\030\uff19\031\uff19" +
    "\032\uff19\033\uff19\034\uff19\035\uff19\036\uff19\037\uff19\040" +
    "\uff19\042\uff19\043\uff19\044\uff19\045\uff19\046\uff19\047\uff19" +
    "\050\uff19\051\uff19\052\uff19\053\uff19\054\uff19\055\uff19\056" +
    "\uff19\057\uff19\060\uff19\061\uff19\062\uff19\063\uff19\064\uff19" +
    "\065\uff19\066\uff19\067\uff19\070\uff19\071\uff19\072\uff19\073" +
    "\uff19\074\uff19\075\uff19\076\uff19\077\uff19\100\uff19\101\uff19" +
    "\106\uff19\001\002\000\176\004\uff11\005\uff11\006\uff11\007" +
    "\uff11\010\uff11\011\uff11\012\uff11\013\uff11\014\uff11\015\uff11" +
    "\016\uff11\017\uff11\020\uff11\021\uff11\022\uff11\023\uff11\024" +
    "\uff11\025\uff11\026\uff11\027\uff11\030\uff11\031\uff11\032\uff11" +
    "\033\uff11\034\uff11\035\uff11\036\uff11\037\uff11\040\uff11\042" +
    "\uff11\043\uff11\044\uff11\045\uff11\046\uff11\047\uff11\050\uff11" +
    "\051\uff11\052\uff11\053\uff11\054\uff11\055\uff11\056\uff11\057" +
    "\uff11\060\uff11\061\uff11\062\uff11\063\uff11\064\uff11\065\uff11" +
    "\066\uff11\067\uff11\070\uff11\071\uff11\072\uff11\073\uff11\074" +
    "\uff11\075\uff11\076\uff11\077\uff11\100\uff11\101\uff11\106\uff11" +
    "\001\002\000\176\004\uff29\005\uff29\006\uff29\007\uff29\010" +
    "\uff29\011\uff29\012\uff29\013\uff29\014\uff29\015\uff29\016\uff29" +
    "\017\uff29\020\uff29\021\uff29\022\uff29\023\uff29\024\uff29\025" +
    "\uff29\026\uff29\027\uff29\030\uff29\031\uff29\032\uff29\033\uff29" +
    "\034\uff29\035\uff29\036\uff29\037\uff29\040\uff29\042\uff29\043" +
    "\uff29\044\uff29\045\uff29\046\uff29\047\uff29\050\uff29\051\uff29" +
    "\052\uff29\053\uff29\054\uff29\055\uff29\056\uff29\057\uff29\060" +
    "\uff29\061\uff29\062\uff29\063\uff29\064\uff29\065\uff29\066\uff29" +
    "\067\uff29\070\uff29\071\uff29\072\uff29\073\uff29\074\uff29\075" +
    "\uff29\076\uff29\077\uff29\100\uff29\101\uff29\106\uff29\001\002" +
    "\000\176\004\uff16\005\uff16\006\uff16\007\uff16\010\uff16\011" +
    "\uff16\012\uff16\013\uff16\014\uff16\015\uff16\016\uff16\017\uff16" +
    "\020\uff16\021\uff16\022\uff16\023\uff16\024\uff16\025\uff16\026" +
    "\uff16\027\uff16\030\uff16\031\uff16\032\uff16\033\uff16\034\uff16" +
    "\035\uff16\036\uff16\037\uff16\040\uff16\042\uff16\043\uff16\044" +
    "\uff16\045\uff16\046\uff16\047\uff16\050\uff16\051\uff16\052\uff16" +
    "\053\uff16\054\uff16\055\uff16\056\uff16\057\uff16\060\uff16\061" +
    "\uff16\062\uff16\063\uff16\064\uff16\065\uff16\066\uff16\067\uff16" +
    "\070\uff16\071\uff16\072\uff16\073\uff16\074\uff16\075\uff16\076" +
    "\uff16\077\uff16\100\uff16\101\uff16\106\uff16\001\002\000\176" +
    "\004\uff2b\005\uff2b\006\uff2b\007\uff2b\010\uff2b\011\uff2b\012" +
    "\uff2b\013\uff2b\014\uff2b\015\uff2b\016\uff2b\017\uff2b\020\uff2b" +
    "\021\uff2b\022\uff2b\023\uff2b\024\uff2b\025\uff2b\026\uff2b\027" +
    "\uff2b\030\uff2b\031\uff2b\032\uff2b\033\uff2b\034\uff2b\035\uff2b" +
    "\036\uff2b\037\uff2b\040\uff2b\042\uff2b\043\uff2b\044\uff2b\045" +
    "\uff2b\046\uff2b\047\uff2b\050\uff2b\051\uff2b\052\uff2b\053\uff2b" +
    "\054\uff2b\055\uff2b\056\uff2b\057\uff2b\060\uff2b\061\uff2b\062" +
    "\uff2b\063\uff2b\064\uff2b\065\uff2b\066\uff2b\067\uff2b\070\uff2b" +
    "\071\uff2b\072\uff2b\073\uff2b\074\uff2b\075\uff2b\076\uff2b\077" +
    "\uff2b\100\uff2b\101\uff2b\106\uff2b\001\002\000\176\004\uff2f" +
    "\005\uff2f\006\uff2f\007\uff2f\010\uff2f\011\uff2f\012\uff2f\013" +
    "\uff2f\014\uff2f\015\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f" +
    "\022\uff2f\023\uff2f\024\uff2f\025\uff2f\026\uff2f\027\uff2f\030" +
    "\uff2f\031\uff2f\032\uff2f\033\uff2f\034\uff2f\035\uff2f\036\uff2f" +
    "\037\uff2f\040\uff2f\042\uff2f\043\uff2f\044\uff2f\045\uff2f\046" +
    "\uff2f\047\uff2f\050\uff2f\051\uff2f\052\uff2f\053\uff2f\054\uff2f" +
    "\055\uff2f\056\uff2f\057\uff2f\060\uff2f\061\uff2f\062\uff2f\063" +
    "\uff2f\064\uff2f\065\uff2f\066\uff2f\067\uff2f\070\uff2f\071\uff2f" +
    "\072\uff2f\073\uff2f\074\uff2f\075\uff2f\076\uff2f\077\uff2f\100" +
    "\uff2f\101\uff2f\106\uff2f\001\002\000\176\004\uff3a\005\uff3a" +
    "\006\uff3a\007\uff3a\010\uff3a\011\uff3a\012\uff3a\013\uff3a\014" +
    "\uff3a\015\uff3a\016\uff3a\017\uff3a\020\uff3a\021\uff3a\022\uff3a" +
    "\023\uff3a\024\uff3a\025\uff3a\026\uff3a\027\uff3a\030\uff3a\031" +
    "\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a" +
    "\040\uff3a\042\uff3a\043\uff3a\044\uff3a\045\uff3a\046\uff3a\047" +
    "\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\054\uff3a\055\uff3a" +
    "\056\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a\064" +
    "\uff3a\065\uff3a\066\uff3a\067\uff3a\070\uff3a\071\uff3a\072\uff3a" +
    "\073\uff3a\074\uff3a\075\uff3a\076\uff3a\077\uff3a\100\uff3a\101" +
    "\uff3a\106\uff3a\001\002\000\176\004\uff34\005\uff34\006\uff34" +
    "\007\uff34\010\uff34\011\uff34\012\uff34\013\uff34\014\uff34\015" +
    "\uff34\016\uff34\017\uff34\020\uff34\021\uff34\022\uff34\023\uff34" +
    "\024\uff34\025\uff34\026\uff34\027\uff34\030\uff34\031\uff34\032" +
    "\uff34\033\uff34\034\uff34\035\uff34\036\uff34\037\uff34\040\uff34" +
    "\042\uff34\043\uff34\044\uff34\045\uff34\046\uff34\047\uff34\050" +
    "\uff34\051\uff34\052\uff34\053\uff34\054\uff34\055\uff34\056\uff34" +
    "\057\uff34\060\uff34\061\uff34\062\uff34\063\uff34\064\uff34\065" +
    "\uff34\066\uff34\067\uff34\070\uff34\071\uff34\072\uff34\073\uff34" +
    "\074\uff34\075\uff34\076\uff34\077\uff34\100\uff34\101\uff34\106" +
    "\uff34\001\002\000\176\004\uff37\005\uff37\006\uff37\007\uff37" +
    "\010\uff37\011\uff37\012\uff37\013\uff37\014\uff37\015\uff37\016" +
    "\uff37\017\uff37\020\uff37\021\uff37\022\uff37\023\uff37\024\uff37" +
    "\025\uff37\026\uff37\027\uff37\030\uff37\031\uff37\032\uff37\033" +
    "\uff37\034\uff37\035\uff37\036\uff37\037\uff37\040\uff37\042\uff37" +
    "\043\uff37\044\uff37\045\uff37\046\uff37\047\uff37\050\uff37\051" +
    "\uff37\052\uff37\053\uff37\054\uff37\055\uff37\056\uff37\057\uff37" +
    "\060\uff37\061\uff37\062\uff37\063\uff37\064\uff37\065\uff37\066" +
    "\uff37\067\uff37\070\uff37\071\uff37\072\uff37\073\uff37\074\uff37" +
    "\075\uff37\076\uff37\077\uff37\100\uff37\101\uff37\106\uff37\001" +
    "\002\000\176\004\uff38\005\uff38\006\uff38\007\uff38\010\uff38" +
    "\011\uff38\012\uff38\013\uff38\014\uff38\015\uff38\016\uff38\017" +
    "\uff38\020\uff38\021\uff38\022\uff38\023\uff38\024\uff38\025\uff38" +
    "\026\uff38\027\uff38\030\uff38\031\uff38\032\uff38\033\uff38\034" +
    "\uff38\035\uff38\036\uff38\037\uff38\040\uff38\042\uff38\043\uff38" +
    "\044\uff38\045\uff38\046\uff38\047\uff38\050\uff38\051\uff38\052" +
    "\uff38\053\uff38\054\uff38\055\uff38\056\uff38\057\uff38\060\uff38" +
    "\061\uff38\062\uff38\063\uff38\064\uff38\065\uff38\066\uff38\067" +
    "\uff38\070\uff38\071\uff38\072\uff38\073\uff38\074\uff38\075\uff38" +
    "\076\uff38\077\uff38\100\uff38\101\uff38\106\uff38\001\002\000" +
    "\176\004\uff1a\005\uff1a\006\uff1a\007\uff1a\010\uff1a\011\uff1a" +
    "\012\uff1a\013\uff1a\014\uff1a\015\uff1a\016\uff1a\017\uff1a\020" +
    "\uff1a\021\uff1a\022\uff1a\023\uff1a\024\uff1a\025\uff1a\026\uff1a" +
    "\027\uff1a\030\uff1a\031\uff1a\032\uff1a\033\uff1a\034\uff1a\035" +
    "\uff1a\036\uff1a\037\uff1a\040\uff1a\042\uff1a\043\uff1a\044\uff1a" +
    "\045\uff1a\046\uff1a\047\uff1a\050\uff1a\051\uff1a\052\uff1a\053" +
    "\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\061\uff1a" +
    "\062\uff1a\063\uff1a\064\uff1a\065\uff1a\066\uff1a\067\uff1a\070" +
    "\uff1a\071\uff1a\072\uff1a\073\uff1a\074\uff1a\075\uff1a\076\uff1a" +
    "\077\uff1a\100\uff1a\101\uff1a\106\uff1a\001\002\000\176\004" +
    "\uff09\005\uff09\006\uff09\007\uff09\010\uff09\011\uff09\012\uff09" +
    "\013\uff09\014\uff09\015\uff09\016\uff09\017\uff09\020\uff09\021" +
    "\uff09\022\uff09\023\uff09\024\uff09\025\uff09\026\uff09\027\uff09" +
    "\030\uff09\031\uff09\032\uff09\033\uff09\034\uff09\035\uff09\036" +
    "\uff09\037\uff09\040\uff09\042\uff09\043\uff09\044\uff09\045\uff09" +
    "\046\uff09\047\uff09\050\uff09\051\uff09\052\uff09\053\uff09\054" +
    "\uff09\055\uff09\056\uff09\057\uff09\060\uff09\061\uff09\062\uff09" +
    "\063\uff09\064\uff09\065\uff09\066\uff09\067\uff09\070\uff09\071" +
    "\uff09\072\uff09\073\uff09\074\uff09\075\uff09\076\uff09\077\uff09" +
    "\100\uff09\101\uff09\106\uff09\001\002\000\176\004\uff1e\005" +
    "\uff1e\006\uff1e\007\uff1e\010\uff1e\011\uff1e\012\uff1e\013\uff1e" +
    "\014\uff1e\015\uff1e\016\uff1e\017\uff1e\020\uff1e\021\uff1e\022" +
    "\uff1e\023\uff1e\024\uff1e\025\uff1e\026\uff1e\027\uff1e\030\uff1e" +
    "\031\uff1e\032\uff1e\033\uff1e\034\uff1e\035\uff1e\036\uff1e\037" +
    "\uff1e\040\uff1e\042\uff1e\043\uff1e\044\uff1e\045\uff1e\046\uff1e" +
    "\047\uff1e\050\uff1e\051\uff1e\052\uff1e\053\uff1e\054\uff1e\055" +
    "\uff1e\056\uff1e\057\uff1e\060\uff1e\061\uff1e\062\uff1e\063\uff1e" +
    "\064\uff1e\065\uff1e\066\uff1e\067\uff1e\070\uff1e\071\uff1e\072" +
    "\uff1e\073\uff1e\074\uff1e\075\uff1e\076\uff1e\077\uff1e\100\uff1e" +
    "\101\uff1e\106\uff1e\001\002\000\176\004\uff18\005\uff18\006" +
    "\uff18\007\uff18\010\uff18\011\uff18\012\uff18\013\uff18\014\uff18" +
    "\015\uff18\016\uff18\017\uff18\020\uff18\021\uff18\022\uff18\023" +
    "\uff18\024\uff18\025\uff18\026\uff18\027\uff18\030\uff18\031\uff18" +
    "\032\uff18\033\uff18\034\uff18\035\uff18\036\uff18\037\uff18\040" +
    "\uff18\042\uff18\043\uff18\044\uff18\045\uff18\046\uff18\047\uff18" +
    "\050\uff18\051\uff18\052\uff18\053\uff18\054\uff18\055\uff18\056" +
    "\uff18\057\uff18\060\uff18\061\uff18\062\uff18\063\uff18\064\uff18" +
    "\065\uff18\066\uff18\067\uff18\070\uff18\071\uff18\072\uff18\073" +
    "\uff18\074\uff18\075\uff18\076\uff18\077\uff18\100\uff18\101\uff18" +
    "\106\uff18\001\002\000\176\004\uff12\005\uff12\006\uff12\007" +
    "\uff12\010\uff12\011\uff12\012\uff12\013\uff12\014\uff12\015\uff12" +
    "\016\uff12\017\uff12\020\uff12\021\uff12\022\uff12\023\uff12\024" +
    "\uff12\025\uff12\026\uff12\027\uff12\030\uff12\031\uff12\032\uff12" +
    "\033\uff12\034\uff12\035\uff12\036\uff12\037\uff12\040\uff12\042" +
    "\uff12\043\uff12\044\uff12\045\uff12\046\uff12\047\uff12\050\uff12" +
    "\051\uff12\052\uff12\053\uff12\054\uff12\055\uff12\056\uff12\057" +
    "\uff12\060\uff12\061\uff12\062\uff12\063\uff12\064\uff12\065\uff12" +
    "\066\uff12\067\uff12\070\uff12\071\uff12\072\uff12\073\uff12\074" +
    "\uff12\075\uff12\076\uff12\077\uff12\100\uff12\101\uff12\106\uff12" +
    "\001\002\000\176\004\uff10\005\uff10\006\uff10\007\uff10\010" +
    "\uff10\011\uff10\012\uff10\013\uff10\014\uff10\015\uff10\016\uff10" +
    "\017\uff10\020\uff10\021\uff10\022\uff10\023\uff10\024\uff10\025" +
    "\uff10\026\uff10\027\uff10\030\uff10\031\uff10\032\uff10\033\uff10" +
    "\034\uff10\035\uff10\036\uff10\037\uff10\040\uff10\042\uff10\043" +
    "\uff10\044\uff10\045\uff10\046\uff10\047\uff10\050\uff10\051\uff10" +
    "\052\uff10\053\uff10\054\uff10\055\uff10\056\uff10\057\uff10\060" +
    "\uff10\061\uff10\062\uff10\063\uff10\064\uff10\065\uff10\066\uff10" +
    "\067\uff10\070\uff10\071\uff10\072\uff10\073\uff10\074\uff10\075" +
    "\uff10\076\uff10\077\uff10\100\uff10\101\uff10\106\uff10\001\002" +
    "\000\176\004\uff1f\005\uff1f\006\uff1f\007\uff1f\010\uff1f\011" +
    "\uff1f\012\uff1f\013\uff1f\014\uff1f\015\uff1f\016\uff1f\017\uff1f" +
    "\020\uff1f\021\uff1f\022\uff1f\023\uff1f\024\uff1f\025\uff1f\026" +
    "\uff1f\027\uff1f\030\uff1f\031\uff1f\032\uff1f\033\uff1f\034\uff1f" +
    "\035\uff1f\036\uff1f\037\uff1f\040\uff1f\042\uff1f\043\uff1f\044" +
    "\uff1f\045\uff1f\046\uff1f\047\uff1f\050\uff1f\051\uff1f\052\uff1f" +
    "\053\uff1f\054\uff1f\055\uff1f\056\uff1f\057\uff1f\060\uff1f\061" +
    "\uff1f\062\uff1f\063\uff1f\064\uff1f\065\uff1f\066\uff1f\067\uff1f" +
    "\070\uff1f\071\uff1f\072\uff1f\073\uff1f\074\uff1f\075\uff1f\076" +
    "\uff1f\077\uff1f\100\uff1f\101\uff1f\106\uff1f\001\002\000\176" +
    "\004\uff15\005\uff15\006\uff15\007\uff15\010\uff15\011\uff15\012" +
    "\uff15\013\uff15\014\uff15\015\uff15\016\uff15\017\uff15\020\uff15" +
    "\021\uff15\022\uff15\023\uff15\024\uff15\025\uff15\026\uff15\027" +
    "\uff15\030\uff15\031\uff15\032\uff15\033\uff15\034\uff15\035\uff15" +
    "\036\uff15\037\uff15\040\uff15\042\uff15\043\uff15\044\uff15\045" +
    "\uff15\046\uff15\047\uff15\050\uff15\051\uff15\052\uff15\053\uff15" +
    "\054\uff15\055\uff15\056\uff15\057\uff15\060\uff15\061\uff15\062" +
    "\uff15\063\uff15\064\uff15\065\uff15\066\uff15\067\uff15\070\uff15" +
    "\071\uff15\072\uff15\073\uff15\074\uff15\075\uff15\076\uff15\077" +
    "\uff15\100\uff15\101\uff15\106\uff15\001\002\000\176\004\uff40" +
    "\005\uff40\006\uff40\007\uff40\010\uff40\011\uff40\012\uff40\013" +
    "\uff40\014\uff40\015\uff40\016\uff40\017\uff40\020\uff40\021\uff40" +
    "\022\uff40\023\uff40\024\uff40\025\uff40\026\uff40\027\uff40\030" +
    "\uff40\031\uff40\032\uff40\033\uff40\034\uff40\035\uff40\036\uff40" +
    "\037\uff40\040\uff40\042\uff40\043\uff40\044\uff40\045\uff40\046" +
    "\uff40\047\uff40\050\uff40\051\uff40\052\uff40\053\uff40\054\uff40" +
    "\055\uff40\056\uff40\057\uff40\060\uff40\061\uff40\062\uff40\063" +
    "\uff40\064\uff40\065\uff40\066\uff40\067\uff40\070\uff40\071\uff40" +
    "\072\uff40\073\uff40\074\uff40\075\uff40\076\uff40\077\uff40\100" +
    "\uff40\101\uff40\106\uff40\001\002\000\176\004\uff17\005\uff17" +
    "\006\uff17\007\uff17\010\uff17\011\uff17\012\uff17\013\uff17\014" +
    "\uff17\015\uff17\016\uff17\017\uff17\020\uff17\021\uff17\022\uff17" +
    "\023\uff17\024\uff17\025\uff17\026\uff17\027\uff17\030\uff17\031" +
    "\uff17\032\uff17\033\uff17\034\uff17\035\uff17\036\uff17\037\uff17" +
    "\040\uff17\042\uff17\043\uff17\044\uff17\045\uff17\046\uff17\047" +
    "\uff17\050\uff17\051\uff17\052\uff17\053\uff17\054\uff17\055\uff17" +
    "\056\uff17\057\uff17\060\uff17\061\uff17\062\uff17\063\uff17\064" +
    "\uff17\065\uff17\066\uff17\067\uff17\070\uff17\071\uff17\072\uff17" +
    "\073\uff17\074\uff17\075\uff17\076\uff17\077\uff17\100\uff17\101" +
    "\uff17\106\uff17\001\002\000\176\004\uff39\005\uff39\006\uff39" +
    "\007\uff39\010\uff39\011\uff39\012\uff39\013\uff39\014\uff39\015" +
    "\uff39\016\uff39\017\uff39\020\uff39\021\uff39\022\uff39\023\uff39" +
    "\024\uff39\025\uff39\026\uff39\027\uff39\030\uff39\031\uff39\032" +
    "\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037\uff39\040\uff39" +
    "\042\uff39\043\uff39\044\uff39\045\uff39\046\uff39\047\uff39\050" +
    "\uff39\051\uff39\052\uff39\053\uff39\054\uff39\055\uff39\056\uff39" +
    "\057\uff39\060\uff39\061\uff39\062\uff39\063\uff39\064\uff39\065" +
    "\uff39\066\uff39\067\uff39\070\uff39\071\uff39\072\uff39\073\uff39" +
    "\074\uff39\075\uff39\076\uff39\077\uff39\100\uff39\101\uff39\106" +
    "\uff39\001\002\000\176\004\uff1d\005\uff1d\006\uff1d\007\uff1d" +
    "\010\uff1d\011\uff1d\012\uff1d\013\uff1d\014\uff1d\015\uff1d\016" +
    "\uff1d\017\uff1d\020\uff1d\021\uff1d\022\uff1d\023\uff1d\024\uff1d" +
    "\025\uff1d\026\uff1d\027\uff1d\030\uff1d\031\uff1d\032\uff1d\033" +
    "\uff1d\034\uff1d\035\uff1d\036\uff1d\037\uff1d\040\uff1d\042\uff1d" +
    "\043\uff1d\044\uff1d\045\uff1d\046\uff1d\047\uff1d\050\uff1d\051" +
    "\uff1d\052\uff1d\053\uff1d\054\uff1d\055\uff1d\056\uff1d\057\uff1d" +
    "\060\uff1d\061\uff1d\062\uff1d\063\uff1d\064\uff1d\065\uff1d\066" +
    "\uff1d\067\uff1d\070\uff1d\071\uff1d\072\uff1d\073\uff1d\074\uff1d" +
    "\075\uff1d\076\uff1d\077\uff1d\100\uff1d\101\uff1d\106\uff1d\001" +
    "\002\000\176\004\uff41\005\uff41\006\uff41\007\uff41\010\uff41" +
    "\011\uff41\012\uff41\013\uff41\014\uff41\015\uff41\016\uff41\017" +
    "\uff41\020\uff41\021\uff41\022\uff41\023\uff41\024\uff41\025\uff41" +
    "\026\uff41\027\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034" +
    "\uff41\035\uff41\036\uff41\037\uff41\040\uff41\042\uff41\043\uff41" +
    "\044\uff41\045\uff41\046\uff41\047\uff41\050\uff41\051\uff41\052" +
    "\uff41\053\uff41\054\uff41\055\uff41\056\uff41\057\uff41\060\uff41" +
    "\061\uff41\062\uff41\063\uff41\064\uff41\065\uff41\066\uff41\067" +
    "\uff41\070\uff41\071\uff41\072\uff41\073\uff41\074\uff41\075\uff41" +
    "\076\uff41\077\uff41\100\uff41\101\uff41\106\uff41\001\002\000" +
    "\176\004\uff21\005\uff21\006\uff21\007\uff21\010\uff21\011\uff21" +
    "\012\uff21\013\uff21\014\uff21\015\uff21\016\uff21\017\uff21\020" +
    "\uff21\021\uff21\022\uff21\023\uff21\024\uff21\025\uff21\026\uff21" +
    "\027\uff21\030\uff21\031\uff21\032\uff21\033\uff21\034\uff21\035" +
    "\uff21\036\uff21\037\uff21\040\uff21\042\uff21\043\uff21\044\uff21" +
    "\045\uff21\046\uff21\047\uff21\050\uff21\051\uff21\052\uff21\053" +
    "\uff21\054\uff21\055\uff21\056\uff21\057\uff21\060\uff21\061\uff21" +
    "\062\uff21\063\uff21\064\uff21\065\uff21\066\uff21\067\uff21\070" +
    "\uff21\071\uff21\072\uff21\073\uff21\074\uff21\075\uff21\076\uff21" +
    "\077\uff21\100\uff21\101\uff21\106\uff21\001\002\000\176\004" +
    "\uff35\005\uff35\006\uff35\007\uff35\010\uff35\011\uff35\012\uff35" +
    "\013\uff35\014\uff35\015\uff35\016\uff35\017\uff35\020\uff35\021" +
    "\uff35\022\uff35\023\uff35\024\uff35\025\uff35\026\uff35\027\uff35" +
    "\030\uff35\031\uff35\032\uff35\033\uff35\034\uff35\035\uff35\036" +
    "\uff35\037\uff35\040\uff35\042\uff35\043\uff35\044\uff35\045\uff35" +
    "\046\uff35\047\uff35\050\uff35\051\uff35\052\uff35\053\uff35\054" +
    "\uff35\055\uff35\056\uff35\057\uff35\060\uff35\061\uff35\062\uff35" +
    "\063\uff35\064\uff35\065\uff35\066\uff35\067\uff35\070\uff35\071" +
    "\uff35\072\uff35\073\uff35\074\uff35\075\uff35\076\uff35\077\uff35" +
    "\100\uff35\101\uff35\106\uff35\001\002\000\176\004\uff3b\005" +
    "\uff3b\006\uff3b\007\uff3b\010\uff3b\011\uff3b\012\uff3b\013\uff3b" +
    "\014\uff3b\015\uff3b\016\uff3b\017\uff3b\020\uff3b\021\uff3b\022" +
    "\uff3b\023\uff3b\024\uff3b\025\uff3b\026\uff3b\027\uff3b\030\uff3b" +
    "\031\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037" +
    "\uff3b\040\uff3b\042\uff3b\043\uff3b\044\uff3b\045\uff3b\046\uff3b" +
    "\047\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b\054\uff3b\055" +
    "\uff3b\056\uff3b\057\uff3b\060\uff3b\061\uff3b\062\uff3b\063\uff3b" +
    "\064\uff3b\065\uff3b\066\uff3b\067\uff3b\070\uff3b\071\uff3b\072" +
    "\uff3b\073\uff3b\074\uff3b\075\uff3b\076\uff3b\077\uff3b\100\uff3b" +
    "\101\uff3b\106\uff3b\001\002\000\176\004\uff1b\005\uff1b\006" +
    "\uff1b\007\uff1b\010\uff1b\011\uff1b\012\uff1b\013\uff1b\014\uff1b" +
    "\015\uff1b\016\uff1b\017\uff1b\020\uff1b\021\uff1b\022\uff1b\023" +
    "\uff1b\024\uff1b\025\uff1b\026\uff1b\027\uff1b\030\uff1b\031\uff1b" +
    "\032\uff1b\033\uff1b\034\uff1b\035\uff1b\036\uff1b\037\uff1b\040" +
    "\uff1b\042\uff1b\043\uff1b\044\uff1b\045\uff1b\046\uff1b\047\uff1b" +
    "\050\uff1b\051\uff1b\052\uff1b\053\uff1b\054\uff1b\055\uff1b\056" +
    "\uff1b\057\uff1b\060\uff1b\061\uff1b\062\uff1b\063\uff1b\064\uff1b" +
    "\065\uff1b\066\uff1b\067\uff1b\070\uff1b\071\uff1b\072\uff1b\073" +
    "\uff1b\074\uff1b\075\uff1b\076\uff1b\077\uff1b\100\uff1b\101\uff1b" +
    "\106\uff1b\001\002\000\176\004\uff08\005\uff08\006\uff08\007" +
    "\uff08\010\uff08\011\uff08\012\uff08\013\uff08\014\uff08\015\uff08" +
    "\016\uff08\017\uff08\020\uff08\021\uff08\022\uff08\023\uff08\024" +
    "\uff08\025\uff08\026\uff08\027\uff08\030\uff08\031\uff08\032\uff08" +
    "\033\uff08\034\uff08\035\uff08\036\uff08\037\uff08\040\uff08\042" +
    "\uff08\043\uff08\044\uff08\045\uff08\046\uff08\047\uff08\050\uff08" +
    "\051\uff08\052\uff08\053\uff08\054\uff08\055\uff08\056\uff08\057" +
    "\uff08\060\uff08\061\uff08\062\uff08\063\uff08\064\uff08\065\uff08" +
    "\066\uff08\067\uff08\070\uff08\071\uff08\072\uff08\073\uff08\074" +
    "\uff08\075\uff08\076\uff08\077\uff08\100\uff08\101\uff08\106\uff08" +
    "\001\002\000\176\004\uff0e\005\uff0e\006\uff0e\007\uff0e\010" +
    "\uff0e\011\uff0e\012\uff0e\013\uff0e\014\uff0e\015\uff0e\016\uff0e" +
    "\017\uff0e\020\uff0e\021\uff0e\022\uff0e\023\uff0e\024\uff0e\025" +
    "\uff0e\026\uff0e\027\uff0e\030\uff0e\031\uff0e\032\uff0e\033\uff0e" +
    "\034\uff0e\035\uff0e\036\uff0e\037\uff0e\040\uff0e\042\uff0e\043" +
    "\uff0e\044\uff0e\045\uff0e\046\uff0e\047\uff0e\050\uff0e\051\uff0e" +
    "\052\uff0e\053\uff0e\054\uff0e\055\uff0e\056\uff0e\057\uff0e\060" +
    "\uff0e\061\uff0e\062\uff0e\063\uff0e\064\uff0e\065\uff0e\066\uff0e" +
    "\067\uff0e\070\uff0e\071\uff0e\072\uff0e\073\uff0e\074\uff0e\075" +
    "\uff0e\076\uff0e\077\uff0e\100\uff0e\101\uff0e\106\uff0e\001\002" +
    "\000\176\004\uff2d\005\uff2d\006\uff2d\007\uff2d\010\uff2d\011" +
    "\uff2d\012\uff2d\013\uff2d\014\uff2d\015\uff2d\016\uff2d\017\uff2d" +
    "\020\uff2d\021\uff2d\022\uff2d\023\uff2d\024\uff2d\025\uff2d\026" +
    "\uff2d\027\uff2d\030\uff2d\031\uff2d\032\uff2d\033\uff2d\034\uff2d" +
    "\035\uff2d\036\uff2d\037\uff2d\040\uff2d\042\uff2d\043\uff2d\044" +
    "\uff2d\045\uff2d\046\uff2d\047\uff2d\050\uff2d\051\uff2d\052\uff2d" +
    "\053\uff2d\054\uff2d\055\uff2d\056\uff2d\057\uff2d\060\uff2d\061" +
    "\uff2d\062\uff2d\063\uff2d\064\uff2d\065\uff2d\066\uff2d\067\uff2d" +
    "\070\uff2d\071\uff2d\072\uff2d\073\uff2d\074\uff2d\075\uff2d\076" +
    "\uff2d\077\uff2d\100\uff2d\101\uff2d\106\uff2d\001\002\000\176" +
    "\004\uff0f\005\uff0f\006\uff0f\007\uff0f\010\uff0f\011\uff0f\012" +
    "\uff0f\013\uff0f\014\uff0f\015\uff0f\016\uff0f\017\uff0f\020\uff0f" +
    "\021\uff0f\022\uff0f\023\uff0f\024\uff0f\025\uff0f\026\uff0f\027" +
    "\uff0f\030\uff0f\031\uff0f\032\uff0f\033\uff0f\034\uff0f\035\uff0f" +
    "\036\uff0f\037\uff0f\040\uff0f\042\uff0f\043\uff0f\044\uff0f\045" +
    "\uff0f\046\uff0f\047\uff0f\050\uff0f\051\uff0f\052\uff0f\053\uff0f" +
    "\054\uff0f\055\uff0f\056\uff0f\057\uff0f\060\uff0f\061\uff0f\062" +
    "\uff0f\063\uff0f\064\uff0f\065\uff0f\066\uff0f\067\uff0f\070\uff0f" +
    "\071\uff0f\072\uff0f\073\uff0f\074\uff0f\075\uff0f\076\uff0f\077" +
    "\uff0f\100\uff0f\101\uff0f\106\uff0f\001\002\000\176\004\uff36" +
    "\005\uff36\006\uff36\007\uff36\010\uff36\011\uff36\012\uff36\013" +
    "\uff36\014\uff36\015\uff36\016\uff36\017\uff36\020\uff36\021\uff36" +
    "\022\uff36\023\uff36\024\uff36\025\uff36\026\uff36\027\uff36\030" +
    "\uff36\031\uff36\032\uff36\033\uff36\034\uff36\035\uff36\036\uff36" +
    "\037\uff36\040\uff36\042\uff36\043\uff36\044\uff36\045\uff36\046" +
    "\uff36\047\uff36\050\uff36\051\uff36\052\uff36\053\uff36\054\uff36" +
    "\055\uff36\056\uff36\057\uff36\060\uff36\061\uff36\062\uff36\063" +
    "\uff36\064\uff36\065\uff36\066\uff36\067\uff36\070\uff36\071\uff36" +
    "\072\uff36\073\uff36\074\uff36\075\uff36\076\uff36\077\uff36\100" +
    "\uff36\101\uff36\106\uff36\001\002\000\176\004\uff3f\005\uff3f" +
    "\006\uff3f\007\uff3f\010\uff3f\011\uff3f\012\uff3f\013\uff3f\014" +
    "\uff3f\015\uff3f\016\uff3f\017\uff3f\020\uff3f\021\uff3f\022\uff3f" +
    "\023\uff3f\024\uff3f\025\uff3f\026\uff3f\027\uff3f\030\uff3f\031" +
    "\uff3f\032\uff3f\033\uff3f\034\uff3f\035\uff3f\036\uff3f\037\uff3f" +
    "\040\uff3f\042\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f\047" +
    "\uff3f\050\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f\055\uff3f" +
    "\056\uff3f\057\uff3f\060\uff3f\061\uff3f\062\uff3f\063\uff3f\064" +
    "\uff3f\065\uff3f\066\uff3f\067\uff3f\070\uff3f\071\uff3f\072\uff3f" +
    "\073\uff3f\074\uff3f\075\uff3f\076\uff3f\077\uff3f\100\uff3f\101" +
    "\uff3f\106\uff3f\001\002\000\176\004\uff13\005\uff13\006\uff13" +
    "\007\uff13\010\uff13\011\uff13\012\uff13\013\uff13\014\uff13\015" +
    "\uff13\016\uff13\017\uff13\020\uff13\021\uff13\022\uff13\023\uff13" +
    "\024\uff13\025\uff13\026\uff13\027\uff13\030\uff13\031\uff13\032" +
    "\uff13\033\uff13\034\uff13\035\uff13\036\uff13\037\uff13\040\uff13" +
    "\042\uff13\043\uff13\044\uff13\045\uff13\046\uff13\047\uff13\050" +
    "\uff13\051\uff13\052\uff13\053\uff13\054\uff13\055\uff13\056\uff13" +
    "\057\uff13\060\uff13\061\uff13\062\uff13\063\uff13\064\uff13\065" +
    "\uff13\066\uff13\067\uff13\070\uff13\071\uff13\072\uff13\073\uff13" +
    "\074\uff13\075\uff13\076\uff13\077\uff13\100\uff13\101\uff13\106" +
    "\uff13\001\002\000\176\004\uff24\005\uff24\006\uff24\007\uff24" +
    "\010\uff24\011\uff24\012\uff24\013\uff24\014\uff24\015\uff24\016" +
    "\uff24\017\uff24\020\uff24\021\uff24\022\uff24\023\uff24\024\uff24" +
    "\025\uff24\026\uff24\027\uff24\030\uff24\031\uff24\032\uff24\033" +
    "\uff24\034\uff24\035\uff24\036\uff24\037\uff24\040\uff24\042\uff24" +
    "\043\uff24\044\uff24\045\uff24\046\uff24\047\uff24\050\uff24\051" +
    "\uff24\052\uff24\053\uff24\054\uff24\055\uff24\056\uff24\057\uff24" +
    "\060\uff24\061\uff24\062\uff24\063\uff24\064\uff24\065\uff24\066" +
    "\uff24\067\uff24\070\uff24\071\uff24\072\uff24\073\uff24\074\uff24" +
    "\075\uff24\076\uff24\077\uff24\100\uff24\101\uff24\106\uff24\001" +
    "\002\000\176\004\uff30\005\uff30\006\uff30\007\uff30\010\uff30" +
    "\011\uff30\012\uff30\013\uff30\014\uff30\015\uff30\016\uff30\017" +
    "\uff30\020\uff30\021\uff30\022\uff30\023\uff30\024\uff30\025\uff30" +
    "\026\uff30\027\uff30\030\uff30\031\uff30\032\uff30\033\uff30\034" +
    "\uff30\035\uff30\036\uff30\037\uff30\040\uff30\042\uff30\043\uff30" +
    "\044\uff30\045\uff30\046\uff30\047\uff30\050\uff30\051\uff30\052" +
    "\uff30\053\uff30\054\uff30\055\uff30\056\uff30\057\uff30\060\uff30" +
    "\061\uff30\062\uff30\063\uff30\064\uff30\065\uff30\066\uff30\067" +
    "\uff30\070\uff30\071\uff30\072\uff30\073\uff30\074\uff30\075\uff30" +
    "\076\uff30\077\uff30\100\uff30\101\uff30\106\uff30\001\002\000" +
    "\176\004\uff3c\005\uff3c\006\uff3c\007\uff3c\010\uff3c\011\uff3c" +
    "\012\uff3c\013\uff3c\014\uff3c\015\uff3c\016\uff3c\017\uff3c\020" +
    "\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c\025\uff3c\026\uff3c" +
    "\027\uff3c\030\uff3c\031\uff3c\032\uff3c\033\uff3c\034\uff3c\035" +
    "\uff3c\036\uff3c\037\uff3c\040\uff3c\042\uff3c\043\uff3c\044\uff3c" +
    "\045\uff3c\046\uff3c\047\uff3c\050\uff3c\051\uff3c\052\uff3c\053" +
    "\uff3c\054\uff3c\055\uff3c\056\uff3c\057\uff3c\060\uff3c\061\uff3c" +
    "\062\uff3c\063\uff3c\064\uff3c\065\uff3c\066\uff3c\067\uff3c\070" +
    "\uff3c\071\uff3c\072\uff3c\073\uff3c\074\uff3c\075\uff3c\076\uff3c" +
    "\077\uff3c\100\uff3c\101\uff3c\106\uff3c\001\002\000\176\004" +
    "\uff33\005\uff33\006\uff33\007\uff33\010\uff33\011\uff33\012\uff33" +
    "\013\uff33\014\uff33\015\uff33\016\uff33\017\uff33\020\uff33\021" +
    "\uff33\022\uff33\023\uff33\024\uff33\025\uff33\026\uff33\027\uff33" +
    "\030\uff33\031\uff33\032\uff33\033\uff33\034\uff33\035\uff33\036" +
    "\uff33\037\uff33\040\uff33\042\uff33\043\uff33\044\uff33\045\uff33" +
    "\046\uff33\047\uff33\050\uff33\051\uff33\052\uff33\053\uff33\054" +
    "\uff33\055\uff33\056\uff33\057\uff33\060\uff33\061\uff33\062\uff33" +
    "\063\uff33\064\uff33\065\uff33\066\uff33\067\uff33\070\uff33\071" +
    "\uff33\072\uff33\073\uff33\074\uff33\075\uff33\076\uff33\077\uff33" +
    "\100\uff33\101\uff33\106\uff33\001\002\000\176\004\uff1c\005" +
    "\uff1c\006\uff1c\007\uff1c\010\uff1c\011\uff1c\012\uff1c\013\uff1c" +
    "\014\uff1c\015\uff1c\016\uff1c\017\uff1c\020\uff1c\021\uff1c\022" +
    "\uff1c\023\uff1c\024\uff1c\025\uff1c\026\uff1c\027\uff1c\030\uff1c" +
    "\031\uff1c\032\uff1c\033\uff1c\034\uff1c\035\uff1c\036\uff1c\037" +
    "\uff1c\040\uff1c\042\uff1c\043\uff1c\044\uff1c\045\uff1c\046\uff1c" +
    "\047\uff1c\050\uff1c\051\uff1c\052\uff1c\053\uff1c\054\uff1c\055" +
    "\uff1c\056\uff1c\057\uff1c\060\uff1c\061\uff1c\062\uff1c\063\uff1c" +
    "\064\uff1c\065\uff1c\066\uff1c\067\uff1c\070\uff1c\071\uff1c\072" +
    "\uff1c\073\uff1c\074\uff1c\075\uff1c\076\uff1c\077\uff1c\100\uff1c" +
    "\101\uff1c\106\uff1c\001\002\000\176\004\uff0a\005\uff0a\006" +
    "\uff0a\007\uff0a\010\uff0a\011\uff0a\012\uff0a\013\uff0a\014\uff0a" +
    "\015\uff0a\016\uff0a\017\uff0a\020\uff0a\021\uff0a\022\uff0a\023" +
    "\uff0a\024\uff0a\025\uff0a\026\uff0a\027\uff0a\030\uff0a\031\uff0a" +
    "\032\uff0a\033\uff0a\034\uff0a\035\uff0a\036\uff0a\037\uff0a\040" +
    "\uff0a\042\uff0a\043\uff0a\044\uff0a\045\uff0a\046\uff0a\047\uff0a" +
    "\050\uff0a\051\uff0a\052\uff0a\053\uff0a\054\uff0a\055\uff0a\056" +
    "\uff0a\057\uff0a\060\uff0a\061\uff0a\062\uff0a\063\uff0a\064\uff0a" +
    "\065\uff0a\066\uff0a\067\uff0a\070\uff0a\071\uff0a\072\uff0a\073" +
    "\uff0a\074\uff0a\075\uff0a\076\uff0a\077\uff0a\100\uff0a\101\uff0a" +
    "\106\uff0a\001\002\000\176\004\uff2c\005\uff2c\006\uff2c\007" +
    "\uff2c\010\uff2c\011\uff2c\012\uff2c\013\uff2c\014\uff2c\015\uff2c" +
    "\016\uff2c\017\uff2c\020\uff2c\021\uff2c\022\uff2c\023\uff2c\024" +
    "\uff2c\025\uff2c\026\uff2c\027\uff2c\030\uff2c\031\uff2c\032\uff2c" +
    "\033\uff2c\034\uff2c\035\uff2c\036\uff2c\037\uff2c\040\uff2c\042" +
    "\uff2c\043\uff2c\044\uff2c\045\uff2c\046\uff2c\047\uff2c\050\uff2c" +
    "\051\uff2c\052\uff2c\053\uff2c\054\uff2c\055\uff2c\056\uff2c\057" +
    "\uff2c\060\uff2c\061\uff2c\062\uff2c\063\uff2c\064\uff2c\065\uff2c" +
    "\066\uff2c\067\uff2c\070\uff2c\071\uff2c\072\uff2c\073\uff2c\074" +
    "\uff2c\075\uff2c\076\uff2c\077\uff2c\100\uff2c\101\uff2c\106\uff2c" +
    "\001\002\000\176\004\uff07\005\uff07\006\uff07\007\uff07\010" +
    "\uff07\011\uff07\012\uff07\013\uff07\014\uff07\015\uff07\016\uff07" +
    "\017\uff07\020\uff07\021\uff07\022\uff07\023\uff07\024\uff07\025" +
    "\uff07\026\uff07\027\uff07\030\uff07\031\uff07\032\uff07\033\uff07" +
    "\034\uff07\035\uff07\036\uff07\037\uff07\040\uff07\042\uff07\043" +
    "\uff07\044\uff07\045\uff07\046\uff07\047\uff07\050\uff07\051\uff07" +
    "\052\uff07\053\uff07\054\uff07\055\uff07\056\uff07\057\uff07\060" +
    "\uff07\061\uff07\062\uff07\063\uff07\064\uff07\065\uff07\066\uff07" +
    "\067\uff07\070\uff07\071\uff07\072\uff07\073\uff07\074\uff07\075" +
    "\uff07\076\uff07\077\uff07\100\uff07\101\uff07\106\uff07\001\002" +
    "\000\176\004\uff32\005\uff32\006\uff32\007\uff32\010\uff32\011" +
    "\uff32\012\uff32\013\uff32\014\uff32\015\uff32\016\uff32\017\uff32" +
    "\020\uff32\021\uff32\022\uff32\023\uff32\024\uff32\025\uff32\026" +
    "\uff32\027\uff32\030\uff32\031\uff32\032\uff32\033\uff32\034\uff32" +
    "\035\uff32\036\uff32\037\uff32\040\uff32\042\uff32\043\uff32\044" +
    "\uff32\045\uff32\046\uff32\047\uff32\050\uff32\051\uff32\052\uff32" +
    "\053\uff32\054\uff32\055\uff32\056\uff32\057\uff32\060\uff32\061" +
    "\uff32\062\uff32\063\uff32\064\uff32\065\uff32\066\uff32\067\uff32" +
    "\070\uff32\071\uff32\072\uff32\073\uff32\074\uff32\075\uff32\076" +
    "\uff32\077\uff32\100\uff32\101\uff32\106\uff32\001\002\000\176" +
    "\004\uff14\005\uff14\006\uff14\007\uff14\010\uff14\011\uff14\012" +
    "\uff14\013\uff14\014\uff14\015\uff14\016\uff14\017\uff14\020\uff14" +
    "\021\uff14\022\uff14\023\uff14\024\uff14\025\uff14\026\uff14\027" +
    "\uff14\030\uff14\031\uff14\032\uff14\033\uff14\034\uff14\035\uff14" +
    "\036\uff14\037\uff14\040\uff14\042\uff14\043\uff14\044\uff14\045" +
    "\uff14\046\uff14\047\uff14\050\uff14\051\uff14\052\uff14\053\uff14" +
    "\054\uff14\055\uff14\056\uff14\057\uff14\060\uff14\061\uff14\062" +
    "\uff14\063\uff14\064\uff14\065\uff14\066\uff14\067\uff14\070\uff14" +
    "\071\uff14\072\uff14\073\uff14\074\uff14\075\uff14\076\uff14\077" +
    "\uff14\100\uff14\101\uff14\106\uff14\001\002\000\176\004\uff0c" +
    "\005\uff0c\006\uff0c\007\uff0c\010\uff0c\011\uff0c\012\uff0c\013" +
    "\uff0c\014\uff0c\015\uff0c\016\uff0c\017\uff0c\020\uff0c\021\uff0c" +
    "\022\uff0c\023\uff0c\024\uff0c\025\uff0c\026\uff0c\027\uff0c\030" +
    "\uff0c\031\uff0c\032\uff0c\033\uff0c\034\uff0c\035\uff0c\036\uff0c" +
    "\037\uff0c\040\uff0c\042\uff0c\043\uff0c\044\uff0c\045\uff0c\046" +
    "\uff0c\047\uff0c\050\uff0c\051\uff0c\052\uff0c\053\uff0c\054\uff0c" +
    "\055\uff0c\056\uff0c\057\uff0c\060\uff0c\061\uff0c\062\uff0c\063" +
    "\uff0c\064\uff0c\065\uff0c\066\uff0c\067\uff0c\070\uff0c\071\uff0c" +
    "\072\uff0c\073\uff0c\074\uff0c\075\uff0c\076\uff0c\077\uff0c\100" +
    "\uff0c\101\uff0c\106\uff0c\001\002\000\176\004\uff0d\005\uff0d" +
    "\006\uff0d\007\uff0d\010\uff0d\011\uff0d\012\uff0d\013\uff0d\014" +
    "\uff0d\015\uff0d\016\uff0d\017\uff0d\020\uff0d\021\uff0d\022\uff0d" +
    "\023\uff0d\024\uff0d\025\uff0d\026\uff0d\027\uff0d\030\uff0d\031" +
    "\uff0d\032\uff0d\033\uff0d\034\uff0d\035\uff0d\036\uff0d\037\uff0d" +
    "\040\uff0d\042\uff0d\043\uff0d\044\uff0d\045\uff0d\046\uff0d\047" +
    "\uff0d\050\uff0d\051\uff0d\052\uff0d\053\uff0d\054\uff0d\055\uff0d" +
    "\056\uff0d\057\uff0d\060\uff0d\061\uff0d\062\uff0d\063\uff0d\064" +
    "\uff0d\065\uff0d\066\uff0d\067\uff0d\070\uff0d\071\uff0d\072\uff0d" +
    "\073\uff0d\074\uff0d\075\uff0d\076\uff0d\077\uff0d\100\uff0d\101" +
    "\uff0d\106\uff0d\001\002\000\176\004\uff2e\005\uff2e\006\uff2e" +
    "\007\uff2e\010\uff2e\011\uff2e\012\uff2e\013\uff2e\014\uff2e\015" +
    "\uff2e\016\uff2e\017\uff2e\020\uff2e\021\uff2e\022\uff2e\023\uff2e" +
    "\024\uff2e\025\uff2e\026\uff2e\027\uff2e\030\uff2e\031\uff2e\032" +
    "\uff2e\033\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e\040\uff2e" +
    "\042\uff2e\043\uff2e\044\uff2e\045\uff2e\046\uff2e\047\uff2e\050" +
    "\uff2e\051\uff2e\052\uff2e\053\uff2e\054\uff2e\055\uff2e\056\uff2e" +
    "\057\uff2e\060\uff2e\061\uff2e\062\uff2e\063\uff2e\064\uff2e\065" +
    "\uff2e\066\uff2e\067\uff2e\070\uff2e\071\uff2e\072\uff2e\073\uff2e" +
    "\074\uff2e\075\uff2e\076\uff2e\077\uff2e\100\uff2e\101\uff2e\106" +
    "\uff2e\001\002\000\012\042\221\044\220\067\215\070\222" +
    "\001\002\000\012\042\221\044\220\067\215\070\222\001" +
    "\002\000\004\062\uff5f\001\002\000\004\062\uff5d\001\002" +
    "\000\004\062\uff5e\001\002\000\012\005\330\043\uff57\062" +
    "\uff57\102\uff57\001\002\000\010\043\uff58\062\uff58\102\uff58" +
    "\001\002\000\004\067\331\001\002\000\010\043\uff56\062" +
    "\uff56\102\uff56\001\002\000\004\062\uff60\001\002\000\004" +
    "\066\uff50\001\002\000\004\066\010\001\002\000\056\003" +
    "\uff4f\007\uff4f\010\uff4f\016\uff4f\020\uff4f\022\uff4f\023\uff4f" +
    "\024\uff4f\025\uff4f\030\uff4f\034\uff4f\035\uff4f\036\uff4f\037" +
    "\uff4f\040\uff4f\070\uff4f\074\uff4f\076\uff4f\077\uff4f\101\uff4f" +
    "\104\uff4f\105\uff4f\001\002\000\004\067\337\001\002\000" +
    "\010\043\uff59\062\uff59\102\uff59\001\002\000\004\066\010" +
    "\001\002\000\056\003\uff4d\007\uff4d\010\uff4d\016\uff4d\020" +
    "\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d\030\uff4d\034\uff4d" +
    "\035\uff4d\036\uff4d\037\uff4d\040\uff4d\070\uff4d\074\uff4d\076" +
    "\uff4d\077\uff4d\101\uff4d\104\uff4d\105\uff4d\001\002\000\030" +
    "\004\uffd4\005\u0108\026\uffd4\027\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\062\uffd4\066\uffd4\103\uffd4\001\002\000\014" +
    "\041\344\044\346\061\343\067\342\070\351\001\002\000" +
    "\006\067\u0102\070\u0103\001\002\000\026\004\uffd6\026\uffd6" +
    "\027\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\062\uffd6\066" +
    "\uffd6\103\uffd6\001\002\000\006\067\376\070\377\001\002" +
    "\000\006\004\uffec\066\uffec\001\002\000\020\004\uffe6\043" +
    "\354\044\355\045\352\046\356\066\uffe6\103\353\001\002" +
    "\000\026\004\uffd5\026\uffd5\027\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\062\uffd5\066\uffd5\103\uffd5\001\002\000\014" +
    "\041\344\044\346\061\343\067\342\070\351\001\002\000" +
    "\014\041\344\044\346\061\343\067\342\070\351\001\002" +
    "\000\014\041\344\044\346\061\343\067\342\070\351\001" +
    "\002\000\014\041\344\044\346\061\343\067\342\070\351" +
    "\001\002\000\014\041\344\044\346\061\343\067\342\070" +
    "\351\001\002\000\026\004\uffd8\026\uffd8\027\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\062\uffd8\066\uffd8\103\uffd8\001" +
    "\002\000\026\004\uffda\026\uffda\027\uffda\043\uffda\044\uffda" +
    "\045\352\046\356\062\uffda\066\uffda\103\353\001\002\000" +
    "\026\004\uffdb\026\uffdb\027\uffdb\043\uffdb\044\uffdb\045\352" +
    "\046\356\062\uffdb\066\uffdb\103\353\001\002\000\026\004" +
    "\uffd7\026\uffd7\027\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\062\uffd7\066\uffd7\103\uffd7\001\002\000\026\004\uffd9\026" +
    "\uffd9\027\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\062\uffd9" +
    "\066\uffd9\103\uffd9\001\002\000\006\004\366\066\010\001" +
    "\002\000\056\003\uffeb\007\uffeb\010\uffeb\016\uffeb\020\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\030\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\070\uffeb\074\uffeb\076\uffeb" +
    "\077\uffeb\101\uffeb\104\uffeb\105\uffeb\001\002\000\004\070" +
    "\370\001\002\000\056\003\uffe7\007\uffe7\010\uffe7\016\uffe7" +
    "\020\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\030\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\070\uffe7\074\uffe7" +
    "\076\uffe7\077\uffe7\101\uffe7\104\uffe7\105\uffe7\001\002\000" +
    "\004\047\371\001\002\000\014\041\uffea\044\uffea\061\uffea" +
    "\067\uffea\070\uffea\001\002\000\014\041\344\044\346\061" +
    "\343\067\342\070\351\001\002\000\006\004\uffe9\066\uffe9" +
    "\001\002\000\006\004\366\066\010\001\002\000\056\003" +
    "\uffe8\007\uffe8\010\uffe8\016\uffe8\020\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\030\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\070\uffe8\074\uffe8\076\uffe8\077\uffe8\101\uffe8" +
    "\104\uffe8\105\uffe8\001\002\000\030\004\uffcf\005\u0100\026" +
    "\uffcf\027\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\062\uffcf" +
    "\066\uffcf\103\uffcf\001\002\000\026\004\uffd0\026\uffd0\027" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\062\uffd0\066\uffd0" +
    "\103\uffd0\001\002\000\004\067\u0101\001\002\000\026\004" +
    "\uffce\026\uffce\027\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\062\uffce\066\uffce\103\uffce\001\002\000\004\041\u0105\001" +
    "\002\000\004\041\u0104\001\002\000\026\004\uffd2\026\uffd2" +
    "\027\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\062\uffd2\066" +
    "\uffd2\103\uffd2\001\002\000\026\004\uffd1\026\uffd1\027\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\062\uffd1\066\uffd1\103" +
    "\uffd1\001\002\000\016\043\354\044\355\045\352\046\356" +
    "\062\u0107\103\353\001\002\000\026\004\uffdc\026\uffdc\027" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\062\uffdc\066\uffdc" +
    "\103\uffdc\001\002\000\004\067\u0109\001\002\000\026\004" +
    "\uffd3\026\uffd3\027\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\062\uffd3\066\uffd3\103\uffd3\001\002\000\004\070\u010b\001" +
    "\002\000\006\021\uff70\047\uff70\001\002\000\006\021\u010d" +
    "\047\ufff5\001\002\000\010\011\u0121\012\u0122\013\u0123\001" +
    "\002\000\004\047\u010f\001\002\000\014\041\344\044\346" +
    "\061\343\067\342\070\351\001\002\000\016\026\u0111\043" +
    "\354\044\355\045\352\046\356\103\353\001\002\000\014" +
    "\041\344\044\346\061\343\067\342\070\351\001\002\000" +
    "\020\027\u0114\043\354\044\355\045\352\046\356\066\uff69" +
    "\103\353\001\002\000\004\066\uff6f\001\002\000\010\044" +
    "\u0116\067\u0115\070\u0117\001\002\000\004\066\uff6d\001\002" +
    "\000\006\067\u0118\070\u0119\001\002\000\004\066\uff6b\001" +
    "\002\000\004\066\uff6c\001\002\000\004\066\uff6a\001\002" +
    "\000\004\066\010\001\002\000\042\003\uffb5\010\uffb5\016" +
    "\uffb5\022\uffb5\023\uffb5\025\uffb5\030\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\070\uffb5\076\uffb5\104\uffb5\105" +
    "\uffb5\001\002\000\042\003\066\010\037\016\072\022\042" +
    "\023\040\025\063\030\u011d\034\050\035\041\036\051\037" +
    "\053\040\047\070\065\076\055\104\056\105\054\001\002" +
    "\000\016\041\344\044\346\061\343\066\uff67\067\342\070" +
    "\351\001\002\000\004\066\010\001\002\000\016\043\354" +
    "\044\355\045\352\046\356\066\uff68\103\353\001\002\000" +
    "\056\003\uff6e\007\uff6e\010\uff6e\016\uff6e\020\uff6e\022\uff6e" +
    "\023\uff6e\024\uff6e\025\uff6e\030\uff6e\034\uff6e\035\uff6e\036" +
    "\uff6e\037\uff6e\040\uff6e\070\uff6e\074\uff6e\076\uff6e\077\uff6e" +
    "\101\uff6e\104\uff6e\105\uff6e\001\002\000\004\047\ufff8\001" +
    "\002\000\004\047\ufff7\001\002\000\004\047\ufff6\001\002" +
    "\000\014\041\344\044\346\061\343\067\342\070\351\001" +
    "\002\000\004\066\uffcc\001\002\000\004\066\010\001\002" +
    "\000\004\007\uffcb\001\002\000\014\042\221\044\220\062" +
    "\u0129\067\215\070\222\001\002\000\004\066\uff4a\001\002" +
    "\000\004\062\u012b\001\002\000\004\066\uff4c\001\002\000" +
    "\004\066\010\001\002\000\056\003\uff4b\007\uff4b\010\uff4b" +
    "\016\uff4b\020\uff4b\022\uff4b\023\uff4b\024\uff4b\025\uff4b\030" +
    "\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b\070\uff4b" +
    "\074\uff4b\076\uff4b\077\uff4b\101\uff4b\104\uff4b\105\uff4b\001" +
    "\002\000\004\066\010\001\002\000\056\003\uff49\007\uff49" +
    "\010\uff49\016\uff49\020\uff49\022\uff49\023\uff49\024\uff49\025" +
    "\uff49\030\uff49\034\uff49\035\uff49\036\uff49\037\uff49\040\uff49" +
    "\070\uff49\074\uff49\076\uff49\077\uff49\101\uff49\104\uff49\105" +
    "\uff49\001\002\000\172\004\u013d\005\u0156\006\u0151\007\u015f" +
    "\010\u0138\011\u0163\012\u0158\013\u0146\014\u0153\015\u0148\016" +
    "\u0147\017\u015e\020\u0157\021\u0164\022\u016a\023\u013b\024\u0143" +
    "\025\u016c\026\u015d\027\u0166\030\u0144\031\u0131\032\u0141\033" +
    "\u0132\034\u013c\035\u013e\036\u0161\037\u0155\040\u013a\043\u014f" +
    "\044\u014b\045\u0154\046\u0165\047\u013f\050\u014c\051\u0152\052" +
    "\u0142\053\u0150\054\u0168\055\u0160\056\u014d\057\u0140\060\u014e" +
    "\061\u015c\062\u015b\063\u016b\064\u0169\065\u0139\066\010\067" +
    "\u014a\070\u015a\071\u0167\072\u0159\073\u0149\074\u0136\075\u0135" +
    "\076\u0133\077\u0137\100\u0162\101\u0145\001\002\000\172\004" +
    "\ufeed\005\ufeed\006\ufeed\007\ufeed\010\ufeed\011\ufeed\012\ufeed" +
    "\013\ufeed\014\ufeed\015\ufeed\016\ufeed\017\ufeed\020\ufeed\021" +
    "\ufeed\022\ufeed\023\ufeed\024\ufeed\025\ufeed\026\ufeed\027\ufeed" +
    "\030\ufeed\031\ufeed\032\ufeed\033\ufeed\034\ufeed\035\ufeed\036" +
    "\ufeed\037\ufeed\040\ufeed\043\ufeed\044\ufeed\045\ufeed\046\ufeed" +
    "\047\ufeed\050\ufeed\051\ufeed\052\ufeed\053\ufeed\054\ufeed\055" +
    "\ufeed\056\ufeed\057\ufeed\060\ufeed\061\ufeed\062\ufeed\063\ufeed" +
    "\064\ufeed\065\ufeed\066\ufeed\067\ufeed\070\ufeed\071\ufeed\072" +
    "\ufeed\073\ufeed\074\ufeed\075\ufeed\076\ufeed\077\ufeed\100\ufeed" +
    "\101\ufeed\001\002\000\172\004\ufeeb\005\ufeeb\006\ufeeb\007" +
    "\ufeeb\010\ufeeb\011\ufeeb\012\ufeeb\013\ufeeb\014\ufeeb\015\ufeeb" +
    "\016\ufeeb\017\ufeeb\020\ufeeb\021\ufeeb\022\ufeeb\023\ufeeb\024" +
    "\ufeeb\025\ufeeb\026\ufeeb\027\ufeeb\030\ufeeb\031\ufeeb\032\ufeeb" +
    "\033\ufeeb\034\ufeeb\035\ufeeb\036\ufeeb\037\ufeeb\040\ufeeb\043" +
    "\ufeeb\044\ufeeb\045\ufeeb\046\ufeeb\047\ufeeb\050\ufeeb\051\ufeeb" +
    "\052\ufeeb\053\ufeeb\054\ufeeb\055\ufeeb\056\ufeeb\057\ufeeb\060" +
    "\ufeeb\061\ufeeb\062\ufeeb\063\ufeeb\064\ufeeb\065\ufeeb\066\ufeeb" +
    "\067\ufeeb\070\ufeeb\071\ufeeb\072\ufeeb\073\ufeeb\074\ufeeb\075" +
    "\ufeeb\076\ufeeb\077\ufeeb\100\ufeeb\101\ufeeb\001\002\000\172" +
    "\004\ufee6\005\ufee6\006\ufee6\007\ufee6\010\ufee6\011\ufee6\012" +
    "\ufee6\013\ufee6\014\ufee6\015\ufee6\016\ufee6\017\ufee6\020\ufee6" +
    "\021\ufee6\022\ufee6\023\ufee6\024\ufee6\025\ufee6\026\ufee6\027" +
    "\ufee6\030\ufee6\031\ufee6\032\ufee6\033\ufee6\034\ufee6\035\ufee6" +
    "\036\ufee6\037\ufee6\040\ufee6\043\ufee6\044\ufee6\045\ufee6\046" +
    "\ufee6\047\ufee6\050\ufee6\051\ufee6\052\ufee6\053\ufee6\054\ufee6" +
    "\055\ufee6\056\ufee6\057\ufee6\060\ufee6\061\ufee6\062\ufee6\063" +
    "\ufee6\064\ufee6\065\ufee6\066\ufee6\067\ufee6\070\ufee6\071\ufee6" +
    "\072\ufee6\073\ufee6\074\ufee6\075\ufee6\076\ufee6\077\ufee6\100" +
    "\ufee6\101\ufee6\001\002\000\056\003\uff45\007\uff45\010\uff45" +
    "\016\uff45\020\uff45\022\uff45\023\uff45\024\uff45\025\uff45\030" +
    "\uff45\034\uff45\035\uff45\036\uff45\037\uff45\040\uff45\070\uff45" +
    "\074\uff45\076\uff45\077\uff45\101\uff45\104\uff45\105\uff45\001" +
    "\002\000\172\004\ufeea\005\ufeea\006\ufeea\007\ufeea\010\ufeea" +
    "\011\ufeea\012\ufeea\013\ufeea\014\ufeea\015\ufeea\016\ufeea\017" +
    "\ufeea\020\ufeea\021\ufeea\022\ufeea\023\ufeea\024\ufeea\025\ufeea" +
    "\026\ufeea\027\ufeea\030\ufeea\031\ufeea\032\ufeea\033\ufeea\034" +
    "\ufeea\035\ufeea\036\ufeea\037\ufeea\040\ufeea\043\ufeea\044\ufeea" +
    "\045\ufeea\046\ufeea\047\ufeea\050\ufeea\051\ufeea\052\ufeea\053" +
    "\ufeea\054\ufeea\055\ufeea\056\ufeea\057\ufeea\060\ufeea\061\ufeea" +
    "\062\ufeea\063\ufeea\064\ufeea\065\ufeea\066\ufeea\067\ufeea\070" +
    "\ufeea\071\ufeea\072\ufeea\073\ufeea\074\ufeea\075\ufeea\076\ufeea" +
    "\077\ufeea\100\ufeea\101\ufeea\001\002\000\172\004\uff00\005" +
    "\uff00\006\uff00\007\uff00\010\uff00\011\uff00\012\uff00\013\uff00" +
    "\014\uff00\015\uff00\016\uff00\017\uff00\020\uff00\021\uff00\022" +
    "\uff00\023\uff00\024\uff00\025\uff00\026\uff00\027\uff00\030\uff00" +
    "\031\uff00\032\uff00\033\uff00\034\uff00\035\uff00\036\uff00\037" +
    "\uff00\040\uff00\043\uff00\044\uff00\045\uff00\046\uff00\047\uff00" +
    "\050\uff00\051\uff00\052\uff00\053\uff00\054\uff00\055\uff00\056" +
    "\uff00\057\uff00\060\uff00\061\uff00\062\uff00\063\uff00\064\uff00" +
    "\065\uff00\066\uff00\067\uff00\070\uff00\071\uff00\072\uff00\073" +
    "\uff00\074\uff00\075\uff00\076\uff00\077\uff00\100\uff00\101\uff00" +
    "\001\002\000\172\004\ufee5\005\ufee5\006\ufee5\007\ufee5\010" +
    "\ufee5\011\ufee5\012\ufee5\013\ufee5\014\ufee5\015\ufee5\016\ufee5" +
    "\017\ufee5\020\ufee5\021\ufee5\022\ufee5\023\ufee5\024\ufee5\025" +
    "\ufee5\026\ufee5\027\ufee5\030\ufee5\031\ufee5\032\ufee5\033\ufee5" +
    "\034\ufee5\035\ufee5\036\ufee5\037\ufee5\040\ufee5\043\ufee5\044" +
    "\ufee5\045\ufee5\046\ufee5\047\ufee5\050\ufee5\051\ufee5\052\ufee5" +
    "\053\ufee5\054\ufee5\055\ufee5\056\ufee5\057\ufee5\060\ufee5\061" +
    "\ufee5\062\ufee5\063\ufee5\064\ufee5\065\ufee5\066\ufee5\067\ufee5" +
    "\070\ufee5\071\ufee5\072\ufee5\073\ufee5\074\ufee5\075\ufee5\076" +
    "\ufee5\077\ufee5\100\ufee5\101\ufee5\001\002\000\172\004\uff01" +
    "\005\uff01\006\uff01\007\uff01\010\uff01\011\uff01\012\uff01\013" +
    "\uff01\014\uff01\015\uff01\016\uff01\017\uff01\020\uff01\021\uff01" +
    "\022\uff01\023\uff01\024\uff01\025\uff01\026\uff01\027\uff01\030" +
    "\uff01\031\uff01\032\uff01\033\uff01\034\uff01\035\uff01\036\uff01" +
    "\037\uff01\040\uff01\043\uff01\044\uff01\045\uff01\046\uff01\047" +
    "\uff01\050\uff01\051\uff01\052\uff01\053\uff01\054\uff01\055\uff01" +
    "\056\uff01\057\uff01\060\uff01\061\uff01\062\uff01\063\uff01\064" +
    "\uff01\065\uff01\066\uff01\067\uff01\070\uff01\071\uff01\072\uff01" +
    "\073\uff01\074\uff01\075\uff01\076\uff01\077\uff01\100\uff01\101" +
    "\uff01\001\002\000\172\004\ufece\005\ufece\006\ufece\007\ufece" +
    "\010\ufece\011\ufece\012\ufece\013\ufece\014\ufece\015\ufece\016" +
    "\ufece\017\ufece\020\ufece\021\ufece\022\ufece\023\ufece\024\ufece" +
    "\025\ufece\026\ufece\027\ufece\030\ufece\031\ufece\032\ufece\033" +
    "\ufece\034\ufece\035\ufece\036\ufece\037\ufece\040\ufece\043\ufece" +
    "\044\ufece\045\ufece\046\ufece\047\ufece\050\ufece\051\ufece\052" +
    "\ufece\053\ufece\054\ufece\055\ufece\056\ufece\057\ufece\060\ufece" +
    "\061\ufece\062\ufece\063\ufece\064\ufece\065\ufece\066\ufece\067" +
    "\ufece\070\ufece\071\ufece\072\ufece\073\ufece\074\ufece\075\ufece" +
    "\076\ufece\077\ufece\100\ufece\101\ufece\001\002\000\172\004" +
    "\ufee3\005\ufee3\006\ufee3\007\ufee3\010\ufee3\011\ufee3\012\ufee3" +
    "\013\ufee3\014\ufee3\015\ufee3\016\ufee3\017\ufee3\020\ufee3\021" +
    "\ufee3\022\ufee3\023\ufee3\024\ufee3\025\ufee3\026\ufee3\027\ufee3" +
    "\030\ufee3\031\ufee3\032\ufee3\033\ufee3\034\ufee3\035\ufee3\036" +
    "\ufee3\037\ufee3\040\ufee3\043\ufee3\044\ufee3\045\ufee3\046\ufee3" +
    "\047\ufee3\050\ufee3\051\ufee3\052\ufee3\053\ufee3\054\ufee3\055" +
    "\ufee3\056\ufee3\057\ufee3\060\ufee3\061\ufee3\062\ufee3\063\ufee3" +
    "\064\ufee3\065\ufee3\066\ufee3\067\ufee3\070\ufee3\071\ufee3\072" +
    "\ufee3\073\ufee3\074\ufee3\075\ufee3\076\ufee3\077\ufee3\100\ufee3" +
    "\101\ufee3\001\002\000\172\004\ufef4\005\ufef4\006\ufef4\007" +
    "\ufef4\010\ufef4\011\ufef4\012\ufef4\013\ufef4\014\ufef4\015\ufef4" +
    "\016\ufef4\017\ufef4\020\ufef4\021\ufef4\022\ufef4\023\ufef4\024" +
    "\ufef4\025\ufef4\026\ufef4\027\ufef4\030\ufef4\031\ufef4\032\ufef4" +
    "\033\ufef4\034\ufef4\035\ufef4\036\ufef4\037\ufef4\040\ufef4\043" +
    "\ufef4\044\ufef4\045\ufef4\046\ufef4\047\ufef4\050\ufef4\051\ufef4" +
    "\052\ufef4\053\ufef4\054\ufef4\055\ufef4\056\ufef4\057\ufef4\060" +
    "\ufef4\061\ufef4\062\ufef4\063\ufef4\064\ufef4\065\ufef4\066\ufef4" +
    "\067\ufef4\070\ufef4\071\ufef4\072\ufef4\073\ufef4\074\ufef4\075" +
    "\ufef4\076\ufef4\077\ufef4\100\ufef4\101\ufef4\001\002\000\172" +
    "\004\ufee9\005\ufee9\006\ufee9\007\ufee9\010\ufee9\011\ufee9\012" +
    "\ufee9\013\ufee9\014\ufee9\015\ufee9\016\ufee9\017\ufee9\020\ufee9" +
    "\021\ufee9\022\ufee9\023\ufee9\024\ufee9\025\ufee9\026\ufee9\027" +
    "\ufee9\030\ufee9\031\ufee9\032\ufee9\033\ufee9\034\ufee9\035\ufee9" +
    "\036\ufee9\037\ufee9\040\ufee9\043\ufee9\044\ufee9\045\ufee9\046" +
    "\ufee9\047\ufee9\050\ufee9\051\ufee9\052\ufee9\053\ufee9\054\ufee9" +
    "\055\ufee9\056\ufee9\057\ufee9\060\ufee9\061\ufee9\062\ufee9\063" +
    "\ufee9\064\ufee9\065\ufee9\066\ufee9\067\ufee9\070\ufee9\071\ufee9" +
    "\072\ufee9\073\ufee9\074\ufee9\075\ufee9\076\ufee9\077\ufee9\100" +
    "\ufee9\101\ufee9\001\002\000\172\004\uff05\005\uff05\006\uff05" +
    "\007\uff05\010\uff05\011\uff05\012\uff05\013\uff05\014\uff05\015" +
    "\uff05\016\uff05\017\uff05\020\uff05\021\uff05\022\uff05\023\uff05" +
    "\024\uff05\025\uff05\026\uff05\027\uff05\030\uff05\031\uff05\032" +
    "\uff05\033\uff05\034\uff05\035\uff05\036\uff05\037\uff05\040\uff05" +
    "\043\uff05\044\uff05\045\uff05\046\uff05\047\uff05\050\uff05\051" +
    "\uff05\052\uff05\053\uff05\054\uff05\055\uff05\056\uff05\057\uff05" +
    "\060\uff05\061\uff05\062\uff05\063\uff05\064\uff05\065\uff05\066" +
    "\uff05\067\uff05\070\uff05\071\uff05\072\uff05\073\uff05\074\uff05" +
    "\075\uff05\076\uff05\077\uff05\100\uff05\101\uff05\001\002\000" +
    "\172\004\ufee8\005\ufee8\006\ufee8\007\ufee8\010\ufee8\011\ufee8" +
    "\012\ufee8\013\ufee8\014\ufee8\015\ufee8\016\ufee8\017\ufee8\020" +
    "\ufee8\021\ufee8\022\ufee8\023\ufee8\024\ufee8\025\ufee8\026\ufee8" +
    "\027\ufee8\030\ufee8\031\ufee8\032\ufee8\033\ufee8\034\ufee8\035" +
    "\ufee8\036\ufee8\037\ufee8\040\ufee8\043\ufee8\044\ufee8\045\ufee8" +
    "\046\ufee8\047\ufee8\050\ufee8\051\ufee8\052\ufee8\053\ufee8\054" +
    "\ufee8\055\ufee8\056\ufee8\057\ufee8\060\ufee8\061\ufee8\062\ufee8" +
    "\063\ufee8\064\ufee8\065\ufee8\066\ufee8\067\ufee8\070\ufee8\071" +
    "\ufee8\072\ufee8\073\ufee8\074\ufee8\075\ufee8\076\ufee8\077\ufee8" +
    "\100\ufee8\101\ufee8\001\002\000\172\004\ufedc\005\ufedc\006" +
    "\ufedc\007\ufedc\010\ufedc\011\ufedc\012\ufedc\013\ufedc\014\ufedc" +
    "\015\ufedc\016\ufedc\017\ufedc\020\ufedc\021\ufedc\022\ufedc\023" +
    "\ufedc\024\ufedc\025\ufedc\026\ufedc\027\ufedc\030\ufedc\031\ufedc" +
    "\032\ufedc\033\ufedc\034\ufedc\035\ufedc\036\ufedc\037\ufedc\040" +
    "\ufedc\043\ufedc\044\ufedc\045\ufedc\046\ufedc\047\ufedc\050\ufedc" +
    "\051\ufedc\052\ufedc\053\ufedc\054\ufedc\055\ufedc\056\ufedc\057" +
    "\ufedc\060\ufedc\061\ufedc\062\ufedc\063\ufedc\064\ufedc\065\ufedc" +
    "\066\ufedc\067\ufedc\070\ufedc\071\ufedc\072\ufedc\073\ufedc\074" +
    "\ufedc\075\ufedc\076\ufedc\077\ufedc\100\ufedc\101\ufedc\001\002" +
    "\000\172\004\ufed4\005\ufed4\006\ufed4\007\ufed4\010\ufed4\011" +
    "\ufed4\012\ufed4\013\ufed4\014\ufed4\015\ufed4\016\ufed4\017\ufed4" +
    "\020\ufed4\021\ufed4\022\ufed4\023\ufed4\024\ufed4\025\ufed4\026" +
    "\ufed4\027\ufed4\030\ufed4\031\ufed4\032\ufed4\033\ufed4\034\ufed4" +
    "\035\ufed4\036\ufed4\037\ufed4\040\ufed4\043\ufed4\044\ufed4\045" +
    "\ufed4\046\ufed4\047\ufed4\050\ufed4\051\ufed4\052\ufed4\053\ufed4" +
    "\054\ufed4\055\ufed4\056\ufed4\057\ufed4\060\ufed4\061\ufed4\062" +
    "\ufed4\063\ufed4\064\ufed4\065\ufed4\066\ufed4\067\ufed4\070\ufed4" +
    "\071\ufed4\072\ufed4\073\ufed4\074\ufed4\075\ufed4\076\ufed4\077" +
    "\ufed4\100\ufed4\101\ufed4\001\002\000\172\004\ufeec\005\ufeec" +
    "\006\ufeec\007\ufeec\010\ufeec\011\ufeec\012\ufeec\013\ufeec\014" +
    "\ufeec\015\ufeec\016\ufeec\017\ufeec\020\ufeec\021\ufeec\022\ufeec" +
    "\023\ufeec\024\ufeec\025\ufeec\026\ufeec\027\ufeec\030\ufeec\031" +
    "\ufeec\032\ufeec\033\ufeec\034\ufeec\035\ufeec\036\ufeec\037\ufeec" +
    "\040\ufeec\043\ufeec\044\ufeec\045\ufeec\046\ufeec\047\ufeec\050" +
    "\ufeec\051\ufeec\052\ufeec\053\ufeec\054\ufeec\055\ufeec\056\ufeec" +
    "\057\ufeec\060\ufeec\061\ufeec\062\ufeec\063\ufeec\064\ufeec\065" +
    "\ufeec\066\ufeec\067\ufeec\070\ufeec\071\ufeec\072\ufeec\073\ufeec" +
    "\074\ufeec\075\ufeec\076\ufeec\077\ufeec\100\ufeec\101\ufeec\001" +
    "\002\000\172\004\ufed9\005\ufed9\006\ufed9\007\ufed9\010\ufed9" +
    "\011\ufed9\012\ufed9\013\ufed9\014\ufed9\015\ufed9\016\ufed9\017" +
    "\ufed9\020\ufed9\021\ufed9\022\ufed9\023\ufed9\024\ufed9\025\ufed9" +
    "\026\ufed9\027\ufed9\030\ufed9\031\ufed9\032\ufed9\033\ufed9\034" +
    "\ufed9\035\ufed9\036\ufed9\037\ufed9\040\ufed9\043\ufed9\044\ufed9" +
    "\045\ufed9\046\ufed9\047\ufed9\050\ufed9\051\ufed9\052\ufed9\053" +
    "\ufed9\054\ufed9\055\ufed9\056\ufed9\057\ufed9\060\ufed9\061\ufed9" +
    "\062\ufed9\063\ufed9\064\ufed9\065\ufed9\066\ufed9\067\ufed9\070" +
    "\ufed9\071\ufed9\072\ufed9\073\ufed9\074\ufed9\075\ufed9\076\ufed9" +
    "\077\ufed9\100\ufed9\101\ufed9\001\002\000\172\004\ufef2\005" +
    "\ufef2\006\ufef2\007\ufef2\010\ufef2\011\ufef2\012\ufef2\013\ufef2" +
    "\014\ufef2\015\ufef2\016\ufef2\017\ufef2\020\ufef2\021\ufef2\022" +
    "\ufef2\023\ufef2\024\ufef2\025\ufef2\026\ufef2\027\ufef2\030\ufef2" +
    "\031\ufef2\032\ufef2\033\ufef2\034\ufef2\035\ufef2\036\ufef2\037" +
    "\ufef2\040\ufef2\043\ufef2\044\ufef2\045\ufef2\046\ufef2\047\ufef2" +
    "\050\ufef2\051\ufef2\052\ufef2\053\ufef2\054\ufef2\055\ufef2\056" +
    "\ufef2\057\ufef2\060\ufef2\061\ufef2\062\ufef2\063\ufef2\064\ufef2" +
    "\065\ufef2\066\ufef2\067\ufef2\070\ufef2\071\ufef2\072\ufef2\073" +
    "\ufef2\074\ufef2\075\ufef2\076\ufef2\077\ufef2\100\ufef2\101\ufef2" +
    "\001\002\000\172\004\ufeee\005\ufeee\006\ufeee\007\ufeee\010" +
    "\ufeee\011\ufeee\012\ufeee\013\ufeee\014\ufeee\015\ufeee\016\ufeee" +
    "\017\ufeee\020\ufeee\021\ufeee\022\ufeee\023\ufeee\024\ufeee\025" +
    "\ufeee\026\ufeee\027\ufeee\030\ufeee\031\ufeee\032\ufeee\033\ufeee" +
    "\034\ufeee\035\ufeee\036\ufeee\037\ufeee\040\ufeee\043\ufeee\044" +
    "\ufeee\045\ufeee\046\ufeee\047\ufeee\050\ufeee\051\ufeee\052\ufeee" +
    "\053\ufeee\054\ufeee\055\ufeee\056\ufeee\057\ufeee\060\ufeee\061" +
    "\ufeee\062\ufeee\063\ufeee\064\ufeee\065\ufeee\066\ufeee\067\ufeee" +
    "\070\ufeee\071\ufeee\072\ufeee\073\ufeee\074\ufeee\075\ufeee\076" +
    "\ufeee\077\ufeee\100\ufeee\101\ufeee\001\002\000\172\004\ufef7" +
    "\005\ufef7\006\ufef7\007\ufef7\010\ufef7\011\ufef7\012\ufef7\013" +
    "\ufef7\014\ufef7\015\ufef7\016\ufef7\017\ufef7\020\ufef7\021\ufef7" +
    "\022\ufef7\023\ufef7\024\ufef7\025\ufef7\026\ufef7\027\ufef7\030" +
    "\ufef7\031\ufef7\032\ufef7\033\ufef7\034\ufef7\035\ufef7\036\ufef7" +
    "\037\ufef7\040\ufef7\043\ufef7\044\ufef7\045\ufef7\046\ufef7\047" +
    "\ufef7\050\ufef7\051\ufef7\052\ufef7\053\ufef7\054\ufef7\055\ufef7" +
    "\056\ufef7\057\ufef7\060\ufef7\061\ufef7\062\ufef7\063\ufef7\064" +
    "\ufef7\065\ufef7\066\ufef7\067\ufef7\070\ufef7\071\ufef7\072\ufef7" +
    "\073\ufef7\074\ufef7\075\ufef7\076\ufef7\077\ufef7\100\ufef7\101" +
    "\ufef7\001\002\000\172\004\ufefd\005\ufefd\006\ufefd\007\ufefd" +
    "\010\ufefd\011\ufefd\012\ufefd\013\ufefd\014\ufefd\015\ufefd\016" +
    "\ufefd\017\ufefd\020\ufefd\021\ufefd\022\ufefd\023\ufefd\024\ufefd" +
    "\025\ufefd\026\ufefd\027\ufefd\030\ufefd\031\ufefd\032\ufefd\033" +
    "\ufefd\034\ufefd\035\ufefd\036\ufefd\037\ufefd\040\ufefd\043\ufefd" +
    "\044\ufefd\045\ufefd\046\ufefd\047\ufefd\050\ufefd\051\ufefd\052" +
    "\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd" +
    "\061\ufefd\062\ufefd\063\ufefd\064\ufefd\065\ufefd\066\ufefd\067" +
    "\ufefd\070\ufefd\071\ufefd\072\ufefd\073\ufefd\074\ufefd\075\ufefd" +
    "\076\ufefd\077\ufefd\100\ufefd\101\ufefd\001\002\000\172\004" +
    "\ufefa\005\ufefa\006\ufefa\007\ufefa\010\ufefa\011\ufefa\012\ufefa" +
    "\013\ufefa\014\ufefa\015\ufefa\016\ufefa\017\ufefa\020\ufefa\021" +
    "\ufefa\022\ufefa\023\ufefa\024\ufefa\025\ufefa\026\ufefa\027\ufefa" +
    "\030\ufefa\031\ufefa\032\ufefa\033\ufefa\034\ufefa\035\ufefa\036" +
    "\ufefa\037\ufefa\040\ufefa\043\ufefa\044\ufefa\045\ufefa\046\ufefa" +
    "\047\ufefa\050\ufefa\051\ufefa\052\ufefa\053\ufefa\054\ufefa\055" +
    "\ufefa\056\ufefa\057\ufefa\060\ufefa\061\ufefa\062\ufefa\063\ufefa" +
    "\064\ufefa\065\ufefa\066\ufefa\067\ufefa\070\ufefa\071\ufefa\072" +
    "\ufefa\073\ufefa\074\ufefa\075\ufefa\076\ufefa\077\ufefa\100\ufefa" +
    "\101\ufefa\001\002\000\172\004\ufefb\005\ufefb\006\ufefb\007" +
    "\ufefb\010\ufefb\011\ufefb\012\ufefb\013\ufefb\014\ufefb\015\ufefb" +
    "\016\ufefb\017\ufefb\020\ufefb\021\ufefb\022\ufefb\023\ufefb\024" +
    "\ufefb\025\ufefb\026\ufefb\027\ufefb\030\ufefb\031\ufefb\032\ufefb" +
    "\033\ufefb\034\ufefb\035\ufefb\036\ufefb\037\ufefb\040\ufefb\043" +
    "\ufefb\044\ufefb\045\ufefb\046\ufefb\047\ufefb\050\ufefb\051\ufefb" +
    "\052\ufefb\053\ufefb\054\ufefb\055\ufefb\056\ufefb\057\ufefb\060" +
    "\ufefb\061\ufefb\062\ufefb\063\ufefb\064\ufefb\065\ufefb\066\ufefb" +
    "\067\ufefb\070\ufefb\071\ufefb\072\ufefb\073\ufefb\074\ufefb\075" +
    "\ufefb\076\ufefb\077\ufefb\100\ufefb\101\ufefb\001\002\000\172" +
    "\004\ufedd\005\ufedd\006\ufedd\007\ufedd\010\ufedd\011\ufedd\012" +
    "\ufedd\013\ufedd\014\ufedd\015\ufedd\016\ufedd\017\ufedd\020\ufedd" +
    "\021\ufedd\022\ufedd\023\ufedd\024\ufedd\025\ufedd\026\ufedd\027" +
    "\ufedd\030\ufedd\031\ufedd\032\ufedd\033\ufedd\034\ufedd\035\ufedd" +
    "\036\ufedd\037\ufedd\040\ufedd\043\ufedd\044\ufedd\045\ufedd\046" +
    "\ufedd\047\ufedd\050\ufedd\051\ufedd\052\ufedd\053\ufedd\054\ufedd" +
    "\055\ufedd\056\ufedd\057\ufedd\060\ufedd\061\ufedd\062\ufedd\063" +
    "\ufedd\064\ufedd\065\ufedd\066\ufedd\067\ufedd\070\ufedd\071\ufedd" +
    "\072\ufedd\073\ufedd\074\ufedd\075\ufedd\076\ufedd\077\ufedd\100" +
    "\ufedd\101\ufedd\001\002\000\172\004\ufecd\005\ufecd\006\ufecd" +
    "\007\ufecd\010\ufecd\011\ufecd\012\ufecd\013\ufecd\014\ufecd\015" +
    "\ufecd\016\ufecd\017\ufecd\020\ufecd\021\ufecd\022\ufecd\023\ufecd" +
    "\024\ufecd\025\ufecd\026\ufecd\027\ufecd\030\ufecd\031\ufecd\032" +
    "\ufecd\033\ufecd\034\ufecd\035\ufecd\036\ufecd\037\ufecd\040\ufecd" +
    "\043\ufecd\044\ufecd\045\ufecd\046\ufecd\047\ufecd\050\ufecd\051" +
    "\ufecd\052\ufecd\053\ufecd\054\ufecd\055\ufecd\056\ufecd\057\ufecd" +
    "\060\ufecd\061\ufecd\062\ufecd\063\ufecd\064\ufecd\065\ufecd\066" +
    "\ufecd\067\ufecd\070\ufecd\071\ufecd\072\ufecd\073\ufecd\074\ufecd" +
    "\075\ufecd\076\ufecd\077\ufecd\100\ufecd\101\ufecd\001\002\000" +
    "\172\004\ufee1\005\ufee1\006\ufee1\007\ufee1\010\ufee1\011\ufee1" +
    "\012\ufee1\013\ufee1\014\ufee1\015\ufee1\016\ufee1\017\ufee1\020" +
    "\ufee1\021\ufee1\022\ufee1\023\ufee1\024\ufee1\025\ufee1\026\ufee1" +
    "\027\ufee1\030\ufee1\031\ufee1\032\ufee1\033\ufee1\034\ufee1\035" +
    "\ufee1\036\ufee1\037\ufee1\040\ufee1\043\ufee1\044\ufee1\045\ufee1" +
    "\046\ufee1\047\ufee1\050\ufee1\051\ufee1\052\ufee1\053\ufee1\054" +
    "\ufee1\055\ufee1\056\ufee1\057\ufee1\060\ufee1\061\ufee1\062\ufee1" +
    "\063\ufee1\064\ufee1\065\ufee1\066\ufee1\067\ufee1\070\ufee1\071" +
    "\ufee1\072\ufee1\073\ufee1\074\ufee1\075\ufee1\076\ufee1\077\ufee1" +
    "\100\ufee1\101\ufee1\001\002\000\172\004\ufedb\005\ufedb\006" +
    "\ufedb\007\ufedb\010\ufedb\011\ufedb\012\ufedb\013\ufedb\014\ufedb" +
    "\015\ufedb\016\ufedb\017\ufedb\020\ufedb\021\ufedb\022\ufedb\023" +
    "\ufedb\024\ufedb\025\ufedb\026\ufedb\027\ufedb\030\ufedb\031\ufedb" +
    "\032\ufedb\033\ufedb\034\ufedb\035\ufedb\036\ufedb\037\ufedb\040" +
    "\ufedb\043\ufedb\044\ufedb\045\ufedb\046\ufedb\047\ufedb\050\ufedb" +
    "\051\ufedb\052\ufedb\053\ufedb\054\ufedb\055\ufedb\056\ufedb\057" +
    "\ufedb\060\ufedb\061\ufedb\062\ufedb\063\ufedb\064\ufedb\065\ufedb" +
    "\066\ufedb\067\ufedb\070\ufedb\071\ufedb\072\ufedb\073\ufedb\074" +
    "\ufedb\075\ufedb\076\ufedb\077\ufedb\100\ufedb\101\ufedb\001\002" +
    "\000\172\004\ufed5\005\ufed5\006\ufed5\007\ufed5\010\ufed5\011" +
    "\ufed5\012\ufed5\013\ufed5\014\ufed5\015\ufed5\016\ufed5\017\ufed5" +
    "\020\ufed5\021\ufed5\022\ufed5\023\ufed5\024\ufed5\025\ufed5\026" +
    "\ufed5\027\ufed5\030\ufed5\031\ufed5\032\ufed5\033\ufed5\034\ufed5" +
    "\035\ufed5\036\ufed5\037\ufed5\040\ufed5\043\ufed5\044\ufed5\045" +
    "\ufed5\046\ufed5\047\ufed5\050\ufed5\051\ufed5\052\ufed5\053\ufed5" +
    "\054\ufed5\055\ufed5\056\ufed5\057\ufed5\060\ufed5\061\ufed5\062" +
    "\ufed5\063\ufed5\064\ufed5\065\ufed5\066\ufed5\067\ufed5\070\ufed5" +
    "\071\ufed5\072\ufed5\073\ufed5\074\ufed5\075\ufed5\076\ufed5\077" +
    "\ufed5\100\ufed5\101\ufed5\001\002\000\172\004\ufed3\005\ufed3" +
    "\006\ufed3\007\ufed3\010\ufed3\011\ufed3\012\ufed3\013\ufed3\014" +
    "\ufed3\015\ufed3\016\ufed3\017\ufed3\020\ufed3\021\ufed3\022\ufed3" +
    "\023\ufed3\024\ufed3\025\ufed3\026\ufed3\027\ufed3\030\ufed3\031" +
    "\ufed3\032\ufed3\033\ufed3\034\ufed3\035\ufed3\036\ufed3\037\ufed3" +
    "\040\ufed3\043\ufed3\044\ufed3\045\ufed3\046\ufed3\047\ufed3\050" +
    "\ufed3\051\ufed3\052\ufed3\053\ufed3\054\ufed3\055\ufed3\056\ufed3" +
    "\057\ufed3\060\ufed3\061\ufed3\062\ufed3\063\ufed3\064\ufed3\065" +
    "\ufed3\066\ufed3\067\ufed3\070\ufed3\071\ufed3\072\ufed3\073\ufed3" +
    "\074\ufed3\075\ufed3\076\ufed3\077\ufed3\100\ufed3\101\ufed3\001" +
    "\002\000\172\004\ufee2\005\ufee2\006\ufee2\007\ufee2\010\ufee2" +
    "\011\ufee2\012\ufee2\013\ufee2\014\ufee2\015\ufee2\016\ufee2\017" +
    "\ufee2\020\ufee2\021\ufee2\022\ufee2\023\ufee2\024\ufee2\025\ufee2" +
    "\026\ufee2\027\ufee2\030\ufee2\031\ufee2\032\ufee2\033\ufee2\034" +
    "\ufee2\035\ufee2\036\ufee2\037\ufee2\040\ufee2\043\ufee2\044\ufee2" +
    "\045\ufee2\046\ufee2\047\ufee2\050\ufee2\051\ufee2\052\ufee2\053" +
    "\ufee2\054\ufee2\055\ufee2\056\ufee2\057\ufee2\060\ufee2\061\ufee2" +
    "\062\ufee2\063\ufee2\064\ufee2\065\ufee2\066\ufee2\067\ufee2\070" +
    "\ufee2\071\ufee2\072\ufee2\073\ufee2\074\ufee2\075\ufee2\076\ufee2" +
    "\077\ufee2\100\ufee2\101\ufee2\001\002\000\172\004\ufed8\005" +
    "\ufed8\006\ufed8\007\ufed8\010\ufed8\011\ufed8\012\ufed8\013\ufed8" +
    "\014\ufed8\015\ufed8\016\ufed8\017\ufed8\020\ufed8\021\ufed8\022" +
    "\ufed8\023\ufed8\024\ufed8\025\ufed8\026\ufed8\027\ufed8\030\ufed8" +
    "\031\ufed8\032\ufed8\033\ufed8\034\ufed8\035\ufed8\036\ufed8\037" +
    "\ufed8\040\ufed8\043\ufed8\044\ufed8\045\ufed8\046\ufed8\047\ufed8" +
    "\050\ufed8\051\ufed8\052\ufed8\053\ufed8\054\ufed8\055\ufed8\056" +
    "\ufed8\057\ufed8\060\ufed8\061\ufed8\062\ufed8\063\ufed8\064\ufed8" +
    "\065\ufed8\066\ufed8\067\ufed8\070\ufed8\071\ufed8\072\ufed8\073" +
    "\ufed8\074\ufed8\075\ufed8\076\ufed8\077\ufed8\100\ufed8\101\ufed8" +
    "\001\002\000\172\004\uff03\005\uff03\006\uff03\007\uff03\010" +
    "\uff03\011\uff03\012\uff03\013\uff03\014\uff03\015\uff03\016\uff03" +
    "\017\uff03\020\uff03\021\uff03\022\uff03\023\uff03\024\uff03\025" +
    "\uff03\026\uff03\027\uff03\030\uff03\031\uff03\032\uff03\033\uff03" +
    "\034\uff03\035\uff03\036\uff03\037\uff03\040\uff03\043\uff03\044" +
    "\uff03\045\uff03\046\uff03\047\uff03\050\uff03\051\uff03\052\uff03" +
    "\053\uff03\054\uff03\055\uff03\056\uff03\057\uff03\060\uff03\061" +
    "\uff03\062\uff03\063\uff03\064\uff03\065\uff03\066\uff03\067\uff03" +
    "\070\uff03\071\uff03\072\uff03\073\uff03\074\uff03\075\uff03\076" +
    "\uff03\077\uff03\100\uff03\101\uff03\001\002\000\172\004\ufeda" +
    "\005\ufeda\006\ufeda\007\ufeda\010\ufeda\011\ufeda\012\ufeda\013" +
    "\ufeda\014\ufeda\015\ufeda\016\ufeda\017\ufeda\020\ufeda\021\ufeda" +
    "\022\ufeda\023\ufeda\024\ufeda\025\ufeda\026\ufeda\027\ufeda\030" +
    "\ufeda\031\ufeda\032\ufeda\033\ufeda\034\ufeda\035\ufeda\036\ufeda" +
    "\037\ufeda\040\ufeda\043\ufeda\044\ufeda\045\ufeda\046\ufeda\047" +
    "\ufeda\050\ufeda\051\ufeda\052\ufeda\053\ufeda\054\ufeda\055\ufeda" +
    "\056\ufeda\057\ufeda\060\ufeda\061\ufeda\062\ufeda\063\ufeda\064" +
    "\ufeda\065\ufeda\066\ufeda\067\ufeda\070\ufeda\071\ufeda\072\ufeda" +
    "\073\ufeda\074\ufeda\075\ufeda\076\ufeda\077\ufeda\100\ufeda\101" +
    "\ufeda\001\002\000\172\004\ufefc\005\ufefc\006\ufefc\007\ufefc" +
    "\010\ufefc\011\ufefc\012\ufefc\013\ufefc\014\ufefc\015\ufefc\016" +
    "\ufefc\017\ufefc\020\ufefc\021\ufefc\022\ufefc\023\ufefc\024\ufefc" +
    "\025\ufefc\026\ufefc\027\ufefc\030\ufefc\031\ufefc\032\ufefc\033" +
    "\ufefc\034\ufefc\035\ufefc\036\ufefc\037\ufefc\040\ufefc\043\ufefc" +
    "\044\ufefc\045\ufefc\046\ufefc\047\ufefc\050\ufefc\051\ufefc\052" +
    "\ufefc\053\ufefc\054\ufefc\055\ufefc\056\ufefc\057\ufefc\060\ufefc" +
    "\061\ufefc\062\ufefc\063\ufefc\064\ufefc\065\ufefc\066\ufefc\067" +
    "\ufefc\070\ufefc\071\ufefc\072\ufefc\073\ufefc\074\ufefc\075\ufefc" +
    "\076\ufefc\077\ufefc\100\ufefc\101\ufefc\001\002\000\172\004" +
    "\ufee0\005\ufee0\006\ufee0\007\ufee0\010\ufee0\011\ufee0\012\ufee0" +
    "\013\ufee0\014\ufee0\015\ufee0\016\ufee0\017\ufee0\020\ufee0\021" +
    "\ufee0\022\ufee0\023\ufee0\024\ufee0\025\ufee0\026\ufee0\027\ufee0" +
    "\030\ufee0\031\ufee0\032\ufee0\033\ufee0\034\ufee0\035\ufee0\036" +
    "\ufee0\037\ufee0\040\ufee0\043\ufee0\044\ufee0\045\ufee0\046\ufee0" +
    "\047\ufee0\050\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055" +
    "\ufee0\056\ufee0\057\ufee0\060\ufee0\061\ufee0\062\ufee0\063\ufee0" +
    "\064\ufee0\065\ufee0\066\ufee0\067\ufee0\070\ufee0\071\ufee0\072" +
    "\ufee0\073\ufee0\074\ufee0\075\ufee0\076\ufee0\077\ufee0\100\ufee0" +
    "\101\ufee0\001\002\000\172\004\ufee4\005\ufee4\006\ufee4\007" +
    "\ufee4\010\ufee4\011\ufee4\012\ufee4\013\ufee4\014\ufee4\015\ufee4" +
    "\016\ufee4\017\ufee4\020\ufee4\021\ufee4\022\ufee4\023\ufee4\024" +
    "\ufee4\025\ufee4\026\ufee4\027\ufee4\030\ufee4\031\ufee4\032\ufee4" +
    "\033\ufee4\034\ufee4\035\ufee4\036\ufee4\037\ufee4\040\ufee4\043" +
    "\ufee4\044\ufee4\045\ufee4\046\ufee4\047\ufee4\050\ufee4\051\ufee4" +
    "\052\ufee4\053\ufee4\054\ufee4\055\ufee4\056\ufee4\057\ufee4\060" +
    "\ufee4\061\ufee4\062\ufee4\063\ufee4\064\ufee4\065\ufee4\066\ufee4" +
    "\067\ufee4\070\ufee4\071\ufee4\072\ufee4\073\ufee4\074\ufee4\075" +
    "\ufee4\076\ufee4\077\ufee4\100\ufee4\101\ufee4\001\002\000\172" +
    "\004\uff04\005\uff04\006\uff04\007\uff04\010\uff04\011\uff04\012" +
    "\uff04\013\uff04\014\uff04\015\uff04\016\uff04\017\uff04\020\uff04" +
    "\021\uff04\022\uff04\023\uff04\024\uff04\025\uff04\026\uff04\027" +
    "\uff04\030\uff04\031\uff04\032\uff04\033\uff04\034\uff04\035\uff04" +
    "\036\uff04\037\uff04\040\uff04\043\uff04\044\uff04\045\uff04\046" +
    "\uff04\047\uff04\050\uff04\051\uff04\052\uff04\053\uff04\054\uff04" +
    "\055\uff04\056\uff04\057\uff04\060\uff04\061\uff04\062\uff04\063" +
    "\uff04\064\uff04\065\uff04\066\uff04\067\uff04\070\uff04\071\uff04" +
    "\072\uff04\073\uff04\074\uff04\075\uff04\076\uff04\077\uff04\100" +
    "\uff04\101\uff04\001\002\000\172\004\ufef8\005\ufef8\006\ufef8" +
    "\007\ufef8\010\ufef8\011\ufef8\012\ufef8\013\ufef8\014\ufef8\015" +
    "\ufef8\016\ufef8\017\ufef8\020\ufef8\021\ufef8\022\ufef8\023\ufef8" +
    "\024\ufef8\025\ufef8\026\ufef8\027\ufef8\030\ufef8\031\ufef8\032" +
    "\ufef8\033\ufef8\034\ufef8\035\ufef8\036\ufef8\037\ufef8\040\ufef8" +
    "\043\ufef8\044\ufef8\045\ufef8\046\ufef8\047\ufef8\050\ufef8\051" +
    "\ufef8\052\ufef8\053\ufef8\054\ufef8\055\ufef8\056\ufef8\057\ufef8" +
    "\060\ufef8\061\ufef8\062\ufef8\063\ufef8\064\ufef8\065\ufef8\066" +
    "\ufef8\067\ufef8\070\ufef8\071\ufef8\072\ufef8\073\ufef8\074\ufef8" +
    "\075\ufef8\076\ufef8\077\ufef8\100\ufef8\101\ufef8\001\002\000" +
    "\172\004\ufefe\005\ufefe\006\ufefe\007\ufefe\010\ufefe\011\ufefe" +
    "\012\ufefe\013\ufefe\014\ufefe\015\ufefe\016\ufefe\017\ufefe\020" +
    "\ufefe\021\ufefe\022\ufefe\023\ufefe\024\ufefe\025\ufefe\026\ufefe" +
    "\027\ufefe\030\ufefe\031\ufefe\032\ufefe\033\ufefe\034\ufefe\035" +
    "\ufefe\036\ufefe\037\ufefe\040\ufefe\043\ufefe\044\ufefe\045\ufefe" +
    "\046\ufefe\047\ufefe\050\ufefe\051\ufefe\052\ufefe\053\ufefe\054" +
    "\ufefe\055\ufefe\056\ufefe\057\ufefe\060\ufefe\061\ufefe\062\ufefe" +
    "\063\ufefe\064\ufefe\065\ufefe\066\ufefe\067\ufefe\070\ufefe\071" +
    "\ufefe\072\ufefe\073\ufefe\074\ufefe\075\ufefe\076\ufefe\077\ufefe" +
    "\100\ufefe\101\ufefe\001\002\000\172\004\ufede\005\ufede\006" +
    "\ufede\007\ufede\010\ufede\011\ufede\012\ufede\013\ufede\014\ufede" +
    "\015\ufede\016\ufede\017\ufede\020\ufede\021\ufede\022\ufede\023" +
    "\ufede\024\ufede\025\ufede\026\ufede\027\ufede\030\ufede\031\ufede" +
    "\032\ufede\033\ufede\034\ufede\035\ufede\036\ufede\037\ufede\040" +
    "\ufede\043\ufede\044\ufede\045\ufede\046\ufede\047\ufede\050\ufede" +
    "\051\ufede\052\ufede\053\ufede\054\ufede\055\ufede\056\ufede\057" +
    "\ufede\060\ufede\061\ufede\062\ufede\063\ufede\064\ufede\065\ufede" +
    "\066\ufede\067\ufede\070\ufede\071\ufede\072\ufede\073\ufede\074" +
    "\ufede\075\ufede\076\ufede\077\ufede\100\ufede\101\ufede\001\002" +
    "\000\172\004\ufecc\005\ufecc\006\ufecc\007\ufecc\010\ufecc\011" +
    "\ufecc\012\ufecc\013\ufecc\014\ufecc\015\ufecc\016\ufecc\017\ufecc" +
    "\020\ufecc\021\ufecc\022\ufecc\023\ufecc\024\ufecc\025\ufecc\026" +
    "\ufecc\027\ufecc\030\ufecc\031\ufecc\032\ufecc\033\ufecc\034\ufecc" +
    "\035\ufecc\036\ufecc\037\ufecc\040\ufecc\043\ufecc\044\ufecc\045" +
    "\ufecc\046\ufecc\047\ufecc\050\ufecc\051\ufecc\052\ufecc\053\ufecc" +
    "\054\ufecc\055\ufecc\056\ufecc\057\ufecc\060\ufecc\061\ufecc\062" +
    "\ufecc\063\ufecc\064\ufecc\065\ufecc\066\ufecc\067\ufecc\070\ufecc" +
    "\071\ufecc\072\ufecc\073\ufecc\074\ufecc\075\ufecc\076\ufecc\077" +
    "\ufecc\100\ufecc\101\ufecc\001\002\000\172\004\ufed1\005\ufed1" +
    "\006\ufed1\007\ufed1\010\ufed1\011\ufed1\012\ufed1\013\ufed1\014" +
    "\ufed1\015\ufed1\016\ufed1\017\ufed1\020\ufed1\021\ufed1\022\ufed1" +
    "\023\ufed1\024\ufed1\025\ufed1\026\ufed1\027\ufed1\030\ufed1\031" +
    "\ufed1\032\ufed1\033\ufed1\034\ufed1\035\ufed1\036\ufed1\037\ufed1" +
    "\040\ufed1\043\ufed1\044\ufed1\045\ufed1\046\ufed1\047\ufed1\050" +
    "\ufed1\051\ufed1\052\ufed1\053\ufed1\054\ufed1\055\ufed1\056\ufed1" +
    "\057\ufed1\060\ufed1\061\ufed1\062\ufed1\063\ufed1\064\ufed1\065" +
    "\ufed1\066\ufed1\067\ufed1\070\ufed1\071\ufed1\072\ufed1\073\ufed1" +
    "\074\ufed1\075\ufed1\076\ufed1\077\ufed1\100\ufed1\101\ufed1\001" +
    "\002\000\172\004\ufed2\005\ufed2\006\ufed2\007\ufed2\010\ufed2" +
    "\011\ufed2\012\ufed2\013\ufed2\014\ufed2\015\ufed2\016\ufed2\017" +
    "\ufed2\020\ufed2\021\ufed2\022\ufed2\023\ufed2\024\ufed2\025\ufed2" +
    "\026\ufed2\027\ufed2\030\ufed2\031\ufed2\032\ufed2\033\ufed2\034" +
    "\ufed2\035\ufed2\036\ufed2\037\ufed2\040\ufed2\043\ufed2\044\ufed2" +
    "\045\ufed2\046\ufed2\047\ufed2\050\ufed2\051\ufed2\052\ufed2\053" +
    "\ufed2\054\ufed2\055\ufed2\056\ufed2\057\ufed2\060\ufed2\061\ufed2" +
    "\062\ufed2\063\ufed2\064\ufed2\065\ufed2\066\ufed2\067\ufed2\070" +
    "\ufed2\071\ufed2\072\ufed2\073\ufed2\074\ufed2\075\ufed2\076\ufed2" +
    "\077\ufed2\100\ufed2\101\ufed2\001\002\000\172\004\ufef0\005" +
    "\ufef0\006\ufef0\007\ufef0\010\ufef0\011\ufef0\012\ufef0\013\ufef0" +
    "\014\ufef0\015\ufef0\016\ufef0\017\ufef0\020\ufef0\021\ufef0\022" +
    "\ufef0\023\ufef0\024\ufef0\025\ufef0\026\ufef0\027\ufef0\030\ufef0" +
    "\031\ufef0\032\ufef0\033\ufef0\034\ufef0\035\ufef0\036\ufef0\037" +
    "\ufef0\040\ufef0\043\ufef0\044\ufef0\045\ufef0\046\ufef0\047\ufef0" +
    "\050\ufef0\051\ufef0\052\ufef0\053\ufef0\054\ufef0\055\ufef0\056" +
    "\ufef0\057\ufef0\060\ufef0\061\ufef0\062\ufef0\063\ufef0\064\ufef0" +
    "\065\ufef0\066\ufef0\067\ufef0\070\ufef0\071\ufef0\072\ufef0\073" +
    "\ufef0\074\ufef0\075\ufef0\076\ufef0\077\ufef0\100\ufef0\101\ufef0" +
    "\001\002\000\172\004\ufef9\005\ufef9\006\ufef9\007\ufef9\010" +
    "\ufef9\011\ufef9\012\ufef9\013\ufef9\014\ufef9\015\ufef9\016\ufef9" +
    "\017\ufef9\020\ufef9\021\ufef9\022\ufef9\023\ufef9\024\ufef9\025" +
    "\ufef9\026\ufef9\027\ufef9\030\ufef9\031\ufef9\032\ufef9\033\ufef9" +
    "\034\ufef9\035\ufef9\036\ufef9\037\ufef9\040\ufef9\043\ufef9\044" +
    "\ufef9\045\ufef9\046\ufef9\047\ufef9\050\ufef9\051\ufef9\052\ufef9" +
    "\053\ufef9\054\ufef9\055\ufef9\056\ufef9\057\ufef9\060\ufef9\061" +
    "\ufef9\062\ufef9\063\ufef9\064\ufef9\065\ufef9\066\ufef9\067\ufef9" +
    "\070\ufef9\071\ufef9\072\ufef9\073\ufef9\074\ufef9\075\ufef9\076" +
    "\ufef9\077\ufef9\100\ufef9\101\ufef9\001\002\000\172\004\uff02" +
    "\005\uff02\006\uff02\007\uff02\010\uff02\011\uff02\012\uff02\013" +
    "\uff02\014\uff02\015\uff02\016\uff02\017\uff02\020\uff02\021\uff02" +
    "\022\uff02\023\uff02\024\uff02\025\uff02\026\uff02\027\uff02\030" +
    "\uff02\031\uff02\032\uff02\033\uff02\034\uff02\035\uff02\036\uff02" +
    "\037\uff02\040\uff02\043\uff02\044\uff02\045\uff02\046\uff02\047" +
    "\uff02\050\uff02\051\uff02\052\uff02\053\uff02\054\uff02\055\uff02" +
    "\056\uff02\057\uff02\060\uff02\061\uff02\062\uff02\063\uff02\064" +
    "\uff02\065\uff02\066\uff02\067\uff02\070\uff02\071\uff02\072\uff02" +
    "\073\uff02\074\uff02\075\uff02\076\uff02\077\uff02\100\uff02\101" +
    "\uff02\001\002\000\172\004\ufed6\005\ufed6\006\ufed6\007\ufed6" +
    "\010\ufed6\011\ufed6\012\ufed6\013\ufed6\014\ufed6\015\ufed6\016" +
    "\ufed6\017\ufed6\020\ufed6\021\ufed6\022\ufed6\023\ufed6\024\ufed6" +
    "\025\ufed6\026\ufed6\027\ufed6\030\ufed6\031\ufed6\032\ufed6\033" +
    "\ufed6\034\ufed6\035\ufed6\036\ufed6\037\ufed6\040\ufed6\043\ufed6" +
    "\044\ufed6\045\ufed6\046\ufed6\047\ufed6\050\ufed6\051\ufed6\052" +
    "\ufed6\053\ufed6\054\ufed6\055\ufed6\056\ufed6\057\ufed6\060\ufed6" +
    "\061\ufed6\062\ufed6\063\ufed6\064\ufed6\065\ufed6\066\ufed6\067" +
    "\ufed6\070\ufed6\071\ufed6\072\ufed6\073\ufed6\074\ufed6\075\ufed6" +
    "\076\ufed6\077\ufed6\100\ufed6\101\ufed6\001\002\000\172\004" +
    "\ufee7\005\ufee7\006\ufee7\007\ufee7\010\ufee7\011\ufee7\012\ufee7" +
    "\013\ufee7\014\ufee7\015\ufee7\016\ufee7\017\ufee7\020\ufee7\021" +
    "\ufee7\022\ufee7\023\ufee7\024\ufee7\025\ufee7\026\ufee7\027\ufee7" +
    "\030\ufee7\031\ufee7\032\ufee7\033\ufee7\034\ufee7\035\ufee7\036" +
    "\ufee7\037\ufee7\040\ufee7\043\ufee7\044\ufee7\045\ufee7\046\ufee7" +
    "\047\ufee7\050\ufee7\051\ufee7\052\ufee7\053\ufee7\054\ufee7\055" +
    "\ufee7\056\ufee7\057\ufee7\060\ufee7\061\ufee7\062\ufee7\063\ufee7" +
    "\064\ufee7\065\ufee7\066\ufee7\067\ufee7\070\ufee7\071\ufee7\072" +
    "\ufee7\073\ufee7\074\ufee7\075\ufee7\076\ufee7\077\ufee7\100\ufee7" +
    "\101\ufee7\001\002\000\172\004\ufef3\005\ufef3\006\ufef3\007" +
    "\ufef3\010\ufef3\011\ufef3\012\ufef3\013\ufef3\014\ufef3\015\ufef3" +
    "\016\ufef3\017\ufef3\020\ufef3\021\ufef3\022\ufef3\023\ufef3\024" +
    "\ufef3\025\ufef3\026\ufef3\027\ufef3\030\ufef3\031\ufef3\032\ufef3" +
    "\033\ufef3\034\ufef3\035\ufef3\036\ufef3\037\ufef3\040\ufef3\043" +
    "\ufef3\044\ufef3\045\ufef3\046\ufef3\047\ufef3\050\ufef3\051\ufef3" +
    "\052\ufef3\053\ufef3\054\ufef3\055\ufef3\056\ufef3\057\ufef3\060" +
    "\ufef3\061\ufef3\062\ufef3\063\ufef3\064\ufef3\065\ufef3\066\ufef3" +
    "\067\ufef3\070\ufef3\071\ufef3\072\ufef3\073\ufef3\074\ufef3\075" +
    "\ufef3\076\ufef3\077\ufef3\100\ufef3\101\ufef3\001\002\000\172" +
    "\004\ufeff\005\ufeff\006\ufeff\007\ufeff\010\ufeff\011\ufeff\012" +
    "\ufeff\013\ufeff\014\ufeff\015\ufeff\016\ufeff\017\ufeff\020\ufeff" +
    "\021\ufeff\022\ufeff\023\ufeff\024\ufeff\025\ufeff\026\ufeff\027" +
    "\ufeff\030\ufeff\031\ufeff\032\ufeff\033\ufeff\034\ufeff\035\ufeff" +
    "\036\ufeff\037\ufeff\040\ufeff\043\ufeff\044\ufeff\045\ufeff\046" +
    "\ufeff\047\ufeff\050\ufeff\051\ufeff\052\ufeff\053\ufeff\054\ufeff" +
    "\055\ufeff\056\ufeff\057\ufeff\060\ufeff\061\ufeff\062\ufeff\063" +
    "\ufeff\064\ufeff\065\ufeff\066\ufeff\067\ufeff\070\ufeff\071\ufeff" +
    "\072\ufeff\073\ufeff\074\ufeff\075\ufeff\076\ufeff\077\ufeff\100" +
    "\ufeff\101\ufeff\001\002\000\172\004\ufef6\005\ufef6\006\ufef6" +
    "\007\ufef6\010\ufef6\011\ufef6\012\ufef6\013\ufef6\014\ufef6\015" +
    "\ufef6\016\ufef6\017\ufef6\020\ufef6\021\ufef6\022\ufef6\023\ufef6" +
    "\024\ufef6\025\ufef6\026\ufef6\027\ufef6\030\ufef6\031\ufef6\032" +
    "\ufef6\033\ufef6\034\ufef6\035\ufef6\036\ufef6\037\ufef6\040\ufef6" +
    "\043\ufef6\044\ufef6\045\ufef6\046\ufef6\047\ufef6\050\ufef6\051" +
    "\ufef6\052\ufef6\053\ufef6\054\ufef6\055\ufef6\056\ufef6\057\ufef6" +
    "\060\ufef6\061\ufef6\062\ufef6\063\ufef6\064\ufef6\065\ufef6\066" +
    "\ufef6\067\ufef6\070\ufef6\071\ufef6\072\ufef6\073\ufef6\074\ufef6" +
    "\075\ufef6\076\ufef6\077\ufef6\100\ufef6\101\ufef6\001\002\000" +
    "\172\004\ufedf\005\ufedf\006\ufedf\007\ufedf\010\ufedf\011\ufedf" +
    "\012\ufedf\013\ufedf\014\ufedf\015\ufedf\016\ufedf\017\ufedf\020" +
    "\ufedf\021\ufedf\022\ufedf\023\ufedf\024\ufedf\025\ufedf\026\ufedf" +
    "\027\ufedf\030\ufedf\031\ufedf\032\ufedf\033\ufedf\034\ufedf\035" +
    "\ufedf\036\ufedf\037\ufedf\040\ufedf\043\ufedf\044\ufedf\045\ufedf" +
    "\046\ufedf\047\ufedf\050\ufedf\051\ufedf\052\ufedf\053\ufedf\054" +
    "\ufedf\055\ufedf\056\ufedf\057\ufedf\060\ufedf\061\ufedf\062\ufedf" +
    "\063\ufedf\064\ufedf\065\ufedf\066\ufedf\067\ufedf\070\ufedf\071" +
    "\ufedf\072\ufedf\073\ufedf\074\ufedf\075\ufedf\076\ufedf\077\ufedf" +
    "\100\ufedf\101\ufedf\001\002\000\172\004\ufeef\005\ufeef\006" +
    "\ufeef\007\ufeef\010\ufeef\011\ufeef\012\ufeef\013\ufeef\014\ufeef" +
    "\015\ufeef\016\ufeef\017\ufeef\020\ufeef\021\ufeef\022\ufeef\023" +
    "\ufeef\024\ufeef\025\ufeef\026\ufeef\027\ufeef\030\ufeef\031\ufeef" +
    "\032\ufeef\033\ufeef\034\ufeef\035\ufeef\036\ufeef\037\ufeef\040" +
    "\ufeef\043\ufeef\044\ufeef\045\ufeef\046\ufeef\047\ufeef\050\ufeef" +
    "\051\ufeef\052\ufeef\053\ufeef\054\ufeef\055\ufeef\056\ufeef\057" +
    "\ufeef\060\ufeef\061\ufeef\062\ufeef\063\ufeef\064\ufeef\065\ufeef" +
    "\066\ufeef\067\ufeef\070\ufeef\071\ufeef\072\ufeef\073\ufeef\074" +
    "\ufeef\075\ufeef\076\ufeef\077\ufeef\100\ufeef\101\ufeef\001\002" +
    "\000\172\004\ufecb\005\ufecb\006\ufecb\007\ufecb\010\ufecb\011" +
    "\ufecb\012\ufecb\013\ufecb\014\ufecb\015\ufecb\016\ufecb\017\ufecb" +
    "\020\ufecb\021\ufecb\022\ufecb\023\ufecb\024\ufecb\025\ufecb\026" +
    "\ufecb\027\ufecb\030\ufecb\031\ufecb\032\ufecb\033\ufecb\034\ufecb" +
    "\035\ufecb\036\ufecb\037\ufecb\040\ufecb\043\ufecb\044\ufecb\045" +
    "\ufecb\046\ufecb\047\ufecb\050\ufecb\051\ufecb\052\ufecb\053\ufecb" +
    "\054\ufecb\055\ufecb\056\ufecb\057\ufecb\060\ufecb\061\ufecb\062" +
    "\ufecb\063\ufecb\064\ufecb\065\ufecb\066\ufecb\067\ufecb\070\ufecb" +
    "\071\ufecb\072\ufecb\073\ufecb\074\ufecb\075\ufecb\076\ufecb\077" +
    "\ufecb\100\ufecb\101\ufecb\001\002\000\172\004\ufed7\005\ufed7" +
    "\006\ufed7\007\ufed7\010\ufed7\011\ufed7\012\ufed7\013\ufed7\014" +
    "\ufed7\015\ufed7\016\ufed7\017\ufed7\020\ufed7\021\ufed7\022\ufed7" +
    "\023\ufed7\024\ufed7\025\ufed7\026\ufed7\027\ufed7\030\ufed7\031" +
    "\ufed7\032\ufed7\033\ufed7\034\ufed7\035\ufed7\036\ufed7\037\ufed7" +
    "\040\ufed7\043\ufed7\044\ufed7\045\ufed7\046\ufed7\047\ufed7\050" +
    "\ufed7\051\ufed7\052\ufed7\053\ufed7\054\ufed7\055\ufed7\056\ufed7" +
    "\057\ufed7\060\ufed7\061\ufed7\062\ufed7\063\ufed7\064\ufed7\065" +
    "\ufed7\066\ufed7\067\ufed7\070\ufed7\071\ufed7\072\ufed7\073\ufed7" +
    "\074\ufed7\075\ufed7\076\ufed7\077\ufed7\100\ufed7\101\ufed7\001" +
    "\002\000\172\004\ufecf\005\ufecf\006\ufecf\007\ufecf\010\ufecf" +
    "\011\ufecf\012\ufecf\013\ufecf\014\ufecf\015\ufecf\016\ufecf\017" +
    "\ufecf\020\ufecf\021\ufecf\022\ufecf\023\ufecf\024\ufecf\025\ufecf" +
    "\026\ufecf\027\ufecf\030\ufecf\031\ufecf\032\ufecf\033\ufecf\034" +
    "\ufecf\035\ufecf\036\ufecf\037\ufecf\040\ufecf\043\ufecf\044\ufecf" +
    "\045\ufecf\046\ufecf\047\ufecf\050\ufecf\051\ufecf\052\ufecf\053" +
    "\ufecf\054\ufecf\055\ufecf\056\ufecf\057\ufecf\060\ufecf\061\ufecf" +
    "\062\ufecf\063\ufecf\064\ufecf\065\ufecf\066\ufecf\067\ufecf\070" +
    "\ufecf\071\ufecf\072\ufecf\073\ufecf\074\ufecf\075\ufecf\076\ufecf" +
    "\077\ufecf\100\ufecf\101\ufecf\001\002\000\172\004\ufef5\005" +
    "\ufef5\006\ufef5\007\ufef5\010\ufef5\011\ufef5\012\ufef5\013\ufef5" +
    "\014\ufef5\015\ufef5\016\ufef5\017\ufef5\020\ufef5\021\ufef5\022" +
    "\ufef5\023\ufef5\024\ufef5\025\ufef5\026\ufef5\027\ufef5\030\ufef5" +
    "\031\ufef5\032\ufef5\033\ufef5\034\ufef5\035\ufef5\036\ufef5\037" +
    "\ufef5\040\ufef5\043\ufef5\044\ufef5\045\ufef5\046\ufef5\047\ufef5" +
    "\050\ufef5\051\ufef5\052\ufef5\053\ufef5\054\ufef5\055\ufef5\056" +
    "\ufef5\057\ufef5\060\ufef5\061\ufef5\062\ufef5\063\ufef5\064\ufef5" +
    "\065\ufef5\066\ufef5\067\ufef5\070\ufef5\071\ufef5\072\ufef5\073" +
    "\ufef5\074\ufef5\075\ufef5\076\ufef5\077\ufef5\100\ufef5\101\ufef5" +
    "\001\002\000\172\004\ufed0\005\ufed0\006\ufed0\007\ufed0\010" +
    "\ufed0\011\ufed0\012\ufed0\013\ufed0\014\ufed0\015\ufed0\016\ufed0" +
    "\017\ufed0\020\ufed0\021\ufed0\022\ufed0\023\ufed0\024\ufed0\025" +
    "\ufed0\026\ufed0\027\ufed0\030\ufed0\031\ufed0\032\ufed0\033\ufed0" +
    "\034\ufed0\035\ufed0\036\ufed0\037\ufed0\040\ufed0\043\ufed0\044" +
    "\ufed0\045\ufed0\046\ufed0\047\ufed0\050\ufed0\051\ufed0\052\ufed0" +
    "\053\ufed0\054\ufed0\055\ufed0\056\ufed0\057\ufed0\060\ufed0\061" +
    "\ufed0\062\ufed0\063\ufed0\064\ufed0\065\ufed0\066\ufed0\067\ufed0" +
    "\070\ufed0\071\ufed0\072\ufed0\073\ufed0\074\ufed0\075\ufed0\076" +
    "\ufed0\077\ufed0\100\ufed0\101\ufed0\001\002\000\172\004\ufef1" +
    "\005\ufef1\006\ufef1\007\ufef1\010\ufef1\011\ufef1\012\ufef1\013" +
    "\ufef1\014\ufef1\015\ufef1\016\ufef1\017\ufef1\020\ufef1\021\ufef1" +
    "\022\ufef1\023\ufef1\024\ufef1\025\ufef1\026\ufef1\027\ufef1\030" +
    "\ufef1\031\ufef1\032\ufef1\033\ufef1\034\ufef1\035\ufef1\036\ufef1" +
    "\037\ufef1\040\ufef1\043\ufef1\044\ufef1\045\ufef1\046\ufef1\047" +
    "\ufef1\050\ufef1\051\ufef1\052\ufef1\053\ufef1\054\ufef1\055\ufef1" +
    "\056\ufef1\057\ufef1\060\ufef1\061\ufef1\062\ufef1\063\ufef1\064" +
    "\ufef1\065\ufef1\066\ufef1\067\ufef1\070\ufef1\071\ufef1\072\ufef1" +
    "\073\ufef1\074\ufef1\075\ufef1\076\ufef1\077\ufef1\100\ufef1\101" +
    "\ufef1\001\002\000\010\041\uff88\067\uff88\070\uff88\001\002" +
    "\000\010\041\u0171\067\u0170\070\u0172\001\002\000\004\066" +
    "\uff87\001\002\000\004\066\uff83\001\002\000\004\070\u0173" +
    "\001\002\000\004\066\uff85\001\002\000\004\041\u0174\001" +
    "\002\000\004\066\uff84\001\002\000\004\066\010\001\002" +
    "\000\006\007\uff7d\077\u0178\001\002\000\004\007\u0183\001" +
    "\002\000\012\020\u017a\041\u0171\067\u0170\070\u0172\001\002" +
    "\000\004\066\uff82\001\002\000\004\066\uff7f\001\002\000" +
    "\004\066\010\001\002\000\042\003\uffb5\007\uffb5\010\uffb5" +
    "\016\uffb5\022\uffb5\023\uffb5\025\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\070\uffb5\076\uffb5\104\uffb5\105\uffb5" +
    "\001\002\000\042\003\066\007\uff7e\010\037\016\072\022" +
    "\042\023\040\025\063\034\050\035\041\036\051\037\053" +
    "\040\047\070\065\076\055\104\056\105\054\001\002\000" +
    "\004\066\010\001\002\000\044\003\uffb5\007\uffb5\010\uffb5" +
    "\016\uffb5\022\uffb5\023\uffb5\025\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\070\uffb5\076\uffb5\077\uffb5\104\uffb5" +
    "\105\uffb5\001\002\000\044\003\066\007\uff81\010\037\016" +
    "\072\022\042\023\040\025\063\034\050\035\041\036\051" +
    "\037\053\040\047\070\065\076\055\077\uff81\104\056\105" +
    "\054\001\002\000\006\007\uff7d\077\u0178\001\002\000\004" +
    "\007\uff80\001\002\000\004\076\u0184\001\002\000\004\066" +
    "\010\001\002\000\056\003\uff86\007\uff86\010\uff86\016\uff86" +
    "\020\uff86\022\uff86\023\uff86\024\uff86\025\uff86\030\uff86\034" +
    "\uff86\035\uff86\036\uff86\037\uff86\040\uff86\070\uff86\074\uff86" +
    "\076\uff86\077\uff86\101\uff86\104\uff86\105\uff86\001\002\000" +
    "\174\004\241\005\270\006\264\007\302\010\233\011\306" +
    "\012\273\013\250\014\266\015\253\016\252\017\301\020" +
    "\272\021\307\022\314\023\236\024\247\025\320\026\277" +
    "\027\312\030\246\031\225\032\244\033\224\034\237\035" +
    "\240\036\304\037\271\040\234\043\262\044\256\045\267" +
    "\046\310\047\242\050\257\051\265\052\245\053\263\054" +
    "\315\055\303\056\260\057\243\060\261\061\300\062\276" +
    "\063\317\064\316\065\235\066\311\067\255\070\275\071" +
    "\313\072\274\073\254\074\232\075\230\076\226\077\231" +
    "\100\305\101\251\106\u0187\001\002\000\060\003\uff43\007" +
    "\uff43\010\uff43\016\uff43\020\uff43\022\uff43\023\uff43\024\uff43" +
    "\025\uff43\030\uff43\034\uff43\035\uff43\036\uff43\037\uff43\040" +
    "\uff43\066\010\070\uff43\074\uff43\076\uff43\077\uff43\101\uff43" +
    "\104\uff43\105\uff43\001\002\000\056\003\uff44\007\uff44\010" +
    "\uff44\016\uff44\020\uff44\022\uff44\023\uff44\024\uff44\025\uff44" +
    "\030\uff44\034\uff44\035\uff44\036\uff44\037\uff44\040\uff44\070" +
    "\uff44\074\uff44\076\uff44\077\uff44\101\uff44\104\uff44\105\uff44" +
    "\001\002\000\014\042\221\044\220\062\u018a\067\215\070" +
    "\222\001\002\000\004\066\010\001\002\000\004\062\u018c" +
    "\001\002\000\004\066\uff66\001\002\000\004\066\010\001" +
    "\002\000\056\003\uff65\007\uff65\010\uff65\016\uff65\020\uff65" +
    "\022\uff65\023\uff65\024\uff65\025\uff65\030\uff65\034\uff65\035" +
    "\uff65\036\uff65\037\uff65\040\uff65\070\uff65\074\uff65\076\uff65" +
    "\077\uff65\101\uff65\104\uff65\105\uff65\001\002\000\056\003" +
    "\uff62\007\uff62\010\uff62\016\uff62\020\uff62\022\uff62\023\uff62" +
    "\024\uff62\025\uff62\030\uff62\034\uff62\035\uff62\036\uff62\037" +
    "\uff62\040\uff62\070\uff62\074\uff62\076\uff62\077\uff62\101\uff62" +
    "\104\uff62\105\uff62\001\002\000\014\042\221\044\220\062" +
    "\u0191\067\215\070\222\001\002\000\004\066\010\001\002" +
    "\000\004\062\u0193\001\002\000\004\066\uff64\001\002\000" +
    "\004\066\010\001\002\000\056\003\uff63\007\uff63\010\uff63" +
    "\016\uff63\020\uff63\022\uff63\023\uff63\024\uff63\025\uff63\030" +
    "\uff63\034\uff63\035\uff63\036\uff63\037\uff63\040\uff63\070\uff63" +
    "\074\uff63\076\uff63\077\uff63\101\uff63\104\uff63\105\uff63\001" +
    "\002\000\056\003\uff61\007\uff61\010\uff61\016\uff61\020\uff61" +
    "\022\uff61\023\uff61\024\uff61\025\uff61\030\uff61\034\uff61\035" +
    "\uff61\036\uff61\037\uff61\040\uff61\070\uff61\074\uff61\076\uff61" +
    "\077\uff61\101\uff61\104\uff61\105\uff61\001\002\000\004\007" +
    "\u0198\001\002\000\004\015\u0199\001\002\000\004\066\uffe2" +
    "\001\002\000\004\066\010\001\002\000\010\002\uffe1\003" +
    "\uffe1\006\uffe1\001\002\000\004\066\010\001\002\000\042" +
    "\003\uffb5\010\uffb5\016\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\070\uffb5" +
    "\076\uffb5\104\uffb5\105\uffb5\001\002\000\042\003\066\010" +
    "\037\016\072\022\042\023\040\024\u019f\025\063\034\050" +
    "\035\041\036\051\037\053\040\047\070\065\076\055\104" +
    "\056\105\054\001\002\000\006\023\u01a0\100\u01a1\001\002" +
    "\000\016\033\uff73\041\uff73\044\uff73\061\uff73\067\uff73\070" +
    "\uff73\001\002\000\016\033\uff72\041\uff72\044\uff72\061\uff72" +
    "\067\uff72\070\uff72\001\002\000\016\033\077\041\105\044" +
    "\100\061\103\067\101\070\075\001\002\000\010\031\115" +
    "\032\113\066\010\001\002\000\056\003\uff7b\007\uff7b\010" +
    "\uff7b\016\uff7b\020\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b" +
    "\030\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\070" +
    "\uff7b\074\uff7b\076\uff7b\077\uff7b\101\uff7b\104\uff7b\105\uff7b" +
    "\001\002\000\016\033\077\041\105\044\100\061\103\067" +
    "\101\070\075\001\002\000\010\031\115\032\113\066\uff76" +
    "\001\002\000\004\066\010\001\002\000\042\003\uffb5\007" +
    "\uffb5\010\uffb5\016\uffb5\022\uffb5\023\uffb5\025\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\070\uffb5\076\uffb5\104" +
    "\uffb5\105\uffb5\001\002\000\042\003\066\007\u01aa\010\037" +
    "\016\072\022\042\023\040\025\063\034\050\035\041\036" +
    "\051\037\053\040\047\070\065\076\055\104\056\105\054" +
    "\001\002\000\004\023\u01ab\001\002\000\004\066\uff75\001" +
    "\002\000\004\066\010\001\002\000\056\003\uff74\007\uff74" +
    "\010\uff74\016\uff74\020\uff74\022\uff74\023\uff74\024\uff74\025" +
    "\uff74\030\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74" +
    "\070\uff74\074\uff74\076\uff74\077\uff74\101\uff74\104\uff74\105" +
    "\uff74\001\002\000\010\004\ufff5\021\u01af\065\ufff5\001\002" +
    "\000\010\011\u01bf\012\u01c0\013\u01c1\001\002\000\004\066" +
    "\ufffa\001\002\000\006\004\ufffc\065\ufffc\001\002\000\006" +
    "\004\u01b3\065\u01b4\001\002\000\004\070\u01b7\001\002\000" +
    "\004\010\037\001\002\000\056\003\ufffb\007\ufffb\010\ufffb" +
    "\016\ufffb\020\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\030" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\070\ufffb" +
    "\074\ufffb\076\ufffb\077\ufffb\101\ufffb\104\ufffb\105\ufffb\001" +
    "\002\000\056\003\uffef\007\uffef\010\uffef\016\uffef\020\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\030\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\070\uffef\074\uffef\076\uffef" +
    "\077\uffef\101\uffef\104\uffef\105\uffef\001\002\000\010\004" +
    "\ufff5\021\u01af\065\ufff5\001\002\000\004\066\010\001\002" +
    "\000\006\004\ufff1\065\ufff1\001\002\000\006\004\u01b3\065" +
    "\u01b4\001\002\000\056\003\ufff0\007\ufff0\010\ufff0\016\ufff0" +
    "\020\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\030\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\070\ufff0\074\ufff0" +
    "\076\ufff0\077\ufff0\101\ufff0\104\ufff0\105\ufff0\001\002\000" +
    "\056\003\uffee\007\uffee\010\uffee\016\uffee\020\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\030\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\070\uffee\074\uffee\076\uffee\077\uffee" +
    "\101\uffee\104\uffee\105\uffee\001\002\000\004\066\010\001" +
    "\002\000\056\003\ufff9\007\ufff9\010\ufff9\016\ufff9\020\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\030\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\070\ufff9\074\ufff9\076\ufff9" +
    "\077\ufff9\101\ufff9\104\ufff9\105\ufff9\001\002\000\010\004" +
    "\ufff8\065\ufff8\066\ufff4\001\002\000\010\004\ufff7\065\ufff7" +
    "\066\ufff3\001\002\000\010\004\ufff6\065\ufff6\066\ufff2\001" +
    "\002\000\004\070\u01c4\001\002\000\004\070\uffc5\001\002" +
    "\000\004\021\030\001\002\000\006\004\u01c6\062\uffc9\001" +
    "\002\000\006\070\uffc7\107\uffc7\001\002\000\004\061\uffe0" +
    "\001\002\000\004\061\u01c9\001\002\000\010\062\uffc8\070" +
    "\uffc6\107\uffc6\001\002\000\004\062\u01cb\001\002\000\004" +
    "\066\uffdf\001\002\000\004\066\010\001\002\000\042\003" +
    "\uffb5\007\uffb5\010\uffb5\016\uffb5\022\uffb5\023\uffb5\025\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\070\uffb5\076" +
    "\uffb5\104\uffb5\105\uffb5\001\002\000\042\003\066\007\u01cf" +
    "\010\037\016\072\022\042\023\040\025\063\034\050\035" +
    "\041\036\051\037\053\040\047\070\065\076\055\104\056" +
    "\105\054\001\002\000\004\014\u01d0\001\002\000\004\066" +
    "\uffde\001\002\000\004\066\010\001\002\000\010\002\uffdd" +
    "\003\uffdd\006\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d0\000\006\002\004\033\003\001\001\000\004\004" +
    "\012\001\001\000\002\001\001\000\004\031\006\001\001" +
    "\000\002\001\001\000\004\031\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\021\001\001\000\002" +
    "\001\001\000\006\047\024\050\023\001\001\000\004\011" +
    "\u01c1\001\001\000\002\001\001\000\004\036\026\001\001" +
    "\000\004\102\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\034" +
    "\001\001\000\004\051\035\001\001\000\034\005\060\007" +
    "\056\015\067\016\066\026\072\027\042\037\057\042\045" +
    "\052\051\054\044\055\063\056\070\057\043\001\001\000" +
    "\002\001\001\000\004\130\u01a4\001\001\000\002\001\001" +
    "\000\004\127\u019b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\u0196\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\u0185\001\001\000\002" +
    "\001\001\000\004\040\u012f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\u0123\001\001" +
    "\000\004\133\u0109\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\112\073\001\001\000\002\001" +
    "\001\000\012\063\101\064\075\070\105\071\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\063\101\064" +
    "\075\070\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\162\001\001\000\006\063\146\064\075\001" +
    "\001\000\004\113\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\144\001\001\000\004" +
    "\017\116\001\001\000\012\063\101\064\075\070\105\071" +
    "\115\001\001\000\002\001\001\000\004\031\120\001\001" +
    "\000\002\001\001\000\004\051\121\001\001\000\034\005" +
    "\060\007\056\015\067\016\066\026\072\027\042\037\057" +
    "\052\051\054\044\055\063\056\070\057\043\114\122\001" +
    "\001\000\004\053\124\001\001\000\004\116\134\001\001" +
    "\000\002\001\001\000\004\115\126\001\001\000\004\031" +
    "\127\001\001\000\004\051\130\001\001\000\032\005\060" +
    "\007\056\015\067\016\066\026\072\027\042\037\057\052" +
    "\051\054\044\055\063\056\070\057\043\001\001\000\002" +
    "\001\001\000\004\031\133\001\001\000\002\001\001\000" +
    "\012\063\101\064\075\070\105\071\135\001\001\000\004" +
    "\117\136\001\001\000\004\017\137\001\001\000\004\031" +
    "\140\001\001\000\004\051\141\001\001\000\034\005\060" +
    "\007\056\015\067\016\066\026\072\027\042\037\057\052" +
    "\051\054\044\055\063\056\070\057\043\120\142\001\001" +
    "\000\004\053\143\001\001\000\002\001\001\000\012\063" +
    "\101\064\075\070\105\071\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\063\161\064" +
    "\075\001\001\000\006\063\160\064\075\001\001\000\006" +
    "\063\157\064\075\001\001\000\006\063\156\064\075\001" +
    "\001\000\006\063\155\064\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\063\173\064\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\063\205\064\075\070" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\162\001\001\000\002\001\001\000\006\037\211\075" +
    "\210\001\001\000\010\043\344\044\347\045\346\001\001" +
    "\000\002\001\001\000\006\065\215\067\216\001\001\000" +
    "\004\141\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\331\001\001\000\002\001\001\000\004\034" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\065" +
    "\324\067\216\001\001\000\006\065\323\067\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\140\333\001\001\000" +
    "\004\031\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\344\044\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\076\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\043\344\044\362\001\001\000\006\043\344\044" +
    "\361\001\001\000\006\043\344\044\360\001\001\000\006" +
    "\043\344\044\357\001\001\000\006\043\344\044\356\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\364\031" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\371\001\001\000" +
    "\010\043\344\044\347\045\372\001\001\000\004\100\373" +
    "\001\001\000\006\010\374\031\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\134\u010b\001\001\000\004\035\u010d\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\344\044" +
    "\u010f\001\001\000\002\001\001\000\006\043\344\044\u0111" +
    "\001\001\000\004\041\u0112\001\001\000\004\135\u0119\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u011a\001\001\000\004\051\u011b\001\001\000\032" +
    "\005\060\007\056\015\067\016\066\026\072\027\042\037" +
    "\057\052\051\054\044\055\063\056\070\057\043\001\001" +
    "\000\010\025\u011d\043\344\044\u011e\001\001\000\004\031" +
    "\u011f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\043" +
    "\344\044\347\045\u0124\001\001\000\004\111\u0125\001\001" +
    "\000\004\031\u0126\001\001\000\002\001\001\000\006\065" +
    "\u0129\067\216\001\001\000\004\143\u012d\001\001\000\002" +
    "\001\001\000\004\142\u012b\001\001\000\004\031\u012c\001" +
    "\001\000\002\001\001\000\004\031\u012e\001\001\000\002" +
    "\001\001\000\004\031\u0133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\u016d\001\001\000\004\062\u016e\001\001" +
    "\000\004\123\u0174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u0175\001\001\000\004\060\u0176\001\001\000" +
    "\002\001\001\000\004\062\u0178\001\001\000\004\124\u017d" +
    "\001\001\000\004\126\u017a\001\001\000\004\031\u017b\001" +
    "\001\000\004\051\u017c\001\001\000\032\005\060\007\056" +
    "\015\067\016\066\026\072\027\042\037\057\052\051\054" +
    "\044\055\063\056\070\057\043\001\001\000\004\031\u017e" +
    "\001\001\000\004\051\u017f\001\001\000\034\005\060\007" +
    "\056\015\067\016\066\026\072\027\042\037\057\052\051" +
    "\054\044\055\063\056\070\057\043\125\u0180\001\001\000" +
    "\004\060\u0181\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u0184\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u0187\001\001\000\002\001\001\000\006" +
    "\065\u018a\067\216\001\001\000\004\031\u018e\001\001\000" +
    "\002\001\001\000\004\136\u018c\001\001\000\004\031\u018d" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\065" +
    "\u0191\067\216\001\001\000\004\031\u0195\001\001\000\002" +
    "\001\001\000\004\137\u0193\001\001\000\004\031\u0194\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\104\u0199\001\001\000\004\031" +
    "\u019a\001\001\000\002\001\001\000\004\031\u019c\001\001" +
    "\000\004\051\u019d\001\001\000\032\005\060\007\056\015" +
    "\067\016\066\026\072\027\042\037\057\052\051\054\044" +
    "\055\063\056\070\057\043\001\001\000\004\023\u01a1\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\063\101" +
    "\064\075\070\105\071\u01a2\001\001\000\004\031\u01a3\001" +
    "\001\000\002\001\001\000\012\063\101\064\075\070\105" +
    "\071\u01a5\001\001\000\004\131\u01a6\001\001\000\004\031" +
    "\u01a7\001\001\000\004\051\u01a8\001\001\000\032\005\060" +
    "\007\056\015\067\016\066\026\072\027\042\037\057\052" +
    "\051\054\044\055\063\056\070\057\043\001\001\000\002" +
    "\001\001\000\004\132\u01ab\001\001\000\004\031\u01ac\001" +
    "\001\000\002\001\001\000\006\035\u01b0\046\u01af\001\001" +
    "\000\002\001\001\000\004\073\u01bc\001\001\000\004\072" +
    "\u01b1\001\001\000\004\006\u01b4\001\001\000\002\001\001" +
    "\000\004\005\u01b5\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\u01b8\046\u01b7\001\001\000\004\031\u01bb" +
    "\001\001\000\004\074\u01b9\001\001\000\004\006\u01ba\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u01bd" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\u01c4\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\105\u01c7\001\001\000\002\001\001\000\006" +
    "\047\u01c9\050\023\001\001\000\002\001\001\000\004\106" +
    "\u01cb\001\001\000\004\031\u01cc\001\001\000\004\051\u01cd" +
    "\001\001\000\032\005\060\007\056\015\067\016\066\026" +
    "\072\027\042\037\057\052\051\054\044\055\063\056\070" +
    "\057\043\001\001\000\002\001\001\000\004\107\u01d0\001" +
    "\001\000\004\031\u01d1\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxVB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxVB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxVB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    public int jerarquia = 0;
    public String metodo = "";
    public String tipoMetodo = "";
    public String tipoActual = "";
    public OperacionesVB operacion = new OperacionesVB();
    public TablaSimbolos tabla;
    public VerifVB verif = new VerifVB();
    public ArrayList<String> variablesTipo = new ArrayList<>();

    //booleano para controlar el manejo de los returns
    public  static Boolean isReturn  = false;

    /*-----------------------------------Variables para los cuartetos-------------------------------------------*/

    public int contFinales = 0;
    public ArrayList<String> arrayFinales = new ArrayList<>();
    public ManejoVb manejoVB = new ManejoVb();
    public ManejoCondiciones manejo = new ManejoCondiciones();
    public ArrayList<Boolean> usoPila = new ArrayList<>();
    public static String aux2 = "", aux3 = "";
    public String idSwitch = "";
    public static boolean inst = false;
    public static String etInst = "";
    public String idFor = "";
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaFor = new ArrayList<>();

    /*------------------------------------------Codigo Ejecutable---------------------------------------------*/

    public ExeVb exe = new ExeVb();
    public String metodoExe = "";

    public SintaxVB(AnalizadorLexico3 lex, TablaSimbolos tabla){
        super(lex);
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
       // setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");      
      int fila = s.left + PanelPrincipal.totalLineas;
            PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" Token no reconocido: "+s.toString()+"\n";
    }

   /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
       int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" ";
    }*/

    public void traspasoVariables(ArrayList<Variable> listParam, ArrayList<Variable> original){
        for(int i = 0; i < listParam.size(); i++){
            original.add(listParam.get(i));
        }
    } 



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxVB$actions {
  private final SintaxVB parser;

  /** Constructor */
  CUP$SintaxVB$actions(SintaxVB parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxVB$do_action(
    int                        CUP$SintaxVB$act_num,
    java_cup.runtime.lr_parser CUP$SintaxVB$parser,
    java.util.Stack            CUP$SintaxVB$stack,
    int                        CUP$SintaxVB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxVB$result;

      /* select the action based on the action number */
      switch (CUP$SintaxVB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TEXTO2 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TEXTO2 ::= TEXTO2 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TEXTO2 ::= TEXTO2 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TEXTO2 ::= TEXTO2 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TEXTO2 ::= TEXTO2 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TEXTO2 ::= TEXTO2 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TEXTO2 ::= TEXTO2 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // TEXTO2 ::= TEXTO2 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TEXTO2 ::= TEXTO2 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TEXTO2 ::= TEXTO2 condIsNot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // TEXTO2 ::= TEXTO2 condIs 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // TEXTO2 ::= TEXTO2 condLike 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // TEXTO2 ::= TEXTO2 mayorIgual2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TEXTO2 ::= TEXTO2 menorIgual2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TEXTO2 ::= TEXTO2 mayorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // TEXTO2 ::= TEXTO2 menorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TEXTO2 ::= TEXTO2 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TEXTO2 ::= TEXTO2 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TEXTO2 ::= TEXTO2 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TEXTO2 ::= TEXTO2 contraDiagonal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TEXTO2 ::= TEXTO2 potencia 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TEXTO2 ::= TEXTO2 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // TEXTO2 ::= TEXTO2 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // TEXTO2 ::= TEXTO2 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // TEXTO2 ::= TEXTO2 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // TEXTO2 ::= TEXTO2 mensaje2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // TEXTO2 ::= TEXTO2 mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // TEXTO2 ::= TEXTO2 condCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // TEXTO2 ::= TEXTO2 condSelect 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // TEXTO2 ::= TEXTO2 floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // TEXTO2 ::= TEXTO2 charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // TEXTO2 ::= TEXTO2 intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // TEXTO2 ::= TEXTO2 condTP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // TEXTO2 ::= TEXTO2 condNot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // TEXTO2 ::= TEXTO2 condOr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // TEXTO2 ::= TEXTO2 condAnd 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // TEXTO2 ::= TEXTO2 condNext 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // TEXTO2 ::= TEXTO2 condStep 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // TEXTO2 ::= TEXTO2 condTo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // TEXTO2 ::= TEXTO2 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // TEXTO2 ::= TEXTO2 condLoop 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // TEXTO2 ::= TEXTO2 condUntil 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // TEXTO2 ::= TEXTO2 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // TEXTO2 ::= TEXTO2 condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // TEXTO2 ::= TEXTO2 condAs 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // TEXTO2 ::= TEXTO2 condElseIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // TEXTO2 ::= TEXTO2 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // TEXTO2 ::= TEXTO2 condThen 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // TEXTO2 ::= TEXTO2 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TEXTO2 ::= TEXTO2 tipoFuncion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // TEXTO2 ::= TEXTO2 tipoSub 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // TEXTO2 ::= TEXTO2 tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // TEXTO2 ::= TEXTO2 tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // TEXTO2 ::= TEXTO2 tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // TEXTO2 ::= TEXTO2 condReturn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // TEXTO2 ::= TEXTO2 tipoDim 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TEXTO2 ::= TEXTO2 fin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // TEXTO2 ::= TEXTO2 tipoPublic 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // TEXTO2 ::= TEXTO2 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // TEXTO2 ::= TEXTO2 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // TEXTO ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // TEXTO ::= TEXTO resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // TEXTO ::= TEXTO id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // TEXTO ::= TEXTO numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // TEXTO ::= TEXTO enter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 RESULT=a.toString()+"\n"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // TEXTO ::= TEXTO dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TEXTO ::= TEXTO agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TEXTO ::= TEXTO agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TEXTO ::= TEXTO parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TEXTO ::= TEXTO parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TEXTO ::= TEXTO condIsNot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TEXTO ::= TEXTO condIs 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TEXTO ::= TEXTO condLike 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TEXTO ::= TEXTO mayorIgual2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TEXTO ::= TEXTO menorIgual2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TEXTO ::= TEXTO mayorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TEXTO ::= TEXTO menorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TEXTO ::= TEXTO mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TEXTO ::= TEXTO menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TEXTO ::= TEXTO igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TEXTO ::= TEXTO contraDiagonal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // TEXTO ::= TEXTO potencia 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TEXTO ::= TEXTO div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TEXTO ::= TEXTO por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // TEXTO ::= TEXTO menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // TEXTO ::= TEXTO mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // TEXTO ::= TEXTO mensaje2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // TEXTO ::= TEXTO mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // TEXTO ::= TEXTO condCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // TEXTO ::= TEXTO condSelect 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // TEXTO ::= TEXTO floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TEXTO ::= TEXTO charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TEXTO ::= TEXTO intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TEXTO ::= TEXTO condTP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // TEXTO ::= TEXTO condNot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // TEXTO ::= TEXTO condOr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TEXTO ::= TEXTO condAnd 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TEXTO ::= TEXTO condNext 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TEXTO ::= TEXTO condStep 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TEXTO ::= TEXTO condTo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TEXTO ::= TEXTO condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TEXTO ::= TEXTO condLoop 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TEXTO ::= TEXTO condUntil 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TEXTO ::= TEXTO condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TEXTO ::= TEXTO condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TEXTO ::= TEXTO condAs 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TEXTO ::= TEXTO condElseIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TEXTO ::= TEXTO condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TEXTO ::= TEXTO condThen 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TEXTO ::= TEXTO condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TEXTO ::= TEXTO tipoFuncion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TEXTO ::= TEXTO tipoSub 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TEXTO ::= TEXTO tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TEXTO ::= TEXTO tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TEXTO ::= TEXTO tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TEXTO ::= TEXTO condReturn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TEXTO ::= TEXTO tipoDim 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TEXTO ::= TEXTO fin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TEXTO ::= TEXTO tipoPublic 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TEXTO ::= TEXTO punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TEXTO ::= TEXTO coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // COMENTARIO_B ::= comentario_b TEXTO comentario_c 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",12, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // COMENTARIO_B ::= comentario_b TEXTO comentario_c ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",12, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // COMENTARIO_A ::= comentario_a TEXTO2 ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("COMENTARIO_A",11, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // TIPO_INPUT ::= floatInput 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",29, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TIPO_INPUT ::= charInput 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",29, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TIPO_INPUT ::= intInput 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",29, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // LECTURA_DATOS ::= TIPO_INPUT parentesis_a parentesis_b NT$41 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$41 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
 parser.manejoVB.crearScanf(parser.tabla, null, b.toString(), parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$41",97, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // LECTURA_DATOS ::= TIPO_INPUT parentesis_a TEXTO3 parentesis_b NT$40 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$40 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
  parser.manejoVB.mostrarMensaje(parser.tabla.getObVb(), c);  
                                                                                        parser.manejoVB.crearScanf(parser.tabla, null, b, parser.metodoExe); 
                                                                                    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$40",96, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // LECTURA_DATOS ::= id igual TIPO_INPUT parentesis_a parentesis_b NT$39 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$39 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
  parser.manejoVB.crearScanf(parser.tabla, a.toString(), b, parser.metodoExe);  
                                                                                        if(parser.verif.verificarVarInput(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), b, parser.tabla.getObVb().getTablaTipos())){  
                                                                                        } else {  
                                                                                        }  
                                                                                    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$39",95, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // LECTURA_DATOS ::= id igual TIPO_INPUT parentesis_a TEXTO3 parentesis_b NT$38 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$38 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
  parser.manejoVB.mostrarMensaje(parser.tabla.getObVb(), c);  
                                                                                        parser.manejoVB.crearScanf(parser.tabla, a.toString(), b, parser.metodoExe);     
                                                                                        if(parser.verif.verificarVarInput(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), b, parser.tabla.getObVb().getTablaTipos())){
                                                                                        } else {
                                                                                        }  
                                                                                    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$38",94, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ENTER2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ENTER2",25, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ENTER2 ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ENTER2",25, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ENTER2 ::= enter ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ENTER2",25, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ENTER ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ENTER",23, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ENTER ::= enter ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ENTER",23, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // VAL_TEXTO ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT =  a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VAL_TEXTO ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VAL_TEXTO ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.verif.verifVarMensaje(parser.tabla.getObVb(), b.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = a.toString()+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VAL_TEXTO ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VAL_TEXTO ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VAL_TEXTO ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.verif.verifVarMensaje(parser.tabla.getObVb(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);  RESULT = a.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TEXTO_CONT ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO_CONT",52, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TEXTO_CONT ::= mas TEXTO3 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO_CONT",52, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TEXTO_CONT ::= ampersand TEXTO3 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO_CONT",52, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TEXTO3 ::= comilla TEXTO comilla TEXTO_CONT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.concatenarMensajes(parser.tabla.getObVb(), a.toString()+b.toString()+c.toString(), d); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO3",51, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TEXTO3 ::= VAL_TEXTO TEXTO_CONT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.concatenarMensajes2(parser.tabla, a, b, parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO3",51, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // MENSAJE ::= mensaje2 parentesis_a parentesis_b ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("MENSAJE",20, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // MENSAJE ::= mensaje parentesis_a parentesis_b ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("MENSAJE",20, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // MENSAJE ::= mensaje2 parentesis_a TEXTO3 parentesis_b NT$37 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("MENSAJE",20, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$37 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
 parser.manejoVB.mostrarMensaje(parser.tabla.getObVb(), a);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$37",93, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // MENSAJE ::= mensaje parentesis_a TEXTO3 parentesis_b NT$36 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("MENSAJE",20, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$36 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
 parser.manejoVB.mostrarMensaje(parser.tabla.getObVb(), a); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$36",92, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ID ::= 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ID ::= OPERACION 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // STEP ::= 
            {
              Boolean RESULT =null;
		 parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, "1", parser.idFor); RESULT = true; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("STEP",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // STEP ::= condStep menos id 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString()+b.toString(), parser.idFor); RESULT = parser.verif.verifVarOp(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, b.toString(), "Float", parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("STEP",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // STEP ::= condStep id 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString(), parser.idFor);  RESULT = parser.verif.verifVarOp(parser.tabla.getObVb(),  parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), "Float", parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("STEP",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // STEP ::= condStep menos numero 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString()+b.toString(), parser.idFor); RESULT = true; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("STEP",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // STEP ::= condStep numero 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString(), parser.idFor); RESULT=true; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("STEP",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FOR ::= condFor NT$33 id NT$34 TIPO_VARIABLE igual OPERACION condTo OPERACION STEP NT$35 ENTER CONTENIDO condNext ID ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-13)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Boolean h = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		 parser.manejoVB.retornoFor(parser.tabla.getObVb(), parser.usoPila, parser.pilaFor, a.toString(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size() - 1); parser.jerarquia--; RESULT=parser.operacion.retornoFor(h); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("FOR",44, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-15)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$35 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
 parser.manejoVB.agregarFor(parser.tabla.getObVb(), parser.pilaFalsas, a.toString(), c, d, parser.jerarquia, b); parser.verif.verificarVarFor(a.toString(), b, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, parser.tabla.getObVb().getTablaTipos(), parser.jerarquia, e, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$35",91, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$34 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
 parser.idFor = a.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$34",90, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$33 ::= 
            {
              Boolean RESULT =null;
 parser.usoPila.add(false); parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); parser.pilaFor.add(new ArrayList<>()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$33",89, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // WHILE2 ::= condUntil 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("WHILE2",17, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // WHILE2 ::= condWhile 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("WHILE2",17, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // WHILE ::= condWhile NT$30 EXT NT$31 ENTER CONTENIDO fin condWhile NT$32 ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		 if(a!=null){ RESULT=false; } else { RESULT=null; }  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("WHILE",42, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$32 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
 parser.manejoVB.retornoWhile(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);        parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size() - 1);  parser.jerarquia--; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$32",88, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$31 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
 parser.manejoVB.agregarWhile(parser.tabla.getObVb(), h, parser.jerarquia); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$31",87, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$30 ::= 
            {
              Boolean RESULT =null;
 parser.usoPila.add(false); parser.jerarquia++;  parser.pilaFalsas.add(new ArrayList<>());  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$30",86, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPO_CONT ::= condFor 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_CONT",16, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPO_CONT ::= condWhile 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_CONT",16, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPO_CONT ::= condDo 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_CONT",16, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DO_WHILE ::= condDo NT$29 ENTER CONTENIDO condLoop WHILE2 EXT ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 parser.manejoVB.agregarCondicionWhile(parser.tabla.getObVb(), parser.usoPila, h, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.jerarquia--;  if(a!=null){ RESULT=false; } else { RESULT=null; } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("DO_WHILE",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$29 ::= 
            {
              Boolean RESULT =null;
 parser.usoPila.add(false); parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); parser.manejoVB.agregarDoWhile(parser.tabla.getObVb(), parser.jerarquia); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$29",85, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CASES ::= 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CASES",46, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CASES ::= condCase condElse NT$28 ENTER CONTENIDO 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1); parser.jerarquia--;  RESULT=a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CASES",46, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$28 ::= 
            {
              Boolean RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$28",84, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CASES ::= condCase VAL_SELECT NT$26 ENTER CONTENIDO NT$27 CASES 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=parser.operacion.retornoCaseSelect(a, b, hleft+PanelPrincipal.totalLineas, hright); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CASES",46, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$27 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.agregarFinCase(parser.tabla.getObVb(), parser.arrayFinales, parser.jerarquia);    parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1);  parser.jerarquia--; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$27",83, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$26 ::= 
            {
              Boolean RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
 parser.jerarquia++; parser.manejoVB.agregarCaseSwitch(parser.tabla.getObVb(), parser.jerarquia, parser.idSwitch, h, "=="); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$26",82, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VAL_SELECT ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_SELECT",48, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VAL_SELECT ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a.toString() + b.toString() + c.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_SELECT",48, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VAL_SELECT ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.devolverVarSwitch(parser.tabla, a.toString(), parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_SELECT",48, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SELECT ::= condSelect condCase NT$24 VAL_SELECT NT$25 ENTER CASES fin condSelect ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		 parser.jerarquia--; parser.tabla.getObVb().getCuarpeta().add(new Nodo("ETIQUETA", parser.arrayFinales.get(parser.arrayFinales.size()-1), null, null, parser.jerarquia));  parser.arrayFinales.remove(parser.arrayFinales.size()-1);    RESULT=b; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("SELECT",45, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$25 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
 parser.arrayFinales.add("etFinal_"+parser.contFinales); parser.contFinales++; parser.idSwitch = a;  parser.verif.verifVarSelect(parser.tabla.getObVb(), a, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$25",81, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$24 ::= 
            {
              Boolean RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$24",80, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP ::= igual 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",47, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP ::= menor mayor 
            {
              String RESULT =null;
		 RESULT = "<>"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",47, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP ::= menorIgual2 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",47, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP ::= menorIgual 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",47, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP ::= mayorIgual2 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",47, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP ::= mayorIgual 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",47, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP ::= menor 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",47, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP ::= mayor 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",47, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VAL_COND ::= menos numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VAL_COND ::= menos numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VAL_COND ::= menos id 
            {
              NodoBoolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 String tip = parser.operacion.buscarVariable(parser.tabla.getObVb(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoBoolean(tip, b.toString()+a.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VAL_COND ::= comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VAL_COND ::= comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VAL_COND ::= numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VAL_COND ::= numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Integer", a.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VAL_COND ::= id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 String tip = parser.operacion.buscarVariable(parser.tabla.getObVb(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoBoolean(tip, a.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_COND ::= VAL_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT= parser.manejoVB.devolverEtiqueta(parser.tabla, a, parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",49, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP_COND ::= OP_COND modulo OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "modulo"); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",49, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP_COND ::= OP_COND div OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT= parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "div"); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",49, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP_COND ::= OP_COND por OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "mult"); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",49, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP_COND ::= OP_COND menos OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "resta");  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",49, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP_COND ::= OP_COND mas OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "suma"); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",49, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP_COND ::= parentesis_a OP_COND parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 RESULT=a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",49, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICION ::= OP_COND OP OP_COND 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.agregarBooleans(parser.tabla.getObVb(), parser.pilaFalsas, a, b, c, parser.jerarquia);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONDICION",54, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXT ::= condNot CONDICION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.cambiarGotos(a); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXT ::= condNot parentesis_a CONDICION parentesis_b 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 RESULT = parser.manejoVB.cambiarGotos(a); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXT ::= CONDICION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXT ::= EXT condOr NT$23 EXT 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.manejoVB.manejoOr(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, a, b, parser.jerarquia); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$23 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
 parser.aux3 = parser.aux2; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$23",79, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXT ::= EXT condAnd EXT 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.manejoAnd(a, b); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELSE ::= 
            {
              Boolean RESULT =null;
		  parser.manejo.agregarEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia); RESULT=false; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ELSE",41, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELSE ::= condElseIf NT$20 EXT NT$21 THEN ENTER CONTENIDO NT$22 ELSE 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=parser.operacion.retornoIf(a, b, hleft+PanelPrincipal.totalLineas, hright); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ELSE",41, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$22 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
 parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);  parser.manejoVB.segundoChequeoIf(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1);  parser.jerarquia--;  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$22",78, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$21 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
 parser.manejoVB.primerChequeoIf(parser.tabla.getObVb(), h); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$21",77, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$20 ::= 
            {
              Boolean RESULT =null;
 parser.usoPila.add(false);  parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$20",76, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSE ::= condElse NT$19 ENTER CONTENIDO 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia); parser.manejo.agregarEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);       parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size() - 1); parser.jerarquia--;  RESULT=a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ELSE",41, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$19 ::= 
            {
              Boolean RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$19",75, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // THEN ::= 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("THEN",13, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // THEN ::= condThen 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("THEN",13, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF ::= condIf NT$16 EXT NT$17 THEN ENTER CONTENIDO NT$18 ELSE fin condIf ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		 RESULT=parser.operacion.retornoIf(a, b, hleft+PanelPrincipal.totalLineas, hright);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("IF",40, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$18 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);  parser.manejoVB.segundoChequeoIf(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);          parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1);   parser.jerarquia--;  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$18",74, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$17 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
 parser.manejoVB.primerChequeoIf(parser.tabla.getObVb(), h); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$17",73, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$16 ::= 
            {
              Boolean RESULT =null;
 parser.usoPila.add(false); parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$16",72, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTENIDO ::= CONTENIDO error 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTENIDO ::= 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTENIDO ::= CONTENIDO COMENTARIO_B 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTENIDO ::= CONTENIDO COMENTARIO_A 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTENIDO ::= CONTENIDO LECTURA_DATOS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTENIDO ::= CONTENIDO MENSAJE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTENIDO ::= CONTENIDO WHILE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTENIDO ::= CONTENIDO FOR 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=b; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONTENIDO ::= CONTENIDO DO_WHILE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; }  }  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTENIDO ::= CONTENIDO SELECT 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { if(b!=null){ if(b){ RESULT=true; } else { RESULT=false; } } } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTENIDO ::= CONTENIDO IF 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { if(b!=null){ if(b){ RESULT=true; } else { RESULT=false; } } } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTENIDO ::= CONTENIDO ASIGNACIONES 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(parser.isReturn!=null && a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { if(parser.isReturn){ parser.isReturn=false; RESULT=true; } else { RESULT=false; } }  } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTENIDO ::= CONTENIDO VARIABLES 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; }  }  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RETORNO ::= condAs tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("RETORNO",28, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RETORNO ::= condAs tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Char"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("RETORNO",28, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RETORNO ::= condAs tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Integer"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("RETORNO",28, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BYVAL ::= 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("BYVAL",7, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BYVAL ::= byVal 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("BYVAL",7, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMETROS2 ::= 
            {
              ArrayList<Variable> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",38, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS2 ::= PARAMETROS2 BYVAL id RETORNO coma 
            {
              ArrayList<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		ArrayList<Variable> a = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		  if(parser.verif.verificarIdParam(a, b.toString())){ 
                                                                    System.out.println("ya existe una variable "+b.toString()); 
                                                                } else { 
                                                                    parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().add(new Parametro(parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().size()-1, c)); 
                                                                    a.add(new Variable(b.toString(), c.toString(), true, parser.jerarquia)); a.get(a.size()-1).getListAsignaciones().add(parser.jerarquia); 
                                                                    parser.exe.agregarParametro(parser.tabla, b.toString(), parser.metodoExe, c);
                                                                } RESULT=a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",38, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROS ::= 
            {
              ArrayList<Variable> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAMETROS",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROS ::= PARAMETROS2 BYVAL id RETORNO 
            {
              ArrayList<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		ArrayList<Variable> a = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  if(parser.verif.verificarIdParam(a, b.toString())){ 
                                                                System.out.println("ya existe una variable "+b.toString()); 
                                                            } else { 
                                                                parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().add(new Parametro(parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().size()-1, c));  
                                                                a.add(new Variable(b.toString(), c.toString(), true, parser.jerarquia)); a.get(a.size()-1).getListAsignaciones().add(parser.jerarquia); 
                                                                parser.exe.agregarParametro(parser.tabla, b.toString(), parser.metodoExe, c);
                                                            } RESULT=a;  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAMETROS",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RETURN ::= 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("RETURN",32, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETURN ::= condReturn NT$14 VALOR_VAR NT$15 ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("RETURN",32, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$15 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
   parser.manejoVB.crearReturn(parser.tabla, a, parser.metodoExe);  
                                RESULT = true; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$15",71, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$14 ::= 
            {
              Boolean RESULT =null;
    parser.tipoActual=parser.tipoMetodo; 
                                parser.exe.agregarReturn(parser.tabla, parser.metodoExe);
                                parser.tipoMetodo=""; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$14",70, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_VAL ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 String tipoNum = "Float"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright, a.toString()+b.toString()+c.toString()+d.toString()); RESULT = a.toString() + b.toString() + c.toString() + d.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",33, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_VAL ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 String tipoNum = "Integer"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright, a.toString()+b.toString()); RESULT = a.toString() + b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",33, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_VAL ::= menos id 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.verif.verifVarOp(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), parser.tipoActual, parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright); RESULT = b.toString() + a.toString();  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",33, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_VAL ::= comillaSimple numero comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",33, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_VAL ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",33, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_VAL ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 String tipoNum = "Float"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright, a.toString()+b.toString()+c.toString()); RESULT=a.toString()+b.toString()+c.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",33, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_VAL ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 String tipoNum = "Integer"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright, a.toString()); RESULT = a.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",33, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_VAL ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.verif.verifVarOp(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), parser.tipoActual, parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright); RESULT = a.toString();  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",33, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= TIPO_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.operacionIndividual(parser.tabla, a, parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION ::= OPERACION modulo OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "modulo", parser.metodoExe);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION ::= OPERACION div OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "div", parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION ::= OPERACION por OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "mult", parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION ::= OPERACION menos OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "resta", parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= OPERACION mas OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "suma", parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",34, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODOS ::= tipoPublic tipoSub id NT$11 parentesis_a PARAMETROS parentesis_b NT$12 ENTER CONTENIDO fin tipoSub NT$13 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-8)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-8)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("METODOS",9, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
  parser.manejoVB.finMetodo(parser.tabla.getObVb());  
                                                    parser.jerarquia=0; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$13",69, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
  parser.exe.agregarTipoMetodo(parser.tabla, "void", c);
                                                    String param = parser.exe.agregarParametrosMetodo(parser.tabla, c);
                                                    if(!param.equals("")){
                                                        parser.metodoExe = a.toString() + "_" +param;   
                                                        parser.exe.actualizarParametrosMetodo(parser.tabla, parser.metodoExe);
                                                    }
                                                    parser.manejoVB.crearMetodo(parser.tabla.getObVb(), a.toString(), c, "void");  
                                                    parser.traspasoVariables(c, parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisVariables());  
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$12",68, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.metodo=a.toString(); 
                                                    parser.metodoExe = a.toString();
                                                    parser.exe.agregarMetodo(parser.tabla, a.toString(), "void");
                                                    parser.operacion.crearMetodo(parser.tabla.getObVb(), a.toString(), false, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$11",67, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODOS ::= tipoPublic tipoFuncion id NT$7 parentesis_a PARAMETROS parentesis_b RETORNO NT$8 ENTER CONTENIDO RETURN NT$9 fin tipoFuncion NT$10 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-14)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-14)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("METODOS",9, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-16)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-12)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
  parser.jerarquia=0;
                                                    parser.metodoExe = "";    
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$10",66, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.finMetodo(parser.tabla.getObVb()); 
                                                    parser.operacion.retornoMetodo(d, e, a.toString(), eleft+PanelPrincipal.totalLineas, eright);  
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$9",65, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.crearMetodo(parser.tabla.getObVb(), a.toString(), c, b);  
                                                    parser.exe.agregarTipoMetodo(parser.tabla, b, c);   
                                                    String param = parser.exe.agregarParametrosMetodo(parser.tabla, c);
                                                    if(!param.equals("")){
                                                        parser.metodoExe = a.toString() + "_"+param;
                                                        parser.exe.actualizarParametrosMetodo(parser.tabla, parser.metodoExe);
                                                    }
                                                    parser.tipoMetodo = b.toString(); 
                                                    parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).setRetorno(b.toString());  
                                                    parser.traspasoVariables(c, parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisVariables());  
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$8",64, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.metodo=a.toString();
                                                    parser.metodoExe = a.toString();
                                                    parser.operacion.crearMetodo(parser.tabla.getObVb(), a.toString(), true, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                    parser.exe.agregarMetodo(parser.tabla, a.toString(), null);   
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$7",63, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR_VAR ::= OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VALOR_VAR",35, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACIONES2 ::= ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES2",6, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACIONES2 ::= coma id igual NT$5 VALOR_VAR NT$6 ASIGNACIONES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES2",6, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.agregarValorVar(parser.tabla, a.toString(), b, parser.metodoExe);   
                                                    if(!parser.isReturn){ 
                                                        parser.operacion.agregarValorVar(a.toString(), parser.tabla.getObVb(), parser.jerarquia, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                    } else { 
                                                        System.out.println("Error, instrucciones luego de un return"); 
                                                        parser.isReturn =null; }   
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$6",62, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
  parser.tipoActual=parser.verif.verificarVarAsignar(a.toString(), parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$5",61, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACIONES ::= id igual NT$3 VALOR_VAR NT$4 ASIGNACIONES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.agregarValorVar(parser.tabla, a.toString(), b, parser.metodoExe);  parser.operacion.agregarValorVar(a.toString(), parser.tabla.getObVb(), parser.jerarquia, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
  parser.tipoActual=parser.verif.verificarVarAsignar(a.toString(), parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // C ::= coma id TIPO_VARIABLE2 ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		  parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas);    
                                                    parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);
                                                    parser.exe.agregarTipo(parser.tabla, parser.variablesTipo, a.toString(), b);
                                                    parser.operacion.modificarTipos(parser.tabla.getObVb(), parser.variablesTipo, b);  
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // C ::= dosPuntos VARIABLES 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // C ::= coma id TIPO_VARIABLE NT$2 C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  if(b.equals("")){ 
                                                        parser.variablesTipo.add(a.toString()); 
                                                    }  
                                                    parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                    parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_VARIABLE2 ::= condAs tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Char"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE2",36, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_VARIABLE2 ::= condAs tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE2",36, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_VARIABLE2 ::= condAs tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Integer"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE2",36, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO_VARIABLE ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_VARIABLE ::= condAs tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Char"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO_VARIABLE ::= condAs tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO_VARIABLE ::= condAs tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Integer"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLES ::= tipoDim id TIPO_VARIABLE2 NT$1 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
   parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas);  
                                                         parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);   
                                                    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VARIABLES ::= tipoDim id TIPO_VARIABLE NT$0 C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  if(b.equals("")){ 
                                                            parser.variablesTipo.add(a.toString()); 
                                                        }   
                                                        parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas);  
                                                        
                                                        parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);
                                                    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // B ::= B error 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // B ::= 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // B ::= B METODOS 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // AA ::= ENTER2 B 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("AA",0, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= AA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		RESULT = start_val;
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxVB$parser.done_parsing();
          return CUP$SintaxVB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

