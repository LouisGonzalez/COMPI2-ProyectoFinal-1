
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 08 23:03:14 CST 2020
//----------------------------------------------------

package gramaticaVB;

import java_cup.runtime.*;
import objetos.*;
import java.util.*;
import Operaciones.*;
import manejoReturn.*;
import verificaciones.*;
import Tablas.*;
import manejoCuartetos.*;
import manejoExe.*;
import objetosApoyo.*;
import cuartetos.*;
import interfaz.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 08 23:03:14 CST 2020
  */
public class SintaxVB extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxVB() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxVB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxVB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\004\004\000\002\102\002" +
    "\000\002\005\007\000\002\103\002\000\002\005\007\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\002\000\002\036\003\000\002\052\004\000\002\052" +
    "\004\000\002\052\004\000\002\052\003\000\002\104\002" +
    "\000\002\006\007\000\002\006\004\000\002\006\006\000" +
    "\002\105\002\000\002\106\002\000\002\007\010\000\002" +
    "\107\002\000\002\110\002\000\002\010\011\000\002\010" +
    "\003\000\002\051\003\000\002\111\002\000\002\112\002" +
    "\000\002\113\002\000\002\114\002\000\002\013\023\000" +
    "\002\115\002\000\002\116\002\000\002\117\002\000\002" +
    "\013\020\000\002\044\003\000\002\044\002\000\002\071" +
    "\006\000\002\020\007\000\002\072\003\000\002\072\002" +
    "\000\002\073\004\000\002\073\003\000\002\074\005\000" +
    "\002\074\002\000\002\074\003\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\004\000\002\047\003\000" +
    "\002\047\005\000\002\047\005\000\002\047\005\000\002" +
    "\047\004\000\002\047\004\000\002\047\006\000\002\120" +
    "\002\000\002\121\002\000\002\043\007\000\002\043\002" +
    "\000\002\053\006\000\002\053\002\000\002\053\003\000" +
    "\002\054\007\000\002\054\002\000\002\054\003\000\002" +
    "\011\003\000\002\011\002\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\003\000\002\055\004" +
    "\000\002\055\004\000\002\055\004\000\002\055\004\000" +
    "\002\055\004\000\002\055\004\000\002\055\004\000\002" +
    "\055\004\000\002\055\004\000\002\055\004\000\002\055" +
    "\004\000\002\055\002\000\002\122\002\000\002\123\002" +
    "\000\002\124\002\000\002\056\016\000\002\017\003\000" +
    "\002\017\002\000\002\017\003\000\002\125\002\000\002" +
    "\057\006\000\002\126\002\000\002\127\002\000\002\130" +
    "\002\000\002\057\013\000\002\057\002\000\002\101\005" +
    "\000\002\131\002\000\002\101\006\000\002\101\003\000" +
    "\002\101\006\000\002\101\004\000\002\101\003\000\002" +
    "\100\005\000\002\067\005\000\002\067\005\000\002\067" +
    "\005\000\002\067\005\000\002\067\005\000\002\067\005" +
    "\000\002\067\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\004\000\002\070\003\000\002\070\005\000\002" +
    "\070\005\000\002\070\005\000\002\070\004\000\002\070" +
    "\004\000\002\070\006\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\004\000\002\065\003\000\002" +
    "\065\003\000\002\132\002\000\002\133\002\000\002\063" +
    "\014\000\002\045\003\000\002\045\003\000\002\066\003" +
    "\000\002\066\005\000\002\066\003\000\002\066\003\000" +
    "\002\134\002\000\002\135\002\000\002\064\011\000\002" +
    "\136\002\000\002\064\007\000\002\064\002\000\002\137" +
    "\002\000\002\061\012\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\140\002\000\002\141\002\000" +
    "\002\142\002\000\002\060\014\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\143\002\000\002\144" +
    "\002\000\002\145\002\000\002\146\002\000\002\147\002" +
    "\000\002\062\024\000\002\046\003\000\002\046\003\000" +
    "\002\042\004\000\002\042\005\000\002\042\004\000\002" +
    "\042\005\000\002\042\002\000\002\042\003\000\002\026" +
    "\003\000\002\026\002\000\002\027\007\000\002\027\007" +
    "\000\002\027\006\000\002\027\006\000\002\150\002\000" +
    "\002\075\005\000\002\151\002\000\002\075\007\000\002" +
    "\075\003\000\002\076\004\000\002\076\004\000\002\076" +
    "\002\000\002\077\003\000\002\077\003\000\002\077\005" +
    "\000\002\077\004\000\002\077\004\000\002\077\006\000" +
    "\002\032\004\000\002\032\003\000\002\034\004\000\002" +
    "\034\003\000\002\034\002\000\002\152\002\000\002\030" +
    "\012\000\002\153\002\000\002\030\011\000\002\154\002" +
    "\000\002\030\010\000\002\155\002\000\002\030\007\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\015\005\000\002\016\006\000\002\016\005\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\002\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ed\000\016\002\uff31\003\uff31\006\uff31\014\uff31\015" +
    "\uff31\066\006\001\002\000\014\002\ufffe\003\ufffe\006\ufffe" +
    "\014\ufffe\015\ufffe\001\002\000\004\002\012\001\002\000" +
    "\016\002\uff32\003\uff32\006\uff32\014\uff32\015\uff32\066\010" +
    "\001\002\000\014\002\uff33\003\uff33\006\uff33\014\uff33\015" +
    "\uff33\001\002\000\070\002\uff34\003\uff34\006\uff34\007\uff34" +
    "\010\uff34\014\uff34\015\uff34\016\uff34\020\uff34\022\uff34\023" +
    "\uff34\024\uff34\025\uff34\030\uff34\034\uff34\035\uff34\036\uff34" +
    "\037\uff34\040\uff34\066\010\070\uff34\074\uff34\076\uff34\077" +
    "\uff34\101\uff34\104\uff34\105\uff34\001\002\000\066\002\uff35" +
    "\003\uff35\006\uff35\007\uff35\010\uff35\014\uff35\015\uff35\016" +
    "\uff35\020\uff35\022\uff35\023\uff35\024\uff35\025\uff35\030\uff35" +
    "\034\uff35\035\uff35\036\uff35\037\uff35\040\uff35\070\uff35\074" +
    "\uff35\076\uff35\077\uff35\101\uff35\104\uff35\105\uff35\001\002" +
    "\000\004\002\001\001\002\000\014\002\000\003\014\006" +
    "\015\014\uffd9\015\uffd9\001\002\000\014\002\ufffd\003\ufffd" +
    "\006\ufffd\014\ufffd\015\ufffd\001\002\000\006\014\uffda\015" +
    "\uffda\001\002\000\006\014\020\015\021\001\002\000\014" +
    "\002\uffff\003\uffff\006\uffff\014\uffff\015\uffff\001\002\000" +
    "\004\070\u01e4\001\002\000\004\070\022\001\002\000\004" +
    "\061\uffe3\001\002\000\004\061\024\001\002\000\012\003" +
    "\025\062\uffb9\070\uffb6\107\uffb6\001\002\000\010\062\uffb8" +
    "\070\uffb5\107\uffb5\001\002\000\006\070\uffb3\107\u01e0\001" +
    "\002\000\004\062\030\001\002\000\006\003\032\021\033" +
    "\001\002\000\004\066\uffe2\001\002\000\010\004\uffaf\062" +
    "\uffaf\066\uffaf\001\002\000\010\011\034\012\035\013\036" +
    "\001\002\000\010\004\uffb2\062\uffb2\066\uffb2\001\002\000" +
    "\010\004\uffb0\062\uffb0\066\uffb0\001\002\000\010\004\uffb1" +
    "\062\uffb1\066\uffb1\001\002\000\004\066\010\001\002\000" +
    "\042\007\uffa3\010\uffa3\016\uffa3\022\uffa3\023\uffa3\025\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\070\uffa3\074" +
    "\uffa3\076\uffa3\104\uffa3\105\uffa3\001\002\000\042\007\uffbb" +
    "\010\043\016\074\022\046\023\042\025\065\034\053\035" +
    "\044\036\054\037\056\040\052\070\070\074\066\076\060" +
    "\104\061\105\057\001\002\000\020\003\uff5e\033\uff5e\041" +
    "\uff5e\044\uff5e\061\uff5e\067\uff5e\070\uff5e\001\002\000\004" +
    "\070\u01c1\001\002\000\004\061\uff27\001\002\000\056\003" +
    "\uffa6\007\uffa6\010\uffa6\016\uffa6\020\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\030\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\070\uffa6\074\uffa6\076\uffa6\077\uffa6\101\uffa6" +
    "\104\uffa6\105\uffa6\001\002\000\004\066\uff63\001\002\000" +
    "\056\003\uffab\007\uffab\010\uffab\016\uffab\020\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\030\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\070\uffab\074\uffab\076\uffab\077\uffab" +
    "\101\uffab\104\uffab\105\uffab\001\002\000\056\003\uffa8\007" +
    "\uffa8\010\uffa8\016\uffa8\020\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\030\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\070\uffa8\074\uffa8\076\uffa8\077\uffa8\101\uffa8\104\uffa8" +
    "\105\uffa8\001\002\000\004\007\uffe1\001\002\000\004\061" +
    "\u01ac\001\002\000\004\061\uff28\001\002\000\004\061\uff26" +
    "\001\002\000\056\003\uffac\007\uffac\010\uffac\016\uffac\020" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\030\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\070\uffac\074\uffac\076" +
    "\uffac\077\uffac\101\uffac\104\uffac\105\uffac\001\002\000\004" +
    "\061\u01a6\001\002\000\174\004\ufee6\005\ufee6\006\ufee6\007" +
    "\ufee6\010\ufee6\011\ufee6\012\ufee6\013\ufee6\014\ufee6\015\ufee6" +
    "\016\ufee6\017\ufee6\020\ufee6\021\ufee6\022\ufee6\023\ufee6\024" +
    "\ufee6\025\ufee6\026\ufee6\027\ufee6\030\ufee6\031\ufee6\032\ufee6" +
    "\033\ufee6\034\ufee6\035\ufee6\036\ufee6\037\ufee6\040\ufee6\043" +
    "\ufee6\044\ufee6\045\ufee6\046\ufee6\047\ufee6\050\ufee6\051\ufee6" +
    "\052\ufee6\053\ufee6\054\ufee6\055\ufee6\056\ufee6\057\ufee6\060" +
    "\ufee6\061\ufee6\062\ufee6\063\ufee6\064\ufee6\065\ufee6\066\ufee6" +
    "\067\ufee6\070\ufee6\071\ufee6\072\ufee6\073\ufee6\074\ufee6\075" +
    "\ufee6\076\ufee6\077\ufee6\100\ufee6\101\ufee6\106\ufee6\001\002" +
    "\000\006\003\u0187\077\u0189\001\002\000\172\004\ufeaa\005" +
    "\ufeaa\006\ufeaa\007\ufeaa\010\ufeaa\011\ufeaa\012\ufeaa\013\ufeaa" +
    "\014\ufeaa\015\ufeaa\016\ufeaa\017\ufeaa\020\ufeaa\021\ufeaa\022" +
    "\ufeaa\023\ufeaa\024\ufeaa\025\ufeaa\026\ufeaa\027\ufeaa\030\ufeaa" +
    "\031\ufeaa\032\ufeaa\033\ufeaa\034\ufeaa\035\ufeaa\036\ufeaa\037" +
    "\ufeaa\040\ufeaa\043\ufeaa\044\ufeaa\045\ufeaa\046\ufeaa\047\ufeaa" +
    "\050\ufeaa\051\ufeaa\052\ufeaa\053\ufeaa\054\ufeaa\055\ufeaa\056" +
    "\ufeaa\057\ufeaa\060\ufeaa\061\ufeaa\062\ufeaa\063\ufeaa\064\ufeaa" +
    "\065\ufeaa\066\ufeaa\067\ufeaa\070\ufeaa\071\ufeaa\072\ufeaa\073" +
    "\ufeaa\074\ufeaa\075\ufeaa\076\ufeaa\077\ufeaa\100\ufeaa\101\ufeaa" +
    "\001\002\000\056\003\uffad\007\uffad\010\uffad\016\uffad\020" +
    "\uffad\022\uffad\023\uffad\024\uffad\025\uffad\030\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\040\uffad\070\uffad\074\uffad\076" +
    "\uffad\077\uffad\101\uffad\104\uffad\105\uffad\001\002\000\004" +
    "\061\u0142\001\002\000\056\003\uffae\007\uffae\010\uffae\016" +
    "\uffae\020\uffae\022\uffae\023\uffae\024\uffae\025\uffae\030\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\070\uffae\074" +
    "\uffae\076\uffae\077\uffae\101\uffae\104\uffae\105\uffae\001\002" +
    "\000\004\070\uff57\001\002\000\014\041\uffbe\044\uffbe\061" +
    "\uffbe\067\uffbe\070\uffbe\001\002\000\056\003\uffaa\007\uffaa" +
    "\010\uffaa\016\uffaa\020\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\030\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\070\uffaa\074\uffaa\076\uffaa\077\uffaa\101\uffaa\104\uffaa\105" +
    "\uffaa\001\002\000\004\047\227\001\002\000\056\003\uffa4" +
    "\007\uffa4\010\uffa4\016\uffa4\020\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\030\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\070\uffa4\074\uffa4\076\uffa4\077\uffa4\101\uffa4\104" +
    "\uffa4\105\uffa4\001\002\000\056\003\uffa5\007\uffa5\010\uffa5" +
    "\016\uffa5\020\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\030" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\070\uffa5" +
    "\074\uffa5\076\uffa5\077\uffa5\101\uffa5\104\uffa5\105\uffa5\001" +
    "\002\000\056\003\uffa9\007\uffa9\010\uffa9\016\uffa9\020\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\030\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\070\uffa9\074\uffa9\076\uffa9" +
    "\077\uffa9\101\uffa9\104\uffa9\105\uffa9\001\002\000\020\003" +
    "\uffa2\033\uffa2\041\uffa2\044\uffa2\061\uffa2\067\uffa2\070\uffa2" +
    "\001\002\000\056\003\uffa7\007\uffa7\010\uffa7\016\uffa7\020" +
    "\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\030\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\040\uffa7\070\uffa7\074\uffa7\076" +
    "\uffa7\077\uffa7\101\uffa7\104\uffa7\105\uffa7\001\002\000\020" +
    "\003\106\033\101\041\111\044\102\061\110\067\103\070" +
    "\077\001\002\000\052\003\uff85\004\uff85\017\uff85\031\uff85" +
    "\032\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050" +
    "\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\061\210" +
    "\062\uff85\066\uff85\103\uff85\001\002\000\050\003\uff86\004" +
    "\uff86\017\uff86\031\uff86\032\uff86\043\uff86\044\uff86\045\uff86" +
    "\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054" +
    "\uff86\055\uff86\062\uff86\066\uff86\103\uff86\001\002\000\014" +
    "\041\111\044\102\061\222\067\103\070\077\001\002\000" +
    "\006\067\205\070\207\001\002\000\052\003\uff82\004\uff82" +
    "\005\203\017\uff82\031\uff82\032\uff82\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82" +
    "\054\uff82\055\uff82\062\uff82\066\uff82\103\uff82\001\002\000" +
    "\034\003\174\043\122\044\124\045\121\046\125\047\200" +
    "\050\172\051\177\052\173\053\171\054\175\055\176\103" +
    "\123\001\002\000\050\003\uff84\004\uff84\017\uff84\031\uff84" +
    "\032\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050" +
    "\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\062\uff84" +
    "\066\uff84\103\uff84\001\002\000\014\003\uff8e\017\uff8e\031" +
    "\uff8e\032\uff8e\066\uff8e\001\002\000\014\003\uffa1\017\uffa1" +
    "\031\135\032\133\066\uffa1\001\002\000\014\041\111\044" +
    "\102\061\110\067\103\070\077\001\002\000\006\067\113" +
    "\070\114\001\002\000\014\003\uff91\017\uff91\031\uff91\032" +
    "\uff91\066\uff91\001\002\000\004\041\116\001\002\000\004" +
    "\041\115\001\002\000\050\003\uff80\004\uff80\017\uff80\031" +
    "\uff80\032\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80" +
    "\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\062" +
    "\uff80\066\uff80\103\uff80\001\002\000\050\003\uff7f\004\uff7f" +
    "\017\uff7f\031\uff7f\032\uff7f\043\uff7f\044\uff7f\045\uff7f\046" +
    "\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f" +
    "\055\uff7f\062\uff7f\066\uff7f\103\uff7f\001\002\000\016\043" +
    "\122\044\124\045\121\046\125\062\120\103\123\001\002" +
    "\000\050\003\uff8c\004\uff8c\017\uff8c\031\uff8c\032\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c" +
    "\052\uff8c\053\uff8c\054\uff8c\055\uff8c\062\uff8c\066\uff8c\103" +
    "\uff8c\001\002\000\014\041\111\044\102\061\110\067\103" +
    "\070\077\001\002\000\014\041\111\044\102\061\110\067" +
    "\103\070\077\001\002\000\014\041\111\044\102\061\110" +
    "\067\103\070\077\001\002\000\014\041\111\044\102\061" +
    "\110\067\103\070\077\001\002\000\014\041\111\044\102" +
    "\061\110\067\103\070\077\001\002\000\050\003\uff88\004" +
    "\uff88\017\uff88\031\uff88\032\uff88\043\uff88\044\uff88\045\uff88" +
    "\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054" +
    "\uff88\055\uff88\062\uff88\066\uff88\103\uff88\001\002\000\050" +
    "\003\uff8a\004\uff8a\017\uff8a\031\uff8a\032\uff8a\043\uff8a\044" +
    "\uff8a\045\121\046\125\047\uff8a\050\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\062\uff8a\066\uff8a\103\123\001" +
    "\002\000\050\003\uff87\004\uff87\017\uff87\031\uff87\032\uff87" +
    "\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051" +
    "\uff87\052\uff87\053\uff87\054\uff87\055\uff87\062\uff87\066\uff87" +
    "\103\uff87\001\002\000\050\003\uff8b\004\uff8b\017\uff8b\031" +
    "\uff8b\032\uff8b\043\uff8b\044\uff8b\045\121\046\125\047\uff8b" +
    "\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\062" +
    "\uff8b\066\uff8b\103\123\001\002\000\050\003\uff89\004\uff89" +
    "\017\uff89\031\uff89\032\uff89\043\uff89\044\uff89\045\uff89\046" +
    "\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89" +
    "\055\uff89\062\uff89\066\uff89\103\uff89\001\002\000\020\003" +
    "\uff93\033\uff93\041\uff93\044\uff93\061\uff93\067\uff93\070\uff93" +
    "\001\002\000\010\003\140\017\141\066\uff9d\001\002\000" +
    "\020\003\106\033\101\041\111\044\102\061\110\067\103" +
    "\070\077\001\002\000\014\003\uff94\017\uff94\031\uff94\032" +
    "\uff94\066\uff94\001\002\000\004\066\010\001\002\000\004" +
    "\066\uff9c\001\002\000\004\066\uff9e\001\002\000\044\007" +
    "\uffa3\010\uffa3\016\uffa3\020\uffa3\022\uffa3\023\uffa3\025\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\070\uffa3\076" +
    "\uffa3\101\uffa3\104\uffa3\105\uffa3\001\002\000\044\007\uffa0" +
    "\010\043\016\074\020\uffa0\022\046\023\042\025\065\034" +
    "\053\035\044\036\054\037\056\040\052\070\070\076\060" +
    "\101\uffa0\104\061\105\057\001\002\000\010\007\uff95\020" +
    "\147\101\145\001\002\000\020\003\uff99\033\uff99\041\uff99" +
    "\044\uff99\061\uff99\067\uff99\070\uff99\001\002\000\004\007" +
    "\153\001\002\000\004\066\uff9b\001\002\000\004\066\010" +
    "\001\002\000\040\007\uffa3\010\uffa3\016\uffa3\022\uffa3\023" +
    "\uffa3\025\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\070\uffa3\076\uffa3\104\uffa3\105\uffa3\001\002\000\040\007" +
    "\uff9a\010\043\016\074\022\046\023\042\025\065\034\053" +
    "\035\044\036\054\037\056\040\052\070\070\076\060\104" +
    "\061\105\057\001\002\000\004\016\154\001\002\000\004" +
    "\066\010\001\002\000\056\003\uff9f\007\uff9f\010\uff9f\016" +
    "\uff9f\020\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\030\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\070\uff9f\074" +
    "\uff9f\076\uff9f\077\uff9f\101\uff9f\104\uff9f\105\uff9f\001\002" +
    "\000\020\003\106\033\101\041\111\044\102\061\110\067" +
    "\103\070\077\001\002\000\014\003\uff98\017\uff98\031\135" +
    "\032\133\066\uff98\001\002\000\010\003\140\017\141\066" +
    "\uff9d\001\002\000\004\066\010\001\002\000\044\007\uffa3" +
    "\010\uffa3\016\uffa3\020\uffa3\022\uffa3\023\uffa3\025\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\070\uffa3\076\uffa3" +
    "\101\uffa3\104\uffa3\105\uffa3\001\002\000\044\007\uff97\010" +
    "\043\016\074\020\uff97\022\046\023\042\025\065\034\053" +
    "\035\044\036\054\037\056\040\052\070\070\076\060\101" +
    "\uff97\104\061\105\057\001\002\000\010\007\uff95\020\147" +
    "\101\145\001\002\000\004\007\uff96\001\002\000\020\003" +
    "\106\033\101\041\111\044\102\061\110\067\103\070\077" +
    "\001\002\000\014\003\uff92\017\uff92\031\135\032\uff92\066" +
    "\uff92\001\002\000\014\041\111\044\102\061\110\067\103" +
    "\070\077\001\002\000\014\041\uff79\044\uff79\061\uff79\067" +
    "\uff79\070\uff79\001\002\000\016\041\uff7a\044\uff7a\051\201" +
    "\061\uff7a\067\uff7a\070\uff7a\001\002\000\014\041\uff77\044" +
    "\uff77\061\uff77\067\uff77\070\uff77\001\002\000\014\041\uff73" +
    "\044\uff73\061\uff73\067\uff73\070\uff73\001\002\000\014\041" +
    "\uff76\044\uff76\061\uff76\067\uff76\070\uff76\001\002\000\014" +
    "\041\uff78\044\uff78\061\uff78\067\uff78\070\uff78\001\002\000" +
    "\014\041\uff7b\044\uff7b\061\uff7b\067\uff7b\070\uff7b\001\002" +
    "\000\014\041\uff74\044\uff74\061\uff74\067\uff74\070\uff74\001" +
    "\002\000\014\041\uff75\044\uff75\061\uff75\067\uff75\070\uff75" +
    "\001\002\000\030\003\uff8d\017\uff8d\031\uff8d\032\uff8d\043" +
    "\122\044\124\045\121\046\125\062\uff8d\066\uff8d\103\123" +
    "\001\002\000\004\067\204\001\002\000\050\003\uff81\004" +
    "\uff81\017\uff81\031\uff81\032\uff81\043\uff81\044\uff81\045\uff81" +
    "\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054" +
    "\uff81\055\uff81\062\uff81\066\uff81\103\uff81\001\002\000\052" +
    "\003\uff7d\004\uff7d\005\220\017\uff7d\031\uff7d\032\uff7d\043" +
    "\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d" +
    "\052\uff7d\053\uff7d\054\uff7d\055\uff7d\062\uff7d\066\uff7d\103" +
    "\uff7d\001\002\000\050\003\uff83\004\uff83\017\uff83\031\uff83" +
    "\032\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050" +
    "\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\062\uff83" +
    "\066\uff83\103\uff83\001\002\000\052\003\uff7e\004\uff7e\017" +
    "\uff7e\031\uff7e\032\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055" +
    "\uff7e\061\210\062\uff7e\066\uff7e\103\uff7e\001\002\000\020" +
    "\003\211\041\uffd1\044\uffd1\061\uffd1\062\uffd5\067\uffd1\070" +
    "\uffd1\001\002\000\016\041\uffd0\044\uffd0\061\uffd0\062\uffd3" +
    "\067\uffd0\070\uffd0\001\002\000\004\062\217\001\002\000" +
    "\014\041\111\044\102\061\110\067\103\070\077\001\002" +
    "\000\004\062\uffd6\001\002\000\020\004\216\043\122\044" +
    "\124\045\121\046\125\062\uffd4\103\123\001\002\000\014" +
    "\041\uffd2\044\uffd2\061\uffd2\067\uffd2\070\uffd2\001\002\000" +
    "\054\003\uffd8\004\uffd8\017\uffd8\026\uffd8\027\uffd8\031\uffd8" +
    "\032\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\062\uffd8" +
    "\066\uffd8\103\uffd8\001\002\000\004\067\221\001\002\000" +
    "\050\003\uff7c\004\uff7c\017\uff7c\031\uff7c\032\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052" +
    "\uff7c\053\uff7c\054\uff7c\055\uff7c\062\uff7c\066\uff7c\103\uff7c" +
    "\001\002\000\014\041\111\044\102\061\110\067\103\070" +
    "\077\001\002\000\014\003\uff8f\017\uff8f\031\uff8f\032\uff8f" +
    "\066\uff8f\001\002\000\036\003\174\043\122\044\124\045" +
    "\121\046\125\047\200\050\172\051\177\052\173\053\171" +
    "\054\175\055\176\062\120\103\123\001\002\000\004\062" +
    "\226\001\002\000\014\003\uff90\017\uff90\031\uff90\032\uff90" +
    "\066\uff90\001\002\000\022\034\053\035\044\036\054\041" +
    "\uffeb\044\uffeb\061\uffeb\067\uffeb\070\uffeb\001\002\000\014" +
    "\041\374\044\370\061\373\067\371\070\364\001\002\000" +
    "\004\061\232\001\002\000\016\003\236\042\241\044\240" +
    "\062\233\067\234\070\242\001\002\000\004\066\uff2e\001" +
    "\002\000\012\005\360\043\uff3a\062\uff3a\102\uff3a\001\002" +
    "\000\004\062\355\001\002\000\004\062\uff3f\001\002\000" +
    "\010\043\uff43\062\uff43\102\uff43\001\002\000\006\067\347" +
    "\070\350\001\002\000\174\004\ufee6\005\ufee6\006\ufee6\007" +
    "\ufee6\010\ufee6\011\ufee6\012\ufee6\013\ufee6\014\ufee6\015\ufee6" +
    "\016\ufee6\017\ufee6\020\ufee6\021\ufee6\022\ufee6\023\ufee6\024" +
    "\ufee6\025\ufee6\026\ufee6\027\ufee6\030\ufee6\031\ufee6\032\ufee6" +
    "\033\ufee6\034\ufee6\035\ufee6\036\ufee6\037\ufee6\040\ufee6\042" +
    "\ufee6\043\ufee6\044\ufee6\045\ufee6\046\ufee6\047\ufee6\050\ufee6" +
    "\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055\ufee6\056\ufee6\057" +
    "\ufee6\060\ufee6\061\ufee6\062\ufee6\063\ufee6\064\ufee6\065\ufee6" +
    "\066\ufee6\067\ufee6\070\ufee6\071\ufee6\072\ufee6\073\ufee6\074" +
    "\ufee6\075\ufee6\076\ufee6\077\ufee6\100\ufee6\101\ufee6\001\002" +
    "\000\010\043\uff3b\062\uff3b\102\uff3b\001\002\000\174\004" +
    "\261\005\311\006\304\007\322\010\253\011\326\012\313" +
    "\013\270\014\306\015\273\016\272\017\321\020\312\021" +
    "\327\022\334\023\256\024\267\025\340\026\317\027\332" +
    "\030\266\031\244\032\264\033\245\034\257\035\260\036" +
    "\324\037\310\040\254\042\247\043\302\044\276\045\307" +
    "\046\330\047\262\050\277\051\305\052\265\053\303\054" +
    "\335\055\323\056\300\057\263\060\301\061\320\062\316" +
    "\063\337\064\336\065\255\066\331\067\275\070\315\071" +
    "\333\072\314\073\274\074\252\075\250\076\246\077\251" +
    "\100\325\101\271\001\002\000\176\004\uff0a\005\uff0a\006" +
    "\uff0a\007\uff0a\010\uff0a\011\uff0a\012\uff0a\013\uff0a\014\uff0a" +
    "\015\uff0a\016\uff0a\017\uff0a\020\uff0a\021\uff0a\022\uff0a\023" +
    "\uff0a\024\uff0a\025\uff0a\026\uff0a\027\uff0a\030\uff0a\031\uff0a" +
    "\032\uff0a\033\uff0a\034\uff0a\035\uff0a\036\uff0a\037\uff0a\040" +
    "\uff0a\042\uff0a\043\uff0a\044\uff0a\045\uff0a\046\uff0a\047\uff0a" +
    "\050\uff0a\051\uff0a\052\uff0a\053\uff0a\054\uff0a\055\uff0a\056" +
    "\uff0a\057\uff0a\060\uff0a\061\uff0a\062\uff0a\063\uff0a\064\uff0a" +
    "\065\uff0a\066\uff0a\067\uff0a\070\uff0a\071\uff0a\072\uff0a\073" +
    "\uff0a\074\uff0a\075\uff0a\076\uff0a\077\uff0a\100\uff0a\101\uff0a" +
    "\106\uff0a\001\002\000\176\004\uff08\005\uff08\006\uff08\007" +
    "\uff08\010\uff08\011\uff08\012\uff08\013\uff08\014\uff08\015\uff08" +
    "\016\uff08\017\uff08\020\uff08\021\uff08\022\uff08\023\uff08\024" +
    "\uff08\025\uff08\026\uff08\027\uff08\030\uff08\031\uff08\032\uff08" +
    "\033\uff08\034\uff08\035\uff08\036\uff08\037\uff08\040\uff08\042" +
    "\uff08\043\uff08\044\uff08\045\uff08\046\uff08\047\uff08\050\uff08" +
    "\051\uff08\052\uff08\053\uff08\054\uff08\055\uff08\056\uff08\057" +
    "\uff08\060\uff08\061\uff08\062\uff08\063\uff08\064\uff08\065\uff08" +
    "\066\uff08\067\uff08\070\uff08\071\uff08\072\uff08\073\uff08\074" +
    "\uff08\075\uff08\076\uff08\077\uff08\100\uff08\101\uff08\106\uff08" +
    "\001\002\000\176\004\uff03\005\uff03\006\uff03\007\uff03\010" +
    "\uff03\011\uff03\012\uff03\013\uff03\014\uff03\015\uff03\016\uff03" +
    "\017\uff03\020\uff03\021\uff03\022\uff03\023\uff03\024\uff03\025" +
    "\uff03\026\uff03\027\uff03\030\uff03\031\uff03\032\uff03\033\uff03" +
    "\034\uff03\035\uff03\036\uff03\037\uff03\040\uff03\042\uff03\043" +
    "\uff03\044\uff03\045\uff03\046\uff03\047\uff03\050\uff03\051\uff03" +
    "\052\uff03\053\uff03\054\uff03\055\uff03\056\uff03\057\uff03\060" +
    "\uff03\061\uff03\062\uff03\063\uff03\064\uff03\065\uff03\066\uff03" +
    "\067\uff03\070\uff03\071\uff03\072\uff03\073\uff03\074\uff03\075" +
    "\uff03\076\uff03\077\uff03\100\uff03\101\uff03\106\uff03\001\002" +
    "\000\010\043\uff41\062\uff41\102\uff41\001\002\000\176\004" +
    "\uff07\005\uff07\006\uff07\007\uff07\010\uff07\011\uff07\012\uff07" +
    "\013\uff07\014\uff07\015\uff07\016\uff07\017\uff07\020\uff07\021" +
    "\uff07\022\uff07\023\uff07\024\uff07\025\uff07\026\uff07\027\uff07" +
    "\030\uff07\031\uff07\032\uff07\033\uff07\034\uff07\035\uff07\036" +
    "\uff07\037\uff07\040\uff07\042\uff07\043\uff07\044\uff07\045\uff07" +
    "\046\uff07\047\uff07\050\uff07\051\uff07\052\uff07\053\uff07\054" +
    "\uff07\055\uff07\056\uff07\057\uff07\060\uff07\061\uff07\062\uff07" +
    "\063\uff07\064\uff07\065\uff07\066\uff07\067\uff07\070\uff07\071" +
    "\uff07\072\uff07\073\uff07\074\uff07\075\uff07\076\uff07\077\uff07" +
    "\100\uff07\101\uff07\106\uff07\001\002\000\176\004\uff02\005" +
    "\uff02\006\uff02\007\uff02\010\uff02\011\uff02\012\uff02\013\uff02" +
    "\014\uff02\015\uff02\016\uff02\017\uff02\020\uff02\021\uff02\022" +
    "\uff02\023\uff02\024\uff02\025\uff02\026\uff02\027\uff02\030\uff02" +
    "\031\uff02\032\uff02\033\uff02\034\uff02\035\uff02\036\uff02\037" +
    "\uff02\040\uff02\042\uff02\043\uff02\044\uff02\045\uff02\046\uff02" +
    "\047\uff02\050\uff02\051\uff02\052\uff02\053\uff02\054\uff02\055" +
    "\uff02\056\uff02\057\uff02\060\uff02\061\uff02\062\uff02\063\uff02" +
    "\064\uff02\065\uff02\066\uff02\067\uff02\070\uff02\071\uff02\072" +
    "\uff02\073\uff02\074\uff02\075\uff02\076\uff02\077\uff02\100\uff02" +
    "\101\uff02\106\uff02\001\002\000\176\004\uff1d\005\uff1d\006" +
    "\uff1d\007\uff1d\010\uff1d\011\uff1d\012\uff1d\013\uff1d\014\uff1d" +
    "\015\uff1d\016\uff1d\017\uff1d\020\uff1d\021\uff1d\022\uff1d\023" +
    "\uff1d\024\uff1d\025\uff1d\026\uff1d\027\uff1d\030\uff1d\031\uff1d" +
    "\032\uff1d\033\uff1d\034\uff1d\035\uff1d\036\uff1d\037\uff1d\040" +
    "\uff1d\042\uff1d\043\uff1d\044\uff1d\045\uff1d\046\uff1d\047\uff1d" +
    "\050\uff1d\051\uff1d\052\uff1d\053\uff1d\054\uff1d\055\uff1d\056" +
    "\uff1d\057\uff1d\060\uff1d\061\uff1d\062\uff1d\063\uff1d\064\uff1d" +
    "\065\uff1d\066\uff1d\067\uff1d\070\uff1d\071\uff1d\072\uff1d\073" +
    "\uff1d\074\uff1d\075\uff1d\076\uff1d\077\uff1d\100\uff1d\101\uff1d" +
    "\106\uff1d\001\002\000\176\004\uff1e\005\uff1e\006\uff1e\007" +
    "\uff1e\010\uff1e\011\uff1e\012\uff1e\013\uff1e\014\uff1e\015\uff1e" +
    "\016\uff1e\017\uff1e\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024" +
    "\uff1e\025\uff1e\026\uff1e\027\uff1e\030\uff1e\031\uff1e\032\uff1e" +
    "\033\uff1e\034\uff1e\035\uff1e\036\uff1e\037\uff1e\040\uff1e\042" +
    "\uff1e\043\uff1e\044\uff1e\045\uff1e\046\uff1e\047\uff1e\050\uff1e" +
    "\051\uff1e\052\uff1e\053\uff1e\054\uff1e\055\uff1e\056\uff1e\057" +
    "\uff1e\060\uff1e\061\uff1e\062\uff1e\063\uff1e\064\uff1e\065\uff1e" +
    "\066\uff1e\067\uff1e\070\uff1e\071\uff1e\072\uff1e\073\uff1e\074" +
    "\uff1e\075\uff1e\076\uff1e\077\uff1e\100\uff1e\101\uff1e\106\uff1e" +
    "\001\002\000\176\004\uff00\005\uff00\006\uff00\007\uff00\010" +
    "\uff00\011\uff00\012\uff00\013\uff00\014\uff00\015\uff00\016\uff00" +
    "\017\uff00\020\uff00\021\uff00\022\uff00\023\uff00\024\uff00\025" +
    "\uff00\026\uff00\027\uff00\030\uff00\031\uff00\032\uff00\033\uff00" +
    "\034\uff00\035\uff00\036\uff00\037\uff00\040\uff00\042\uff00\043" +
    "\uff00\044\uff00\045\uff00\046\uff00\047\uff00\050\uff00\051\uff00" +
    "\052\uff00\053\uff00\054\uff00\055\uff00\056\uff00\057\uff00\060" +
    "\uff00\061\uff00\062\uff00\063\uff00\064\uff00\065\uff00\066\uff00" +
    "\067\uff00\070\uff00\071\uff00\072\uff00\073\uff00\074\uff00\075" +
    "\uff00\076\uff00\077\uff00\100\uff00\101\uff00\106\uff00\001\002" +
    "\000\176\004\ufeeb\005\ufeeb\006\ufeeb\007\ufeeb\010\ufeeb\011" +
    "\ufeeb\012\ufeeb\013\ufeeb\014\ufeeb\015\ufeeb\016\ufeeb\017\ufeeb" +
    "\020\ufeeb\021\ufeeb\022\ufeeb\023\ufeeb\024\ufeeb\025\ufeeb\026" +
    "\ufeeb\027\ufeeb\030\ufeeb\031\ufeeb\032\ufeeb\033\ufeeb\034\ufeeb" +
    "\035\ufeeb\036\ufeeb\037\ufeeb\040\ufeeb\042\ufeeb\043\ufeeb\044" +
    "\ufeeb\045\ufeeb\046\ufeeb\047\ufeeb\050\ufeeb\051\ufeeb\052\ufeeb" +
    "\053\ufeeb\054\ufeeb\055\ufeeb\056\ufeeb\057\ufeeb\060\ufeeb\061" +
    "\ufeeb\062\ufeeb\063\ufeeb\064\ufeeb\065\ufeeb\066\ufeeb\067\ufeeb" +
    "\070\ufeeb\071\ufeeb\072\ufeeb\073\ufeeb\074\ufeeb\075\ufeeb\076" +
    "\ufeeb\077\ufeeb\100\ufeeb\101\ufeeb\106\ufeeb\001\002\000\176" +
    "\004\uff11\005\uff11\006\uff11\007\uff11\010\uff11\011\uff11\012" +
    "\uff11\013\uff11\014\uff11\015\uff11\016\uff11\017\uff11\020\uff11" +
    "\021\uff11\022\uff11\023\uff11\024\uff11\025\uff11\026\uff11\027" +
    "\uff11\030\uff11\031\uff11\032\uff11\033\uff11\034\uff11\035\uff11" +
    "\036\uff11\037\uff11\040\uff11\042\uff11\043\uff11\044\uff11\045" +
    "\uff11\046\uff11\047\uff11\050\uff11\051\uff11\052\uff11\053\uff11" +
    "\054\uff11\055\uff11\056\uff11\057\uff11\060\uff11\061\uff11\062" +
    "\uff11\063\uff11\064\uff11\065\uff11\066\uff11\067\uff11\070\uff11" +
    "\071\uff11\072\uff11\073\uff11\074\uff11\075\uff11\076\uff11\077" +
    "\uff11\100\uff11\101\uff11\106\uff11\001\002\000\176\004\uff06" +
    "\005\uff06\006\uff06\007\uff06\010\uff06\011\uff06\012\uff06\013" +
    "\uff06\014\uff06\015\uff06\016\uff06\017\uff06\020\uff06\021\uff06" +
    "\022\uff06\023\uff06\024\uff06\025\uff06\026\uff06\027\uff06\030" +
    "\uff06\031\uff06\032\uff06\033\uff06\034\uff06\035\uff06\036\uff06" +
    "\037\uff06\040\uff06\042\uff06\043\uff06\044\uff06\045\uff06\046" +
    "\uff06\047\uff06\050\uff06\051\uff06\052\uff06\053\uff06\054\uff06" +
    "\055\uff06\056\uff06\057\uff06\060\uff06\061\uff06\062\uff06\063" +
    "\uff06\064\uff06\065\uff06\066\uff06\067\uff06\070\uff06\071\uff06" +
    "\072\uff06\073\uff06\074\uff06\075\uff06\076\uff06\077\uff06\100" +
    "\uff06\101\uff06\106\uff06\001\002\000\176\004\uff05\005\uff05" +
    "\006\uff05\007\uff05\010\uff05\011\uff05\012\uff05\013\uff05\014" +
    "\uff05\015\uff05\016\uff05\017\uff05\020\uff05\021\uff05\022\uff05" +
    "\023\uff05\024\uff05\025\uff05\026\uff05\027\uff05\030\uff05\031" +
    "\uff05\032\uff05\033\uff05\034\uff05\035\uff05\036\uff05\037\uff05" +
    "\040\uff05\042\uff05\043\uff05\044\uff05\045\uff05\046\uff05\047" +
    "\uff05\050\uff05\051\uff05\052\uff05\053\uff05\054\uff05\055\uff05" +
    "\056\uff05\057\uff05\060\uff05\061\uff05\062\uff05\063\uff05\064" +
    "\uff05\065\uff05\066\uff05\067\uff05\070\uff05\071\uff05\072\uff05" +
    "\073\uff05\074\uff05\075\uff05\076\uff05\077\uff05\100\uff05\101" +
    "\uff05\106\uff05\001\002\000\176\004\uff22\005\uff22\006\uff22" +
    "\007\uff22\010\uff22\011\uff22\012\uff22\013\uff22\014\uff22\015" +
    "\uff22\016\uff22\017\uff22\020\uff22\021\uff22\022\uff22\023\uff22" +
    "\024\uff22\025\uff22\026\uff22\027\uff22\030\uff22\031\uff22\032" +
    "\uff22\033\uff22\034\uff22\035\uff22\036\uff22\037\uff22\040\uff22" +
    "\042\uff22\043\uff22\044\uff22\045\uff22\046\uff22\047\uff22\050" +
    "\uff22\051\uff22\052\uff22\053\uff22\054\uff22\055\uff22\056\uff22" +
    "\057\uff22\060\uff22\061\uff22\062\uff22\063\uff22\064\uff22\065" +
    "\uff22\066\uff22\067\uff22\070\uff22\071\uff22\072\uff22\073\uff22" +
    "\074\uff22\075\uff22\076\uff22\077\uff22\100\uff22\101\uff22\106" +
    "\uff22\001\002\000\176\004\ufef9\005\ufef9\006\ufef9\007\ufef9" +
    "\010\ufef9\011\ufef9\012\ufef9\013\ufef9\014\ufef9\015\ufef9\016" +
    "\ufef9\017\ufef9\020\ufef9\021\ufef9\022\ufef9\023\ufef9\024\ufef9" +
    "\025\ufef9\026\ufef9\027\ufef9\030\ufef9\031\ufef9\032\ufef9\033" +
    "\ufef9\034\ufef9\035\ufef9\036\ufef9\037\ufef9\040\ufef9\042\ufef9" +
    "\043\ufef9\044\ufef9\045\ufef9\046\ufef9\047\ufef9\050\ufef9\051" +
    "\ufef9\052\ufef9\053\ufef9\054\ufef9\055\ufef9\056\ufef9\057\ufef9" +
    "\060\ufef9\061\ufef9\062\ufef9\063\ufef9\064\ufef9\065\ufef9\066" +
    "\ufef9\067\ufef9\070\ufef9\071\ufef9\072\ufef9\073\ufef9\074\ufef9" +
    "\075\ufef9\076\ufef9\077\ufef9\100\ufef9\101\ufef9\106\ufef9\001" +
    "\002\000\176\004\ufef1\005\ufef1\006\ufef1\007\ufef1\010\ufef1" +
    "\011\ufef1\012\ufef1\013\ufef1\014\ufef1\015\ufef1\016\ufef1\017" +
    "\ufef1\020\ufef1\021\ufef1\022\ufef1\023\ufef1\024\ufef1\025\ufef1" +
    "\026\ufef1\027\ufef1\030\ufef1\031\ufef1\032\ufef1\033\ufef1\034" +
    "\ufef1\035\ufef1\036\ufef1\037\ufef1\040\ufef1\042\ufef1\043\ufef1" +
    "\044\ufef1\045\ufef1\046\ufef1\047\ufef1\050\ufef1\051\ufef1\052" +
    "\ufef1\053\ufef1\054\ufef1\055\ufef1\056\ufef1\057\ufef1\060\ufef1" +
    "\061\ufef1\062\ufef1\063\ufef1\064\ufef1\065\ufef1\066\ufef1\067" +
    "\ufef1\070\ufef1\071\ufef1\072\ufef1\073\ufef1\074\ufef1\075\ufef1" +
    "\076\ufef1\077\ufef1\100\ufef1\101\ufef1\106\ufef1\001\002\000" +
    "\176\004\uff09\005\uff09\006\uff09\007\uff09\010\uff09\011\uff09" +
    "\012\uff09\013\uff09\014\uff09\015\uff09\016\uff09\017\uff09\020" +
    "\uff09\021\uff09\022\uff09\023\uff09\024\uff09\025\uff09\026\uff09" +
    "\027\uff09\030\uff09\031\uff09\032\uff09\033\uff09\034\uff09\035" +
    "\uff09\036\uff09\037\uff09\040\uff09\042\uff09\043\uff09\044\uff09" +
    "\045\uff09\046\uff09\047\uff09\050\uff09\051\uff09\052\uff09\053" +
    "\uff09\054\uff09\055\uff09\056\uff09\057\uff09\060\uff09\061\uff09" +
    "\062\uff09\063\uff09\064\uff09\065\uff09\066\uff09\067\uff09\070" +
    "\uff09\071\uff09\072\uff09\073\uff09\074\uff09\075\uff09\076\uff09" +
    "\077\uff09\100\uff09\101\uff09\106\uff09\001\002\000\176\004" +
    "\ufef6\005\ufef6\006\ufef6\007\ufef6\010\ufef6\011\ufef6\012\ufef6" +
    "\013\ufef6\014\ufef6\015\ufef6\016\ufef6\017\ufef6\020\ufef6\021" +
    "\ufef6\022\ufef6\023\ufef6\024\ufef6\025\ufef6\026\ufef6\027\ufef6" +
    "\030\ufef6\031\ufef6\032\ufef6\033\ufef6\034\ufef6\035\ufef6\036" +
    "\ufef6\037\ufef6\040\ufef6\042\ufef6\043\ufef6\044\ufef6\045\ufef6" +
    "\046\ufef6\047\ufef6\050\ufef6\051\ufef6\052\ufef6\053\ufef6\054" +
    "\ufef6\055\ufef6\056\ufef6\057\ufef6\060\ufef6\061\ufef6\062\ufef6" +
    "\063\ufef6\064\ufef6\065\ufef6\066\ufef6\067\ufef6\070\ufef6\071" +
    "\ufef6\072\ufef6\073\ufef6\074\ufef6\075\ufef6\076\ufef6\077\ufef6" +
    "\100\ufef6\101\ufef6\106\ufef6\001\002\000\176\004\uff0b\005" +
    "\uff0b\006\uff0b\007\uff0b\010\uff0b\011\uff0b\012\uff0b\013\uff0b" +
    "\014\uff0b\015\uff0b\016\uff0b\017\uff0b\020\uff0b\021\uff0b\022" +
    "\uff0b\023\uff0b\024\uff0b\025\uff0b\026\uff0b\027\uff0b\030\uff0b" +
    "\031\uff0b\032\uff0b\033\uff0b\034\uff0b\035\uff0b\036\uff0b\037" +
    "\uff0b\040\uff0b\042\uff0b\043\uff0b\044\uff0b\045\uff0b\046\uff0b" +
    "\047\uff0b\050\uff0b\051\uff0b\052\uff0b\053\uff0b\054\uff0b\055" +
    "\uff0b\056\uff0b\057\uff0b\060\uff0b\061\uff0b\062\uff0b\063\uff0b" +
    "\064\uff0b\065\uff0b\066\uff0b\067\uff0b\070\uff0b\071\uff0b\072" +
    "\uff0b\073\uff0b\074\uff0b\075\uff0b\076\uff0b\077\uff0b\100\uff0b" +
    "\101\uff0b\106\uff0b\001\002\000\176\004\uff0f\005\uff0f\006" +
    "\uff0f\007\uff0f\010\uff0f\011\uff0f\012\uff0f\013\uff0f\014\uff0f" +
    "\015\uff0f\016\uff0f\017\uff0f\020\uff0f\021\uff0f\022\uff0f\023" +
    "\uff0f\024\uff0f\025\uff0f\026\uff0f\027\uff0f\030\uff0f\031\uff0f" +
    "\032\uff0f\033\uff0f\034\uff0f\035\uff0f\036\uff0f\037\uff0f\040" +
    "\uff0f\042\uff0f\043\uff0f\044\uff0f\045\uff0f\046\uff0f\047\uff0f" +
    "\050\uff0f\051\uff0f\052\uff0f\053\uff0f\054\uff0f\055\uff0f\056" +
    "\uff0f\057\uff0f\060\uff0f\061\uff0f\062\uff0f\063\uff0f\064\uff0f" +
    "\065\uff0f\066\uff0f\067\uff0f\070\uff0f\071\uff0f\072\uff0f\073" +
    "\uff0f\074\uff0f\075\uff0f\076\uff0f\077\uff0f\100\uff0f\101\uff0f" +
    "\106\uff0f\001\002\000\176\004\uff1a\005\uff1a\006\uff1a\007" +
    "\uff1a\010\uff1a\011\uff1a\012\uff1a\013\uff1a\014\uff1a\015\uff1a" +
    "\016\uff1a\017\uff1a\020\uff1a\021\uff1a\022\uff1a\023\uff1a\024" +
    "\uff1a\025\uff1a\026\uff1a\027\uff1a\030\uff1a\031\uff1a\032\uff1a" +
    "\033\uff1a\034\uff1a\035\uff1a\036\uff1a\037\uff1a\040\uff1a\042" +
    "\uff1a\043\uff1a\044\uff1a\045\uff1a\046\uff1a\047\uff1a\050\uff1a" +
    "\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056\uff1a\057" +
    "\uff1a\060\uff1a\061\uff1a\062\uff1a\063\uff1a\064\uff1a\065\uff1a" +
    "\066\uff1a\067\uff1a\070\uff1a\071\uff1a\072\uff1a\073\uff1a\074" +
    "\uff1a\075\uff1a\076\uff1a\077\uff1a\100\uff1a\101\uff1a\106\uff1a" +
    "\001\002\000\176\004\uff14\005\uff14\006\uff14\007\uff14\010" +
    "\uff14\011\uff14\012\uff14\013\uff14\014\uff14\015\uff14\016\uff14" +
    "\017\uff14\020\uff14\021\uff14\022\uff14\023\uff14\024\uff14\025" +
    "\uff14\026\uff14\027\uff14\030\uff14\031\uff14\032\uff14\033\uff14" +
    "\034\uff14\035\uff14\036\uff14\037\uff14\040\uff14\042\uff14\043" +
    "\uff14\044\uff14\045\uff14\046\uff14\047\uff14\050\uff14\051\uff14" +
    "\052\uff14\053\uff14\054\uff14\055\uff14\056\uff14\057\uff14\060" +
    "\uff14\061\uff14\062\uff14\063\uff14\064\uff14\065\uff14\066\uff14" +
    "\067\uff14\070\uff14\071\uff14\072\uff14\073\uff14\074\uff14\075" +
    "\uff14\076\uff14\077\uff14\100\uff14\101\uff14\106\uff14\001\002" +
    "\000\176\004\uff17\005\uff17\006\uff17\007\uff17\010\uff17\011" +
    "\uff17\012\uff17\013\uff17\014\uff17\015\uff17\016\uff17\017\uff17" +
    "\020\uff17\021\uff17\022\uff17\023\uff17\024\uff17\025\uff17\026" +
    "\uff17\027\uff17\030\uff17\031\uff17\032\uff17\033\uff17\034\uff17" +
    "\035\uff17\036\uff17\037\uff17\040\uff17\042\uff17\043\uff17\044" +
    "\uff17\045\uff17\046\uff17\047\uff17\050\uff17\051\uff17\052\uff17" +
    "\053\uff17\054\uff17\055\uff17\056\uff17\057\uff17\060\uff17\061" +
    "\uff17\062\uff17\063\uff17\064\uff17\065\uff17\066\uff17\067\uff17" +
    "\070\uff17\071\uff17\072\uff17\073\uff17\074\uff17\075\uff17\076" +
    "\uff17\077\uff17\100\uff17\101\uff17\106\uff17\001\002\000\176" +
    "\004\uff18\005\uff18\006\uff18\007\uff18\010\uff18\011\uff18\012" +
    "\uff18\013\uff18\014\uff18\015\uff18\016\uff18\017\uff18\020\uff18" +
    "\021\uff18\022\uff18\023\uff18\024\uff18\025\uff18\026\uff18\027" +
    "\uff18\030\uff18\031\uff18\032\uff18\033\uff18\034\uff18\035\uff18" +
    "\036\uff18\037\uff18\040\uff18\042\uff18\043\uff18\044\uff18\045" +
    "\uff18\046\uff18\047\uff18\050\uff18\051\uff18\052\uff18\053\uff18" +
    "\054\uff18\055\uff18\056\uff18\057\uff18\060\uff18\061\uff18\062" +
    "\uff18\063\uff18\064\uff18\065\uff18\066\uff18\067\uff18\070\uff18" +
    "\071\uff18\072\uff18\073\uff18\074\uff18\075\uff18\076\uff18\077" +
    "\uff18\100\uff18\101\uff18\106\uff18\001\002\000\176\004\ufefa" +
    "\005\ufefa\006\ufefa\007\ufefa\010\ufefa\011\ufefa\012\ufefa\013" +
    "\ufefa\014\ufefa\015\ufefa\016\ufefa\017\ufefa\020\ufefa\021\ufefa" +
    "\022\ufefa\023\ufefa\024\ufefa\025\ufefa\026\ufefa\027\ufefa\030" +
    "\ufefa\031\ufefa\032\ufefa\033\ufefa\034\ufefa\035\ufefa\036\ufefa" +
    "\037\ufefa\040\ufefa\042\ufefa\043\ufefa\044\ufefa\045\ufefa\046" +
    "\ufefa\047\ufefa\050\ufefa\051\ufefa\052\ufefa\053\ufefa\054\ufefa" +
    "\055\ufefa\056\ufefa\057\ufefa\060\ufefa\061\ufefa\062\ufefa\063" +
    "\ufefa\064\ufefa\065\ufefa\066\ufefa\067\ufefa\070\ufefa\071\ufefa" +
    "\072\ufefa\073\ufefa\074\ufefa\075\ufefa\076\ufefa\077\ufefa\100" +
    "\ufefa\101\ufefa\106\ufefa\001\002\000\176\004\ufee9\005\ufee9" +
    "\006\ufee9\007\ufee9\010\ufee9\011\ufee9\012\ufee9\013\ufee9\014" +
    "\ufee9\015\ufee9\016\ufee9\017\ufee9\020\ufee9\021\ufee9\022\ufee9" +
    "\023\ufee9\024\ufee9\025\ufee9\026\ufee9\027\ufee9\030\ufee9\031" +
    "\ufee9\032\ufee9\033\ufee9\034\ufee9\035\ufee9\036\ufee9\037\ufee9" +
    "\040\ufee9\042\ufee9\043\ufee9\044\ufee9\045\ufee9\046\ufee9\047" +
    "\ufee9\050\ufee9\051\ufee9\052\ufee9\053\ufee9\054\ufee9\055\ufee9" +
    "\056\ufee9\057\ufee9\060\ufee9\061\ufee9\062\ufee9\063\ufee9\064" +
    "\ufee9\065\ufee9\066\ufee9\067\ufee9\070\ufee9\071\ufee9\072\ufee9" +
    "\073\ufee9\074\ufee9\075\ufee9\076\ufee9\077\ufee9\100\ufee9\101" +
    "\ufee9\106\ufee9\001\002\000\176\004\ufefe\005\ufefe\006\ufefe" +
    "\007\ufefe\010\ufefe\011\ufefe\012\ufefe\013\ufefe\014\ufefe\015" +
    "\ufefe\016\ufefe\017\ufefe\020\ufefe\021\ufefe\022\ufefe\023\ufefe" +
    "\024\ufefe\025\ufefe\026\ufefe\027\ufefe\030\ufefe\031\ufefe\032" +
    "\ufefe\033\ufefe\034\ufefe\035\ufefe\036\ufefe\037\ufefe\040\ufefe" +
    "\042\ufefe\043\ufefe\044\ufefe\045\ufefe\046\ufefe\047\ufefe\050" +
    "\ufefe\051\ufefe\052\ufefe\053\ufefe\054\ufefe\055\ufefe\056\ufefe" +
    "\057\ufefe\060\ufefe\061\ufefe\062\ufefe\063\ufefe\064\ufefe\065" +
    "\ufefe\066\ufefe\067\ufefe\070\ufefe\071\ufefe\072\ufefe\073\ufefe" +
    "\074\ufefe\075\ufefe\076\ufefe\077\ufefe\100\ufefe\101\ufefe\106" +
    "\ufefe\001\002\000\176\004\ufef8\005\ufef8\006\ufef8\007\ufef8" +
    "\010\ufef8\011\ufef8\012\ufef8\013\ufef8\014\ufef8\015\ufef8\016" +
    "\ufef8\017\ufef8\020\ufef8\021\ufef8\022\ufef8\023\ufef8\024\ufef8" +
    "\025\ufef8\026\ufef8\027\ufef8\030\ufef8\031\ufef8\032\ufef8\033" +
    "\ufef8\034\ufef8\035\ufef8\036\ufef8\037\ufef8\040\ufef8\042\ufef8" +
    "\043\ufef8\044\ufef8\045\ufef8\046\ufef8\047\ufef8\050\ufef8\051" +
    "\ufef8\052\ufef8\053\ufef8\054\ufef8\055\ufef8\056\ufef8\057\ufef8" +
    "\060\ufef8\061\ufef8\062\ufef8\063\ufef8\064\ufef8\065\ufef8\066" +
    "\ufef8\067\ufef8\070\ufef8\071\ufef8\072\ufef8\073\ufef8\074\ufef8" +
    "\075\ufef8\076\ufef8\077\ufef8\100\ufef8\101\ufef8\106\ufef8\001" +
    "\002\000\176\004\ufef2\005\ufef2\006\ufef2\007\ufef2\010\ufef2" +
    "\011\ufef2\012\ufef2\013\ufef2\014\ufef2\015\ufef2\016\ufef2\017" +
    "\ufef2\020\ufef2\021\ufef2\022\ufef2\023\ufef2\024\ufef2\025\ufef2" +
    "\026\ufef2\027\ufef2\030\ufef2\031\ufef2\032\ufef2\033\ufef2\034" +
    "\ufef2\035\ufef2\036\ufef2\037\ufef2\040\ufef2\042\ufef2\043\ufef2" +
    "\044\ufef2\045\ufef2\046\ufef2\047\ufef2\050\ufef2\051\ufef2\052" +
    "\ufef2\053\ufef2\054\ufef2\055\ufef2\056\ufef2\057\ufef2\060\ufef2" +
    "\061\ufef2\062\ufef2\063\ufef2\064\ufef2\065\ufef2\066\ufef2\067" +
    "\ufef2\070\ufef2\071\ufef2\072\ufef2\073\ufef2\074\ufef2\075\ufef2" +
    "\076\ufef2\077\ufef2\100\ufef2\101\ufef2\106\ufef2\001\002\000" +
    "\176\004\ufef0\005\ufef0\006\ufef0\007\ufef0\010\ufef0\011\ufef0" +
    "\012\ufef0\013\ufef0\014\ufef0\015\ufef0\016\ufef0\017\ufef0\020" +
    "\ufef0\021\ufef0\022\ufef0\023\ufef0\024\ufef0\025\ufef0\026\ufef0" +
    "\027\ufef0\030\ufef0\031\ufef0\032\ufef0\033\ufef0\034\ufef0\035" +
    "\ufef0\036\ufef0\037\ufef0\040\ufef0\042\ufef0\043\ufef0\044\ufef0" +
    "\045\ufef0\046\ufef0\047\ufef0\050\ufef0\051\ufef0\052\ufef0\053" +
    "\ufef0\054\ufef0\055\ufef0\056\ufef0\057\ufef0\060\ufef0\061\ufef0" +
    "\062\ufef0\063\ufef0\064\ufef0\065\ufef0\066\ufef0\067\ufef0\070" +
    "\ufef0\071\ufef0\072\ufef0\073\ufef0\074\ufef0\075\ufef0\076\ufef0" +
    "\077\ufef0\100\ufef0\101\ufef0\106\ufef0\001\002\000\176\004" +
    "\ufeff\005\ufeff\006\ufeff\007\ufeff\010\ufeff\011\ufeff\012\ufeff" +
    "\013\ufeff\014\ufeff\015\ufeff\016\ufeff\017\ufeff\020\ufeff\021" +
    "\ufeff\022\ufeff\023\ufeff\024\ufeff\025\ufeff\026\ufeff\027\ufeff" +
    "\030\ufeff\031\ufeff\032\ufeff\033\ufeff\034\ufeff\035\ufeff\036" +
    "\ufeff\037\ufeff\040\ufeff\042\ufeff\043\ufeff\044\ufeff\045\ufeff" +
    "\046\ufeff\047\ufeff\050\ufeff\051\ufeff\052\ufeff\053\ufeff\054" +
    "\ufeff\055\ufeff\056\ufeff\057\ufeff\060\ufeff\061\ufeff\062\ufeff" +
    "\063\ufeff\064\ufeff\065\ufeff\066\ufeff\067\ufeff\070\ufeff\071" +
    "\ufeff\072\ufeff\073\ufeff\074\ufeff\075\ufeff\076\ufeff\077\ufeff" +
    "\100\ufeff\101\ufeff\106\ufeff\001\002\000\176\004\ufef5\005" +
    "\ufef5\006\ufef5\007\ufef5\010\ufef5\011\ufef5\012\ufef5\013\ufef5" +
    "\014\ufef5\015\ufef5\016\ufef5\017\ufef5\020\ufef5\021\ufef5\022" +
    "\ufef5\023\ufef5\024\ufef5\025\ufef5\026\ufef5\027\ufef5\030\ufef5" +
    "\031\ufef5\032\ufef5\033\ufef5\034\ufef5\035\ufef5\036\ufef5\037" +
    "\ufef5\040\ufef5\042\ufef5\043\ufef5\044\ufef5\045\ufef5\046\ufef5" +
    "\047\ufef5\050\ufef5\051\ufef5\052\ufef5\053\ufef5\054\ufef5\055" +
    "\ufef5\056\ufef5\057\ufef5\060\ufef5\061\ufef5\062\ufef5\063\ufef5" +
    "\064\ufef5\065\ufef5\066\ufef5\067\ufef5\070\ufef5\071\ufef5\072" +
    "\ufef5\073\ufef5\074\ufef5\075\ufef5\076\ufef5\077\ufef5\100\ufef5" +
    "\101\ufef5\106\ufef5\001\002\000\176\004\uff20\005\uff20\006" +
    "\uff20\007\uff20\010\uff20\011\uff20\012\uff20\013\uff20\014\uff20" +
    "\015\uff20\016\uff20\017\uff20\020\uff20\021\uff20\022\uff20\023" +
    "\uff20\024\uff20\025\uff20\026\uff20\027\uff20\030\uff20\031\uff20" +
    "\032\uff20\033\uff20\034\uff20\035\uff20\036\uff20\037\uff20\040" +
    "\uff20\042\uff20\043\uff20\044\uff20\045\uff20\046\uff20\047\uff20" +
    "\050\uff20\051\uff20\052\uff20\053\uff20\054\uff20\055\uff20\056" +
    "\uff20\057\uff20\060\uff20\061\uff20\062\uff20\063\uff20\064\uff20" +
    "\065\uff20\066\uff20\067\uff20\070\uff20\071\uff20\072\uff20\073" +
    "\uff20\074\uff20\075\uff20\076\uff20\077\uff20\100\uff20\101\uff20" +
    "\106\uff20\001\002\000\176\004\ufef7\005\ufef7\006\ufef7\007" +
    "\ufef7\010\ufef7\011\ufef7\012\ufef7\013\ufef7\014\ufef7\015\ufef7" +
    "\016\ufef7\017\ufef7\020\ufef7\021\ufef7\022\ufef7\023\ufef7\024" +
    "\ufef7\025\ufef7\026\ufef7\027\ufef7\030\ufef7\031\ufef7\032\ufef7" +
    "\033\ufef7\034\ufef7\035\ufef7\036\ufef7\037\ufef7\040\ufef7\042" +
    "\ufef7\043\ufef7\044\ufef7\045\ufef7\046\ufef7\047\ufef7\050\ufef7" +
    "\051\ufef7\052\ufef7\053\ufef7\054\ufef7\055\ufef7\056\ufef7\057" +
    "\ufef7\060\ufef7\061\ufef7\062\ufef7\063\ufef7\064\ufef7\065\ufef7" +
    "\066\ufef7\067\ufef7\070\ufef7\071\ufef7\072\ufef7\073\ufef7\074" +
    "\ufef7\075\ufef7\076\ufef7\077\ufef7\100\ufef7\101\ufef7\106\ufef7" +
    "\001\002\000\176\004\uff19\005\uff19\006\uff19\007\uff19\010" +
    "\uff19\011\uff19\012\uff19\013\uff19\014\uff19\015\uff19\016\uff19" +
    "\017\uff19\020\uff19\021\uff19\022\uff19\023\uff19\024\uff19\025" +
    "\uff19\026\uff19\027\uff19\030\uff19\031\uff19\032\uff19\033\uff19" +
    "\034\uff19\035\uff19\036\uff19\037\uff19\040\uff19\042\uff19\043" +
    "\uff19\044\uff19\045\uff19\046\uff19\047\uff19\050\uff19\051\uff19" +
    "\052\uff19\053\uff19\054\uff19\055\uff19\056\uff19\057\uff19\060" +
    "\uff19\061\uff19\062\uff19\063\uff19\064\uff19\065\uff19\066\uff19" +
    "\067\uff19\070\uff19\071\uff19\072\uff19\073\uff19\074\uff19\075" +
    "\uff19\076\uff19\077\uff19\100\uff19\101\uff19\106\uff19\001\002" +
    "\000\176\004\ufefd\005\ufefd\006\ufefd\007\ufefd\010\ufefd\011" +
    "\ufefd\012\ufefd\013\ufefd\014\ufefd\015\ufefd\016\ufefd\017\ufefd" +
    "\020\ufefd\021\ufefd\022\ufefd\023\ufefd\024\ufefd\025\ufefd\026" +
    "\ufefd\027\ufefd\030\ufefd\031\ufefd\032\ufefd\033\ufefd\034\ufefd" +
    "\035\ufefd\036\ufefd\037\ufefd\040\ufefd\042\ufefd\043\ufefd\044" +
    "\ufefd\045\ufefd\046\ufefd\047\ufefd\050\ufefd\051\ufefd\052\ufefd" +
    "\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\061" +
    "\ufefd\062\ufefd\063\ufefd\064\ufefd\065\ufefd\066\ufefd\067\ufefd" +
    "\070\ufefd\071\ufefd\072\ufefd\073\ufefd\074\ufefd\075\ufefd\076" +
    "\ufefd\077\ufefd\100\ufefd\101\ufefd\106\ufefd\001\002\000\176" +
    "\004\uff01\005\uff01\006\uff01\007\uff01\010\uff01\011\uff01\012" +
    "\uff01\013\uff01\014\uff01\015\uff01\016\uff01\017\uff01\020\uff01" +
    "\021\uff01\022\uff01\023\uff01\024\uff01\025\uff01\026\uff01\027" +
    "\uff01\030\uff01\031\uff01\032\uff01\033\uff01\034\uff01\035\uff01" +
    "\036\uff01\037\uff01\040\uff01\042\uff01\043\uff01\044\uff01\045" +
    "\uff01\046\uff01\047\uff01\050\uff01\051\uff01\052\uff01\053\uff01" +
    "\054\uff01\055\uff01\056\uff01\057\uff01\060\uff01\061\uff01\062" +
    "\uff01\063\uff01\064\uff01\065\uff01\066\uff01\067\uff01\070\uff01" +
    "\071\uff01\072\uff01\073\uff01\074\uff01\075\uff01\076\uff01\077" +
    "\uff01\100\uff01\101\uff01\106\uff01\001\002\000\176\004\uff21" +
    "\005\uff21\006\uff21\007\uff21\010\uff21\011\uff21\012\uff21\013" +
    "\uff21\014\uff21\015\uff21\016\uff21\017\uff21\020\uff21\021\uff21" +
    "\022\uff21\023\uff21\024\uff21\025\uff21\026\uff21\027\uff21\030" +
    "\uff21\031\uff21\032\uff21\033\uff21\034\uff21\035\uff21\036\uff21" +
    "\037\uff21\040\uff21\042\uff21\043\uff21\044\uff21\045\uff21\046" +
    "\uff21\047\uff21\050\uff21\051\uff21\052\uff21\053\uff21\054\uff21" +
    "\055\uff21\056\uff21\057\uff21\060\uff21\061\uff21\062\uff21\063" +
    "\uff21\064\uff21\065\uff21\066\uff21\067\uff21\070\uff21\071\uff21" +
    "\072\uff21\073\uff21\074\uff21\075\uff21\076\uff21\077\uff21\100" +
    "\uff21\101\uff21\106\uff21\001\002\000\176\004\uff15\005\uff15" +
    "\006\uff15\007\uff15\010\uff15\011\uff15\012\uff15\013\uff15\014" +
    "\uff15\015\uff15\016\uff15\017\uff15\020\uff15\021\uff15\022\uff15" +
    "\023\uff15\024\uff15\025\uff15\026\uff15\027\uff15\030\uff15\031" +
    "\uff15\032\uff15\033\uff15\034\uff15\035\uff15\036\uff15\037\uff15" +
    "\040\uff15\042\uff15\043\uff15\044\uff15\045\uff15\046\uff15\047" +
    "\uff15\050\uff15\051\uff15\052\uff15\053\uff15\054\uff15\055\uff15" +
    "\056\uff15\057\uff15\060\uff15\061\uff15\062\uff15\063\uff15\064" +
    "\uff15\065\uff15\066\uff15\067\uff15\070\uff15\071\uff15\072\uff15" +
    "\073\uff15\074\uff15\075\uff15\076\uff15\077\uff15\100\uff15\101" +
    "\uff15\106\uff15\001\002\000\176\004\uff1b\005\uff1b\006\uff1b" +
    "\007\uff1b\010\uff1b\011\uff1b\012\uff1b\013\uff1b\014\uff1b\015" +
    "\uff1b\016\uff1b\017\uff1b\020\uff1b\021\uff1b\022\uff1b\023\uff1b" +
    "\024\uff1b\025\uff1b\026\uff1b\027\uff1b\030\uff1b\031\uff1b\032" +
    "\uff1b\033\uff1b\034\uff1b\035\uff1b\036\uff1b\037\uff1b\040\uff1b" +
    "\042\uff1b\043\uff1b\044\uff1b\045\uff1b\046\uff1b\047\uff1b\050" +
    "\uff1b\051\uff1b\052\uff1b\053\uff1b\054\uff1b\055\uff1b\056\uff1b" +
    "\057\uff1b\060\uff1b\061\uff1b\062\uff1b\063\uff1b\064\uff1b\065" +
    "\uff1b\066\uff1b\067\uff1b\070\uff1b\071\uff1b\072\uff1b\073\uff1b" +
    "\074\uff1b\075\uff1b\076\uff1b\077\uff1b\100\uff1b\101\uff1b\106" +
    "\uff1b\001\002\000\176\004\ufefb\005\ufefb\006\ufefb\007\ufefb" +
    "\010\ufefb\011\ufefb\012\ufefb\013\ufefb\014\ufefb\015\ufefb\016" +
    "\ufefb\017\ufefb\020\ufefb\021\ufefb\022\ufefb\023\ufefb\024\ufefb" +
    "\025\ufefb\026\ufefb\027\ufefb\030\ufefb\031\ufefb\032\ufefb\033" +
    "\ufefb\034\ufefb\035\ufefb\036\ufefb\037\ufefb\040\ufefb\042\ufefb" +
    "\043\ufefb\044\ufefb\045\ufefb\046\ufefb\047\ufefb\050\ufefb\051" +
    "\ufefb\052\ufefb\053\ufefb\054\ufefb\055\ufefb\056\ufefb\057\ufefb" +
    "\060\ufefb\061\ufefb\062\ufefb\063\ufefb\064\ufefb\065\ufefb\066" +
    "\ufefb\067\ufefb\070\ufefb\071\ufefb\072\ufefb\073\ufefb\074\ufefb" +
    "\075\ufefb\076\ufefb\077\ufefb\100\ufefb\101\ufefb\106\ufefb\001" +
    "\002\000\176\004\ufee8\005\ufee8\006\ufee8\007\ufee8\010\ufee8" +
    "\011\ufee8\012\ufee8\013\ufee8\014\ufee8\015\ufee8\016\ufee8\017" +
    "\ufee8\020\ufee8\021\ufee8\022\ufee8\023\ufee8\024\ufee8\025\ufee8" +
    "\026\ufee8\027\ufee8\030\ufee8\031\ufee8\032\ufee8\033\ufee8\034" +
    "\ufee8\035\ufee8\036\ufee8\037\ufee8\040\ufee8\042\ufee8\043\ufee8" +
    "\044\ufee8\045\ufee8\046\ufee8\047\ufee8\050\ufee8\051\ufee8\052" +
    "\ufee8\053\ufee8\054\ufee8\055\ufee8\056\ufee8\057\ufee8\060\ufee8" +
    "\061\ufee8\062\ufee8\063\ufee8\064\ufee8\065\ufee8\066\ufee8\067" +
    "\ufee8\070\ufee8\071\ufee8\072\ufee8\073\ufee8\074\ufee8\075\ufee8" +
    "\076\ufee8\077\ufee8\100\ufee8\101\ufee8\106\ufee8\001\002\000" +
    "\176\004\ufeee\005\ufeee\006\ufeee\007\ufeee\010\ufeee\011\ufeee" +
    "\012\ufeee\013\ufeee\014\ufeee\015\ufeee\016\ufeee\017\ufeee\020" +
    "\ufeee\021\ufeee\022\ufeee\023\ufeee\024\ufeee\025\ufeee\026\ufeee" +
    "\027\ufeee\030\ufeee\031\ufeee\032\ufeee\033\ufeee\034\ufeee\035" +
    "\ufeee\036\ufeee\037\ufeee\040\ufeee\042\ufeee\043\ufeee\044\ufeee" +
    "\045\ufeee\046\ufeee\047\ufeee\050\ufeee\051\ufeee\052\ufeee\053" +
    "\ufeee\054\ufeee\055\ufeee\056\ufeee\057\ufeee\060\ufeee\061\ufeee" +
    "\062\ufeee\063\ufeee\064\ufeee\065\ufeee\066\ufeee\067\ufeee\070" +
    "\ufeee\071\ufeee\072\ufeee\073\ufeee\074\ufeee\075\ufeee\076\ufeee" +
    "\077\ufeee\100\ufeee\101\ufeee\106\ufeee\001\002\000\176\004" +
    "\uff0d\005\uff0d\006\uff0d\007\uff0d\010\uff0d\011\uff0d\012\uff0d" +
    "\013\uff0d\014\uff0d\015\uff0d\016\uff0d\017\uff0d\020\uff0d\021" +
    "\uff0d\022\uff0d\023\uff0d\024\uff0d\025\uff0d\026\uff0d\027\uff0d" +
    "\030\uff0d\031\uff0d\032\uff0d\033\uff0d\034\uff0d\035\uff0d\036" +
    "\uff0d\037\uff0d\040\uff0d\042\uff0d\043\uff0d\044\uff0d\045\uff0d" +
    "\046\uff0d\047\uff0d\050\uff0d\051\uff0d\052\uff0d\053\uff0d\054" +
    "\uff0d\055\uff0d\056\uff0d\057\uff0d\060\uff0d\061\uff0d\062\uff0d" +
    "\063\uff0d\064\uff0d\065\uff0d\066\uff0d\067\uff0d\070\uff0d\071" +
    "\uff0d\072\uff0d\073\uff0d\074\uff0d\075\uff0d\076\uff0d\077\uff0d" +
    "\100\uff0d\101\uff0d\106\uff0d\001\002\000\176\004\ufeef\005" +
    "\ufeef\006\ufeef\007\ufeef\010\ufeef\011\ufeef\012\ufeef\013\ufeef" +
    "\014\ufeef\015\ufeef\016\ufeef\017\ufeef\020\ufeef\021\ufeef\022" +
    "\ufeef\023\ufeef\024\ufeef\025\ufeef\026\ufeef\027\ufeef\030\ufeef" +
    "\031\ufeef\032\ufeef\033\ufeef\034\ufeef\035\ufeef\036\ufeef\037" +
    "\ufeef\040\ufeef\042\ufeef\043\ufeef\044\ufeef\045\ufeef\046\ufeef" +
    "\047\ufeef\050\ufeef\051\ufeef\052\ufeef\053\ufeef\054\ufeef\055" +
    "\ufeef\056\ufeef\057\ufeef\060\ufeef\061\ufeef\062\ufeef\063\ufeef" +
    "\064\ufeef\065\ufeef\066\ufeef\067\ufeef\070\ufeef\071\ufeef\072" +
    "\ufeef\073\ufeef\074\ufeef\075\ufeef\076\ufeef\077\ufeef\100\ufeef" +
    "\101\ufeef\106\ufeef\001\002\000\176\004\uff16\005\uff16\006" +
    "\uff16\007\uff16\010\uff16\011\uff16\012\uff16\013\uff16\014\uff16" +
    "\015\uff16\016\uff16\017\uff16\020\uff16\021\uff16\022\uff16\023" +
    "\uff16\024\uff16\025\uff16\026\uff16\027\uff16\030\uff16\031\uff16" +
    "\032\uff16\033\uff16\034\uff16\035\uff16\036\uff16\037\uff16\040" +
    "\uff16\042\uff16\043\uff16\044\uff16\045\uff16\046\uff16\047\uff16" +
    "\050\uff16\051\uff16\052\uff16\053\uff16\054\uff16\055\uff16\056" +
    "\uff16\057\uff16\060\uff16\061\uff16\062\uff16\063\uff16\064\uff16" +
    "\065\uff16\066\uff16\067\uff16\070\uff16\071\uff16\072\uff16\073" +
    "\uff16\074\uff16\075\uff16\076\uff16\077\uff16\100\uff16\101\uff16" +
    "\106\uff16\001\002\000\176\004\uff1f\005\uff1f\006\uff1f\007" +
    "\uff1f\010\uff1f\011\uff1f\012\uff1f\013\uff1f\014\uff1f\015\uff1f" +
    "\016\uff1f\017\uff1f\020\uff1f\021\uff1f\022\uff1f\023\uff1f\024" +
    "\uff1f\025\uff1f\026\uff1f\027\uff1f\030\uff1f\031\uff1f\032\uff1f" +
    "\033\uff1f\034\uff1f\035\uff1f\036\uff1f\037\uff1f\040\uff1f\042" +
    "\uff1f\043\uff1f\044\uff1f\045\uff1f\046\uff1f\047\uff1f\050\uff1f" +
    "\051\uff1f\052\uff1f\053\uff1f\054\uff1f\055\uff1f\056\uff1f\057" +
    "\uff1f\060\uff1f\061\uff1f\062\uff1f\063\uff1f\064\uff1f\065\uff1f" +
    "\066\uff1f\067\uff1f\070\uff1f\071\uff1f\072\uff1f\073\uff1f\074" +
    "\uff1f\075\uff1f\076\uff1f\077\uff1f\100\uff1f\101\uff1f\106\uff1f" +
    "\001\002\000\176\004\ufef3\005\ufef3\006\ufef3\007\ufef3\010" +
    "\ufef3\011\ufef3\012\ufef3\013\ufef3\014\ufef3\015\ufef3\016\ufef3" +
    "\017\ufef3\020\ufef3\021\ufef3\022\ufef3\023\ufef3\024\ufef3\025" +
    "\ufef3\026\ufef3\027\ufef3\030\ufef3\031\ufef3\032\ufef3\033\ufef3" +
    "\034\ufef3\035\ufef3\036\ufef3\037\ufef3\040\ufef3\042\ufef3\043" +
    "\ufef3\044\ufef3\045\ufef3\046\ufef3\047\ufef3\050\ufef3\051\ufef3" +
    "\052\ufef3\053\ufef3\054\ufef3\055\ufef3\056\ufef3\057\ufef3\060" +
    "\ufef3\061\ufef3\062\ufef3\063\ufef3\064\ufef3\065\ufef3\066\ufef3" +
    "\067\ufef3\070\ufef3\071\ufef3\072\ufef3\073\ufef3\074\ufef3\075" +
    "\ufef3\076\ufef3\077\ufef3\100\ufef3\101\ufef3\106\ufef3\001\002" +
    "\000\176\004\uff04\005\uff04\006\uff04\007\uff04\010\uff04\011" +
    "\uff04\012\uff04\013\uff04\014\uff04\015\uff04\016\uff04\017\uff04" +
    "\020\uff04\021\uff04\022\uff04\023\uff04\024\uff04\025\uff04\026" +
    "\uff04\027\uff04\030\uff04\031\uff04\032\uff04\033\uff04\034\uff04" +
    "\035\uff04\036\uff04\037\uff04\040\uff04\042\uff04\043\uff04\044" +
    "\uff04\045\uff04\046\uff04\047\uff04\050\uff04\051\uff04\052\uff04" +
    "\053\uff04\054\uff04\055\uff04\056\uff04\057\uff04\060\uff04\061" +
    "\uff04\062\uff04\063\uff04\064\uff04\065\uff04\066\uff04\067\uff04" +
    "\070\uff04\071\uff04\072\uff04\073\uff04\074\uff04\075\uff04\076" +
    "\uff04\077\uff04\100\uff04\101\uff04\106\uff04\001\002\000\176" +
    "\004\uff10\005\uff10\006\uff10\007\uff10\010\uff10\011\uff10\012" +
    "\uff10\013\uff10\014\uff10\015\uff10\016\uff10\017\uff10\020\uff10" +
    "\021\uff10\022\uff10\023\uff10\024\uff10\025\uff10\026\uff10\027" +
    "\uff10\030\uff10\031\uff10\032\uff10\033\uff10\034\uff10\035\uff10" +
    "\036\uff10\037\uff10\040\uff10\042\uff10\043\uff10\044\uff10\045" +
    "\uff10\046\uff10\047\uff10\050\uff10\051\uff10\052\uff10\053\uff10" +
    "\054\uff10\055\uff10\056\uff10\057\uff10\060\uff10\061\uff10\062" +
    "\uff10\063\uff10\064\uff10\065\uff10\066\uff10\067\uff10\070\uff10" +
    "\071\uff10\072\uff10\073\uff10\074\uff10\075\uff10\076\uff10\077" +
    "\uff10\100\uff10\101\uff10\106\uff10\001\002\000\176\004\uff1c" +
    "\005\uff1c\006\uff1c\007\uff1c\010\uff1c\011\uff1c\012\uff1c\013" +
    "\uff1c\014\uff1c\015\uff1c\016\uff1c\017\uff1c\020\uff1c\021\uff1c" +
    "\022\uff1c\023\uff1c\024\uff1c\025\uff1c\026\uff1c\027\uff1c\030" +
    "\uff1c\031\uff1c\032\uff1c\033\uff1c\034\uff1c\035\uff1c\036\uff1c" +
    "\037\uff1c\040\uff1c\042\uff1c\043\uff1c\044\uff1c\045\uff1c\046" +
    "\uff1c\047\uff1c\050\uff1c\051\uff1c\052\uff1c\053\uff1c\054\uff1c" +
    "\055\uff1c\056\uff1c\057\uff1c\060\uff1c\061\uff1c\062\uff1c\063" +
    "\uff1c\064\uff1c\065\uff1c\066\uff1c\067\uff1c\070\uff1c\071\uff1c" +
    "\072\uff1c\073\uff1c\074\uff1c\075\uff1c\076\uff1c\077\uff1c\100" +
    "\uff1c\101\uff1c\106\uff1c\001\002\000\176\004\uff13\005\uff13" +
    "\006\uff13\007\uff13\010\uff13\011\uff13\012\uff13\013\uff13\014" +
    "\uff13\015\uff13\016\uff13\017\uff13\020\uff13\021\uff13\022\uff13" +
    "\023\uff13\024\uff13\025\uff13\026\uff13\027\uff13\030\uff13\031" +
    "\uff13\032\uff13\033\uff13\034\uff13\035\uff13\036\uff13\037\uff13" +
    "\040\uff13\042\uff13\043\uff13\044\uff13\045\uff13\046\uff13\047" +
    "\uff13\050\uff13\051\uff13\052\uff13\053\uff13\054\uff13\055\uff13" +
    "\056\uff13\057\uff13\060\uff13\061\uff13\062\uff13\063\uff13\064" +
    "\uff13\065\uff13\066\uff13\067\uff13\070\uff13\071\uff13\072\uff13" +
    "\073\uff13\074\uff13\075\uff13\076\uff13\077\uff13\100\uff13\101" +
    "\uff13\106\uff13\001\002\000\176\004\ufefc\005\ufefc\006\ufefc" +
    "\007\ufefc\010\ufefc\011\ufefc\012\ufefc\013\ufefc\014\ufefc\015" +
    "\ufefc\016\ufefc\017\ufefc\020\ufefc\021\ufefc\022\ufefc\023\ufefc" +
    "\024\ufefc\025\ufefc\026\ufefc\027\ufefc\030\ufefc\031\ufefc\032" +
    "\ufefc\033\ufefc\034\ufefc\035\ufefc\036\ufefc\037\ufefc\040\ufefc" +
    "\042\ufefc\043\ufefc\044\ufefc\045\ufefc\046\ufefc\047\ufefc\050" +
    "\ufefc\051\ufefc\052\ufefc\053\ufefc\054\ufefc\055\ufefc\056\ufefc" +
    "\057\ufefc\060\ufefc\061\ufefc\062\ufefc\063\ufefc\064\ufefc\065" +
    "\ufefc\066\ufefc\067\ufefc\070\ufefc\071\ufefc\072\ufefc\073\ufefc" +
    "\074\ufefc\075\ufefc\076\ufefc\077\ufefc\100\ufefc\101\ufefc\106" +
    "\ufefc\001\002\000\176\004\ufeea\005\ufeea\006\ufeea\007\ufeea" +
    "\010\ufeea\011\ufeea\012\ufeea\013\ufeea\014\ufeea\015\ufeea\016" +
    "\ufeea\017\ufeea\020\ufeea\021\ufeea\022\ufeea\023\ufeea\024\ufeea" +
    "\025\ufeea\026\ufeea\027\ufeea\030\ufeea\031\ufeea\032\ufeea\033" +
    "\ufeea\034\ufeea\035\ufeea\036\ufeea\037\ufeea\040\ufeea\042\ufeea" +
    "\043\ufeea\044\ufeea\045\ufeea\046\ufeea\047\ufeea\050\ufeea\051" +
    "\ufeea\052\ufeea\053\ufeea\054\ufeea\055\ufeea\056\ufeea\057\ufeea" +
    "\060\ufeea\061\ufeea\062\ufeea\063\ufeea\064\ufeea\065\ufeea\066" +
    "\ufeea\067\ufeea\070\ufeea\071\ufeea\072\ufeea\073\ufeea\074\ufeea" +
    "\075\ufeea\076\ufeea\077\ufeea\100\ufeea\101\ufeea\106\ufeea\001" +
    "\002\000\176\004\uff0c\005\uff0c\006\uff0c\007\uff0c\010\uff0c" +
    "\011\uff0c\012\uff0c\013\uff0c\014\uff0c\015\uff0c\016\uff0c\017" +
    "\uff0c\020\uff0c\021\uff0c\022\uff0c\023\uff0c\024\uff0c\025\uff0c" +
    "\026\uff0c\027\uff0c\030\uff0c\031\uff0c\032\uff0c\033\uff0c\034" +
    "\uff0c\035\uff0c\036\uff0c\037\uff0c\040\uff0c\042\uff0c\043\uff0c" +
    "\044\uff0c\045\uff0c\046\uff0c\047\uff0c\050\uff0c\051\uff0c\052" +
    "\uff0c\053\uff0c\054\uff0c\055\uff0c\056\uff0c\057\uff0c\060\uff0c" +
    "\061\uff0c\062\uff0c\063\uff0c\064\uff0c\065\uff0c\066\uff0c\067" +
    "\uff0c\070\uff0c\071\uff0c\072\uff0c\073\uff0c\074\uff0c\075\uff0c" +
    "\076\uff0c\077\uff0c\100\uff0c\101\uff0c\106\uff0c\001\002\000" +
    "\176\004\ufee7\005\ufee7\006\ufee7\007\ufee7\010\ufee7\011\ufee7" +
    "\012\ufee7\013\ufee7\014\ufee7\015\ufee7\016\ufee7\017\ufee7\020" +
    "\ufee7\021\ufee7\022\ufee7\023\ufee7\024\ufee7\025\ufee7\026\ufee7" +
    "\027\ufee7\030\ufee7\031\ufee7\032\ufee7\033\ufee7\034\ufee7\035" +
    "\ufee7\036\ufee7\037\ufee7\040\ufee7\042\ufee7\043\ufee7\044\ufee7" +
    "\045\ufee7\046\ufee7\047\ufee7\050\ufee7\051\ufee7\052\ufee7\053" +
    "\ufee7\054\ufee7\055\ufee7\056\ufee7\057\ufee7\060\ufee7\061\ufee7" +
    "\062\ufee7\063\ufee7\064\ufee7\065\ufee7\066\ufee7\067\ufee7\070" +
    "\ufee7\071\ufee7\072\ufee7\073\ufee7\074\ufee7\075\ufee7\076\ufee7" +
    "\077\ufee7\100\ufee7\101\ufee7\106\ufee7\001\002\000\176\004" +
    "\uff12\005\uff12\006\uff12\007\uff12\010\uff12\011\uff12\012\uff12" +
    "\013\uff12\014\uff12\015\uff12\016\uff12\017\uff12\020\uff12\021" +
    "\uff12\022\uff12\023\uff12\024\uff12\025\uff12\026\uff12\027\uff12" +
    "\030\uff12\031\uff12\032\uff12\033\uff12\034\uff12\035\uff12\036" +
    "\uff12\037\uff12\040\uff12\042\uff12\043\uff12\044\uff12\045\uff12" +
    "\046\uff12\047\uff12\050\uff12\051\uff12\052\uff12\053\uff12\054" +
    "\uff12\055\uff12\056\uff12\057\uff12\060\uff12\061\uff12\062\uff12" +
    "\063\uff12\064\uff12\065\uff12\066\uff12\067\uff12\070\uff12\071" +
    "\uff12\072\uff12\073\uff12\074\uff12\075\uff12\076\uff12\077\uff12" +
    "\100\uff12\101\uff12\106\uff12\001\002\000\176\004\ufef4\005" +
    "\ufef4\006\ufef4\007\ufef4\010\ufef4\011\ufef4\012\ufef4\013\ufef4" +
    "\014\ufef4\015\ufef4\016\ufef4\017\ufef4\020\ufef4\021\ufef4\022" +
    "\ufef4\023\ufef4\024\ufef4\025\ufef4\026\ufef4\027\ufef4\030\ufef4" +
    "\031\ufef4\032\ufef4\033\ufef4\034\ufef4\035\ufef4\036\ufef4\037" +
    "\ufef4\040\ufef4\042\ufef4\043\ufef4\044\ufef4\045\ufef4\046\ufef4" +
    "\047\ufef4\050\ufef4\051\ufef4\052\ufef4\053\ufef4\054\ufef4\055" +
    "\ufef4\056\ufef4\057\ufef4\060\ufef4\061\ufef4\062\ufef4\063\ufef4" +
    "\064\ufef4\065\ufef4\066\ufef4\067\ufef4\070\ufef4\071\ufef4\072" +
    "\ufef4\073\ufef4\074\ufef4\075\ufef4\076\ufef4\077\ufef4\100\ufef4" +
    "\101\ufef4\106\ufef4\001\002\000\176\004\ufeec\005\ufeec\006" +
    "\ufeec\007\ufeec\010\ufeec\011\ufeec\012\ufeec\013\ufeec\014\ufeec" +
    "\015\ufeec\016\ufeec\017\ufeec\020\ufeec\021\ufeec\022\ufeec\023" +
    "\ufeec\024\ufeec\025\ufeec\026\ufeec\027\ufeec\030\ufeec\031\ufeec" +
    "\032\ufeec\033\ufeec\034\ufeec\035\ufeec\036\ufeec\037\ufeec\040" +
    "\ufeec\042\ufeec\043\ufeec\044\ufeec\045\ufeec\046\ufeec\047\ufeec" +
    "\050\ufeec\051\ufeec\052\ufeec\053\ufeec\054\ufeec\055\ufeec\056" +
    "\ufeec\057\ufeec\060\ufeec\061\ufeec\062\ufeec\063\ufeec\064\ufeec" +
    "\065\ufeec\066\ufeec\067\ufeec\070\ufeec\071\ufeec\072\ufeec\073" +
    "\ufeec\074\ufeec\075\ufeec\076\ufeec\077\ufeec\100\ufeec\101\ufeec" +
    "\106\ufeec\001\002\000\176\004\ufeed\005\ufeed\006\ufeed\007" +
    "\ufeed\010\ufeed\011\ufeed\012\ufeed\013\ufeed\014\ufeed\015\ufeed" +
    "\016\ufeed\017\ufeed\020\ufeed\021\ufeed\022\ufeed\023\ufeed\024" +
    "\ufeed\025\ufeed\026\ufeed\027\ufeed\030\ufeed\031\ufeed\032\ufeed" +
    "\033\ufeed\034\ufeed\035\ufeed\036\ufeed\037\ufeed\040\ufeed\042" +
    "\ufeed\043\ufeed\044\ufeed\045\ufeed\046\ufeed\047\ufeed\050\ufeed" +
    "\051\ufeed\052\ufeed\053\ufeed\054\ufeed\055\ufeed\056\ufeed\057" +
    "\ufeed\060\ufeed\061\ufeed\062\ufeed\063\ufeed\064\ufeed\065\ufeed" +
    "\066\ufeed\067\ufeed\070\ufeed\071\ufeed\072\ufeed\073\ufeed\074" +
    "\ufeed\075\ufeed\076\ufeed\077\ufeed\100\ufeed\101\ufeed\106\ufeed" +
    "\001\002\000\176\004\uff0e\005\uff0e\006\uff0e\007\uff0e\010" +
    "\uff0e\011\uff0e\012\uff0e\013\uff0e\014\uff0e\015\uff0e\016\uff0e" +
    "\017\uff0e\020\uff0e\021\uff0e\022\uff0e\023\uff0e\024\uff0e\025" +
    "\uff0e\026\uff0e\027\uff0e\030\uff0e\031\uff0e\032\uff0e\033\uff0e" +
    "\034\uff0e\035\uff0e\036\uff0e\037\uff0e\040\uff0e\042\uff0e\043" +
    "\uff0e\044\uff0e\045\uff0e\046\uff0e\047\uff0e\050\uff0e\051\uff0e" +
    "\052\uff0e\053\uff0e\054\uff0e\055\uff0e\056\uff0e\057\uff0e\060" +
    "\uff0e\061\uff0e\062\uff0e\063\uff0e\064\uff0e\065\uff0e\066\uff0e" +
    "\067\uff0e\070\uff0e\071\uff0e\072\uff0e\073\uff0e\074\uff0e\075" +
    "\uff0e\076\uff0e\077\uff0e\100\uff0e\101\uff0e\106\uff0e\001\002" +
    "\000\010\043\343\062\uff3c\102\342\001\002\000\014\003" +
    "\236\042\241\044\240\067\234\070\242\001\002\000\014" +
    "\003\236\042\241\044\240\067\234\070\242\001\002\000" +
    "\004\062\uff40\001\002\000\004\062\uff3d\001\002\000\004" +
    "\062\uff3e\001\002\000\012\005\351\043\uff37\062\uff37\102" +
    "\uff37\001\002\000\010\043\uff38\062\uff38\102\uff38\001\002" +
    "\000\004\067\352\001\002\000\010\043\uff36\062\uff36\102" +
    "\uff36\001\002\000\010\043\343\062\uff3c\102\342\001\002" +
    "\000\004\062\uff42\001\002\000\004\066\uff30\001\002\000" +
    "\004\066\010\001\002\000\056\003\uff2f\007\uff2f\010\uff2f" +
    "\016\uff2f\020\uff2f\022\uff2f\023\uff2f\024\uff2f\025\uff2f\030" +
    "\uff2f\034\uff2f\035\uff2f\036\uff2f\037\uff2f\040\uff2f\070\uff2f" +
    "\074\uff2f\076\uff2f\077\uff2f\101\uff2f\104\uff2f\105\uff2f\001" +
    "\002\000\004\067\361\001\002\000\010\043\uff39\062\uff39" +
    "\102\uff39\001\002\000\004\066\010\001\002\000\056\003" +
    "\uff2d\007\uff2d\010\uff2d\016\uff2d\020\uff2d\022\uff2d\023\uff2d" +
    "\024\uff2d\025\uff2d\030\uff2d\034\uff2d\035\uff2d\036\uff2d\037" +
    "\uff2d\040\uff2d\070\uff2d\074\uff2d\076\uff2d\077\uff2d\101\uff2d" +
    "\104\uff2d\105\uff2d\001\002\000\032\003\uffc8\004\uffc8\026" +
    "\uffc8\027\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\061\210" +
    "\062\uffc8\066\uffc8\103\uffc8\001\002\000\030\003\uffc9\004" +
    "\uffc9\026\uffc9\027\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\062\uffc9\066\uffc9\103\uffc9\001\002\000\020\004\uffe4\043" +
    "\u0105\044\u0106\045\u0103\046\u0107\066\uffe4\103\u0104\001\002" +
    "\000\006\004\uffea\066\uffea\001\002\000\006\067\u010f\070" +
    "\u0111\001\002\000\032\003\uffc5\004\uffc5\005\u010d\026\uffc5" +
    "\027\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\062\uffc5\066" +
    "\uffc5\103\uffc5\001\002\000\030\003\uffc7\004\uffc7\026\uffc7" +
    "\027\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\062\uffc7\066" +
    "\uffc7\103\uffc7\001\002\000\014\041\374\044\370\061\373" +
    "\067\371\070\364\001\002\000\006\067\375\070\376\001" +
    "\002\000\004\041\u0100\001\002\000\004\041\377\001\002" +
    "\000\030\003\uffc3\004\uffc3\026\uffc3\027\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\062\uffc3\066\uffc3\103\uffc3\001\002" +
    "\000\030\003\uffc2\004\uffc2\026\uffc2\027\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\062\uffc2\066\uffc2\103\uffc2\001\002" +
    "\000\016\043\u0105\044\u0106\045\u0103\046\u0107\062\u0102\103" +
    "\u0104\001\002\000\030\003\uffcf\004\uffcf\026\uffcf\027\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\062\uffcf\066\uffcf\103" +
    "\uffcf\001\002\000\014\041\374\044\370\061\373\067\371" +
    "\070\364\001\002\000\014\041\374\044\370\061\373\067" +
    "\371\070\364\001\002\000\014\041\374\044\370\061\373" +
    "\067\371\070\364\001\002\000\014\041\374\044\370\061" +
    "\373\067\371\070\364\001\002\000\014\041\374\044\370" +
    "\061\373\067\371\070\364\001\002\000\030\003\uffcb\004" +
    "\uffcb\026\uffcb\027\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\062\uffcb\066\uffcb\103\uffcb\001\002\000\030\003\uffcd\004" +
    "\uffcd\026\uffcd\027\uffcd\043\uffcd\044\uffcd\045\u0103\046\u0107" +
    "\062\uffcd\066\uffcd\103\u0104\001\002\000\030\003\uffce\004" +
    "\uffce\026\uffce\027\uffce\043\uffce\044\uffce\045\u0103\046\u0107" +
    "\062\uffce\066\uffce\103\u0104\001\002\000\030\003\uffca\004" +
    "\uffca\026\uffca\027\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\062\uffca\066\uffca\103\uffca\001\002\000\030\003\uffcc\004" +
    "\uffcc\026\uffcc\027\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\062\uffcc\066\uffcc\103\uffcc\001\002\000\004\067\u010e\001" +
    "\002\000\030\003\uffc4\004\uffc4\026\uffc4\027\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\062\uffc4\066\uffc4\103\uffc4\001" +
    "\002\000\032\003\uffc0\004\uffc0\005\u0112\026\uffc0\027\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\062\uffc0\066\uffc0\103" +
    "\uffc0\001\002\000\030\003\uffc6\004\uffc6\026\uffc6\027\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\062\uffc6\066\uffc6\103" +
    "\uffc6\001\002\000\032\003\uffc1\004\uffc1\026\uffc1\027\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\061\210\062\uffc1\066" +
    "\uffc1\103\uffc1\001\002\000\004\067\u0113\001\002\000\030" +
    "\003\uffbf\004\uffbf\026\uffbf\027\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\062\uffbf\066\uffbf\103\uffbf\001\002\000\006" +
    "\004\u0116\066\010\001\002\000\056\003\uffe9\007\uffe9\010" +
    "\uffe9\016\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\030\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\070" +
    "\uffe9\074\uffe9\076\uffe9\077\uffe9\101\uffe9\104\uffe9\105\uffe9" +
    "\001\002\000\004\070\u0118\001\002\000\056\003\uffe5\007" +
    "\uffe5\010\uffe5\016\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\030\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\070\uffe5\074\uffe5\076\uffe5\077\uffe5\101\uffe5\104\uffe5" +
    "\105\uffe5\001\002\000\004\047\u0119\001\002\000\014\041" +
    "\uffe8\044\uffe8\061\uffe8\067\uffe8\070\uffe8\001\002\000\014" +
    "\041\374\044\370\061\373\067\371\070\364\001\002\000" +
    "\006\004\uffe7\066\uffe7\001\002\000\006\004\u0116\066\010" +
    "\001\002\000\056\003\uffe6\007\uffe6\010\uffe6\016\uffe6\020" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\030\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\070\uffe6\074\uffe6\076" +
    "\uffe6\077\uffe6\101\uffe6\104\uffe6\105\uffe6\001\002\000\014" +
    "\041\374\044\370\061\373\067\371\070\364\001\002\000" +
    "\004\066\uffbd\001\002\000\004\066\010\001\002\000\004" +
    "\007\uffbc\001\002\000\004\070\u0123\001\002\000\010\003" +
    "\uff56\021\uff56\047\uff56\001\002\000\010\003\u0125\021\u0126" +
    "\047\ufff5\001\002\000\004\047\ufff4\001\002\000\010\011" +
    "\u013f\012\u0140\013\u0141\001\002\000\004\047\uff55\001\002" +
    "\000\004\047\u0129\001\002\000\014\041\374\044\370\061" +
    "\373\067\371\070\364\001\002\000\016\026\uff54\043\u0105" +
    "\044\u0106\045\u0103\046\u0107\103\u0104\001\002\000\004\026" +
    "\u012c\001\002\000\014\041\374\044\370\061\373\067\371" +
    "\070\364\001\002\000\022\003\u0130\027\u012f\043\u0105\044" +
    "\u0106\045\u0103\046\u0107\066\uff4b\103\u0104\001\002\000\004" +
    "\066\uff53\001\002\000\010\044\u0132\067\u0131\070\u0133\001" +
    "\002\000\004\066\uff4a\001\002\000\004\066\uff4f\001\002" +
    "\000\006\067\u0134\070\u0135\001\002\000\004\066\uff4d\001" +
    "\002\000\004\066\uff4e\001\002\000\004\066\uff4c\001\002" +
    "\000\004\066\010\001\002\000\042\003\uffa3\010\uffa3\016" +
    "\uffa3\022\uffa3\023\uffa3\025\uffa3\030\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\070\uffa3\076\uffa3\104\uffa3\105" +
    "\uffa3\001\002\000\042\003\u0139\010\043\016\074\022\046" +
    "\023\042\025\065\030\u013a\034\053\035\044\036\054\037" +
    "\056\040\052\070\070\076\060\104\061\105\057\001\002" +
    "\000\016\041\uff50\044\uff50\061\uff50\066\uff50\067\uff50\070" +
    "\uff50\001\002\000\016\041\uff51\044\uff51\061\uff51\066\uff51" +
    "\067\uff51\070\uff51\001\002\000\016\041\374\044\370\061" +
    "\373\066\uff48\067\371\070\364\001\002\000\016\043\u0105" +
    "\044\u0106\045\u0103\046\u0107\066\uff49\103\u0104\001\002\000" +
    "\004\066\010\001\002\000\056\003\uff52\007\uff52\010\uff52" +
    "\016\uff52\020\uff52\022\uff52\023\uff52\024\uff52\025\uff52\030" +
    "\uff52\034\uff52\035\uff52\036\uff52\037\uff52\040\uff52\070\uff52" +
    "\074\uff52\076\uff52\077\uff52\101\uff52\104\uff52\105\uff52\001" +
    "\002\000\004\047\ufff8\001\002\000\004\047\ufff7\001\002" +
    "\000\004\047\ufff6\001\002\000\016\003\236\042\241\044" +
    "\240\062\u0143\067\234\070\242\001\002\000\004\066\uff2a" +
    "\001\002\000\004\062\u0145\001\002\000\004\066\uff2c\001" +
    "\002\000\004\066\010\001\002\000\056\003\uff2b\007\uff2b" +
    "\010\uff2b\016\uff2b\020\uff2b\022\uff2b\023\uff2b\024\uff2b\025" +
    "\uff2b\030\uff2b\034\uff2b\035\uff2b\036\uff2b\037\uff2b\040\uff2b" +
    "\070\uff2b\074\uff2b\076\uff2b\077\uff2b\101\uff2b\104\uff2b\105" +
    "\uff2b\001\002\000\004\066\010\001\002\000\056\003\uff29" +
    "\007\uff29\010\uff29\016\uff29\020\uff29\022\uff29\023\uff29\024" +
    "\uff29\025\uff29\030\uff29\034\uff29\035\uff29\036\uff29\037\uff29" +
    "\040\uff29\070\uff29\074\uff29\076\uff29\077\uff29\101\uff29\104" +
    "\uff29\105\uff29\001\002\000\172\004\u0157\005\u016f\006\u016b" +
    "\007\u0179\010\u0152\011\u017d\012\u0172\013\u0160\014\u016d\015" +
    "\u0162\016\u0161\017\u0178\020\u0171\021\u017e\022\u0184\023\u0155" +
    "\024\u015d\025\u0186\026\u0176\027\u0180\030\u015e\031\u014c\032" +
    "\u015b\033\u014b\034\u0156\035\u0158\036\u017b\037\u0170\040\u0154" +
    "\043\u0169\044\u0165\045\u016e\046\u017f\047\u0159\050\u0166\051" +
    "\u016c\052\u015c\053\u016a\054\u0182\055\u017a\056\u0167\057\u015a" +
    "\060\u0168\061\u0177\062\u0175\063\u0185\064\u0183\065\u0153\066" +
    "\010\067\u0164\070\u0174\071\u0181\072\u0173\073\u0163\074\u0150" +
    "\075\u014f\076\u014d\077\u0151\100\u017c\101\u015f\001\002\000" +
    "\172\004\ufecb\005\ufecb\006\ufecb\007\ufecb\010\ufecb\011\ufecb" +
    "\012\ufecb\013\ufecb\014\ufecb\015\ufecb\016\ufecb\017\ufecb\020" +
    "\ufecb\021\ufecb\022\ufecb\023\ufecb\024\ufecb\025\ufecb\026\ufecb" +
    "\027\ufecb\030\ufecb\031\ufecb\032\ufecb\033\ufecb\034\ufecb\035" +
    "\ufecb\036\ufecb\037\ufecb\040\ufecb\043\ufecb\044\ufecb\045\ufecb" +
    "\046\ufecb\047\ufecb\050\ufecb\051\ufecb\052\ufecb\053\ufecb\054" +
    "\ufecb\055\ufecb\056\ufecb\057\ufecb\060\ufecb\061\ufecb\062\ufecb" +
    "\063\ufecb\064\ufecb\065\ufecb\066\ufecb\067\ufecb\070\ufecb\071" +
    "\ufecb\072\ufecb\073\ufecb\074\ufecb\075\ufecb\076\ufecb\077\ufecb" +
    "\100\ufecb\101\ufecb\001\002\000\172\004\ufecd\005\ufecd\006" +
    "\ufecd\007\ufecd\010\ufecd\011\ufecd\012\ufecd\013\ufecd\014\ufecd" +
    "\015\ufecd\016\ufecd\017\ufecd\020\ufecd\021\ufecd\022\ufecd\023" +
    "\ufecd\024\ufecd\025\ufecd\026\ufecd\027\ufecd\030\ufecd\031\ufecd" +
    "\032\ufecd\033\ufecd\034\ufecd\035\ufecd\036\ufecd\037\ufecd\040" +
    "\ufecd\043\ufecd\044\ufecd\045\ufecd\046\ufecd\047\ufecd\050\ufecd" +
    "\051\ufecd\052\ufecd\053\ufecd\054\ufecd\055\ufecd\056\ufecd\057" +
    "\ufecd\060\ufecd\061\ufecd\062\ufecd\063\ufecd\064\ufecd\065\ufecd" +
    "\066\ufecd\067\ufecd\070\ufecd\071\ufecd\072\ufecd\073\ufecd\074" +
    "\ufecd\075\ufecd\076\ufecd\077\ufecd\100\ufecd\101\ufecd\001\002" +
    "\000\172\004\ufec6\005\ufec6\006\ufec6\007\ufec6\010\ufec6\011" +
    "\ufec6\012\ufec6\013\ufec6\014\ufec6\015\ufec6\016\ufec6\017\ufec6" +
    "\020\ufec6\021\ufec6\022\ufec6\023\ufec6\024\ufec6\025\ufec6\026" +
    "\ufec6\027\ufec6\030\ufec6\031\ufec6\032\ufec6\033\ufec6\034\ufec6" +
    "\035\ufec6\036\ufec6\037\ufec6\040\ufec6\043\ufec6\044\ufec6\045" +
    "\ufec6\046\ufec6\047\ufec6\050\ufec6\051\ufec6\052\ufec6\053\ufec6" +
    "\054\ufec6\055\ufec6\056\ufec6\057\ufec6\060\ufec6\061\ufec6\062" +
    "\ufec6\063\ufec6\064\ufec6\065\ufec6\066\ufec6\067\ufec6\070\ufec6" +
    "\071\ufec6\072\ufec6\073\ufec6\074\ufec6\075\ufec6\076\ufec6\077" +
    "\ufec6\100\ufec6\101\ufec6\001\002\000\056\003\uff25\007\uff25" +
    "\010\uff25\016\uff25\020\uff25\022\uff25\023\uff25\024\uff25\025" +
    "\uff25\030\uff25\034\uff25\035\uff25\036\uff25\037\uff25\040\uff25" +
    "\070\uff25\074\uff25\076\uff25\077\uff25\101\uff25\104\uff25\105" +
    "\uff25\001\002\000\172\004\ufeca\005\ufeca\006\ufeca\007\ufeca" +
    "\010\ufeca\011\ufeca\012\ufeca\013\ufeca\014\ufeca\015\ufeca\016" +
    "\ufeca\017\ufeca\020\ufeca\021\ufeca\022\ufeca\023\ufeca\024\ufeca" +
    "\025\ufeca\026\ufeca\027\ufeca\030\ufeca\031\ufeca\032\ufeca\033" +
    "\ufeca\034\ufeca\035\ufeca\036\ufeca\037\ufeca\040\ufeca\043\ufeca" +
    "\044\ufeca\045\ufeca\046\ufeca\047\ufeca\050\ufeca\051\ufeca\052" +
    "\ufeca\053\ufeca\054\ufeca\055\ufeca\056\ufeca\057\ufeca\060\ufeca" +
    "\061\ufeca\062\ufeca\063\ufeca\064\ufeca\065\ufeca\066\ufeca\067" +
    "\ufeca\070\ufeca\071\ufeca\072\ufeca\073\ufeca\074\ufeca\075\ufeca" +
    "\076\ufeca\077\ufeca\100\ufeca\101\ufeca\001\002\000\172\004" +
    "\ufee0\005\ufee0\006\ufee0\007\ufee0\010\ufee0\011\ufee0\012\ufee0" +
    "\013\ufee0\014\ufee0\015\ufee0\016\ufee0\017\ufee0\020\ufee0\021" +
    "\ufee0\022\ufee0\023\ufee0\024\ufee0\025\ufee0\026\ufee0\027\ufee0" +
    "\030\ufee0\031\ufee0\032\ufee0\033\ufee0\034\ufee0\035\ufee0\036" +
    "\ufee0\037\ufee0\040\ufee0\043\ufee0\044\ufee0\045\ufee0\046\ufee0" +
    "\047\ufee0\050\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055" +
    "\ufee0\056\ufee0\057\ufee0\060\ufee0\061\ufee0\062\ufee0\063\ufee0" +
    "\064\ufee0\065\ufee0\066\ufee0\067\ufee0\070\ufee0\071\ufee0\072" +
    "\ufee0\073\ufee0\074\ufee0\075\ufee0\076\ufee0\077\ufee0\100\ufee0" +
    "\101\ufee0\001\002\000\172\004\ufec5\005\ufec5\006\ufec5\007" +
    "\ufec5\010\ufec5\011\ufec5\012\ufec5\013\ufec5\014\ufec5\015\ufec5" +
    "\016\ufec5\017\ufec5\020\ufec5\021\ufec5\022\ufec5\023\ufec5\024" +
    "\ufec5\025\ufec5\026\ufec5\027\ufec5\030\ufec5\031\ufec5\032\ufec5" +
    "\033\ufec5\034\ufec5\035\ufec5\036\ufec5\037\ufec5\040\ufec5\043" +
    "\ufec5\044\ufec5\045\ufec5\046\ufec5\047\ufec5\050\ufec5\051\ufec5" +
    "\052\ufec5\053\ufec5\054\ufec5\055\ufec5\056\ufec5\057\ufec5\060" +
    "\ufec5\061\ufec5\062\ufec5\063\ufec5\064\ufec5\065\ufec5\066\ufec5" +
    "\067\ufec5\070\ufec5\071\ufec5\072\ufec5\073\ufec5\074\ufec5\075" +
    "\ufec5\076\ufec5\077\ufec5\100\ufec5\101\ufec5\001\002\000\172" +
    "\004\ufee1\005\ufee1\006\ufee1\007\ufee1\010\ufee1\011\ufee1\012" +
    "\ufee1\013\ufee1\014\ufee1\015\ufee1\016\ufee1\017\ufee1\020\ufee1" +
    "\021\ufee1\022\ufee1\023\ufee1\024\ufee1\025\ufee1\026\ufee1\027" +
    "\ufee1\030\ufee1\031\ufee1\032\ufee1\033\ufee1\034\ufee1\035\ufee1" +
    "\036\ufee1\037\ufee1\040\ufee1\043\ufee1\044\ufee1\045\ufee1\046" +
    "\ufee1\047\ufee1\050\ufee1\051\ufee1\052\ufee1\053\ufee1\054\ufee1" +
    "\055\ufee1\056\ufee1\057\ufee1\060\ufee1\061\ufee1\062\ufee1\063" +
    "\ufee1\064\ufee1\065\ufee1\066\ufee1\067\ufee1\070\ufee1\071\ufee1" +
    "\072\ufee1\073\ufee1\074\ufee1\075\ufee1\076\ufee1\077\ufee1\100" +
    "\ufee1\101\ufee1\001\002\000\172\004\ufeae\005\ufeae\006\ufeae" +
    "\007\ufeae\010\ufeae\011\ufeae\012\ufeae\013\ufeae\014\ufeae\015" +
    "\ufeae\016\ufeae\017\ufeae\020\ufeae\021\ufeae\022\ufeae\023\ufeae" +
    "\024\ufeae\025\ufeae\026\ufeae\027\ufeae\030\ufeae\031\ufeae\032" +
    "\ufeae\033\ufeae\034\ufeae\035\ufeae\036\ufeae\037\ufeae\040\ufeae" +
    "\043\ufeae\044\ufeae\045\ufeae\046\ufeae\047\ufeae\050\ufeae\051" +
    "\ufeae\052\ufeae\053\ufeae\054\ufeae\055\ufeae\056\ufeae\057\ufeae" +
    "\060\ufeae\061\ufeae\062\ufeae\063\ufeae\064\ufeae\065\ufeae\066" +
    "\ufeae\067\ufeae\070\ufeae\071\ufeae\072\ufeae\073\ufeae\074\ufeae" +
    "\075\ufeae\076\ufeae\077\ufeae\100\ufeae\101\ufeae\001\002\000" +
    "\172\004\ufec3\005\ufec3\006\ufec3\007\ufec3\010\ufec3\011\ufec3" +
    "\012\ufec3\013\ufec3\014\ufec3\015\ufec3\016\ufec3\017\ufec3\020" +
    "\ufec3\021\ufec3\022\ufec3\023\ufec3\024\ufec3\025\ufec3\026\ufec3" +
    "\027\ufec3\030\ufec3\031\ufec3\032\ufec3\033\ufec3\034\ufec3\035" +
    "\ufec3\036\ufec3\037\ufec3\040\ufec3\043\ufec3\044\ufec3\045\ufec3" +
    "\046\ufec3\047\ufec3\050\ufec3\051\ufec3\052\ufec3\053\ufec3\054" +
    "\ufec3\055\ufec3\056\ufec3\057\ufec3\060\ufec3\061\ufec3\062\ufec3" +
    "\063\ufec3\064\ufec3\065\ufec3\066\ufec3\067\ufec3\070\ufec3\071" +
    "\ufec3\072\ufec3\073\ufec3\074\ufec3\075\ufec3\076\ufec3\077\ufec3" +
    "\100\ufec3\101\ufec3\001\002\000\172\004\ufed4\005\ufed4\006" +
    "\ufed4\007\ufed4\010\ufed4\011\ufed4\012\ufed4\013\ufed4\014\ufed4" +
    "\015\ufed4\016\ufed4\017\ufed4\020\ufed4\021\ufed4\022\ufed4\023" +
    "\ufed4\024\ufed4\025\ufed4\026\ufed4\027\ufed4\030\ufed4\031\ufed4" +
    "\032\ufed4\033\ufed4\034\ufed4\035\ufed4\036\ufed4\037\ufed4\040" +
    "\ufed4\043\ufed4\044\ufed4\045\ufed4\046\ufed4\047\ufed4\050\ufed4" +
    "\051\ufed4\052\ufed4\053\ufed4\054\ufed4\055\ufed4\056\ufed4\057" +
    "\ufed4\060\ufed4\061\ufed4\062\ufed4\063\ufed4\064\ufed4\065\ufed4" +
    "\066\ufed4\067\ufed4\070\ufed4\071\ufed4\072\ufed4\073\ufed4\074" +
    "\ufed4\075\ufed4\076\ufed4\077\ufed4\100\ufed4\101\ufed4\001\002" +
    "\000\172\004\ufec9\005\ufec9\006\ufec9\007\ufec9\010\ufec9\011" +
    "\ufec9\012\ufec9\013\ufec9\014\ufec9\015\ufec9\016\ufec9\017\ufec9" +
    "\020\ufec9\021\ufec9\022\ufec9\023\ufec9\024\ufec9\025\ufec9\026" +
    "\ufec9\027\ufec9\030\ufec9\031\ufec9\032\ufec9\033\ufec9\034\ufec9" +
    "\035\ufec9\036\ufec9\037\ufec9\040\ufec9\043\ufec9\044\ufec9\045" +
    "\ufec9\046\ufec9\047\ufec9\050\ufec9\051\ufec9\052\ufec9\053\ufec9" +
    "\054\ufec9\055\ufec9\056\ufec9\057\ufec9\060\ufec9\061\ufec9\062" +
    "\ufec9\063\ufec9\064\ufec9\065\ufec9\066\ufec9\067\ufec9\070\ufec9" +
    "\071\ufec9\072\ufec9\073\ufec9\074\ufec9\075\ufec9\076\ufec9\077" +
    "\ufec9\100\ufec9\101\ufec9\001\002\000\172\004\ufee5\005\ufee5" +
    "\006\ufee5\007\ufee5\010\ufee5\011\ufee5\012\ufee5\013\ufee5\014" +
    "\ufee5\015\ufee5\016\ufee5\017\ufee5\020\ufee5\021\ufee5\022\ufee5" +
    "\023\ufee5\024\ufee5\025\ufee5\026\ufee5\027\ufee5\030\ufee5\031" +
    "\ufee5\032\ufee5\033\ufee5\034\ufee5\035\ufee5\036\ufee5\037\ufee5" +
    "\040\ufee5\043\ufee5\044\ufee5\045\ufee5\046\ufee5\047\ufee5\050" +
    "\ufee5\051\ufee5\052\ufee5\053\ufee5\054\ufee5\055\ufee5\056\ufee5" +
    "\057\ufee5\060\ufee5\061\ufee5\062\ufee5\063\ufee5\064\ufee5\065" +
    "\ufee5\066\ufee5\067\ufee5\070\ufee5\071\ufee5\072\ufee5\073\ufee5" +
    "\074\ufee5\075\ufee5\076\ufee5\077\ufee5\100\ufee5\101\ufee5\001" +
    "\002\000\172\004\ufec8\005\ufec8\006\ufec8\007\ufec8\010\ufec8" +
    "\011\ufec8\012\ufec8\013\ufec8\014\ufec8\015\ufec8\016\ufec8\017" +
    "\ufec8\020\ufec8\021\ufec8\022\ufec8\023\ufec8\024\ufec8\025\ufec8" +
    "\026\ufec8\027\ufec8\030\ufec8\031\ufec8\032\ufec8\033\ufec8\034" +
    "\ufec8\035\ufec8\036\ufec8\037\ufec8\040\ufec8\043\ufec8\044\ufec8" +
    "\045\ufec8\046\ufec8\047\ufec8\050\ufec8\051\ufec8\052\ufec8\053" +
    "\ufec8\054\ufec8\055\ufec8\056\ufec8\057\ufec8\060\ufec8\061\ufec8" +
    "\062\ufec8\063\ufec8\064\ufec8\065\ufec8\066\ufec8\067\ufec8\070" +
    "\ufec8\071\ufec8\072\ufec8\073\ufec8\074\ufec8\075\ufec8\076\ufec8" +
    "\077\ufec8\100\ufec8\101\ufec8\001\002\000\172\004\ufebc\005" +
    "\ufebc\006\ufebc\007\ufebc\010\ufebc\011\ufebc\012\ufebc\013\ufebc" +
    "\014\ufebc\015\ufebc\016\ufebc\017\ufebc\020\ufebc\021\ufebc\022" +
    "\ufebc\023\ufebc\024\ufebc\025\ufebc\026\ufebc\027\ufebc\030\ufebc" +
    "\031\ufebc\032\ufebc\033\ufebc\034\ufebc\035\ufebc\036\ufebc\037" +
    "\ufebc\040\ufebc\043\ufebc\044\ufebc\045\ufebc\046\ufebc\047\ufebc" +
    "\050\ufebc\051\ufebc\052\ufebc\053\ufebc\054\ufebc\055\ufebc\056" +
    "\ufebc\057\ufebc\060\ufebc\061\ufebc\062\ufebc\063\ufebc\064\ufebc" +
    "\065\ufebc\066\ufebc\067\ufebc\070\ufebc\071\ufebc\072\ufebc\073" +
    "\ufebc\074\ufebc\075\ufebc\076\ufebc\077\ufebc\100\ufebc\101\ufebc" +
    "\001\002\000\172\004\ufeb4\005\ufeb4\006\ufeb4\007\ufeb4\010" +
    "\ufeb4\011\ufeb4\012\ufeb4\013\ufeb4\014\ufeb4\015\ufeb4\016\ufeb4" +
    "\017\ufeb4\020\ufeb4\021\ufeb4\022\ufeb4\023\ufeb4\024\ufeb4\025" +
    "\ufeb4\026\ufeb4\027\ufeb4\030\ufeb4\031\ufeb4\032\ufeb4\033\ufeb4" +
    "\034\ufeb4\035\ufeb4\036\ufeb4\037\ufeb4\040\ufeb4\043\ufeb4\044" +
    "\ufeb4\045\ufeb4\046\ufeb4\047\ufeb4\050\ufeb4\051\ufeb4\052\ufeb4" +
    "\053\ufeb4\054\ufeb4\055\ufeb4\056\ufeb4\057\ufeb4\060\ufeb4\061" +
    "\ufeb4\062\ufeb4\063\ufeb4\064\ufeb4\065\ufeb4\066\ufeb4\067\ufeb4" +
    "\070\ufeb4\071\ufeb4\072\ufeb4\073\ufeb4\074\ufeb4\075\ufeb4\076" +
    "\ufeb4\077\ufeb4\100\ufeb4\101\ufeb4\001\002\000\172\004\ufecc" +
    "\005\ufecc\006\ufecc\007\ufecc\010\ufecc\011\ufecc\012\ufecc\013" +
    "\ufecc\014\ufecc\015\ufecc\016\ufecc\017\ufecc\020\ufecc\021\ufecc" +
    "\022\ufecc\023\ufecc\024\ufecc\025\ufecc\026\ufecc\027\ufecc\030" +
    "\ufecc\031\ufecc\032\ufecc\033\ufecc\034\ufecc\035\ufecc\036\ufecc" +
    "\037\ufecc\040\ufecc\043\ufecc\044\ufecc\045\ufecc\046\ufecc\047" +
    "\ufecc\050\ufecc\051\ufecc\052\ufecc\053\ufecc\054\ufecc\055\ufecc" +
    "\056\ufecc\057\ufecc\060\ufecc\061\ufecc\062\ufecc\063\ufecc\064" +
    "\ufecc\065\ufecc\066\ufecc\067\ufecc\070\ufecc\071\ufecc\072\ufecc" +
    "\073\ufecc\074\ufecc\075\ufecc\076\ufecc\077\ufecc\100\ufecc\101" +
    "\ufecc\001\002\000\172\004\ufeb9\005\ufeb9\006\ufeb9\007\ufeb9" +
    "\010\ufeb9\011\ufeb9\012\ufeb9\013\ufeb9\014\ufeb9\015\ufeb9\016" +
    "\ufeb9\017\ufeb9\020\ufeb9\021\ufeb9\022\ufeb9\023\ufeb9\024\ufeb9" +
    "\025\ufeb9\026\ufeb9\027\ufeb9\030\ufeb9\031\ufeb9\032\ufeb9\033" +
    "\ufeb9\034\ufeb9\035\ufeb9\036\ufeb9\037\ufeb9\040\ufeb9\043\ufeb9" +
    "\044\ufeb9\045\ufeb9\046\ufeb9\047\ufeb9\050\ufeb9\051\ufeb9\052" +
    "\ufeb9\053\ufeb9\054\ufeb9\055\ufeb9\056\ufeb9\057\ufeb9\060\ufeb9" +
    "\061\ufeb9\062\ufeb9\063\ufeb9\064\ufeb9\065\ufeb9\066\ufeb9\067" +
    "\ufeb9\070\ufeb9\071\ufeb9\072\ufeb9\073\ufeb9\074\ufeb9\075\ufeb9" +
    "\076\ufeb9\077\ufeb9\100\ufeb9\101\ufeb9\001\002\000\172\004" +
    "\ufed2\005\ufed2\006\ufed2\007\ufed2\010\ufed2\011\ufed2\012\ufed2" +
    "\013\ufed2\014\ufed2\015\ufed2\016\ufed2\017\ufed2\020\ufed2\021" +
    "\ufed2\022\ufed2\023\ufed2\024\ufed2\025\ufed2\026\ufed2\027\ufed2" +
    "\030\ufed2\031\ufed2\032\ufed2\033\ufed2\034\ufed2\035\ufed2\036" +
    "\ufed2\037\ufed2\040\ufed2\043\ufed2\044\ufed2\045\ufed2\046\ufed2" +
    "\047\ufed2\050\ufed2\051\ufed2\052\ufed2\053\ufed2\054\ufed2\055" +
    "\ufed2\056\ufed2\057\ufed2\060\ufed2\061\ufed2\062\ufed2\063\ufed2" +
    "\064\ufed2\065\ufed2\066\ufed2\067\ufed2\070\ufed2\071\ufed2\072" +
    "\ufed2\073\ufed2\074\ufed2\075\ufed2\076\ufed2\077\ufed2\100\ufed2" +
    "\101\ufed2\001\002\000\172\004\ufece\005\ufece\006\ufece\007" +
    "\ufece\010\ufece\011\ufece\012\ufece\013\ufece\014\ufece\015\ufece" +
    "\016\ufece\017\ufece\020\ufece\021\ufece\022\ufece\023\ufece\024" +
    "\ufece\025\ufece\026\ufece\027\ufece\030\ufece\031\ufece\032\ufece" +
    "\033\ufece\034\ufece\035\ufece\036\ufece\037\ufece\040\ufece\043" +
    "\ufece\044\ufece\045\ufece\046\ufece\047\ufece\050\ufece\051\ufece" +
    "\052\ufece\053\ufece\054\ufece\055\ufece\056\ufece\057\ufece\060" +
    "\ufece\061\ufece\062\ufece\063\ufece\064\ufece\065\ufece\066\ufece" +
    "\067\ufece\070\ufece\071\ufece\072\ufece\073\ufece\074\ufece\075" +
    "\ufece\076\ufece\077\ufece\100\ufece\101\ufece\001\002\000\172" +
    "\004\ufed7\005\ufed7\006\ufed7\007\ufed7\010\ufed7\011\ufed7\012" +
    "\ufed7\013\ufed7\014\ufed7\015\ufed7\016\ufed7\017\ufed7\020\ufed7" +
    "\021\ufed7\022\ufed7\023\ufed7\024\ufed7\025\ufed7\026\ufed7\027" +
    "\ufed7\030\ufed7\031\ufed7\032\ufed7\033\ufed7\034\ufed7\035\ufed7" +
    "\036\ufed7\037\ufed7\040\ufed7\043\ufed7\044\ufed7\045\ufed7\046" +
    "\ufed7\047\ufed7\050\ufed7\051\ufed7\052\ufed7\053\ufed7\054\ufed7" +
    "\055\ufed7\056\ufed7\057\ufed7\060\ufed7\061\ufed7\062\ufed7\063" +
    "\ufed7\064\ufed7\065\ufed7\066\ufed7\067\ufed7\070\ufed7\071\ufed7" +
    "\072\ufed7\073\ufed7\074\ufed7\075\ufed7\076\ufed7\077\ufed7\100" +
    "\ufed7\101\ufed7\001\002\000\172\004\ufedd\005\ufedd\006\ufedd" +
    "\007\ufedd\010\ufedd\011\ufedd\012\ufedd\013\ufedd\014\ufedd\015" +
    "\ufedd\016\ufedd\017\ufedd\020\ufedd\021\ufedd\022\ufedd\023\ufedd" +
    "\024\ufedd\025\ufedd\026\ufedd\027\ufedd\030\ufedd\031\ufedd\032" +
    "\ufedd\033\ufedd\034\ufedd\035\ufedd\036\ufedd\037\ufedd\040\ufedd" +
    "\043\ufedd\044\ufedd\045\ufedd\046\ufedd\047\ufedd\050\ufedd\051" +
    "\ufedd\052\ufedd\053\ufedd\054\ufedd\055\ufedd\056\ufedd\057\ufedd" +
    "\060\ufedd\061\ufedd\062\ufedd\063\ufedd\064\ufedd\065\ufedd\066" +
    "\ufedd\067\ufedd\070\ufedd\071\ufedd\072\ufedd\073\ufedd\074\ufedd" +
    "\075\ufedd\076\ufedd\077\ufedd\100\ufedd\101\ufedd\001\002\000" +
    "\172\004\ufeda\005\ufeda\006\ufeda\007\ufeda\010\ufeda\011\ufeda" +
    "\012\ufeda\013\ufeda\014\ufeda\015\ufeda\016\ufeda\017\ufeda\020" +
    "\ufeda\021\ufeda\022\ufeda\023\ufeda\024\ufeda\025\ufeda\026\ufeda" +
    "\027\ufeda\030\ufeda\031\ufeda\032\ufeda\033\ufeda\034\ufeda\035" +
    "\ufeda\036\ufeda\037\ufeda\040\ufeda\043\ufeda\044\ufeda\045\ufeda" +
    "\046\ufeda\047\ufeda\050\ufeda\051\ufeda\052\ufeda\053\ufeda\054" +
    "\ufeda\055\ufeda\056\ufeda\057\ufeda\060\ufeda\061\ufeda\062\ufeda" +
    "\063\ufeda\064\ufeda\065\ufeda\066\ufeda\067\ufeda\070\ufeda\071" +
    "\ufeda\072\ufeda\073\ufeda\074\ufeda\075\ufeda\076\ufeda\077\ufeda" +
    "\100\ufeda\101\ufeda\001\002\000\172\004\ufedb\005\ufedb\006" +
    "\ufedb\007\ufedb\010\ufedb\011\ufedb\012\ufedb\013\ufedb\014\ufedb" +
    "\015\ufedb\016\ufedb\017\ufedb\020\ufedb\021\ufedb\022\ufedb\023" +
    "\ufedb\024\ufedb\025\ufedb\026\ufedb\027\ufedb\030\ufedb\031\ufedb" +
    "\032\ufedb\033\ufedb\034\ufedb\035\ufedb\036\ufedb\037\ufedb\040" +
    "\ufedb\043\ufedb\044\ufedb\045\ufedb\046\ufedb\047\ufedb\050\ufedb" +
    "\051\ufedb\052\ufedb\053\ufedb\054\ufedb\055\ufedb\056\ufedb\057" +
    "\ufedb\060\ufedb\061\ufedb\062\ufedb\063\ufedb\064\ufedb\065\ufedb" +
    "\066\ufedb\067\ufedb\070\ufedb\071\ufedb\072\ufedb\073\ufedb\074" +
    "\ufedb\075\ufedb\076\ufedb\077\ufedb\100\ufedb\101\ufedb\001\002" +
    "\000\172\004\ufebd\005\ufebd\006\ufebd\007\ufebd\010\ufebd\011" +
    "\ufebd\012\ufebd\013\ufebd\014\ufebd\015\ufebd\016\ufebd\017\ufebd" +
    "\020\ufebd\021\ufebd\022\ufebd\023\ufebd\024\ufebd\025\ufebd\026" +
    "\ufebd\027\ufebd\030\ufebd\031\ufebd\032\ufebd\033\ufebd\034\ufebd" +
    "\035\ufebd\036\ufebd\037\ufebd\040\ufebd\043\ufebd\044\ufebd\045" +
    "\ufebd\046\ufebd\047\ufebd\050\ufebd\051\ufebd\052\ufebd\053\ufebd" +
    "\054\ufebd\055\ufebd\056\ufebd\057\ufebd\060\ufebd\061\ufebd\062" +
    "\ufebd\063\ufebd\064\ufebd\065\ufebd\066\ufebd\067\ufebd\070\ufebd" +
    "\071\ufebd\072\ufebd\073\ufebd\074\ufebd\075\ufebd\076\ufebd\077" +
    "\ufebd\100\ufebd\101\ufebd\001\002\000\172\004\ufead\005\ufead" +
    "\006\ufead\007\ufead\010\ufead\011\ufead\012\ufead\013\ufead\014" +
    "\ufead\015\ufead\016\ufead\017\ufead\020\ufead\021\ufead\022\ufead" +
    "\023\ufead\024\ufead\025\ufead\026\ufead\027\ufead\030\ufead\031" +
    "\ufead\032\ufead\033\ufead\034\ufead\035\ufead\036\ufead\037\ufead" +
    "\040\ufead\043\ufead\044\ufead\045\ufead\046\ufead\047\ufead\050" +
    "\ufead\051\ufead\052\ufead\053\ufead\054\ufead\055\ufead\056\ufead" +
    "\057\ufead\060\ufead\061\ufead\062\ufead\063\ufead\064\ufead\065" +
    "\ufead\066\ufead\067\ufead\070\ufead\071\ufead\072\ufead\073\ufead" +
    "\074\ufead\075\ufead\076\ufead\077\ufead\100\ufead\101\ufead\001" +
    "\002\000\172\004\ufec1\005\ufec1\006\ufec1\007\ufec1\010\ufec1" +
    "\011\ufec1\012\ufec1\013\ufec1\014\ufec1\015\ufec1\016\ufec1\017" +
    "\ufec1\020\ufec1\021\ufec1\022\ufec1\023\ufec1\024\ufec1\025\ufec1" +
    "\026\ufec1\027\ufec1\030\ufec1\031\ufec1\032\ufec1\033\ufec1\034" +
    "\ufec1\035\ufec1\036\ufec1\037\ufec1\040\ufec1\043\ufec1\044\ufec1" +
    "\045\ufec1\046\ufec1\047\ufec1\050\ufec1\051\ufec1\052\ufec1\053" +
    "\ufec1\054\ufec1\055\ufec1\056\ufec1\057\ufec1\060\ufec1\061\ufec1" +
    "\062\ufec1\063\ufec1\064\ufec1\065\ufec1\066\ufec1\067\ufec1\070" +
    "\ufec1\071\ufec1\072\ufec1\073\ufec1\074\ufec1\075\ufec1\076\ufec1" +
    "\077\ufec1\100\ufec1\101\ufec1\001\002\000\172\004\ufebb\005" +
    "\ufebb\006\ufebb\007\ufebb\010\ufebb\011\ufebb\012\ufebb\013\ufebb" +
    "\014\ufebb\015\ufebb\016\ufebb\017\ufebb\020\ufebb\021\ufebb\022" +
    "\ufebb\023\ufebb\024\ufebb\025\ufebb\026\ufebb\027\ufebb\030\ufebb" +
    "\031\ufebb\032\ufebb\033\ufebb\034\ufebb\035\ufebb\036\ufebb\037" +
    "\ufebb\040\ufebb\043\ufebb\044\ufebb\045\ufebb\046\ufebb\047\ufebb" +
    "\050\ufebb\051\ufebb\052\ufebb\053\ufebb\054\ufebb\055\ufebb\056" +
    "\ufebb\057\ufebb\060\ufebb\061\ufebb\062\ufebb\063\ufebb\064\ufebb" +
    "\065\ufebb\066\ufebb\067\ufebb\070\ufebb\071\ufebb\072\ufebb\073" +
    "\ufebb\074\ufebb\075\ufebb\076\ufebb\077\ufebb\100\ufebb\101\ufebb" +
    "\001\002\000\172\004\ufeb5\005\ufeb5\006\ufeb5\007\ufeb5\010" +
    "\ufeb5\011\ufeb5\012\ufeb5\013\ufeb5\014\ufeb5\015\ufeb5\016\ufeb5" +
    "\017\ufeb5\020\ufeb5\021\ufeb5\022\ufeb5\023\ufeb5\024\ufeb5\025" +
    "\ufeb5\026\ufeb5\027\ufeb5\030\ufeb5\031\ufeb5\032\ufeb5\033\ufeb5" +
    "\034\ufeb5\035\ufeb5\036\ufeb5\037\ufeb5\040\ufeb5\043\ufeb5\044" +
    "\ufeb5\045\ufeb5\046\ufeb5\047\ufeb5\050\ufeb5\051\ufeb5\052\ufeb5" +
    "\053\ufeb5\054\ufeb5\055\ufeb5\056\ufeb5\057\ufeb5\060\ufeb5\061" +
    "\ufeb5\062\ufeb5\063\ufeb5\064\ufeb5\065\ufeb5\066\ufeb5\067\ufeb5" +
    "\070\ufeb5\071\ufeb5\072\ufeb5\073\ufeb5\074\ufeb5\075\ufeb5\076" +
    "\ufeb5\077\ufeb5\100\ufeb5\101\ufeb5\001\002\000\172\004\ufeb3" +
    "\005\ufeb3\006\ufeb3\007\ufeb3\010\ufeb3\011\ufeb3\012\ufeb3\013" +
    "\ufeb3\014\ufeb3\015\ufeb3\016\ufeb3\017\ufeb3\020\ufeb3\021\ufeb3" +
    "\022\ufeb3\023\ufeb3\024\ufeb3\025\ufeb3\026\ufeb3\027\ufeb3\030" +
    "\ufeb3\031\ufeb3\032\ufeb3\033\ufeb3\034\ufeb3\035\ufeb3\036\ufeb3" +
    "\037\ufeb3\040\ufeb3\043\ufeb3\044\ufeb3\045\ufeb3\046\ufeb3\047" +
    "\ufeb3\050\ufeb3\051\ufeb3\052\ufeb3\053\ufeb3\054\ufeb3\055\ufeb3" +
    "\056\ufeb3\057\ufeb3\060\ufeb3\061\ufeb3\062\ufeb3\063\ufeb3\064" +
    "\ufeb3\065\ufeb3\066\ufeb3\067\ufeb3\070\ufeb3\071\ufeb3\072\ufeb3" +
    "\073\ufeb3\074\ufeb3\075\ufeb3\076\ufeb3\077\ufeb3\100\ufeb3\101" +
    "\ufeb3\001\002\000\172\004\ufec2\005\ufec2\006\ufec2\007\ufec2" +
    "\010\ufec2\011\ufec2\012\ufec2\013\ufec2\014\ufec2\015\ufec2\016" +
    "\ufec2\017\ufec2\020\ufec2\021\ufec2\022\ufec2\023\ufec2\024\ufec2" +
    "\025\ufec2\026\ufec2\027\ufec2\030\ufec2\031\ufec2\032\ufec2\033" +
    "\ufec2\034\ufec2\035\ufec2\036\ufec2\037\ufec2\040\ufec2\043\ufec2" +
    "\044\ufec2\045\ufec2\046\ufec2\047\ufec2\050\ufec2\051\ufec2\052" +
    "\ufec2\053\ufec2\054\ufec2\055\ufec2\056\ufec2\057\ufec2\060\ufec2" +
    "\061\ufec2\062\ufec2\063\ufec2\064\ufec2\065\ufec2\066\ufec2\067" +
    "\ufec2\070\ufec2\071\ufec2\072\ufec2\073\ufec2\074\ufec2\075\ufec2" +
    "\076\ufec2\077\ufec2\100\ufec2\101\ufec2\001\002\000\172\004" +
    "\ufeb8\005\ufeb8\006\ufeb8\007\ufeb8\010\ufeb8\011\ufeb8\012\ufeb8" +
    "\013\ufeb8\014\ufeb8\015\ufeb8\016\ufeb8\017\ufeb8\020\ufeb8\021" +
    "\ufeb8\022\ufeb8\023\ufeb8\024\ufeb8\025\ufeb8\026\ufeb8\027\ufeb8" +
    "\030\ufeb8\031\ufeb8\032\ufeb8\033\ufeb8\034\ufeb8\035\ufeb8\036" +
    "\ufeb8\037\ufeb8\040\ufeb8\043\ufeb8\044\ufeb8\045\ufeb8\046\ufeb8" +
    "\047\ufeb8\050\ufeb8\051\ufeb8\052\ufeb8\053\ufeb8\054\ufeb8\055" +
    "\ufeb8\056\ufeb8\057\ufeb8\060\ufeb8\061\ufeb8\062\ufeb8\063\ufeb8" +
    "\064\ufeb8\065\ufeb8\066\ufeb8\067\ufeb8\070\ufeb8\071\ufeb8\072" +
    "\ufeb8\073\ufeb8\074\ufeb8\075\ufeb8\076\ufeb8\077\ufeb8\100\ufeb8" +
    "\101\ufeb8\001\002\000\172\004\ufee3\005\ufee3\006\ufee3\007" +
    "\ufee3\010\ufee3\011\ufee3\012\ufee3\013\ufee3\014\ufee3\015\ufee3" +
    "\016\ufee3\017\ufee3\020\ufee3\021\ufee3\022\ufee3\023\ufee3\024" +
    "\ufee3\025\ufee3\026\ufee3\027\ufee3\030\ufee3\031\ufee3\032\ufee3" +
    "\033\ufee3\034\ufee3\035\ufee3\036\ufee3\037\ufee3\040\ufee3\043" +
    "\ufee3\044\ufee3\045\ufee3\046\ufee3\047\ufee3\050\ufee3\051\ufee3" +
    "\052\ufee3\053\ufee3\054\ufee3\055\ufee3\056\ufee3\057\ufee3\060" +
    "\ufee3\061\ufee3\062\ufee3\063\ufee3\064\ufee3\065\ufee3\066\ufee3" +
    "\067\ufee3\070\ufee3\071\ufee3\072\ufee3\073\ufee3\074\ufee3\075" +
    "\ufee3\076\ufee3\077\ufee3\100\ufee3\101\ufee3\001\002\000\172" +
    "\004\ufeba\005\ufeba\006\ufeba\007\ufeba\010\ufeba\011\ufeba\012" +
    "\ufeba\013\ufeba\014\ufeba\015\ufeba\016\ufeba\017\ufeba\020\ufeba" +
    "\021\ufeba\022\ufeba\023\ufeba\024\ufeba\025\ufeba\026\ufeba\027" +
    "\ufeba\030\ufeba\031\ufeba\032\ufeba\033\ufeba\034\ufeba\035\ufeba" +
    "\036\ufeba\037\ufeba\040\ufeba\043\ufeba\044\ufeba\045\ufeba\046" +
    "\ufeba\047\ufeba\050\ufeba\051\ufeba\052\ufeba\053\ufeba\054\ufeba" +
    "\055\ufeba\056\ufeba\057\ufeba\060\ufeba\061\ufeba\062\ufeba\063" +
    "\ufeba\064\ufeba\065\ufeba\066\ufeba\067\ufeba\070\ufeba\071\ufeba" +
    "\072\ufeba\073\ufeba\074\ufeba\075\ufeba\076\ufeba\077\ufeba\100" +
    "\ufeba\101\ufeba\001\002\000\172\004\ufedc\005\ufedc\006\ufedc" +
    "\007\ufedc\010\ufedc\011\ufedc\012\ufedc\013\ufedc\014\ufedc\015" +
    "\ufedc\016\ufedc\017\ufedc\020\ufedc\021\ufedc\022\ufedc\023\ufedc" +
    "\024\ufedc\025\ufedc\026\ufedc\027\ufedc\030\ufedc\031\ufedc\032" +
    "\ufedc\033\ufedc\034\ufedc\035\ufedc\036\ufedc\037\ufedc\040\ufedc" +
    "\043\ufedc\044\ufedc\045\ufedc\046\ufedc\047\ufedc\050\ufedc\051" +
    "\ufedc\052\ufedc\053\ufedc\054\ufedc\055\ufedc\056\ufedc\057\ufedc" +
    "\060\ufedc\061\ufedc\062\ufedc\063\ufedc\064\ufedc\065\ufedc\066" +
    "\ufedc\067\ufedc\070\ufedc\071\ufedc\072\ufedc\073\ufedc\074\ufedc" +
    "\075\ufedc\076\ufedc\077\ufedc\100\ufedc\101\ufedc\001\002\000" +
    "\172\004\ufec0\005\ufec0\006\ufec0\007\ufec0\010\ufec0\011\ufec0" +
    "\012\ufec0\013\ufec0\014\ufec0\015\ufec0\016\ufec0\017\ufec0\020" +
    "\ufec0\021\ufec0\022\ufec0\023\ufec0\024\ufec0\025\ufec0\026\ufec0" +
    "\027\ufec0\030\ufec0\031\ufec0\032\ufec0\033\ufec0\034\ufec0\035" +
    "\ufec0\036\ufec0\037\ufec0\040\ufec0\043\ufec0\044\ufec0\045\ufec0" +
    "\046\ufec0\047\ufec0\050\ufec0\051\ufec0\052\ufec0\053\ufec0\054" +
    "\ufec0\055\ufec0\056\ufec0\057\ufec0\060\ufec0\061\ufec0\062\ufec0" +
    "\063\ufec0\064\ufec0\065\ufec0\066\ufec0\067\ufec0\070\ufec0\071" +
    "\ufec0\072\ufec0\073\ufec0\074\ufec0\075\ufec0\076\ufec0\077\ufec0" +
    "\100\ufec0\101\ufec0\001\002\000\172\004\ufee4\005\ufee4\006" +
    "\ufee4\007\ufee4\010\ufee4\011\ufee4\012\ufee4\013\ufee4\014\ufee4" +
    "\015\ufee4\016\ufee4\017\ufee4\020\ufee4\021\ufee4\022\ufee4\023" +
    "\ufee4\024\ufee4\025\ufee4\026\ufee4\027\ufee4\030\ufee4\031\ufee4" +
    "\032\ufee4\033\ufee4\034\ufee4\035\ufee4\036\ufee4\037\ufee4\040" +
    "\ufee4\043\ufee4\044\ufee4\045\ufee4\046\ufee4\047\ufee4\050\ufee4" +
    "\051\ufee4\052\ufee4\053\ufee4\054\ufee4\055\ufee4\056\ufee4\057" +
    "\ufee4\060\ufee4\061\ufee4\062\ufee4\063\ufee4\064\ufee4\065\ufee4" +
    "\066\ufee4\067\ufee4\070\ufee4\071\ufee4\072\ufee4\073\ufee4\074" +
    "\ufee4\075\ufee4\076\ufee4\077\ufee4\100\ufee4\101\ufee4\001\002" +
    "\000\172\004\ufec4\005\ufec4\006\ufec4\007\ufec4\010\ufec4\011" +
    "\ufec4\012\ufec4\013\ufec4\014\ufec4\015\ufec4\016\ufec4\017\ufec4" +
    "\020\ufec4\021\ufec4\022\ufec4\023\ufec4\024\ufec4\025\ufec4\026" +
    "\ufec4\027\ufec4\030\ufec4\031\ufec4\032\ufec4\033\ufec4\034\ufec4" +
    "\035\ufec4\036\ufec4\037\ufec4\040\ufec4\043\ufec4\044\ufec4\045" +
    "\ufec4\046\ufec4\047\ufec4\050\ufec4\051\ufec4\052\ufec4\053\ufec4" +
    "\054\ufec4\055\ufec4\056\ufec4\057\ufec4\060\ufec4\061\ufec4\062" +
    "\ufec4\063\ufec4\064\ufec4\065\ufec4\066\ufec4\067\ufec4\070\ufec4" +
    "\071\ufec4\072\ufec4\073\ufec4\074\ufec4\075\ufec4\076\ufec4\077" +
    "\ufec4\100\ufec4\101\ufec4\001\002\000\172\004\ufed8\005\ufed8" +
    "\006\ufed8\007\ufed8\010\ufed8\011\ufed8\012\ufed8\013\ufed8\014" +
    "\ufed8\015\ufed8\016\ufed8\017\ufed8\020\ufed8\021\ufed8\022\ufed8" +
    "\023\ufed8\024\ufed8\025\ufed8\026\ufed8\027\ufed8\030\ufed8\031" +
    "\ufed8\032\ufed8\033\ufed8\034\ufed8\035\ufed8\036\ufed8\037\ufed8" +
    "\040\ufed8\043\ufed8\044\ufed8\045\ufed8\046\ufed8\047\ufed8\050" +
    "\ufed8\051\ufed8\052\ufed8\053\ufed8\054\ufed8\055\ufed8\056\ufed8" +
    "\057\ufed8\060\ufed8\061\ufed8\062\ufed8\063\ufed8\064\ufed8\065" +
    "\ufed8\066\ufed8\067\ufed8\070\ufed8\071\ufed8\072\ufed8\073\ufed8" +
    "\074\ufed8\075\ufed8\076\ufed8\077\ufed8\100\ufed8\101\ufed8\001" +
    "\002\000\172\004\ufede\005\ufede\006\ufede\007\ufede\010\ufede" +
    "\011\ufede\012\ufede\013\ufede\014\ufede\015\ufede\016\ufede\017" +
    "\ufede\020\ufede\021\ufede\022\ufede\023\ufede\024\ufede\025\ufede" +
    "\026\ufede\027\ufede\030\ufede\031\ufede\032\ufede\033\ufede\034" +
    "\ufede\035\ufede\036\ufede\037\ufede\040\ufede\043\ufede\044\ufede" +
    "\045\ufede\046\ufede\047\ufede\050\ufede\051\ufede\052\ufede\053" +
    "\ufede\054\ufede\055\ufede\056\ufede\057\ufede\060\ufede\061\ufede" +
    "\062\ufede\063\ufede\064\ufede\065\ufede\066\ufede\067\ufede\070" +
    "\ufede\071\ufede\072\ufede\073\ufede\074\ufede\075\ufede\076\ufede" +
    "\077\ufede\100\ufede\101\ufede\001\002\000\172\004\ufebe\005" +
    "\ufebe\006\ufebe\007\ufebe\010\ufebe\011\ufebe\012\ufebe\013\ufebe" +
    "\014\ufebe\015\ufebe\016\ufebe\017\ufebe\020\ufebe\021\ufebe\022" +
    "\ufebe\023\ufebe\024\ufebe\025\ufebe\026\ufebe\027\ufebe\030\ufebe" +
    "\031\ufebe\032\ufebe\033\ufebe\034\ufebe\035\ufebe\036\ufebe\037" +
    "\ufebe\040\ufebe\043\ufebe\044\ufebe\045\ufebe\046\ufebe\047\ufebe" +
    "\050\ufebe\051\ufebe\052\ufebe\053\ufebe\054\ufebe\055\ufebe\056" +
    "\ufebe\057\ufebe\060\ufebe\061\ufebe\062\ufebe\063\ufebe\064\ufebe" +
    "\065\ufebe\066\ufebe\067\ufebe\070\ufebe\071\ufebe\072\ufebe\073" +
    "\ufebe\074\ufebe\075\ufebe\076\ufebe\077\ufebe\100\ufebe\101\ufebe" +
    "\001\002\000\172\004\ufeac\005\ufeac\006\ufeac\007\ufeac\010" +
    "\ufeac\011\ufeac\012\ufeac\013\ufeac\014\ufeac\015\ufeac\016\ufeac" +
    "\017\ufeac\020\ufeac\021\ufeac\022\ufeac\023\ufeac\024\ufeac\025" +
    "\ufeac\026\ufeac\027\ufeac\030\ufeac\031\ufeac\032\ufeac\033\ufeac" +
    "\034\ufeac\035\ufeac\036\ufeac\037\ufeac\040\ufeac\043\ufeac\044" +
    "\ufeac\045\ufeac\046\ufeac\047\ufeac\050\ufeac\051\ufeac\052\ufeac" +
    "\053\ufeac\054\ufeac\055\ufeac\056\ufeac\057\ufeac\060\ufeac\061" +
    "\ufeac\062\ufeac\063\ufeac\064\ufeac\065\ufeac\066\ufeac\067\ufeac" +
    "\070\ufeac\071\ufeac\072\ufeac\073\ufeac\074\ufeac\075\ufeac\076" +
    "\ufeac\077\ufeac\100\ufeac\101\ufeac\001\002\000\172\004\ufeb1" +
    "\005\ufeb1\006\ufeb1\007\ufeb1\010\ufeb1\011\ufeb1\012\ufeb1\013" +
    "\ufeb1\014\ufeb1\015\ufeb1\016\ufeb1\017\ufeb1\020\ufeb1\021\ufeb1" +
    "\022\ufeb1\023\ufeb1\024\ufeb1\025\ufeb1\026\ufeb1\027\ufeb1\030" +
    "\ufeb1\031\ufeb1\032\ufeb1\033\ufeb1\034\ufeb1\035\ufeb1\036\ufeb1" +
    "\037\ufeb1\040\ufeb1\043\ufeb1\044\ufeb1\045\ufeb1\046\ufeb1\047" +
    "\ufeb1\050\ufeb1\051\ufeb1\052\ufeb1\053\ufeb1\054\ufeb1\055\ufeb1" +
    "\056\ufeb1\057\ufeb1\060\ufeb1\061\ufeb1\062\ufeb1\063\ufeb1\064" +
    "\ufeb1\065\ufeb1\066\ufeb1\067\ufeb1\070\ufeb1\071\ufeb1\072\ufeb1" +
    "\073\ufeb1\074\ufeb1\075\ufeb1\076\ufeb1\077\ufeb1\100\ufeb1\101" +
    "\ufeb1\001\002\000\172\004\ufed0\005\ufed0\006\ufed0\007\ufed0" +
    "\010\ufed0\011\ufed0\012\ufed0\013\ufed0\014\ufed0\015\ufed0\016" +
    "\ufed0\017\ufed0\020\ufed0\021\ufed0\022\ufed0\023\ufed0\024\ufed0" +
    "\025\ufed0\026\ufed0\027\ufed0\030\ufed0\031\ufed0\032\ufed0\033" +
    "\ufed0\034\ufed0\035\ufed0\036\ufed0\037\ufed0\040\ufed0\043\ufed0" +
    "\044\ufed0\045\ufed0\046\ufed0\047\ufed0\050\ufed0\051\ufed0\052" +
    "\ufed0\053\ufed0\054\ufed0\055\ufed0\056\ufed0\057\ufed0\060\ufed0" +
    "\061\ufed0\062\ufed0\063\ufed0\064\ufed0\065\ufed0\066\ufed0\067" +
    "\ufed0\070\ufed0\071\ufed0\072\ufed0\073\ufed0\074\ufed0\075\ufed0" +
    "\076\ufed0\077\ufed0\100\ufed0\101\ufed0\001\002\000\172\004" +
    "\ufeb2\005\ufeb2\006\ufeb2\007\ufeb2\010\ufeb2\011\ufeb2\012\ufeb2" +
    "\013\ufeb2\014\ufeb2\015\ufeb2\016\ufeb2\017\ufeb2\020\ufeb2\021" +
    "\ufeb2\022\ufeb2\023\ufeb2\024\ufeb2\025\ufeb2\026\ufeb2\027\ufeb2" +
    "\030\ufeb2\031\ufeb2\032\ufeb2\033\ufeb2\034\ufeb2\035\ufeb2\036" +
    "\ufeb2\037\ufeb2\040\ufeb2\043\ufeb2\044\ufeb2\045\ufeb2\046\ufeb2" +
    "\047\ufeb2\050\ufeb2\051\ufeb2\052\ufeb2\053\ufeb2\054\ufeb2\055" +
    "\ufeb2\056\ufeb2\057\ufeb2\060\ufeb2\061\ufeb2\062\ufeb2\063\ufeb2" +
    "\064\ufeb2\065\ufeb2\066\ufeb2\067\ufeb2\070\ufeb2\071\ufeb2\072" +
    "\ufeb2\073\ufeb2\074\ufeb2\075\ufeb2\076\ufeb2\077\ufeb2\100\ufeb2" +
    "\101\ufeb2\001\002\000\172\004\ufed9\005\ufed9\006\ufed9\007" +
    "\ufed9\010\ufed9\011\ufed9\012\ufed9\013\ufed9\014\ufed9\015\ufed9" +
    "\016\ufed9\017\ufed9\020\ufed9\021\ufed9\022\ufed9\023\ufed9\024" +
    "\ufed9\025\ufed9\026\ufed9\027\ufed9\030\ufed9\031\ufed9\032\ufed9" +
    "\033\ufed9\034\ufed9\035\ufed9\036\ufed9\037\ufed9\040\ufed9\043" +
    "\ufed9\044\ufed9\045\ufed9\046\ufed9\047\ufed9\050\ufed9\051\ufed9" +
    "\052\ufed9\053\ufed9\054\ufed9\055\ufed9\056\ufed9\057\ufed9\060" +
    "\ufed9\061\ufed9\062\ufed9\063\ufed9\064\ufed9\065\ufed9\066\ufed9" +
    "\067\ufed9\070\ufed9\071\ufed9\072\ufed9\073\ufed9\074\ufed9\075" +
    "\ufed9\076\ufed9\077\ufed9\100\ufed9\101\ufed9\001\002\000\172" +
    "\004\ufee2\005\ufee2\006\ufee2\007\ufee2\010\ufee2\011\ufee2\012" +
    "\ufee2\013\ufee2\014\ufee2\015\ufee2\016\ufee2\017\ufee2\020\ufee2" +
    "\021\ufee2\022\ufee2\023\ufee2\024\ufee2\025\ufee2\026\ufee2\027" +
    "\ufee2\030\ufee2\031\ufee2\032\ufee2\033\ufee2\034\ufee2\035\ufee2" +
    "\036\ufee2\037\ufee2\040\ufee2\043\ufee2\044\ufee2\045\ufee2\046" +
    "\ufee2\047\ufee2\050\ufee2\051\ufee2\052\ufee2\053\ufee2\054\ufee2" +
    "\055\ufee2\056\ufee2\057\ufee2\060\ufee2\061\ufee2\062\ufee2\063" +
    "\ufee2\064\ufee2\065\ufee2\066\ufee2\067\ufee2\070\ufee2\071\ufee2" +
    "\072\ufee2\073\ufee2\074\ufee2\075\ufee2\076\ufee2\077\ufee2\100" +
    "\ufee2\101\ufee2\001\002\000\172\004\ufeb6\005\ufeb6\006\ufeb6" +
    "\007\ufeb6\010\ufeb6\011\ufeb6\012\ufeb6\013\ufeb6\014\ufeb6\015" +
    "\ufeb6\016\ufeb6\017\ufeb6\020\ufeb6\021\ufeb6\022\ufeb6\023\ufeb6" +
    "\024\ufeb6\025\ufeb6\026\ufeb6\027\ufeb6\030\ufeb6\031\ufeb6\032" +
    "\ufeb6\033\ufeb6\034\ufeb6\035\ufeb6\036\ufeb6\037\ufeb6\040\ufeb6" +
    "\043\ufeb6\044\ufeb6\045\ufeb6\046\ufeb6\047\ufeb6\050\ufeb6\051" +
    "\ufeb6\052\ufeb6\053\ufeb6\054\ufeb6\055\ufeb6\056\ufeb6\057\ufeb6" +
    "\060\ufeb6\061\ufeb6\062\ufeb6\063\ufeb6\064\ufeb6\065\ufeb6\066" +
    "\ufeb6\067\ufeb6\070\ufeb6\071\ufeb6\072\ufeb6\073\ufeb6\074\ufeb6" +
    "\075\ufeb6\076\ufeb6\077\ufeb6\100\ufeb6\101\ufeb6\001\002\000" +
    "\172\004\ufec7\005\ufec7\006\ufec7\007\ufec7\010\ufec7\011\ufec7" +
    "\012\ufec7\013\ufec7\014\ufec7\015\ufec7\016\ufec7\017\ufec7\020" +
    "\ufec7\021\ufec7\022\ufec7\023\ufec7\024\ufec7\025\ufec7\026\ufec7" +
    "\027\ufec7\030\ufec7\031\ufec7\032\ufec7\033\ufec7\034\ufec7\035" +
    "\ufec7\036\ufec7\037\ufec7\040\ufec7\043\ufec7\044\ufec7\045\ufec7" +
    "\046\ufec7\047\ufec7\050\ufec7\051\ufec7\052\ufec7\053\ufec7\054" +
    "\ufec7\055\ufec7\056\ufec7\057\ufec7\060\ufec7\061\ufec7\062\ufec7" +
    "\063\ufec7\064\ufec7\065\ufec7\066\ufec7\067\ufec7\070\ufec7\071" +
    "\ufec7\072\ufec7\073\ufec7\074\ufec7\075\ufec7\076\ufec7\077\ufec7" +
    "\100\ufec7\101\ufec7\001\002\000\172\004\ufed3\005\ufed3\006" +
    "\ufed3\007\ufed3\010\ufed3\011\ufed3\012\ufed3\013\ufed3\014\ufed3" +
    "\015\ufed3\016\ufed3\017\ufed3\020\ufed3\021\ufed3\022\ufed3\023" +
    "\ufed3\024\ufed3\025\ufed3\026\ufed3\027\ufed3\030\ufed3\031\ufed3" +
    "\032\ufed3\033\ufed3\034\ufed3\035\ufed3\036\ufed3\037\ufed3\040" +
    "\ufed3\043\ufed3\044\ufed3\045\ufed3\046\ufed3\047\ufed3\050\ufed3" +
    "\051\ufed3\052\ufed3\053\ufed3\054\ufed3\055\ufed3\056\ufed3\057" +
    "\ufed3\060\ufed3\061\ufed3\062\ufed3\063\ufed3\064\ufed3\065\ufed3" +
    "\066\ufed3\067\ufed3\070\ufed3\071\ufed3\072\ufed3\073\ufed3\074" +
    "\ufed3\075\ufed3\076\ufed3\077\ufed3\100\ufed3\101\ufed3\001\002" +
    "\000\172\004\ufedf\005\ufedf\006\ufedf\007\ufedf\010\ufedf\011" +
    "\ufedf\012\ufedf\013\ufedf\014\ufedf\015\ufedf\016\ufedf\017\ufedf" +
    "\020\ufedf\021\ufedf\022\ufedf\023\ufedf\024\ufedf\025\ufedf\026" +
    "\ufedf\027\ufedf\030\ufedf\031\ufedf\032\ufedf\033\ufedf\034\ufedf" +
    "\035\ufedf\036\ufedf\037\ufedf\040\ufedf\043\ufedf\044\ufedf\045" +
    "\ufedf\046\ufedf\047\ufedf\050\ufedf\051\ufedf\052\ufedf\053\ufedf" +
    "\054\ufedf\055\ufedf\056\ufedf\057\ufedf\060\ufedf\061\ufedf\062" +
    "\ufedf\063\ufedf\064\ufedf\065\ufedf\066\ufedf\067\ufedf\070\ufedf" +
    "\071\ufedf\072\ufedf\073\ufedf\074\ufedf\075\ufedf\076\ufedf\077" +
    "\ufedf\100\ufedf\101\ufedf\001\002\000\172\004\ufed6\005\ufed6" +
    "\006\ufed6\007\ufed6\010\ufed6\011\ufed6\012\ufed6\013\ufed6\014" +
    "\ufed6\015\ufed6\016\ufed6\017\ufed6\020\ufed6\021\ufed6\022\ufed6" +
    "\023\ufed6\024\ufed6\025\ufed6\026\ufed6\027\ufed6\030\ufed6\031" +
    "\ufed6\032\ufed6\033\ufed6\034\ufed6\035\ufed6\036\ufed6\037\ufed6" +
    "\040\ufed6\043\ufed6\044\ufed6\045\ufed6\046\ufed6\047\ufed6\050" +
    "\ufed6\051\ufed6\052\ufed6\053\ufed6\054\ufed6\055\ufed6\056\ufed6" +
    "\057\ufed6\060\ufed6\061\ufed6\062\ufed6\063\ufed6\064\ufed6\065" +
    "\ufed6\066\ufed6\067\ufed6\070\ufed6\071\ufed6\072\ufed6\073\ufed6" +
    "\074\ufed6\075\ufed6\076\ufed6\077\ufed6\100\ufed6\101\ufed6\001" +
    "\002\000\172\004\ufebf\005\ufebf\006\ufebf\007\ufebf\010\ufebf" +
    "\011\ufebf\012\ufebf\013\ufebf\014\ufebf\015\ufebf\016\ufebf\017" +
    "\ufebf\020\ufebf\021\ufebf\022\ufebf\023\ufebf\024\ufebf\025\ufebf" +
    "\026\ufebf\027\ufebf\030\ufebf\031\ufebf\032\ufebf\033\ufebf\034" +
    "\ufebf\035\ufebf\036\ufebf\037\ufebf\040\ufebf\043\ufebf\044\ufebf" +
    "\045\ufebf\046\ufebf\047\ufebf\050\ufebf\051\ufebf\052\ufebf\053" +
    "\ufebf\054\ufebf\055\ufebf\056\ufebf\057\ufebf\060\ufebf\061\ufebf" +
    "\062\ufebf\063\ufebf\064\ufebf\065\ufebf\066\ufebf\067\ufebf\070" +
    "\ufebf\071\ufebf\072\ufebf\073\ufebf\074\ufebf\075\ufebf\076\ufebf" +
    "\077\ufebf\100\ufebf\101\ufebf\001\002\000\172\004\ufecf\005" +
    "\ufecf\006\ufecf\007\ufecf\010\ufecf\011\ufecf\012\ufecf\013\ufecf" +
    "\014\ufecf\015\ufecf\016\ufecf\017\ufecf\020\ufecf\021\ufecf\022" +
    "\ufecf\023\ufecf\024\ufecf\025\ufecf\026\ufecf\027\ufecf\030\ufecf" +
    "\031\ufecf\032\ufecf\033\ufecf\034\ufecf\035\ufecf\036\ufecf\037" +
    "\ufecf\040\ufecf\043\ufecf\044\ufecf\045\ufecf\046\ufecf\047\ufecf" +
    "\050\ufecf\051\ufecf\052\ufecf\053\ufecf\054\ufecf\055\ufecf\056" +
    "\ufecf\057\ufecf\060\ufecf\061\ufecf\062\ufecf\063\ufecf\064\ufecf" +
    "\065\ufecf\066\ufecf\067\ufecf\070\ufecf\071\ufecf\072\ufecf\073" +
    "\ufecf\074\ufecf\075\ufecf\076\ufecf\077\ufecf\100\ufecf\101\ufecf" +
    "\001\002\000\172\004\ufeab\005\ufeab\006\ufeab\007\ufeab\010" +
    "\ufeab\011\ufeab\012\ufeab\013\ufeab\014\ufeab\015\ufeab\016\ufeab" +
    "\017\ufeab\020\ufeab\021\ufeab\022\ufeab\023\ufeab\024\ufeab\025" +
    "\ufeab\026\ufeab\027\ufeab\030\ufeab\031\ufeab\032\ufeab\033\ufeab" +
    "\034\ufeab\035\ufeab\036\ufeab\037\ufeab\040\ufeab\043\ufeab\044" +
    "\ufeab\045\ufeab\046\ufeab\047\ufeab\050\ufeab\051\ufeab\052\ufeab" +
    "\053\ufeab\054\ufeab\055\ufeab\056\ufeab\057\ufeab\060\ufeab\061" +
    "\ufeab\062\ufeab\063\ufeab\064\ufeab\065\ufeab\066\ufeab\067\ufeab" +
    "\070\ufeab\071\ufeab\072\ufeab\073\ufeab\074\ufeab\075\ufeab\076" +
    "\ufeab\077\ufeab\100\ufeab\101\ufeab\001\002\000\172\004\ufeb7" +
    "\005\ufeb7\006\ufeb7\007\ufeb7\010\ufeb7\011\ufeb7\012\ufeb7\013" +
    "\ufeb7\014\ufeb7\015\ufeb7\016\ufeb7\017\ufeb7\020\ufeb7\021\ufeb7" +
    "\022\ufeb7\023\ufeb7\024\ufeb7\025\ufeb7\026\ufeb7\027\ufeb7\030" +
    "\ufeb7\031\ufeb7\032\ufeb7\033\ufeb7\034\ufeb7\035\ufeb7\036\ufeb7" +
    "\037\ufeb7\040\ufeb7\043\ufeb7\044\ufeb7\045\ufeb7\046\ufeb7\047" +
    "\ufeb7\050\ufeb7\051\ufeb7\052\ufeb7\053\ufeb7\054\ufeb7\055\ufeb7" +
    "\056\ufeb7\057\ufeb7\060\ufeb7\061\ufeb7\062\ufeb7\063\ufeb7\064" +
    "\ufeb7\065\ufeb7\066\ufeb7\067\ufeb7\070\ufeb7\071\ufeb7\072\ufeb7" +
    "\073\ufeb7\074\ufeb7\075\ufeb7\076\ufeb7\077\ufeb7\100\ufeb7\101" +
    "\ufeb7\001\002\000\172\004\ufeaf\005\ufeaf\006\ufeaf\007\ufeaf" +
    "\010\ufeaf\011\ufeaf\012\ufeaf\013\ufeaf\014\ufeaf\015\ufeaf\016" +
    "\ufeaf\017\ufeaf\020\ufeaf\021\ufeaf\022\ufeaf\023\ufeaf\024\ufeaf" +
    "\025\ufeaf\026\ufeaf\027\ufeaf\030\ufeaf\031\ufeaf\032\ufeaf\033" +
    "\ufeaf\034\ufeaf\035\ufeaf\036\ufeaf\037\ufeaf\040\ufeaf\043\ufeaf" +
    "\044\ufeaf\045\ufeaf\046\ufeaf\047\ufeaf\050\ufeaf\051\ufeaf\052" +
    "\ufeaf\053\ufeaf\054\ufeaf\055\ufeaf\056\ufeaf\057\ufeaf\060\ufeaf" +
    "\061\ufeaf\062\ufeaf\063\ufeaf\064\ufeaf\065\ufeaf\066\ufeaf\067" +
    "\ufeaf\070\ufeaf\071\ufeaf\072\ufeaf\073\ufeaf\074\ufeaf\075\ufeaf" +
    "\076\ufeaf\077\ufeaf\100\ufeaf\101\ufeaf\001\002\000\172\004" +
    "\ufed5\005\ufed5\006\ufed5\007\ufed5\010\ufed5\011\ufed5\012\ufed5" +
    "\013\ufed5\014\ufed5\015\ufed5\016\ufed5\017\ufed5\020\ufed5\021" +
    "\ufed5\022\ufed5\023\ufed5\024\ufed5\025\ufed5\026\ufed5\027\ufed5" +
    "\030\ufed5\031\ufed5\032\ufed5\033\ufed5\034\ufed5\035\ufed5\036" +
    "\ufed5\037\ufed5\040\ufed5\043\ufed5\044\ufed5\045\ufed5\046\ufed5" +
    "\047\ufed5\050\ufed5\051\ufed5\052\ufed5\053\ufed5\054\ufed5\055" +
    "\ufed5\056\ufed5\057\ufed5\060\ufed5\061\ufed5\062\ufed5\063\ufed5" +
    "\064\ufed5\065\ufed5\066\ufed5\067\ufed5\070\ufed5\071\ufed5\072" +
    "\ufed5\073\ufed5\074\ufed5\075\ufed5\076\ufed5\077\ufed5\100\ufed5" +
    "\101\ufed5\001\002\000\172\004\ufeb0\005\ufeb0\006\ufeb0\007" +
    "\ufeb0\010\ufeb0\011\ufeb0\012\ufeb0\013\ufeb0\014\ufeb0\015\ufeb0" +
    "\016\ufeb0\017\ufeb0\020\ufeb0\021\ufeb0\022\ufeb0\023\ufeb0\024" +
    "\ufeb0\025\ufeb0\026\ufeb0\027\ufeb0\030\ufeb0\031\ufeb0\032\ufeb0" +
    "\033\ufeb0\034\ufeb0\035\ufeb0\036\ufeb0\037\ufeb0\040\ufeb0\043" +
    "\ufeb0\044\ufeb0\045\ufeb0\046\ufeb0\047\ufeb0\050\ufeb0\051\ufeb0" +
    "\052\ufeb0\053\ufeb0\054\ufeb0\055\ufeb0\056\ufeb0\057\ufeb0\060" +
    "\ufeb0\061\ufeb0\062\ufeb0\063\ufeb0\064\ufeb0\065\ufeb0\066\ufeb0" +
    "\067\ufeb0\070\ufeb0\071\ufeb0\072\ufeb0\073\ufeb0\074\ufeb0\075" +
    "\ufeb0\076\ufeb0\077\ufeb0\100\ufeb0\101\ufeb0\001\002\000\172" +
    "\004\ufed1\005\ufed1\006\ufed1\007\ufed1\010\ufed1\011\ufed1\012" +
    "\ufed1\013\ufed1\014\ufed1\015\ufed1\016\ufed1\017\ufed1\020\ufed1" +
    "\021\ufed1\022\ufed1\023\ufed1\024\ufed1\025\ufed1\026\ufed1\027" +
    "\ufed1\030\ufed1\031\ufed1\032\ufed1\033\ufed1\034\ufed1\035\ufed1" +
    "\036\ufed1\037\ufed1\040\ufed1\043\ufed1\044\ufed1\045\ufed1\046" +
    "\ufed1\047\ufed1\050\ufed1\051\ufed1\052\ufed1\053\ufed1\054\ufed1" +
    "\055\ufed1\056\ufed1\057\ufed1\060\ufed1\061\ufed1\062\ufed1\063" +
    "\ufed1\064\ufed1\065\ufed1\066\ufed1\067\ufed1\070\ufed1\071\ufed1" +
    "\072\ufed1\073\ufed1\074\ufed1\075\ufed1\076\ufed1\077\ufed1\100" +
    "\ufed1\101\ufed1\001\002\000\014\003\uff6e\020\uff6e\041\uff6e" +
    "\067\uff6e\070\uff6e\001\002\000\012\003\uff72\041\uff72\067" +
    "\uff72\070\uff72\001\002\000\014\003\uff6f\020\uff6f\041\uff6f" +
    "\067\uff6f\070\uff6f\001\002\000\012\003\u018e\041\u018d\067" +
    "\u018c\070\u018f\001\002\000\004\066\uff71\001\002\000\004" +
    "\066\uff6b\001\002\000\004\070\u0190\001\002\000\004\066" +
    "\uff6a\001\002\000\004\066\uff6d\001\002\000\004\041\u0191" +
    "\001\002\000\004\066\uff6c\001\002\000\004\066\010\001" +
    "\002\000\010\003\u0187\007\uff64\077\u0189\001\002\000\004" +
    "\007\u01a0\001\002\000\014\003\u018e\020\u0197\041\u018d\067" +
    "\u018c\070\u018f\001\002\000\004\066\uff69\001\002\000\004" +
    "\066\uff66\001\002\000\004\066\010\001\002\000\040\007" +
    "\uffa3\010\uffa3\016\uffa3\022\uffa3\023\uffa3\025\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\070\uffa3\076\uffa3\104" +
    "\uffa3\105\uffa3\001\002\000\040\007\uff65\010\043\016\074" +
    "\022\046\023\042\025\065\034\053\035\044\036\054\037" +
    "\056\040\052\070\070\076\060\104\061\105\057\001\002" +
    "\000\004\066\010\001\002\000\044\003\uffa3\007\uffa3\010" +
    "\uffa3\016\uffa3\022\uffa3\023\uffa3\025\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\070\uffa3\076\uffa3\077\uffa3\104" +
    "\uffa3\105\uffa3\001\002\000\044\003\uff68\007\uff68\010\043" +
    "\016\074\022\046\023\042\025\065\034\053\035\044\036" +
    "\054\037\056\040\052\070\070\076\060\077\uff68\104\061" +
    "\105\057\001\002\000\010\003\u0187\007\uff64\077\u0189\001" +
    "\002\000\004\007\uff67\001\002\000\004\076\u01a1\001\002" +
    "\000\004\066\010\001\002\000\056\003\uff70\007\uff70\010" +
    "\uff70\016\uff70\020\uff70\022\uff70\023\uff70\024\uff70\025\uff70" +
    "\030\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\070" +
    "\uff70\074\uff70\076\uff70\077\uff70\101\uff70\104\uff70\105\uff70" +
    "\001\002\000\174\004\261\005\311\006\304\007\322\010" +
    "\253\011\326\012\313\013\270\014\306\015\273\016\272" +
    "\017\321\020\312\021\327\022\334\023\256\024\267\025" +
    "\340\026\317\027\332\030\266\031\244\032\264\033\245" +
    "\034\257\035\260\036\324\037\310\040\254\043\302\044" +
    "\276\045\307\046\330\047\262\050\277\051\305\052\265" +
    "\053\303\054\335\055\323\056\300\057\263\060\301\061" +
    "\320\062\316\063\337\064\336\065\255\066\331\067\275" +
    "\070\315\071\333\072\314\073\274\074\252\075\250\076" +
    "\246\077\251\100\325\101\271\106\u01a4\001\002\000\060" +
    "\003\uff23\007\uff23\010\uff23\016\uff23\020\uff23\022\uff23\023" +
    "\uff23\024\uff23\025\uff23\030\uff23\034\uff23\035\uff23\036\uff23" +
    "\037\uff23\040\uff23\066\010\070\uff23\074\uff23\076\uff23\077" +
    "\uff23\101\uff23\104\uff23\105\uff23\001\002\000\056\003\uff24" +
    "\007\uff24\010\uff24\016\uff24\020\uff24\022\uff24\023\uff24\024" +
    "\uff24\025\uff24\030\uff24\034\uff24\035\uff24\036\uff24\037\uff24" +
    "\040\uff24\070\uff24\074\uff24\076\uff24\077\uff24\101\uff24\104" +
    "\uff24\105\uff24\001\002\000\016\003\236\042\241\044\240" +
    "\062\u01a7\067\234\070\242\001\002\000\004\066\010\001" +
    "\002\000\004\062\u01a9\001\002\000\004\066\010\001\002" +
    "\000\056\003\uff47\007\uff47\010\uff47\016\uff47\020\uff47\022" +
    "\uff47\023\uff47\024\uff47\025\uff47\030\uff47\034\uff47\035\uff47" +
    "\036\uff47\037\uff47\040\uff47\070\uff47\074\uff47\076\uff47\077" +
    "\uff47\101\uff47\104\uff47\105\uff47\001\002\000\056\003\uff45" +
    "\007\uff45\010\uff45\016\uff45\020\uff45\022\uff45\023\uff45\024" +
    "\uff45\025\uff45\030\uff45\034\uff45\035\uff45\036\uff45\037\uff45" +
    "\040\uff45\070\uff45\074\uff45\076\uff45\077\uff45\101\uff45\104" +
    "\uff45\105\uff45\001\002\000\016\003\236\042\241\044\240" +
    "\062\u01ad\067\234\070\242\001\002\000\004\066\010\001" +
    "\002\000\004\062\u01af\001\002\000\004\066\010\001\002" +
    "\000\056\003\uff46\007\uff46\010\uff46\016\uff46\020\uff46\022" +
    "\uff46\023\uff46\024\uff46\025\uff46\030\uff46\034\uff46\035\uff46" +
    "\036\uff46\037\uff46\040\uff46\070\uff46\074\uff46\076\uff46\077" +
    "\uff46\101\uff46\104\uff46\105\uff46\001\002\000\056\003\uff44" +
    "\007\uff44\010\uff44\016\uff44\020\uff44\022\uff44\023\uff44\024" +
    "\uff44\025\uff44\030\uff44\034\uff44\035\uff44\036\uff44\037\uff44" +
    "\040\uff44\070\uff44\074\uff44\076\uff44\077\uff44\101\uff44\104" +
    "\uff44\105\uff44\001\002\000\004\007\u01b3\001\002\000\004" +
    "\015\u01b4\001\002\000\004\066\uffe0\001\002\000\004\066" +
    "\010\001\002\000\014\002\uffdf\003\uffdf\006\uffdf\014\uffdf" +
    "\015\uffdf\001\002\000\004\066\010\001\002\000\040\010" +
    "\uffa3\016\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\070\uffa3\076\uffa3\104" +
    "\uffa3\105\uffa3\001\002\000\040\010\043\016\074\022\046" +
    "\023\042\024\u01ba\025\065\034\053\035\044\036\054\037" +
    "\056\040\052\070\070\076\060\104\061\105\057\001\002" +
    "\000\010\003\u01bb\023\u01bc\100\u01bd\001\002\000\020\003" +
    "\uff58\033\uff58\041\uff58\044\uff58\061\uff58\067\uff58\070\uff58" +
    "\001\002\000\020\003\uff5a\033\uff5a\041\uff5a\044\uff5a\061" +
    "\uff5a\067\uff5a\070\uff5a\001\002\000\020\003\uff59\033\uff59" +
    "\041\uff59\044\uff59\061\uff59\067\uff59\070\uff59\001\002\000" +
    "\020\003\106\033\101\041\111\044\102\061\110\067\103" +
    "\070\077\001\002\000\010\031\135\032\133\066\010\001" +
    "\002\000\056\003\uff62\007\uff62\010\uff62\016\uff62\020\uff62" +
    "\022\uff62\023\uff62\024\uff62\025\uff62\030\uff62\034\uff62\035" +
    "\uff62\036\uff62\037\uff62\040\uff62\070\uff62\074\uff62\076\uff62" +
    "\077\uff62\101\uff62\104\uff62\105\uff62\001\002\000\012\003" +
    "\u01c2\004\ufff5\021\u01c4\065\ufff5\001\002\000\010\004\ufff4" +
    "\065\ufff4\066\ufff0\001\002\000\004\066\ufffa\001\002\000" +
    "\010\011\u01d1\012\u01d2\013\u01d3\001\002\000\006\004\ufffc" +
    "\065\ufffc\001\002\000\006\004\u01c7\065\u01c8\001\002\000" +
    "\004\070\u01cb\001\002\000\004\010\043\001\002\000\056" +
    "\003\ufffb\007\ufffb\010\ufffb\016\ufffb\020\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\030\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\070\ufffb\074\ufffb\076\ufffb\077\ufffb\101" +
    "\ufffb\104\ufffb\105\ufffb\001\002\000\056\003\uffed\007\uffed" +
    "\010\uffed\016\uffed\020\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\030\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\070\uffed\074\uffed\076\uffed\077\uffed\101\uffed\104\uffed\105" +
    "\uffed\001\002\000\012\003\u01c2\004\ufff5\021\u01c4\065\ufff5" +
    "\001\002\000\004\066\010\001\002\000\006\004\uffef\065" +
    "\uffef\001\002\000\006\004\u01c7\065\u01c8\001\002\000\056" +
    "\003\uffee\007\uffee\010\uffee\016\uffee\020\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\030\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\070\uffee\074\uffee\076\uffee\077\uffee\101" +
    "\uffee\104\uffee\105\uffee\001\002\000\056\003\uffec\007\uffec" +
    "\010\uffec\016\uffec\020\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\030\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\070\uffec\074\uffec\076\uffec\077\uffec\101\uffec\104\uffec\105" +
    "\uffec\001\002\000\010\004\ufff8\065\ufff8\066\ufff3\001\002" +
    "\000\010\004\ufff7\065\ufff7\066\ufff2\001\002\000\010\004" +
    "\ufff6\065\ufff6\066\ufff1\001\002\000\004\066\010\001\002" +
    "\000\056\003\ufff9\007\ufff9\010\ufff9\016\ufff9\020\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\030\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\070\ufff9\074\ufff9\076\ufff9\077" +
    "\ufff9\101\ufff9\104\ufff9\105\ufff9\001\002\000\020\003\106" +
    "\033\101\041\111\044\102\061\110\067\103\070\077\001" +
    "\002\000\010\031\135\032\133\066\uff5d\001\002\000\004" +
    "\066\010\001\002\000\040\007\uffa3\010\uffa3\016\uffa3\022" +
    "\uffa3\023\uffa3\025\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\070\uffa3\076\uffa3\104\uffa3\105\uffa3\001\002\000" +
    "\040\007\u01db\010\043\016\074\022\046\023\042\025\065" +
    "\034\053\035\044\036\054\037\056\040\052\070\070\076" +
    "\060\104\061\105\057\001\002\000\004\023\u01dc\001\002" +
    "\000\004\066\uff5c\001\002\000\004\066\010\001\002\000" +
    "\056\003\uff5b\007\uff5b\010\uff5b\016\uff5b\020\uff5b\022\uff5b" +
    "\023\uff5b\024\uff5b\025\uff5b\030\uff5b\034\uff5b\035\uff5b\036" +
    "\uff5b\037\uff5b\040\uff5b\070\uff5b\074\uff5b\076\uff5b\077\uff5b" +
    "\101\uff5b\104\uff5b\105\uff5b\001\002\000\004\070\u01e1\001" +
    "\002\000\004\070\uffb4\001\002\000\006\003\032\021\033" +
    "\001\002\000\006\004\u01e3\062\uffba\001\002\000\006\070" +
    "\uffb7\107\uffb7\001\002\000\004\061\uffde\001\002\000\004" +
    "\061\u01e6\001\002\000\012\003\025\062\uffb9\070\uffb6\107" +
    "\uffb6\001\002\000\004\062\u01e8\001\002\000\004\066\uffdd" +
    "\001\002\000\004\066\010\001\002\000\040\007\uffa3\010" +
    "\uffa3\016\uffa3\022\uffa3\023\uffa3\025\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\070\uffa3\076\uffa3\104\uffa3\105" +
    "\uffa3\001\002\000\040\007\u01ec\010\043\016\074\022\046" +
    "\023\042\025\065\034\053\035\044\036\054\037\056\040" +
    "\052\070\070\076\060\104\061\105\057\001\002\000\004" +
    "\014\u01ed\001\002\000\004\066\uffdc\001\002\000\004\066" +
    "\010\001\002\000\014\002\uffdb\003\uffdb\006\uffdb\014\uffdb" +
    "\015\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ed\000\006\002\004\034\003\001\001\000\004\004" +
    "\012\001\001\000\002\001\001\000\004\032\006\001\001" +
    "\000\002\001\001\000\004\032\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\016\044\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\022\001\001\000\002\001\001\000\006\053\026\054" +
    "\025\001\001\000\002\001\001\000\004\011\u01de\001\001" +
    "\000\002\001\001\000\004\037\030\001\001\000\004\112" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\037\001\001\000\004\055\040\001\001\000\034\005\063" +
    "\007\061\015\071\016\070\027\074\030\044\040\062\043" +
    "\050\056\054\060\047\061\066\062\072\063\046\001\001" +
    "\000\004\140\u01d5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\137\u01b6\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\113\u01b1\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u01a2\001\001\000" +
    "\004\045\u0187\001\001\000\004\041\u0149\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\143" +
    "\u0121\001\001\000\004\120\u011d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\122\075\001\001\000\002\001\001" +
    "\000\014\067\103\070\077\071\104\100\111\101\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\067\103" +
    "\070\077\071\104\100\222\001\001\000\004\071\205\001" +
    "\001\000\002\001\001\000\004\065\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\133\001\001\000" +
    "\010\067\116\070\077\071\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\067\131\070\077\071\104\001\001\000" +
    "\010\067\130\070\077\071\104\001\001\000\010\067\127" +
    "\070\077\071\104\001\001\000\010\067\126\070\077\071" +
    "\104\001\001\000\010\067\125\070\077\071\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\131\165\001\001" +
    "\000\004\017\136\001\001\000\014\067\103\070\077\071" +
    "\104\100\111\101\135\001\001\000\002\001\001\000\004" +
    "\032\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\142\001\001\000\034\005\063\007\061\015\071" +
    "\016\070\027\074\030\044\040\062\056\054\060\047\061" +
    "\066\062\072\063\046\124\143\001\001\000\004\057\145" +
    "\001\001\000\004\126\155\001\001\000\002\001\001\000" +
    "\004\125\147\001\001\000\004\032\150\001\001\000\004" +
    "\055\151\001\001\000\032\005\063\007\061\015\071\016" +
    "\070\027\074\030\044\040\062\056\054\060\047\061\066" +
    "\062\072\063\046\001\001\000\002\001\001\000\004\032" +
    "\154\001\001\000\002\001\001\000\014\067\103\070\077" +
    "\071\104\100\111\101\156\001\001\000\004\127\157\001" +
    "\001\000\004\017\160\001\001\000\004\032\161\001\001" +
    "\000\004\055\162\001\001\000\034\005\063\007\061\015" +
    "\071\016\070\027\074\030\044\040\062\056\054\060\047" +
    "\061\066\062\072\063\046\130\163\001\001\000\004\057" +
    "\164\001\001\000\002\001\001\000\014\067\103\070\077" +
    "\071\104\100\111\101\166\001\001\000\002\001\001\000" +
    "\010\067\201\070\077\071\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\072\211\073\213\074\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\067\214" +
    "\070\077\071\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\067\223\070\077\071\104\100" +
    "\224\001\001\000\002\001\001\000\004\065\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\230\105" +
    "\227\001\001\000\012\047\364\050\365\051\366\071\371" +
    "\001\001\000\002\001\001\000\006\075\234\077\236\001" +
    "\001\000\004\153\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\150\352\001\001\000" +
    "\002\001\001\000\004\035\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\151\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\343\001\001\000\006\075\345" +
    "\077\236\001\001\000\006\075\344\077\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\353\001\001\000\002\001\001\000\004" +
    "\152\355\001\001\000\004\032\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\362" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\106\u0113\001\001\000\004" +
    "\071\u010f\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\047\364\050\u0100\071\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\047\364\050\u010b\071\371\001\001\000\010\047\364\050" +
    "\u010a\071\371\001\001\000\010\047\364\050\u0109\071\371" +
    "\001\001\000\010\047\364\050\u0108\071\371\001\001\000" +
    "\010\047\364\050\u0107\071\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u0114\032\u0116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\u0119\001\001\000\012\047\364" +
    "\050\365\051\u011a\071\371\001\001\000\004\110\u011b\001" +
    "\001\000\006\010\u011c\032\u0116\001\001\000\002\001\001" +
    "\000\012\047\364\050\365\051\u011e\071\371\001\001\000" +
    "\004\121\u011f\001\001\000\004\032\u0120\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\144\u0123\001\001\000" +
    "\004\036\u0126\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\145\u0127\001\001\000\002\001\001\000\010\047" +
    "\364\050\u0129\071\371\001\001\000\004\146\u012a\001\001" +
    "\000\002\001\001\000\010\047\364\050\u012c\071\371\001" +
    "\001\000\004\042\u012d\001\001\000\004\147\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u0136\001\001\000\004\055\u0137\001" +
    "\001\000\034\005\063\007\061\015\071\016\070\027\074" +
    "\030\044\040\062\046\u013a\056\054\060\047\061\066\062" +
    "\072\063\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\u013c\047\364\050\u013b\071\371\001\001\000" +
    "\002\001\001\000\004\032\u013d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\075\u0143\077\236\001\001\000\004\155\u0147\001\001" +
    "\000\002\001\001\000\004\154\u0145\001\001\000\004\032" +
    "\u0146\001\001\000\002\001\001\000\004\032\u0148\001\001" +
    "\000\002\001\001\000\004\032\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\132\u0189\001\001" +
    "\000\002\001\001\000\004\066\u018a\001\001\000\004\133" +
    "\u0191\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\u0192\001\001\000\006\045\u0194\064\u0193" +
    "\001\001\000\002\001\001\000\004\066\u0195\001\001\000" +
    "\004\134\u019a\001\001\000\004\136\u0197\001\001\000\004" +
    "\032\u0198\001\001\000\004\055\u0199\001\001\000\032\005" +
    "\063\007\061\015\071\016\070\027\074\030\044\040\062" +
    "\056\054\060\047\061\066\062\072\063\046\001\001\000" +
    "\004\032\u019b\001\001\000\004\055\u019c\001\001\000\034" +
    "\005\063\007\061\015\071\016\070\027\074\030\044\040" +
    "\062\056\054\060\047\061\066\062\072\063\046\135\u019d" +
    "\001\001\000\006\045\u0194\064\u019e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u01a1\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u01a4\001\001\000" +
    "\002\001\001\000\006\075\u01a7\077\236\001\001\000\004" +
    "\032\u01aa\001\001\000\002\001\001\000\004\032\u01a9\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\075\u01ad" +
    "\077\236\001\001\000\004\032\u01b0\001\001\000\002\001" +
    "\001\000\004\032\u01af\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\114" +
    "\u01b4\001\001\000\004\032\u01b5\001\001\000\002\001\001" +
    "\000\004\032\u01b7\001\001\000\004\055\u01b8\001\001\000" +
    "\032\005\063\007\061\015\071\016\070\027\074\030\044" +
    "\040\062\056\054\060\047\061\066\062\072\063\046\001" +
    "\001\000\004\024\u01bd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\067\103\070\077\071" +
    "\104\100\111\101\u01be\001\001\000\004\032\u01bf\001\001" +
    "\000\002\001\001\000\006\036\u01c4\052\u01c2\001\001\000" +
    "\002\001\001\000\004\103\u01d3\001\001\000\002\001\001" +
    "\000\004\102\u01c5\001\001\000\004\006\u01c8\001\001\000" +
    "\002\001\001\000\004\005\u01c9\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\u01cc\052\u01cb\001\001\000" +
    "\004\032\u01cf\001\001\000\004\104\u01cd\001\001\000\004" +
    "\006\u01ce\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u01d4\001\001\000\002\001\001\000\014\067\103\070" +
    "\077\071\104\100\111\101\u01d6\001\001\000\004\141\u01d7" +
    "\001\001\000\004\032\u01d8\001\001\000\004\055\u01d9\001" +
    "\001\000\032\005\063\007\061\015\071\016\070\027\074" +
    "\030\044\040\062\056\054\060\047\061\066\062\072\063" +
    "\046\001\001\000\002\001\001\000\004\142\u01dc\001\001" +
    "\000\004\032\u01dd\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\u01e1\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\115\u01e4\001\001\000" +
    "\002\001\001\000\006\053\u01e6\054\025\001\001\000\002" +
    "\001\001\000\004\116\u01e8\001\001\000\004\032\u01e9\001" +
    "\001\000\004\055\u01ea\001\001\000\032\005\063\007\061" +
    "\015\071\016\070\027\074\030\044\040\062\056\054\060" +
    "\047\061\066\062\072\063\046\001\001\000\002\001\001" +
    "\000\004\117\u01ed\001\001\000\004\032\u01ee\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxVB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxVB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxVB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    public int jerarquia = 0;
    public String metodo = "";
    public String tipoMetodo = "";
    public String tipoActual = "";
    public OperacionesVB operacion = new OperacionesVB();
    public TablaSimbolos tabla;
    public VerifVB verif = new VerifVB();
    public ArrayList<String> variablesTipo = new ArrayList<>();

    //booleano para controlar el manejo de los returns
    public  static Boolean isReturn  = false;

    /*-----------------------------------Variables para los cuartetos-------------------------------------------*/

    public int contFinales = 0;
    public ArrayList<String> arrayFinales = new ArrayList<>();
    public ManejoVb manejoVB = new ManejoVb();
    public ManejoCondiciones manejo = new ManejoCondiciones();
    public ArrayList<Boolean> usoPila = new ArrayList<>();
    public static String aux2 = "", aux3 = "";
    public String idSwitch = "";
    public static boolean inst = false;
    public static String etInst = "";
    public String idFor = "";
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaFor = new ArrayList<>();

    /*------------------------------------------Codigo Ejecutable---------------------------------------------*/

    public ExeVb exe = new ExeVb();
    public String metodoExe = "";

    public SintaxVB(AnalizadorLexico3 lex, TablaSimbolos tabla){
        super(lex);
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
       setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");      
      int fila = s.left + PanelPrincipal.totalLineas;
            PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" Token no reconocido: "+s.toString()+"\n";
    }

   /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
       int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" ";
    }*/

    public void traspasoVariables(ArrayList<Variable> listParam, ArrayList<Variable> original){
        for(int i = 0; i < listParam.size(); i++){
            original.add(listParam.get(i));
        }
    } 



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxVB$actions {
  private final SintaxVB parser;

  /** Constructor */
  CUP$SintaxVB$actions(SintaxVB parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxVB$do_action(
    int                        CUP$SintaxVB$act_num,
    java_cup.runtime.lr_parser CUP$SintaxVB$parser,
    java.util.Stack            CUP$SintaxVB$stack,
    int                        CUP$SintaxVB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxVB$result;

      /* select the action based on the action number */
      switch (CUP$SintaxVB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // TEXTO2 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // TEXTO2 ::= TEXTO2 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // TEXTO2 ::= TEXTO2 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // TEXTO2 ::= TEXTO2 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // TEXTO2 ::= TEXTO2 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TEXTO2 ::= TEXTO2 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TEXTO2 ::= TEXTO2 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TEXTO2 ::= TEXTO2 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TEXTO2 ::= TEXTO2 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TEXTO2 ::= TEXTO2 condIsNot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TEXTO2 ::= TEXTO2 condIs 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TEXTO2 ::= TEXTO2 condLike 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TEXTO2 ::= TEXTO2 mayorIgual2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TEXTO2 ::= TEXTO2 menorIgual2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TEXTO2 ::= TEXTO2 mayorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TEXTO2 ::= TEXTO2 menorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TEXTO2 ::= TEXTO2 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TEXTO2 ::= TEXTO2 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TEXTO2 ::= TEXTO2 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TEXTO2 ::= TEXTO2 contraDiagonal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // TEXTO2 ::= TEXTO2 potencia 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // TEXTO2 ::= TEXTO2 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // TEXTO2 ::= TEXTO2 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // TEXTO2 ::= TEXTO2 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // TEXTO2 ::= TEXTO2 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // TEXTO2 ::= TEXTO2 mensaje2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TEXTO2 ::= TEXTO2 mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TEXTO2 ::= TEXTO2 condCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TEXTO2 ::= TEXTO2 condSelect 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TEXTO2 ::= TEXTO2 floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TEXTO2 ::= TEXTO2 charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TEXTO2 ::= TEXTO2 intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TEXTO2 ::= TEXTO2 condTP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TEXTO2 ::= TEXTO2 condNot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TEXTO2 ::= TEXTO2 condOr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TEXTO2 ::= TEXTO2 condAnd 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TEXTO2 ::= TEXTO2 condNext 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TEXTO2 ::= TEXTO2 condStep 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TEXTO2 ::= TEXTO2 condTo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // TEXTO2 ::= TEXTO2 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TEXTO2 ::= TEXTO2 condLoop 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TEXTO2 ::= TEXTO2 condUntil 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // TEXTO2 ::= TEXTO2 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // TEXTO2 ::= TEXTO2 condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // TEXTO2 ::= TEXTO2 condAs 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TEXTO2 ::= TEXTO2 condElseIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TEXTO2 ::= TEXTO2 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // TEXTO2 ::= TEXTO2 condThen 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TEXTO2 ::= TEXTO2 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TEXTO2 ::= TEXTO2 tipoFuncion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TEXTO2 ::= TEXTO2 tipoSub 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TEXTO2 ::= TEXTO2 tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TEXTO2 ::= TEXTO2 tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TEXTO2 ::= TEXTO2 tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // TEXTO2 ::= TEXTO2 condReturn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // TEXTO2 ::= TEXTO2 tipoDim 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // TEXTO2 ::= TEXTO2 fin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // TEXTO2 ::= TEXTO2 tipoPublic 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // TEXTO2 ::= TEXTO2 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // TEXTO2 ::= TEXTO2 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO2",31, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // TEXTO ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // TEXTO ::= TEXTO resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // TEXTO ::= TEXTO id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // TEXTO ::= TEXTO numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // TEXTO ::= TEXTO enter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 RESULT=a.toString()+"\n"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // TEXTO ::= TEXTO dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // TEXTO ::= TEXTO agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // TEXTO ::= TEXTO agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // TEXTO ::= TEXTO parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // TEXTO ::= TEXTO parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // TEXTO ::= TEXTO condIsNot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // TEXTO ::= TEXTO condIs 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // TEXTO ::= TEXTO condLike 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // TEXTO ::= TEXTO mayorIgual2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // TEXTO ::= TEXTO menorIgual2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // TEXTO ::= TEXTO mayorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // TEXTO ::= TEXTO menorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // TEXTO ::= TEXTO mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // TEXTO ::= TEXTO menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // TEXTO ::= TEXTO igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // TEXTO ::= TEXTO contraDiagonal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TEXTO ::= TEXTO potencia 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // TEXTO ::= TEXTO div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // TEXTO ::= TEXTO por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // TEXTO ::= TEXTO menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // TEXTO ::= TEXTO mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // TEXTO ::= TEXTO mensaje2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // TEXTO ::= TEXTO mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TEXTO ::= TEXTO condCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // TEXTO ::= TEXTO condSelect 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // TEXTO ::= TEXTO floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // TEXTO ::= TEXTO charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // TEXTO ::= TEXTO intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // TEXTO ::= TEXTO condTP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // TEXTO ::= TEXTO condNot 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // TEXTO ::= TEXTO condOr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // TEXTO ::= TEXTO condAnd 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // TEXTO ::= TEXTO condNext 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TEXTO ::= TEXTO condStep 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TEXTO ::= TEXTO condTo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TEXTO ::= TEXTO condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TEXTO ::= TEXTO condLoop 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TEXTO ::= TEXTO condUntil 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TEXTO ::= TEXTO condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TEXTO ::= TEXTO condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TEXTO ::= TEXTO condAs 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TEXTO ::= TEXTO condElseIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TEXTO ::= TEXTO condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TEXTO ::= TEXTO condThen 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TEXTO ::= TEXTO condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TEXTO ::= TEXTO tipoFuncion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TEXTO ::= TEXTO tipoSub 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TEXTO ::= TEXTO tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // TEXTO ::= TEXTO tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TEXTO ::= TEXTO tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TEXTO ::= TEXTO condReturn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // TEXTO ::= TEXTO tipoDim 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // TEXTO ::= TEXTO fin 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // TEXTO ::= TEXTO tipoPublic 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // TEXTO ::= TEXTO punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // TEXTO ::= TEXTO coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a.toString()+" "+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // COMENTARIO_B ::= comentario_b TEXTO comentario_c 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",12, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // COMENTARIO_B ::= comentario_b TEXTO comentario_c ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",12, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // COMENTARIO_A ::= comentario_a TEXTO2 ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("COMENTARIO_A",11, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TIPO_INPUT ::= floatInput 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TIPO_INPUT ::= charInput 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // TIPO_INPUT ::= intInput 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",30, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // LECTURA_DATOS ::= TIPO_INPUT parentesis_a parentesis_b NT$43 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",22, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // NT$43 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
 parser.manejoVB.crearScanf(parser.tabla, null, b.toString(), parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$43",107, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // LECTURA_DATOS ::= TIPO_INPUT parentesis_a TEXTO3 parentesis_b NT$42 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",22, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // NT$42 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
  parser.manejoVB.mostrarQuiebre(parser.tabla);
                                                                                        parser.manejoVB.crearScanf(parser.tabla, null, b, parser.metodoExe); 
                                                                                    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$42",106, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // LECTURA_DATOS ::= id igual TIPO_INPUT parentesis_a parentesis_b NT$41 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",22, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // NT$41 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
  parser.manejoVB.crearScanf(parser.tabla, a.toString(), b, parser.metodoExe);  
                                                                                        if(parser.verif.verificarVarInput(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), b, parser.tabla.getObVb().getTablaTipos(), parser.jerarquia)){  
                                                                                        } else {  
                                                                                        }  
                                                                                    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$41",105, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // LECTURA_DATOS ::= id igual TIPO_INPUT parentesis_a TEXTO3 parentesis_b NT$40 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",22, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NT$40 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
  parser.manejoVB.mostrarQuiebre(parser.tabla);
                                                                                        parser.manejoVB.crearScanf(parser.tabla, a.toString(), b, parser.metodoExe);     
                                                                                        if(parser.verif.verificarVarInput(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), b, parser.tabla.getObVb().getTablaTipos(), parser.jerarquia)){
                                                                                        } else {
                                                                                        }  
                                                                                    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$40",104, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ENTER2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ENTER2",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ENTER2 ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ENTER2",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ENTER2 ::= enter ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ENTER2",26, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ENTER ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ENTER",24, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ENTER ::= enter ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ENTER",24, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // VAL_TEXTO ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT =  a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",61, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // VAL_TEXTO ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",61, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // VAL_TEXTO ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.verif.verifVarMensaje(parser.tabla.getObVb(), b.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                               RESULT = parser.manejoVB.etiquetaId(parser.tabla, a.toString(), parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",61, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // VAL_TEXTO ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",61, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // VAL_TEXTO ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",61, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // VAL_TEXTO ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.verif.verifVarMensaje(parser.tabla.getObVb(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);  
                                                               RESULT = parser.manejoVB.etiquetaId(parser.tabla, a.toString(), parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",61, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TEXTO_CONT ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO_CONT",60, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TEXTO_CONT ::= mas TEXTO3 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO_CONT",60, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TEXTO_CONT ::= ampersand TEXTO3 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO_CONT",60, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TEXTO3 ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en operacion Console.write\n"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO3",59, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TEXTO3 ::= comilla TEXTO comilla NT$39 TEXTO_CONT 
            {
              String RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO3",59, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$39 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  String et = a.toString()+b+c.toString();
                                                        parser.manejoVB.mostrarMensaje(parser.tabla.getObVb(), et, null);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$39",103, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TEXTO3 ::= VAL_TEXTO NT$38 TEXTO_CONT 
            {
              String RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TEXTO3",59, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$38 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.mostrarMensaje(parser.tabla.getObVb(), a, "%f"); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$38",102, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // MENSAJE ::= mensaje2 parentesis_a parentesis_b ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // MENSAJE ::= mensaje parentesis_a parentesis_b ENTER 
            {
              Object RESULT =null;
		 parser.manejoVB.mostrarQuiebre(parser.tabla); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // MENSAJE ::= mensaje2 parentesis_a TEXTO3 parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // MENSAJE ::= mensaje parentesis_a TEXTO3 parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		 parser.manejoVB.mostrarQuiebre(parser.tabla); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("MENSAJE",21, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ID ::= 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ID ::= OPERACION 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // STEP ::= error 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia STEP dentro de for, se esperaba salto de operacion.\n";
                                                    parser.manejoVB.agregarAuxPilaFor(parser.tabla, parser.pilaFor, "1", parser.idFor, parser.metodoExe, true, false); 
                                                    RESULT = true;  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("STEP",32, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // STEP ::= 
            {
              Boolean RESULT =null;
		  parser.manejoVB.agregarAuxPilaFor(parser.tabla, parser.pilaFor, "1", parser.idFor, parser.metodoExe, true, false); 
                                                    RESULT = true; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("STEP",32, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // STEP ::= condStep menos id 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  parser.manejoVB.agregarAuxPilaFor(parser.tabla, parser.pilaFor, a.toString()+b.toString(), parser.idFor, parser.metodoExe, false, true); RESULT = parser.verif.verifVarOp(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, b.toString(), "Float", parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("STEP",32, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // STEP ::= condStep id 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  parser.manejoVB.agregarAuxPilaFor(parser.tabla, parser.pilaFor, a.toString(), parser.idFor, parser.metodoExe, false, false);  RESULT = parser.verif.verifVarOp(parser.tabla.getObVb(),  parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), "Float", parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("STEP",32, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // STEP ::= condStep menos numero 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  parser.manejoVB.agregarAuxPilaFor(parser.tabla, parser.pilaFor, a.toString()+b.toString(), parser.idFor, parser.metodoExe, true, true); RESULT = true; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("STEP",32, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // STEP ::= condStep numero 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  parser.manejoVB.agregarAuxPilaFor(parser.tabla, parser.pilaFor, a.toString(), parser.idFor, parser.metodoExe, true, false); RESULT=true; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("STEP",32, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NEXT ::= error 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de operador, se esperaba token: Next\n"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NEXT",36, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NEXT ::= condNext 
            {
              Boolean RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NEXT",36, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // FOR ::= condFor NT$33 id NT$34 TIPO_VARIABLE NT$35 igual OPERACION NT$36 condTo OPERACION STEP NT$37 ENTER CONTENIDO NEXT ID ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-15)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-15)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-15)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-13)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-13)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-13)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-10)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Boolean h = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		  parser.manejoVB.retornoFor(parser.tabla.getObVb(), parser.usoPila, parser.pilaFor, a.toString(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                                parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size() - 1); 
                                                                                parser.jerarquia--; 
                                                                                RESULT=parser.operacion.retornoFor(h); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("FOR",48, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-17)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$37 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.agregarFor(parser.tabla, parser.pilaFalsas, a.toString(), c, d, parser.jerarquia, b, parser.metodoExe); 
                                                                                parser.verif.verificarVarFor(a.toString(), b, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, parser.tabla.getObVb().getTablaTipos(), parser.jerarquia, e, aleft+PanelPrincipal.totalLineas, aright, parser.jerarquia); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$37",101, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$36 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.agregarPreludioFor(parser.tabla, a.toString(), c, parser.jerarquia, parser.metodoExe);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$36",100, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$35 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  if(!b.equals("")){ 
                                                                                    parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);
                                                                                }   
                                                                            
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$35",99, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$34 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.idFor = a.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$34",98, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$33 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false); 
                                                                                parser.jerarquia++; 
                                                                                parser.pilaFalsas.add(new ArrayList<>()); 
                                                                                parser.pilaFor.add(new ArrayList<>());
                                                                                parser.tipoActual = "Integer"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$33",97, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // WHILE2 ::= error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de operador, se esperaba token: While - Until\n"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("WHILE2",18, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // WHILE2 ::= condUntil 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("WHILE2",18, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // WHILE2 ::= condWhile 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("WHILE2",18, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // WHILE ::= condWhile NT$30 EXT NT$31 ENTER CONTENIDO fin condWhile NT$32 ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		  if(a!=null){ 
                                                                            RESULT=false; 
                                                                        } else { 
                                                                            RESULT=null; 
                                                                        }  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("WHILE",46, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$32 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
  parser.manejoVB.retornoWhile(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);          
                                                                        parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size() - 1);  
                                                                        parser.jerarquia--; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$32",96, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$31 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.agregarWhile(parser.tabla.getObVb(), h, parser.jerarquia); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$31",95, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$30 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false); 
                                                                        parser.jerarquia++;  
                                                                        parser.pilaFalsas.add(new ArrayList<>());
                                                                        parser.manejoVB.agregarPreludioWhile(parser.tabla.getObVb(), parser.jerarquia);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$30",94, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIPO_CONT ::= condFor 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_CONT",17, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO_CONT ::= condWhile 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_CONT",17, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO_CONT ::= condDo 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_CONT",17, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DO_WHILE ::= condDo NT$29 ENTER CONTENIDO condLoop WHILE2 EXT ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		  parser.manejoVB.agregarCondicionWhile(parser.tabla.getObVb(), parser.usoPila, h, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                        parser.jerarquia--;  
                                                                        if(a!=null){ 
                                                                            RESULT=false; 
                                                                        } else { 
                                                                            RESULT=null; 
                                                                        } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$29 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false); 
                                                                        parser.jerarquia++; 
                                                                        parser.pilaFalsas.add(new ArrayList<>()); 
                                                                        parser.manejoVB.agregarDoWhile(parser.tabla.getObVb(), parser.jerarquia); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$29",93, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CASES ::= 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CASES",50, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CASES ::= CASE_ERROR condElse NT$28 ENTER CONTENIDO 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1); 
                                                            parser.jerarquia--;  
                                                            RESULT=a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CASES",50, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$28 ::= 
            {
              Boolean RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$28",92, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CASES ::= CASE_ERROR VAL_SELECT NT$26 ENTER CONTENIDO NT$27 CASES 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT=parser.operacion.retornoCaseSelect(a, b, hleft+PanelPrincipal.totalLineas, hright); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CASES",50, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$27 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.agregarFinCase(parser.tabla.getObVb(), parser.arrayFinales, parser.jerarquia);    
                                                            parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1);  
                                                            parser.jerarquia--; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$27",91, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$26 ::= 
            {
              Boolean RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.jerarquia++; 
                                                            parser.manejoVB.agregarCaseSwitch(parser.tabla.getObVb(), parser.jerarquia, parser.idSwitch, h, "=="); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$26",90, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // VAL_SELECT ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en definicion de variable dentro de SELECT.\n";
                                                            RESULT = ""; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_SELECT",52, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // VAL_SELECT ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = a.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_SELECT",52, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // VAL_SELECT ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = a.toString() + b.toString() + c.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_SELECT",52, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // VAL_SELECT ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = parser.manejoVB.devolverVarSwitch(parser.tabla, a.toString(), parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_SELECT",52, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CASE_ERROR ::= error 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CASE_ERROR",35, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASE_ERROR ::= condCase 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CASE_ERROR",35, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SELECT ::= condSelect CASE_ERROR NT$24 VAL_SELECT NT$25 ENTER CASES fin condSelect ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-8)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		  parser.jerarquia--; 
                                                                            parser.tabla.getObVb().getCuarpeta().add(new Nodo("ETIQUETA", parser.arrayFinales.get(parser.arrayFinales.size()-1), null, null, parser.jerarquia));  
                                                                            parser.arrayFinales.remove(parser.arrayFinales.size()-1);    
                                                                            RESULT=b; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("SELECT",49, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$25 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.arrayFinales.add("etFinal_"+parser.contFinales); 
                                                                            parser.contFinales++; 
                                                                            parser.idSwitch = a;  
                                                                            parser.verif.verifVarSelect(parser.tabla.getObVb(), a, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$25",89, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$24 ::= 
            {
              Boolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  if(!d){
                                                                                PanelPrincipal.errores += "Fila: " + dleft + " Columna: " + dright + " Tipo de error: SINTACTICO - Causa: Error en  SELECT, se esperaba token: case\n";
                                                                            }
                                                                            parser.jerarquia++; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$24",88, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de operador logico.\n";
                               RESULT = ">"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",51, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP ::= igual 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",51, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP ::= menor mayor 
            {
              String RESULT =null;
		 RESULT = "<>"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",51, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP ::= menorIgual2 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",51, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP ::= menorIgual 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",51, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP ::= mayorIgual2 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",51, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP ::= mayorIgual 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",51, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP ::= menor 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",51, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP ::= mayor 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP",51, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VAL_COND ::= menos numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",54, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VAL_COND ::= menos numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",54, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VAL_COND ::= menos id 
            {
              NodoBoolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 String tip = parser.operacion.buscarVariable(parser.tabla.getObVb(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                               RESULT = parser.manejoVB.devolverEtiquetaId(parser.tabla, a.toString(), parser.metodoExe, tip, true); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",54, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VAL_COND ::= comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",54, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VAL_COND ::= comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",54, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VAL_COND ::= numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",54, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VAL_COND ::= numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = new NodoBoolean("Integer", a.toString()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",54, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VAL_COND ::= menos METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 String et = "-"+a.getId();
                                                               RESULT = new NodoBoolean(a.getTipo(), et);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",54, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VAL_COND ::= METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",54, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VAL_COND ::= id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 String tip = parser.operacion.buscarVariable(parser.tabla.getObVb(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                               RESULT = parser.manejoVB.devolverEtiquetaId(parser.tabla, a.toString(), parser.metodoExe, tip, false); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VAL_COND",54, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP_COND ::= VAL_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT= a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP_COND ::= OP_COND modulo OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "modulo"); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP_COND ::= OP_COND div OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT= parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "div"); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP_COND ::= OP_COND por OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "mult"); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP_COND ::= OP_COND menos OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "resta");  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP_COND ::= OP_COND mas OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "suma"); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP_COND ::= parentesis_a OP_COND parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		  RESULT=a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OP_COND",53, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONDICION ::= OP_COND OP OP_COND 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.agregarBooleans(parser.tabla.getObVb(), parser.pilaFalsas, a, b, c, parser.jerarquia);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONDICION",62, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXT ::= error 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de booleano.\n";
                                                                RESULT = new ArrayList<>(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("EXT",63, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXT ::= condNot CONDICION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = parser.manejoVB.cambiarGotos(a); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("EXT",63, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXT ::= condNot parentesis_a CONDICION parentesis_b 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		  RESULT = parser.manejoVB.cambiarGotos(a); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("EXT",63, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXT ::= CONDICION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("EXT",63, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXT ::= EXT condOr NT$23 EXT 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 parser.manejoVB.manejoOr(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, a, b, parser.jerarquia); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("EXT",63, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$23 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
  parser.aux3 = parser.aux2; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$23",87, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXT ::= EXT condAnd EXT 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = parser.manejoVB.manejoAnd(a, b); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("EXT",63, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ELSE ::= 
            {
              Boolean RESULT =null;
		  parser.manejo.agregarEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia); 
                                                                            RESULT=false; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ELSE",45, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ELSE ::= condElseIf NT$20 EXT NT$21 THEN ENTER CONTENIDO NT$22 ELSE 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT=parser.operacion.retornoIf(a, b, hleft+PanelPrincipal.totalLineas, hright); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ELSE",45, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$22 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);  
                                                                            parser.manejoVB.segundoChequeoIf(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                            parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1);  
                                                                            parser.jerarquia--;  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$22",86, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$21 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.primerChequeoIf(parser.tabla.getObVb(), h); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$21",85, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$20 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false);  
                                                                            parser.jerarquia++; 
                                                                            parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$20",84, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELSE ::= condElse NT$19 ENTER CONTENIDO 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia); 
                                                                            parser.manejo.agregarEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);       
                                                                            parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size() - 1); 
                                                                            parser.jerarquia--;  
                                                                            RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ELSE",45, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$19 ::= 
            {
              Boolean RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$19",83, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // THEN ::= error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de sentencia, se esperaba token THEN.\n"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("THEN",13, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // THEN ::= 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("THEN",13, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // THEN ::= condThen 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("THEN",13, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF ::= condIf NT$16 EXT NT$17 THEN ENTER CONTENIDO NT$18 ELSE fin condIf ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		  RESULT=parser.operacion.retornoIf(a, b, hleft+PanelPrincipal.totalLineas, hright);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("IF",44, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$18 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);  
                                                                                parser.manejoVB.segundoChequeoIf(parser.tabla.getObVb(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);          
                                                                                parser.operacion.eliminarVariables(parser.jerarquia, parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1);      
                                                                                parser.jerarquia--;  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$18",82, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$17 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.primerChequeoIf(parser.tabla.getObVb(), h); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$17",81, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$16 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false); 
                                                                                parser.jerarquia++; 
                                                                                parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$16",80, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTENIDO ::= 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTENIDO ::= CONTENIDO COMENTARIO_B 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTENIDO ::= CONTENIDO COMENTARIO_A 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTENIDO ::= CONTENIDO LECTURA_DATOS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDO ::= CONTENIDO MENSAJE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDO ::= CONTENIDO WHILE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTENIDO ::= CONTENIDO FOR 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=b; } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONTENIDO ::= CONTENIDO DO_WHILE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; }  }  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTENIDO ::= CONTENIDO SELECT 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { if(b!=null){ if(b){ RESULT=true; } else { RESULT=false; } } } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTENIDO ::= CONTENIDO IF 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { if(b!=null){ if(b){ RESULT=true; } else { RESULT=false; } } } } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTENIDO ::= CONTENIDO ASIGNACIONES 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(parser.isReturn!=null && a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { if(parser.isReturn){ parser.isReturn=false; RESULT=true; } else { RESULT=false; } }  } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONTENIDO ::= CONTENIDO VARIABLES 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 if(a!=null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; RESULT=null; } else { RESULT=false; }  }  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("CONTENIDO",43, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RETORNO ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en devolucion de valor al metodo: "+parser.metodoExe+", se esperaba un tipo de dato.\n";
                                               RESULT = "Integer";  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("RETORNO",29, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RETORNO ::= condAs tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("RETORNO",29, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RETORNO ::= condAs tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Char"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("RETORNO",29, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETORNO ::= condAs tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT="Integer"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("RETORNO",29, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BYVAL ::= 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("BYVAL",7, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BYVAL ::= byVal 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("BYVAL",7, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMETROS2 ::= error 
            {
              ArrayList<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en definicion de parametros del metodo: "+parser.metodoExe+", se esperaba token: id\n";
                               RESULT = new ArrayList<>();  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",42, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMETROS2 ::= 
            {
              ArrayList<Variable> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",42, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMETROS2 ::= PARAMETROS2 BYVAL id RETORNO coma 
            {
              ArrayList<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		ArrayList<Variable> a = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		  if(parser.verif.verificarIdParam(a, b.toString())){ 
                                                                    System.out.println("ya existe una variable "+b.toString()); 
                                                                } else {
                                                                    if(!parser.tabla.getObVb().getMisMetodos().isEmpty()){
                                                                        parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().add(new Parametro(parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().size()-1, c)); 
                                                                        a.add(new Variable(b.toString(), c.toString(), true, parser.jerarquia)); a.get(a.size()-1).getListAsignaciones().add(parser.jerarquia); 
                                                                        parser.exe.agregarParametro(parser.tabla, b.toString(), parser.metodoExe, c);
                                                                    }
                                                                } RESULT=a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",42, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMETROS ::= error 
            {
              ArrayList<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en definicion de parametros del metodo: "+parser.metodoExe+", se esperaba token id\n";
                              RESULT = new ArrayList<>(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAMETROS",41, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMETROS ::= 
            {
              ArrayList<Variable> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAMETROS",41, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMETROS ::= PARAMETROS2 BYVAL id RETORNO 
            {
              ArrayList<Variable> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		ArrayList<Variable> a = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  if(parser.verif.verificarIdParam(a, b.toString())){ 
                                                                System.out.println("ya existe una variable "+b.toString()); 
                                                            } else { 
                                                                if(!parser.tabla.getObVb().getMisMetodos().isEmpty()){
                                                                    parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().add(new Parametro(parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisParametros().size()-1, c));  
                                                                    a.add(new Variable(b.toString(), c.toString(), true, parser.jerarquia)); a.get(a.size()-1).getListAsignaciones().add(parser.jerarquia); 
                                                                    parser.exe.agregarParametro(parser.tabla, b.toString(), parser.metodoExe, c);
                                                                }
                                                            } RESULT=a;  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAMETROS",41, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RETURN ::= 
            {
              Boolean RESULT =null;
		  RESULT=false; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("RETURN",33, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RETURN ::= condReturn NT$14 VALOR_VAR NT$15 ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("RETURN",33, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$15 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.crearReturn(parser.tabla, a, parser.metodoExe);  
                                                    RESULT = true; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$15",79, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$14 ::= 
            {
              Boolean RESULT =null;
  parser.tipoActual=parser.tipoMetodo; 
                                                    parser.exe.agregarReturn(parser.tabla, parser.metodoExe);
                                                    parser.tipoMetodo=""; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$14",78, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO_VAL ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  String tipoNum = "Float"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright, a.toString()+b.toString()+c.toString()+d.toString()); RESULT = a.toString() + b.toString() + c.toString() + d.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO_VAL ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  String tipoNum = "Integer"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright, a.toString()+b.toString()); RESULT = a.toString() + b.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO_VAL ::= menos id 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  parser.verif.verifVarOp(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), parser.tipoActual, parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright); 
                                                                String et = parser.manejoVB.etiquetaId(parser.tabla, a.toString(), parser.metodoExe);
                                                                RESULT = b.toString() + et;  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO_VAL ::= comillaSimple numero comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO_VAL ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO_VAL ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  String tipoNum = "Float"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright, a.toString()+b.toString()+c.toString()); RESULT=a.toString()+b.toString()+c.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO_VAL ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  String tipoNum = "Integer"; parser.verif.verificarNumero(tipoNum, parser.tabla.getObVb(), parser.tabla.getObVb().getTablaTipos(), parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright, a.toString()); RESULT = a.toString(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO_VAL ::= menos METODO_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  if(!a.getTipo().equals(parser.tipoActual)){
                                                                    if(!parser.verif.verificarPadre(parser.tabla.getObVb(), a.getTipo(), parser.tipoActual, parser.tabla.getObVb().getTablaTipos())){
                                                                        PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                    }
                                                                } 
                                                                RESULT = "-"+a.getId();    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO_VAL ::= METODO_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  if(!a.getTipo().equals(parser.tipoActual)){
                                                                    if(!parser.verif.verificarPadre(parser.tabla.getObVb(), a.getTipo(), parser.tipoActual, parser.tabla.getObVb().getTablaTipos())){
                                                                        PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                    }
                                                                } 
                                                                RESULT = a.getId();    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO_VAL ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  parser.verif.verifVarOp(parser.tabla.getObVb(), parser.tabla.getObVb().getMisMetodos().size()-1, a.toString(), parser.tipoActual, parser.tabla.getObVb().getTablaTipos(), aleft+PanelPrincipal.totalLineas, aright); 
                                                                RESULT = parser.manejoVB.etiquetaId(parser.tabla, a.toString(), parser.metodoExe);      
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",37, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION ::= TIPO_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",38, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION ::= OPERACION modulo OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "modulo", parser.metodoExe);  
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",38, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION ::= OPERACION div OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "div", parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",38, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION ::= OPERACION por OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "mult", parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",38, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION ::= OPERACION menos OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "resta", parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",38, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION ::= OPERACION mas OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT = parser.manejoVB.agregarOperacion(parser.tabla, a, b, "suma", parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",38, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		 RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("OPERACION",38, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAM2 ::= error 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en definicion de parametros del metodo: "+parser.metodoExe+", se esperaba token id\n";
                                                                RESULT = new ArrayList<>(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAM2",58, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARAM2 ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAM2",58, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARAM2 ::= PARAM2 OP_COND coma 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		  if(a != null){
                                                                    if(!b.getTipo().equals("")){
                                                                        a.add(b);
                                                                        RESULT = a;
                                                                    } else {
                                                                        RESULT = null;
                                                                    }
                                                                } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAM2",58, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAM ::= error 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en definicion de parametros, se esperaba token id\n";
                                                                RESULT = new ArrayList<>(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAM",57, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAM ::= PARAM2 OP_COND 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  if(a != null){
                                                                    if(!b.getTipo().equals("")){
                                                                        a.add(b);
                                                                        RESULT = a;
                                                                    } else {
                                                                        RESULT = null;
                                                                    }
                                                                } 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAM",57, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAM_METODOS ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",56, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAM_METODOS ::= PARAM 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT = a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",56, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODO_VOID ::= id parentesis_a PARAM_METODOS parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		  parser.verif.verificarMetodo(parser.tabla, a.toString(), aleft+PanelPrincipal.totalLineas, aright);  
                                                                                parser.manejoVB.invocarMetodo(parser.tabla, a.toString(), b, aleft+PanelPrincipal.totalLineas);   
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("METODO_VOID",14, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // METODO_COND ::= id parentesis_a PARAM_METODOS parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		  boolean existe = parser.verif.verificarMetodo(parser.tabla, a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                                        String et = parser.manejoVB.devolverEtiquetaMetodo(parser.tabla, a.toString(), b, aleft+PanelPrincipal.totalLineas);
                                                                        String tip = "";
                                                                        if(existe){
                                                                            tip = parser.tabla.getObVb().getMisMetodos().get(VerifVB.iteradorVar).getRetorno();
                                                                        }
                                                                        RESULT = new NodoBoolean(tip, et);      
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("METODO_COND",55, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PUBLICO ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PUBLICO",34, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PUBLICO ::= tipoPublic 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("PUBLICO",34, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODOS ::= PUBLICO tipoSub id NT$11 parentesis_a PARAMETROS parentesis_b NT$12 ENTER CONTENIDO fin tipoSub NT$13 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-13)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-13)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-13)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-8)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-8)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("METODOS",9, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
  parser.manejoVB.finMetodo(parser.tabla.getObVb());  
                                                    parser.jerarquia=0; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$13",77, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
  parser.exe.agregarTipoMetodo(parser.tabla, "void", c);
                                                    String param = parser.exe.agregarParametrosMetodo(parser.tabla, c);
                                                    if(!param.equals("")){
                                                        parser.metodoExe = a.toString() + "_" +param;   
                                                        parser.exe.actualizarParametrosMetodo(parser.tabla, parser.metodoExe);
                                                    }
                                                    parser.manejoVB.crearMetodo(parser.tabla.getObVb(), a.toString(), c, "void");  
                                                    parser.traspasoVariables(c, parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisVariables());  
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$12",76, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$11 ::= 
            {
              Object RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
   if(!z){
                                                        PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Falta de atributo PUBLIC en procedimiento: "+a.toString()+"\n";
                                                    }
                                                    parser.metodo=a.toString(); 
                                                    parser.metodoExe = a.toString();
                                                    parser.exe.agregarMetodo(parser.tabla, a.toString(), "void");
                                                    parser.operacion.crearMetodo(parser.tabla.getObVb(), a.toString(), false, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$11",75, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODOS ::= PUBLICO tipoFuncion id NT$7 parentesis_a PARAMETROS parentesis_b RETORNO NT$8 ENTER CONTENIDO RETURN NT$9 fin tipoFuncion NT$10 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-16)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-16)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-16)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-14)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-14)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("METODOS",9, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-16)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-14)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-14)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-14)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-12)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
  parser.jerarquia=0;
                                                    parser.metodoExe = "";    
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$10",74, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.finMetodo(parser.tabla.getObVb()); 
                                                    parser.operacion.retornoMetodo(d, e, a.toString(), eleft+PanelPrincipal.totalLineas, eright);  
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$9",73, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		ArrayList<Variable> c = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.crearMetodo(parser.tabla.getObVb(), a.toString(), c, b);  
                                                    parser.exe.agregarTipoMetodo(parser.tabla, b, c);   
                                                    String param = parser.exe.agregarParametrosMetodo(parser.tabla, c);
                                                    if(!param.equals("")){
                                                        parser.metodoExe = a.toString() + "_"+param;
                                                        parser.exe.actualizarParametrosMetodo(parser.tabla, parser.metodoExe);
                                                    }
                                                    parser.tipoMetodo = b.toString(); 
                                                    parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).setRetorno(b.toString());  
                                                    parser.traspasoVariables(c, parser.tabla.getObVb().getMisMetodos().get(parser.tabla.getObVb().getMisMetodos().size()-1).getMisVariables());  
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$8",72, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$7 ::= 
            {
              Object RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
   if(!z){
                                                        PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Falta de atributo PUBLIC en funcion: "+a.toString()+"\n";
                                                    }
                                                    parser.metodo=a.toString();
                                                    parser.metodoExe = a.toString();
                                                    parser.operacion.crearMetodo(parser.tabla.getObVb(), a.toString(), true, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                    parser.exe.agregarMetodo(parser.tabla, a.toString(), null);   
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$7",71, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR_VAR ::= OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VALOR_VAR",39, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACIONES2 ::= ENTER 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES2",6, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACIONES2 ::= coma id igual NT$5 VALOR_VAR NT$6 ASIGNACIONES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES2",6, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  parser.manejoVB.verificarIdMetodo(parser.tabla, a.toString(), parser.metodoExe, b);
                                                    parser.manejoVB.agregarValorVar(parser.tabla, a.toString(), b, parser.metodoExe);   
                                                    if(!parser.isReturn){ 
                                                        parser.operacion.agregarValorVar(a.toString(), parser.tabla.getObVb(), parser.jerarquia, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                    } else { 
                                                        System.out.println("Error, instrucciones luego de un return"); 
                                                        parser.isReturn =null; }   
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$6",70, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
  parser.tipoActual=parser.verif.verificarVarAsignar(a.toString(), parser.tabla, parser.tabla.getObVb().getMisMetodos().size()-1, aleft+PanelPrincipal.totalLineas, aright, parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$5",69, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACIONES ::= id igual NT$3 VALOR_VAR NT$4 ASIGNACIONES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",5, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
 parser.manejoVB.verificarIdMetodo(parser.tabla, a.toString(), parser.metodoExe, b);
                                                   parser.manejoVB.agregarValorVar(parser.tabla, a.toString(), b, parser.metodoExe);  
                                                   parser.operacion.agregarValorVar(a.toString(), parser.tabla.getObVb(), parser.jerarquia, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$4",68, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
  parser.tipoActual=parser.verif.verificarVarAsignar(a.toString(), parser.tabla, parser.tabla.getObVb().getMisMetodos().size()-1, aleft+PanelPrincipal.totalLineas, aright, parser.metodoExe); 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$3",67, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C ::= coma id TIPO_VARIABLE2 ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		  parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas);    
                                                    parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);
                                                    parser.exe.agregarTipo(parser.tabla, parser.variablesTipo, a.toString(), b);
                                                    parser.operacion.modificarTipos(parser.tabla.getObVb(), parser.variablesTipo, b);  
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C ::= dosPuntos VARIABLES 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // C ::= coma id TIPO_VARIABLE NT$2 C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  if(b.equals("")){ 
                                                        parser.variablesTipo.add(a.toString()); 
                                                    }  
                                                    parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas); 
                                                    parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);
                                                
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$2",66, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_VARIABLE2 ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de variable, se esperaba un tipo de dato\n";
                                                    RESULT="Integer"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE2",40, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_VARIABLE2 ::= condAs tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT="Char"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE2",40, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_VARIABLE2 ::= condAs tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT="Float"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE2",40, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_VARIABLE2 ::= condAs tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT="Integer"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE2",40, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_VARIABLE ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de variable, se esperaba un tipo de dato\n";
                                                    RESULT=""; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",28, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO_VARIABLE ::= 
            {
              String RESULT =null;
		  RESULT=""; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",28, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_VARIABLE ::= condAs tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT="Char"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",28, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO_VARIABLE ::= condAs tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT="Float"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",28, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO_VARIABLE ::= condAs tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
		  RESULT="Integer"; 
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",28, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLES ::= tipoDim id TIPO_VARIABLE2 NT$1 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
   parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas);  
                                                         parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);   
                                                    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$1",65, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VARIABLES ::= tipoDim id TIPO_VARIABLE NT$0 C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-2)).value;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.peek()).value;
  if(b.equals("")){ 
                                                            parser.variablesTipo.add(a.toString()); 
                                                        }   
                                                        parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.tabla.getObVb(), parser.metodo, aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright+PanelPrincipal.totalLineas);  
                                                        
                                                        parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodoExe, b);
                                                    
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("NT$0",64, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // B ::= B error 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // B ::= 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // B ::= B METODOS 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // AA ::= ENTER2 B 
            {
              Object RESULT =null;

              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("AA",0, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          return CUP$SintaxVB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= AA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)).value;
		RESULT = start_val;
              CUP$SintaxVB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.elementAt(CUP$SintaxVB$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxVB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxVB$parser.done_parsing();
          return CUP$SintaxVB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

