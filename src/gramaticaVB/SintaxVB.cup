package gramaticaVB;
import java_cup.runtime.*;
import objetos.*;
import java.util.*;
import Operaciones.*;
import manejoReturn.*;
import verificaciones.*;
import Tablas.*;
import manejoCuartetos.*;
import objetosApoyo.*;
import cuartetos.*;

parser code {:


    public int jerarquia = 0;
    public ObjetosVB vb;
    public String metodo = "";
    public String tipoMetodo = "";
    public String tipoActual = "";
    public OperacionesVB operacion = new OperacionesVB();
    public TablaSimbolos tabla;
    public VerifVB verif = new VerifVB();

    //booleano para controlar el manejo de los returns
    public  static Boolean isReturn  = false;

    /*Variables para los cuartetos*/

    public int contFinales = 0;
    public ArrayList<String> arrayFinales = new ArrayList<>();
    public ManejoVb manejoVB = new ManejoVb();
    public ManejoCondiciones manejo = new ManejoCondiciones();

    public static String aux2 = "", aux3 = "";
    public String idSwitch = "";
    public static boolean inst = false;
    public static String etInst = "";

    public String idFor = "";

    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaFor = new ArrayList<>();

    public SintaxVB(AnalizadorLexico3 lex, ObjetosVB vb, TablaSimbolos tabla){
        super(lex);
        this.vb = vb;
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");        
    }

    public void traspasoVariables(ArrayList<Variable> listParam, ArrayList<Variable> original){
        for(int i = 0; i < listParam.size(); i++){
            original.add(listParam.get(i));
        }
    } 


:}

    terminal coma, punto, tipoPublic, fin, tipoDim, tipoInt, tipoFloat, tipoChar, tipoSub, tipoFuncion,
             condIf, condThen, condElse, condAs, condDo, condWhile, condLoop, condFor, condTo, condStep,
             condNext, condAnd, condOr, condNot, intInput, charInput, floatInput, mensaje, mensaje2, 
             comillaSimple, comilla, mas, menos, por, div, igual, menor, mayor, menorIgual, mayorIgual, menorIgual2,
             mayorIgual2, condLike, condIs, condIsNot, parentesis_a, parentesis_b, agrupacion_a, agrupacion_b, 
             dosPuntos, enter, numero, id, resto, potencia, contraDiagonal, condReturn, condTP, condSelect, condCase,
             condUntil, condElseIf, ampersand, modulo, comentario_a, comentario_b, comentario_c;

    non terminal AA, MODULO, B, VARIABLES, C, ASIGNACIONES, ASIGNACIONES2,
                 OPERACION2, METODOS, N, COMENTARIO_A, COMENTARIO_B, 
                 TIPO_CASE, DATOS_WHILE, TIPO_CONT, WHILE2, DATOS_FOR,
                 MENSAJE, LECTURA_DATOS, RESTO_MENSAJE, ENTER, RETORNO2;

    non terminal String TEXTO, TIPO_VARIABLE, RETORNO,  TIPO_INPUT, TEXTO2;

    non terminal Boolean STEP, RETURN;

    non terminal String TIPO_VAL, OPERACION, VALOR_VAR;

    non terminal ArrayList<Variable> PARAMETROS, PARAMETROS2;

    non terminal Boolean CONTENIDO, IF, ELSE, WHILE, DO_WHILE, FOR, SELECT, CASES;

    non terminal String OP, VAL_SELECT;

    non terminal NodoBoolean OP_COND, VAL_COND;

    non terminal ArrayList<Nodo> CONDICION, EXT;

    precedence left mas, menos;
    precedence left por, div, modulo;
    
    precedence left condOr;
    precedence left condAnd;

    start with AA;

    AA ::= B
;
    B ::= B METODOS 
    |     
;
    VARIABLES ::= tipoDim id:a TIPO_VARIABLE:b {: parser.manejoVB.crearVariable(parser.tabla.getObVb(), a.toString(), b); parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.vb, parser.metodo);  :}  C
;
    TIPO_VARIABLE ::= condAs tipoInt:a {: RESULT="Integer"; :}
    |                 condAs tipoFloat:a {: RESULT="Float"; :}
    |                 condAs tipoChar:a {: RESULT="Char"; :}
    |                 {: RESULT=""; :}
;
    C ::= coma id:a TIPO_VARIABLE:b {: parser.manejoVB.crearVariable(parser.tabla.getObVb(), a.toString(), b); parser.operacion.agregarVariables(a.toString(), b.toString(), parser.jerarquia, parser.vb, parser.metodo); :} C
    | dosPuntos VARIABLES
    | ENTER
;
    ASIGNACIONES ::= id:a igual {: parser.tipoActual=parser.verif.verificarVarAsignar(a.toString(), parser.vb, parser.vb.getMisMetodos().size()-1); :} VALOR_VAR:b {:  parser.manejoVB.agregarValorVar(parser.tabla.getObVb(), a.toString(), b);  parser.operacion.agregarValorVar(a.toString(), parser.vb, parser.jerarquia); :} ASIGNACIONES2
;
    ASIGNACIONES2 ::= coma id:a igual {: parser.tipoActual=parser.verif.verificarVarAsignar(a.toString(), parser.vb, parser.vb.getMisMetodos().size()-1); :} VALOR_VAR:b {: parser.manejoVB.agregarValorVar(parser.tabla.getObVb(), a.toString(), b);   if(!parser.isReturn){ parser.operacion.agregarValorVar(a.toString(), parser.vb, parser.jerarquia); } else { System.out.println("Error, instrucciones luego de un return"); parser.isReturn =null; }   :} ASIGNACIONES2
    |                 ENTER  
;
    VALOR_VAR ::= OPERACION:a {: RESULT=a; :}
;
    METODOS ::= tipoPublic tipoFuncion id:a {: parser.metodo=a.toString();  parser.operacion.crearMetodo(parser.vb, a.toString(), true); :} parentesis_a PARAMETROS:c parentesis_b RETORNO:b {: parser.tipoMetodo = b.toString(); parser.vb.getMisMetodos().get(parser.vb.getMisMetodos().size()-1).setRetorno(b.toString());  parser.traspasoVariables(c, parser.vb.getMisMetodos().get(parser.vb.getMisMetodos().size()-1).getMisVariables());  :}   ENTER CONTENIDO:d RETURN:e {: parser.operacion.retornoMetodo(d, e, a.toString());  :} fin tipoFuncion {: parser.jerarquia=0; :} ENTER
    |           tipoPublic tipoSub id:a {: parser.metodo=a.toString(); parser.operacion.crearMetodo(parser.vb, a.toString(), false); :} parentesis_a PARAMETROS:c parentesis_b {:  parser.traspasoVariables(c, parser.vb.getMisMetodos().get(parser.vb.getMisMetodos().size()-1).getMisVariables());  :} ENTER CONTENIDO fin tipoSub {: parser.jerarquia=0; :} ENTER
;
    OPERACION ::= parentesis_a OPERACION:a parentesis_b {: RESULT = a; :}
    |             OPERACION:a mas OPERACION:b {: RESULT = parser.manejoVB.agregarOperacion(parser.vb, a, b, "suma"); :}
    |             OPERACION:a menos OPERACION:b {: RESULT = parser.manejoVB.agregarOperacion(parser.vb, a, b, "resta"); :}
    |             OPERACION:a por OPERACION:b {: RESULT = parser.manejoVB.agregarOperacion(parser.vb, a, b, "mult"); :}
    |             OPERACION:a div OPERACION:b {:  RESULT = parser.manejoVB.agregarOperacion(parser.vb, a, b, "div"); :}
    |             OPERACION:a modulo OPERACION:b {: RESULT = parser.manejoVB.agregarOperacion(parser.vb, a, b, "modulo");  :}
    |             TIPO_VAL:a {: RESULT=a; :}   
;   

    TIPO_VAL ::= id:a {: parser.verif.verifVarOp(parser.vb, parser.vb.getMisMetodos().size()-1, a.toString(), parser.tipoActual, parser.vb.getTablaTipos()); RESULT = a.toString();  :}
    |            numero:a {: String tipoNum = "Integer"; parser.verif.verificarNumero(tipoNum, parser.vb, parser.vb.getTablaTipos(), parser.tipoActual); RESULT = a.toString(); :}
    |            numero:a punto:b numero:c {: String tipoNum = "Float"; parser.verif.verificarNumero(tipoNum, parser.vb, parser.vb.getTablaTipos(), parser.tipoActual); RESULT=a.toString()+b.toString()+c.toString(); :}
    |            comillaSimple:a id:b comillaSimple:c {: RESULT = a.toString()+b.toString()+c.toString(); :}
    |            menos:b id:a {: parser.verif.verifVarOp(parser.vb, parser.vb.getMisMetodos().size()-1, a.toString(), parser.tipoActual, parser.vb.getTablaTipos()); RESULT = b.toString() + a.toString();  :}
    |            menos:a numero:b {: String tipoNum = "Integer"; parser.verif.verificarNumero(tipoNum, parser.vb, parser.vb.getTablaTipos(), parser.tipoActual); RESULT = a.toString() + b.toString(); :}
    |            menos:a numero:b punto:c numero:d {: String tipoNum = "Float"; parser.verif.verificarNumero(tipoNum, parser.vb, parser.vb.getTablaTipos(), parser.tipoActual); RESULT = a.toString() + b.toString() + c.toString() + d.toString(); :}
;                                                           
    RETURN ::= condReturn {: parser.tipoActual=parser.tipoMetodo; parser.tipoMetodo=""; :} VALOR_VAR:a {: RESULT = true; :} ENTER
    | {: RESULT=false; :}                                               
;                                                                           
    PARAMETROS ::= PARAMETROS2:a id:b RETORNO:c {: if(parser.verif.verificarIdParam(a, b.toString())){ System.out.println("ya existe una variable "+b.toString()); } else { parser.vb.getMisMetodos().get(parser.vb.getMisMetodos().size()-1).getMisParametros().add(new Parametro(parser.vb.getMisMetodos().get(parser.vb.getMisMetodos().size()-1).getMisParametros().size()-1, c));  a.add(new Variable(b.toString(), c.toString(), true, parser.jerarquia)); a.get(a.size()-1).getListAsignaciones().add(parser.jerarquia); } RESULT=a;  :}
    | {: RESULT=new ArrayList<>(); :}                                   
;                                                                               
    PARAMETROS2 ::= PARAMETROS2:a id:b RETORNO:c coma {: if(parser.verif.verificarIdParam(a, b.toString())){ System.out.println("ya existe una variable "+b.toString()); } else { parser.vb.getMisMetodos().get(parser.vb.getMisMetodos().size()-1).getMisParametros().add(new Parametro(parser.vb.getMisMetodos().get(parser.vb.getMisMetodos().size()-1).getMisParametros().size()-1, c)); a.add(new Variable(b.toString(), c.toString(), true, parser.jerarquia)); a.get(a.size()-1).getListAsignaciones().add(parser.jerarquia); } RESULT=a; :}
    | {: RESULT=new ArrayList<>(); :}                                                   
;
    RETORNO ::= condAs tipoInt:a {: RESULT="Integer"; :}
    |           condAs tipoChar:a {: RESULT="Char"; :}
    |           condAs tipoFloat:a {: RESULT="Float"; :}
;
    CONTENIDO ::= CONTENIDO:a VARIABLES  {: if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de instruccion return"); RESULT=null; } else { RESULT=false; }  }  :}
    |             CONTENIDO:a ASIGNACIONES {: if(parser.isReturn!=null && a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de instruccion return"); RESULT=null; } else { if(parser.isReturn){ parser.isReturn=false; RESULT=true; } else { RESULT=false; } }  } :}
    |             CONTENIDO:a IF:b {: if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de instruccion return"); RESULT=null; } else { if(b!=null){ if(b){ RESULT=true; } else { RESULT=false; } } } } :}
    |             CONTENIDO:a SELECT:b {: if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de instruccion return"); RESULT=null; } else { if(b!=null){ if(b){ RESULT=true; } else { RESULT=false; } } } } :}  
    |             CONTENIDO:a DO_WHILE:b {: if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de instruccion return"); RESULT=null; } else { RESULT=false; }  }  :}
    |             CONTENIDO:a FOR:b {: if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de instruccion return"); RESULT=null; } else { RESULT=b; } } :}
    |             CONTENIDO:a WHILE:b {: if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de instruccion return"); RESULT=null; } else { RESULT=false; } } :}
    |             CONTENIDO:a MENSAJE {: if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de instruccion return"); RESULT=null; } else { RESULT=false; } } :}
    |             CONTENIDO:a LECTURA_DATOS {: if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de instruccion return"); RESULT=null; } else { RESULT=false; } } :} 
    |             CONTENIDO:a COMENTARIO_A {: if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de instruccion return"); RESULT=null; } else { RESULT=false; } } :}
    |             CONTENIDO:a COMENTARIO_B {: if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de instruccion return"); RESULT=null; } else { RESULT=false; } } :}
    |             {: RESULT=false; :}              
;
    IF ::= condIf {: parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); :} EXT:h {: parser.manejoVB.primerChequeoIf(parser.tabla.getObVb(), h); :} condThen ENTER CONTENIDO:a {:  parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);  parser.manejoVB.segundoChequeoIf(parser.tabla.getObVb(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);          parser.operacion.eliminarVariables(parser.jerarquia, parser.vb, parser.vb.getMisMetodos().size()-1);   parser.jerarquia--;  :} ELSE:b fin condIf ENTER {: RESULT=parser.operacion.retornoIf(a, b);  :}
;                               
    ELSE ::= condElse {: parser.jerarquia++; :} ENTER CONTENIDO:a {:  parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia); parser.manejo.agregarEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);       parser.operacion.eliminarVariables(parser.jerarquia, parser.vb, parser.vb.getMisMetodos().size() - 1); parser.jerarquia--;  RESULT=a; :}
    |        condElseIf {: parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); :} EXT:h {: parser.manejoVB.primerChequeoIf(parser.tabla.getObVb(), h); :} condThen ENTER CONTENIDO:a {: parser.manejo.irEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia);  parser.manejoVB.segundoChequeoIf(parser.tabla.getObVb(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.operacion.eliminarVariables(parser.jerarquia, parser.vb, parser.vb.getMisMetodos().size()-1);  parser.jerarquia--;  :} ELSE:b {: RESULT=parser.operacion.retornoIf(a, b); :}
    |       {:  parser.manejo.agregarEtiquetaFinVB(parser.tabla.getObVb(), parser.jerarquia); RESULT=false; :}
;
    EXT ::= EXT:a condAnd EXT:b {: RESULT = parser.manejoVB.manejoAnd(a, b); :}
    |       EXT:a condOr {: parser.aux3 = parser.aux2; :}  EXT:b {: parser.manejoVB.manejoOr(parser.tabla.getObVb(), parser.pilaCuarpeta, a, b, parser.jerarquia); :}
    |       CONDICION:a {: RESULT = a; :}
    |       condNot parentesis_a CONDICION:a parentesis_b {: RESULT = a; :}
    |       condNot CONDICION:a {: RESULT = a; :}
;



   CONDICION ::=  OP_COND:a OP:c OP_COND:b {: RESULT = parser.manejoVB.agregarBooleans(parser.tabla.getObVb(), parser.pilaFalsas, a, b, c, parser.jerarquia);  :}
;


    OP_COND ::= parentesis_a OP_COND:a parentesis_b {: RESULT=a; :}
    |           OP_COND:a mas OP_COND:b {: RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "suma"); :}
    |           OP_COND:a menos OP_COND:b {: RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "resta");  :} 
    |           OP_COND:a por OP_COND:b {: RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "mult"); :} 
    |           OP_COND:a div OP_COND:b {: RESULT= parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "div"); :}
    |           OP_COND:a modulo OP_COND:b {: RESULT = parser.manejoVB.concatenarOperacion(parser.tabla.getObVb(), a, b, "modulo"); :}
    |           VAL_COND:a {: RESULT=a; :}
;   
    VAL_COND ::= id:a {: String tip = parser.operacion.buscarVariable(parser.vb, a.toString()); RESULT = new NodoBoolean(tip, a.toString()); :}
    |            numero:a {: RESULT = new NodoBoolean("Integer", a.toString()); :}
    |            numero:a punto:b numero:c {: RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); :}
    |            comillaSimple:a id:b comillaSimple:c {: RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); :}
    |            comillaSimple:a numero:b comillaSimple:c {: RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); :}
    |            menos:b id:a {: String tip = parser.operacion.buscarVariable(parser.vb, a.toString()); RESULT = new NodoBoolean(tip, b.toString()+a.toString()); :}
    |            menos:a numero:b {: RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); :}
    |            menos:a numero:b punto:c numero:d {: RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString()); :}
;







    OP ::= mayor {: RESULT = ">"; :}
    |      menor {: RESULT = "<"; :}
    |      mayorIgual {: RESULT = ">="; :}
    |      mayorIgual2 {: RESULT = ">="; :}
    |      menorIgual {: RESULT = "<="; :}
    |      menorIgual2 {: RESULT = "<="; :}
    |      menor mayor {: RESULT = "<>"; :}
    |      igual {: RESULT = "=="; :}
;
    SELECT ::= condSelect {: parser.jerarquia++; :} VAL_SELECT:a {: parser.arrayFinales.add("etFinal_"+parser.contFinales); parser.contFinales++; parser.idSwitch = a;  parser.verif.verifVarSelect(parser.vb, a.toString()); :} ENTER CASES:b fin condSelect ENTER {: parser.tabla.getObVb().getCuarpeta().add(new Nodo("ETIQUETA", parser.arrayFinales.get(parser.arrayFinales.size()-1), null, null, parser.jerarquia));  parser.arrayFinales.remove(parser.arrayFinales.size()-1);    RESULT=b; :}
;                                                                                                   
    VAL_SELECT ::= id:a {: RESULT = a.toString(); :}                                        
    |              comillaSimple:a id:b comillaSimple:c {: RESULT = a.toString() + b.toString() + c.toString(); :}
    |              numero:a {: RESULT = a.toString(); :}                                            
;                                                                                           
    CASES ::= condCase VAL_SELECT:h {: parser.jerarquia++; parser.manejoVB.agregarCaseSwitch(parser.tabla.getObVb(), parser.jerarquia, parser.idSwitch, h, "=="); :} ENTER CONTENIDO:a {:  parser.manejoVB.agregarFinCase(parser.tabla.getObVb(), parser.arrayFinales, parser.jerarquia);    parser.operacion.eliminarVariables(parser.jerarquia, parser.vb, parser.vb.getMisMetodos().size()-1);  parser.jerarquia--; :} CASES:b {: RESULT=parser.operacion.retornoCaseSelect(a, b); :}
    |         condCase condElse {: parser.jerarquia++; :} ENTER CONTENIDO:a {: parser.operacion.eliminarVariables(parser.jerarquia, parser.vb, parser.vb.getMisMetodos().size()-1); parser.jerarquia--;  RESULT=a; :}         
    |         {: RESULT=false; :}                                                           
;                                   
    DO_WHILE ::= condDo {: parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); parser.manejoVB.agregarDoWhile(parser.tabla.getObVb(), parser.jerarquia); :} ENTER CONTENIDO:a condLoop WHILE2 EXT:h ENTER {: parser.manejoVB.agregarCondicionWhile(parser.tabla.getObVb(), h, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.jerarquia--;  if(a!=null){ RESULT=false; } else { RESULT=null; } :}
;
    TIPO_CONT ::= condDo
    |             condWhile
    |             condFor
;
    WHILE ::= condWhile  {: parser.jerarquia++;  parser.pilaFalsas.add(new ArrayList<>());  :} EXT:h {: parser.manejoVB.agregarWhile(parser.tabla.getObVb(), h, parser.jerarquia); :} ENTER CONTENIDO:a fin condWhile {: parser.manejoVB.retornoWhile(parser.tabla.getObVb(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);        parser.operacion.eliminarVariables(parser.jerarquia, parser.vb, parser.vb.getMisMetodos().size() - 1);  parser.jerarquia--; :} ENTER {: if(a!=null){ RESULT=false; } else { RESULT=null; }  :}
;
    WHILE2 ::= condWhile 
    |          condUntil
;
    FOR ::= condFor {: parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); parser.pilaFor.add(new ArrayList<>()); :} id:a {: parser.idFor = a.toString(); :} TIPO_VARIABLE:b igual OPERACION:c condTo OPERACION:d STEP:e {: parser.manejoVB.agregarFor(parser.tabla.getObVb(), parser.pilaFalsas, a.toString(), c, d, parser.jerarquia, b); parser.verif.verificarVarFor(a.toString(), b, parser.vb, parser.vb.getMisMetodos().size()-1, parser.vb.getTablaTipos(), parser.jerarquia, e); :} ENTER  CONTENIDO:h condNext  ENTER {: parser.manejoVB.retornoFor(parser.tabla.getObVb(), parser.pilaFor, a.toString(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.operacion.eliminarVariables(parser.jerarquia, parser.vb, parser.vb.getMisMetodos().size() - 1); parser.jerarquia--; RESULT=parser.operacion.retornoFor(h); :}
;
    STEP ::= condStep numero:a {: parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString(), parser.idFor); RESULT=true; :}
    |        condStep menos:a numero:b {: parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString()+b.toString(), parser.idFor); RESULT = true; :}
    |        condStep id:a {:  parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString(), parser.idFor);  RESULT = parser.verif.verifVarOp(parser.tabla.getObVb(),  parser.vb.getMisMetodos().size()-1, a.toString(), "Float", parser.tabla.getObVb().getTablaTipos());  :}
    |        condStep menos:a id:b {: parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, a.toString()+b.toString(), parser.idFor); RESULT = parser.verif.verifVarOp(parser.tabla.getObVb(), parser.vb.getMisMetodos().size()-1, b.toString(), "Float", parser.tabla.getObVb().getTablaTipos());  :}
    |        {: parser.manejoVB.agregarAuxPilaFor(parser.tabla.getObVb(), parser.pilaFor, "1", parser.idFor); RESULT = true; :}
;



    MENSAJE ::= mensaje parentesis_a id:a {: parser.verif.verifVarMensaje(parser.vb, a.toString()); :} RESTO_MENSAJE parentesis_b ENTER
    |           mensaje parentesis_a comilla TEXTO comilla RESTO_MENSAJE parentesis_b ENTER
    |           mensaje2 parentesis_a id:a {: parser.verif.verifVarMensaje(parser.vb, a.toString()); :} RESTO_MENSAJE parentesis_b ENTER
    |           mensaje2 parentesis_a comilla TEXTO comilla RESTO_MENSAJE parentesis_b ENTER
    |           mensaje parentesis_a parentesis_b ENTER
    |           mensaje2 parentesis_a parentesis_b ENTER
;   
    RESTO_MENSAJE ::= ampersand id:a {: parser.verif.verifVarMensaje(parser.vb, a.toString()); :} RESTO_MENSAJE 
    |                 ampersand comilla TEXTO comilla RESTO_MENSAJE
    |
;
    ENTER ::= enter ENTER
    |          enter
;
    LECTURA_DATOS ::= id:a igual TIPO_INPUT:b parentesis_a comilla TEXTO comilla parentesis_b {:   parser.manejoVB.crearScanf(parser.tabla.getObVb(), a.toString(), b);     if(parser.verif.verificarVarInput(parser.vb, parser.vb.getMisMetodos().size()-1, a.toString(), b, parser.vb.getTablaTipos())){  } else { System.out.println("ERROOOOR"); }  :} ENTER
    |                 id:a igual TIPO_INPUT:b parentesis_a parentesis_b {: parser.manejoVB.crearScanf(parser.tabla.getObVb(), a.toString(), b);  if(parser.verif.verificarVarInput(parser.vb, parser.vb.getMisMetodos().size()-1, a.toString(), b, parser.vb.getTablaTipos())){  } else { System.out.println("ERROOOOR"); }  :} ENTER
    |                 TIPO_INPUT:b parentesis_a comilla TEXTO comilla parentesis_b {: parser.manejoVB.crearScanf(parser.tabla.getObVb(), null, b); :} ENTER
    |                 TIPO_INPUT:b parentesis_a parentesis_b {: parser.manejoVB.crearScanf(parser.tabla.getObVb(), null, b.toString()); :} ENTER
;
    TIPO_INPUT ::= intInput {: RESULT="Integer"; :}
    |              charInput {: RESULT="Char"; :}
    |              floatInput {: RESULT="Float"; :}
;
    COMENTARIO_A ::= comentario_a TEXTO2 ENTER
;
    COMENTARIO_B ::= comentario_b TEXTO comentario_c ENTER
    |                comentario_b TEXTO comentario_c 
;
    TEXTO ::= TEXTO:a coma:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a punto:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoPublic:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a fin:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoDim:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condReturn:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoInt:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoFloat:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoChar:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoSub:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a tipoFuncion:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condIf:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condThen:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condElse:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condElseIf:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condAs:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condDo:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condWhile:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condUntil:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condLoop:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condFor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condTo:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condStep:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condNext:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condAnd:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condOr:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condNot:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condTP:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a intInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a charInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a floatInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condSelect:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condCase:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mensaje:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mensaje2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mas:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a menos:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a por:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a div:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a potencia:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a contraDiagonal:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a igual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a menor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mayor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a menorIgual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mayorIgual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a menorIgual2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a mayorIgual2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condLike:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condIs:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a condIsNot:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a parentesis_a:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a parentesis_b:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a agrupacion_a:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a agrupacion_b:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a dosPuntos:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a enter {: RESULT=a.toString()+"\n"; :}
    |         TEXTO:a numero:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a id:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO:a resto:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         {: RESULT=""; :}
;
    TEXTO2 ::= TEXTO2:a coma:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a punto:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoPublic:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a fin:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoDim:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condReturn:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoInt:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoFloat:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoChar:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoSub:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a tipoFuncion:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condIf:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condThen:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condElse:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condElseIf:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condAs:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condDo:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condWhile:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condUntil:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condLoop:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condFor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condTo:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condStep:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condNext:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condAnd:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condOr:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condNot:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condTP:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a intInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a charInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a floatInput:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condSelect:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condCase:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mensaje:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mensaje2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mas:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a menos:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a por:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a div:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a potencia:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a contraDiagonal:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a igual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a menor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mayor:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a menorIgual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mayorIgual:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a menorIgual2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a mayorIgual2:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condLike:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condIs:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a condIsNot:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a parentesis_a:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a parentesis_b:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a agrupacion_a:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a agrupacion_b:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a dosPuntos:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a numero:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a id:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         TEXTO2:a resto:b {: RESULT=a.toString()+" "+b.toString(); :}
    |         {: RESULT=""; :}
;

    
