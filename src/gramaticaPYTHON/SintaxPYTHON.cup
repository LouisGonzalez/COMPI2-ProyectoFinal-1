package gramaticaPYTHON;
import java_cup.runtime.*;
import java.util.*;
import Operaciones.*;
import verificaciones.*;
import Tablas.*;
import manejoCuartetos.*;
import objetosApoyo.*;
import cuartetos.*;
import interfaz.*;

parser code {:

    public TablaSimbolos tabla;

    //tabs de guia para las lines de instrucciones
    public ArrayList<Integer> instrucciones = new ArrayList<>();
    //tabs de guia que agarran el valor en la primer linea luego de una instruccion
    public ArrayList<Integer> lineasGuias = new ArrayList<>();
    public ArrayList<String> tipoInstruccion = new ArrayList<>();
    public static int jerarquia = 0;
    public static Boolean primerLinea = null;
    public OperacionesPY op = new OperacionesPY();
    public VerifPY verif = new VerifPY();

    /*MANEJO CUARTETOS*/
    public ArrayList<Boolean> usoPila = new ArrayList<>();
    public String idFor = "";
    public ArrayList<ArrayList<Nodo>> pilaFor = new ArrayList<>();
    public ManejoPython manejoPY = new ManejoPython();
    public static String aux2 = "", aux3 = "", etInst = "";
    public static boolean inst = false;
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();

    public SintaxPYTHON(AnalizadorLexico2 lex, TablaSimbolos tabla){
        super(lex);
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
       // setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,""); 
       int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" Token no reconocido: "+s.toString()+"\n";
        
    }
    
   /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" ";
    }*/


:}

    terminal coma, punto, mas, menos, por, div, porcentaje, parentesis_a, parentesis_b, llave_a, llave_b, agrupacion_a, 
             agrupacion_b, dosPuntos, comilla, comillaSimple, admiracion, igual, menor, mayor, menorIgual, mayorIgual,
             and, or, not, mensaje, f, condElse, condReturn, condFor, condIn, condRange,
             condWhile, condIf, condElif, intInput, charInput, floatInput, condDef, numero, id, resto, condEnd, 
             condDel, tab, condPass, enter, comentario_a, comentario_b, comentario_c;

    non terminal INICIO, METODOS, RETURN,  
                 CUERPO_METODO, VARIABLES, OP_FOR, ENTER2,
                 VARIABLES2, VARS, VARS3, FOR, WHILE, 
                 IF, NOT, ELSE, BORRAR, MENSAJES, CONC, ID, ADM, END, LECTURA_DATOS,
                 ENTER, VARIABLES3, COMENTARIO_A, COMENTARIO_B, INICIO1;

    non terminal String TEXTO2, RETORNO, TIPO_VAL2, TIPO_INPUT, TEXTO3, OP;
 
    non terminal ArrayList<Nodo> CONDICION, EXT;

    non terminal ArrayList<NodoBoolean> VARS4, LADO2;
    
    non terminal ArrayList<String> LADO1, VARS2;

    non terminal ArrayList<String> PARAMETROS, PARAMETROS2;
    
    non terminal Integer TAB;

    non terminal NodoFor RANGE;

    non terminal String TEXTO, RESTO_MENSAJE, VAR_MENSAJE;

    non terminal NodoBoolean OPERACION, TIPO_VAL;

    precedence left mas, menos;
    precedence left por, div, porcentaje;

    precedence left or;
    precedence left and;

    start with INICIO1;
    
    INICIO1 ::= ENTER2 INICIO
;
    INICIO ::= INICIO METODOS
    |
    |          error {: PanelPrincipal.errores += " Error tipo: SINTACTICO, Posible error debido a una mal definicion en un metodo.\n";  :} 
;   
    METODOS ::= condDef {: parser.jerarquia++; :} id:a parentesis_a PARAMETROS:b parentesis_b {: parser.manejoPY.crearMetodo(parser.tabla.getObPython(), a.toString(), b, "void"); :}  dosPuntos ENTER {: parser.op.agregarMetodo(parser.tabla.getObPython(), a.toString(), b, parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); parser.primerLinea=false;  parser.instrucciones.add(0); :} CUERPO_METODO RETURN {:  parser.manejoPY.finMetodo(parser.tabla.getObPython());  parser.jerarquia--; :}
;
    PARAMETROS ::= id:a PARAMETROS2:b {: if(b!=null){ b.add(a.toString()); RESULT=b; } else { RESULT = new ArrayList<>(); }:}
    | {: RESULT = new ArrayList<>(); :}
    | error {: PanelPrincipal.errores += " Error tipo: SINTACTICO, Posible error debido a una mal definicion dentro de los parametros.\n";  RESULT=new ArrayList<>(); :}
;
    PARAMETROS2 ::= coma id:a PARAMETROS2:b {:  b.add(a.toString()); RESULT=b; :}
    | {: RESULT = new ArrayList<>(); :}
    | error {: PanelPrincipal.errores += " Error tipo: SINTACTICO, Posible error debido a una mal definicion dentro de los parametros.\n";  RESULT=new ArrayList<>(); :}
;
    RETURN ::= condReturn RETORNO:a ENTER {: parser.manejoPY.agregarReturn(parser.tabla.getObPython(), a);    parser.op.agregarRetornoMetodo(parser.tabla.getObPython(), a.toString()); :}
    |          {: parser.op.agregarRetornoMetodo(parser.tabla.getObPython(), ""); :}
;
    RETORNO ::= OPERACION:a {: RESULT=a.getTipo(); :}
;
    OPERACION ::= parentesis_a OPERACION:a parentesis_b     {: RESULT=a; :}
    |             OPERACION:a mas OPERACION:b               {: RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "suma",aleft+PanelPrincipal.totalLineas, aright);  :}
    |             OPERACION:a menos OPERACION:b             {: RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "resta",aleft+PanelPrincipal.totalLineas, aright); :}
    |             OPERACION:a por OPERACION:b               {: RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "mult", aleft+PanelPrincipal.totalLineas, aright); :}
    |             OPERACION:a div OPERACION:b               {: RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "div", aleft+PanelPrincipal.totalLineas, aright); :}
    |             OPERACION:a porcentaje OPERACION:b        {: RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "modulo",aleft+PanelPrincipal.totalLineas, aright); :}
    |             TIPO_VAL:a                                {: RESULT=a; :}
;
    TIPO_VAL ::= id:a                                           {: String tip = parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia); if(tip.equals("")){ int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: La variable "+a.toString()+" no existe dentro del archivo PYTHON.\n"; }  RESULT = new NodoBoolean(tip, a.toString());   :}
    |            numero:a                                       {: RESULT = new NodoBoolean("Integer", a.toString()); :}
    |            numero:a punto:b numero:c                      {: RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); :}
    |            comillaSimple:a id:b comillaSimple:c           {: RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); :}
    |            comillaSimple:a numero:b comillaSimple:c       {: RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); :}
    |            menos:d comillaSimple:a id:b comillaSimple:c           {: RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); :}
    |            menos:d comillaSimple:a numero:b comillaSimple:c       {: RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); :}
    |            menos:b id:a                                   {: String tip=parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia);   if(tip.equals("")){ int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: La variable "+a.toString()+" no existe dentro del archivo PYTHON.\n"; }     RESULT = new NodoBoolean(tip, b.toString()+a.toString()); :}
    |            menos:a numero:b                               {: RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); :}
    |            menos:a numero:b punto:c numero:d              {: RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString()); :}
;
    TIPO_VAL2 ::= comilla id comilla    {: RESULT="Char"; :}
    |             id:a                  {: RESULT=parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia); :}
    |             numero                {: RESULT="Integer"; :}
    |             numero punto numero   {: RESULT="Float"; :}
;
    CUERPO_METODO ::= VARIABLES3 CUERPO_METODO
    |                 FOR CUERPO_METODO
    |                 WHILE CUERPO_METODO
    |                 IF CUERPO_METODO
    |                 BORRAR CUERPO_METODO
    |                 MENSAJES CUERPO_METODO
    |                 LECTURA_DATOS CUERPO_METODO
    |                 ELSE CUERPO_METODO
    |                 condPass ENTER CUERPO_METODO
    |                 COMENTARIO_B CUERPO_METODO
    |                 COMENTARIO_A CUERPO_METODO
    |                
    |                 error CUERPO_METODO
;    
    VARIABLES3 ::= TAB:a id:b igual OPERACION:c {: parser.manejoPY.agregarVariable(parser.tabla.getObPython(), b.toString(), c, bleft+PanelPrincipal.totalLineas, bright);  parser.op.asignarVariables(parser.tabla.getObPython(), b.toString(), c.getTipo(), bleft+PanelPrincipal.totalLineas, bright); :} VARIABLES2 {: parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); :}
    |             TAB:a LADO1:b igual LADO2:c {: parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);    parser.manejoPY.asignacionesMultiples(parser.tabla.getObPython(), b, c, bleft+PanelPrincipal.totalLineas, bright);    parser.op.asignacionesMultiples(parser.tabla.getObPython(), b, c, parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright); :}
;
    VARIABLES2 ::= coma id:a igual OPERACION:b {: parser.manejoPY.agregarVariable(parser.tabla.getObPython(), a.toString(), b, aleft+PanelPrincipal.totalLineas, aright);  parser.op.asignarVariables(parser.tabla.getObPython(), a.toString(), b.getTipo(), aleft+PanelPrincipal.totalLineas, aright); :} VARIABLES2
    |              igual OPERACION VARIABLES2
    |              ENTER
;
    LADO1 ::= id:a coma id:b VARS2:c {: c.add(a.toString()); c.add(b.toString()); RESULT=c; :}
;
    VARS2 ::= coma id:a VARS2:b {: b.add(a.toString()); RESULT=b; :}
    |   {: RESULT=new ArrayList<>(); :}
;
    LADO2 ::= OPERACION:a coma OPERACION:b VARS4:c {: if(c!=null){ if(!a.getTipo().equals("") && !b.getTipo().equals("")){ c.add(a); c.add(b); RESULT=c; } else { RESULT=null; } } :}
;
    VARS4 ::= coma OPERACION:a VARS4:b {: if(b!=null){ if(!a.getTipo().equals("")){ b.add(a); RESULT=b; } else { RESULT=null; } } :}
    |  ENTER {: RESULT=new ArrayList<>(); :}
;
    FOR ::= TAB:a condFor {: parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); parser.usoPila.add(false); parser.pilaFalsas.add(new ArrayList<>()); parser.pilaFor.add(new ArrayList<>()); :} id:b {: parser.idFor = b.toString(); :} condIn condRange parentesis_a RANGE:c parentesis_b dosPuntos ENTER {: parser.manejoPY.agregarFor(parser.tabla.getObPython(), parser.pilaFalsas, b.toString(), c.getIdInicio(), c.getIdFin());  parser.verif.comprobacionFor(parser.tabla.getObPython(), b.toString(), "", c.getValor(), "tipo2", parser.op, parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright, cleft+PanelPrincipal.totalLineas, cright); :}
;
    RANGE ::= OPERACION:a {: if(a.getTipo().equals("Integer")){ RESULT=new NodoFor(null, a.getId(), true); } else{ RESULT=new NodoFor(null, a.getId(), false); } :}
    |         OPERACION:a coma OPERACION:b {: if(a.getTipo().equals("Integer") && b.getTipo().equals("Integer")){ RESULT=new NodoFor(a.getId(), b.getId(), true); } else { RESULT=new NodoFor(a.getId(), b.getId(), false); } :}
    |         OPERACION:a coma OPERACION:b coma OP_FOR {: if(a.getTipo().equals("Integer") && b.getTipo().equals("Integer")){ RESULT=new NodoFor(a.getId(), b.getId(), true); } else { RESULT=new NodoFor(a.getId(), b.getId(), false); } :}
;
    OP_FOR ::= id:a {: parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia); parser.manejoPY.agregarAuxPilaFor(parser.tabla.getObPython(), parser.pilaFor, a.toString(), parser.idFor);   :}
    |          menos:a id:b {: parser.op.buscarVariable(parser.tabla.getObPython(), b.toString(), parser.jerarquia); parser.manejoPY.agregarAuxPilaFor(parser.tabla.getObPython(), parser.pilaFor, a.toString(), parser.idFor); :}
    |          numero:a {: parser.manejoPY.agregarAuxPilaFor(parser.tabla.getObPython(), parser.pilaFor, a.toString(), parser.idFor); :}
    |          menos:a numero:b  {: parser.manejoPY.agregarAuxPilaFor(parser.tabla.getObPython(), parser.pilaFor, b.toString(), parser.idFor); :}    
;
    WHILE ::= TAB:a condWhile {: parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas,  parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); parser.tipoInstruccion.add("WHILE"); parser.pilaFalsas.add(new ArrayList<>()); :}  EXT:h dosPuntos ENTER {: parser.manejoPY.agregarWhile(parser.tabla.getObPython(), h);  parser.usoPila.add(false); :}
;
    EXT ::= EXT:a and EXT:b {: RESULT = parser.manejoPY.manejoAnd(a, b);   :}                                                     
    |       EXT:a or {: parser.aux3 = parser.aux2; :} EXT:b {: parser.manejoPY.manejoOr(parser.tabla.getObPython(), parser.usoPila, parser.pilaCuarpeta, a, b); :}                                                  
    |       CONDICION:a {: RESULT = a; :} 
    |       not parentesis_a CONDICION:a parentesis_b {: RESULT = parser.manejoPY.cambiarGotos(a); :}
    |       not CONDICION:a {: RESULT = parser.manejoPY.cambiarGotos(a); :}
;                                                                                                   
    CONDICION ::= OPERACION:a OP:c OPERACION:b {: RESULT = parser.manejoPY.agregarBooleans(parser.tabla.getObPython(), parser.pilaFalsas, a, b, c, aleft+PanelPrincipal.totalLineas, aright);  :}
;
    OP ::= igual igual {: RESULT = "=="; :}                                                                                    
    |      mayor {: RESULT=">"; :}                                                                                   
    |      menor  {: RESULT = "<"; :}                                                                                  
    |      mayorIgual {: RESULT = ">="; :}                                                               
    |      menorIgual {: RESULT = "<="; :}          
    |      admiracion igual {: RESULT = "!="; :}                                                         
;                                                                   
    IF ::= TAB:a  condIf {:  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); parser.usoPila.add(false); parser.tipoInstruccion.add("IF");   parser.pilaFalsas.add(new ArrayList<>()); :} EXT:h {: parser.manejoPY.primerChequeoIf(parser.tabla.getObPython(), h); :} dosPuntos ENTER   
;                                                                                                                                                                         
    ELSE ::= TAB:a condElse  {: parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion);    parser.tipoInstruccion.add("ELSE");   :} dosPuntos
    |        TAB:a condElif {:  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); parser.usoPila.add(false); parser.tipoInstruccion.add("ELSEIF");    parser.pilaFalsas.add(new ArrayList<>());  :} EXT:h {: parser.manejoPY.primerChequeoIf(parser.tabla.getObPython(), h); :} dosPuntos ENTER 
;                                                                            
    BORRAR ::= TAB:a condDel id:b ENTER  {: parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  parser.op.borrarVariable(parser.tabla.getObPython(), b.toString(), parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright); :}                                                                                           
;                       
    LECTURA_DATOS ::= TAB:a id:b igual TIPO_INPUT:c parentesis_a comilla TEXTO2 comilla parentesis_b ENTER {: parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  parser.manejoPY.crearScanf(parser.tabla.getObPython(), b.toString(), c);     parser.op.valorVariableInput(parser.tabla.getObPython(), b.toString(), parser.jerarquia, c);  :}
    |                 TAB:a id:b igual TIPO_INPUT:c parentesis_a parentesis_b ENTER {: parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);    parser.manejoPY.crearScanf(parser.tabla.getObPython(), b.toString(), c);     parser.op.valorVariableInput(parser.tabla.getObPython(), b.toString(), parser.jerarquia, c); :}
    |                 TAB:a TIPO_INPUT:c parentesis_a comilla TEXTO2 comilla parentesis_b ENTER {: parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  parser.manejoPY.crearScanf(parser.tabla.getObPython(), "", c);   :}
    |                 TAB:a TIPO_INPUT:c parentesis_a parentesis_b ENTER {: parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  parser.manejoPY.crearScanf(parser.tabla.getObPython(), "", c);  :}
;
    TIPO_INPUT ::= intInput {: RESULT="Integer"; :}
    |              charInput {: RESULT="Char"; :}
    |              floatInput {: RESULT="Float"; :}
;
    MENSAJES ::= TAB:a mensaje parentesis_a TEXTO:c parentesis_b ENTER {:  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); parser.manejoPY.mostrarMensaje(parser.tabla.getObPython(), c); :}                             
    |            TAB:a mensaje parentesis_a parentesis_b ENTER {: parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); :}
; 
    CONC ::= coma
    |        mas
;
    TEXTO ::= VAR_MENSAJE:a RESTO_MENSAJE:b {: RESULT = parser.manejoPY.concatenarMensaje(parser.tabla.getObPython(), a, b); :}
    |         comilla:a TEXTO2:b comilla:c RESTO_MENSAJE:d {: RESULT = parser.manejoPY.concatenarMensaje(parser.tabla.getObPython(), a.toString()+b.toString()+c.toString(), d); :}
;
    RESTO_MENSAJE ::= CONC TEXTO:a {: RESULT = a; :}
    | {: RESULT = ""; :}
;
    ID ::= coma id ID
    |
;
    VAR_MENSAJE ::= id:a {: parser.verif.verifVarMensaje(parser.tabla.getObPython(), a.toString(), parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); RESULT = a.toString(); :}
    |               numero:a {: RESULT= a.toString(); :}
    |               numero:a punto:b numero:c {: RESULT = a.toString()+b.toString()+c.toString(); :}
    |               menos:a id:b {:  parser.verif.verifVarMensaje(parser.tabla.getObPython(), b.toString(), parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright);    RESULT = a.toString()+b.toString();  :} 
    |               menos:a numero:b {: RESULT = a.toString() + b.toString(); :}
    |               menos:a numero:b punto:c numero:d {: RESULT = a.toString()+b.toString()+c.toString()+d.toString(); :}
;
    ENTER ::= ENTER enter
    |        enter
;
    ENTER2 ::= ENTER enter
    |          enter
    |
;
    TAB ::= TAB:a tab {: RESULT = a+1; :}
    |       tab  {: RESULT = 1; :}     
;
    COMENTARIO_A ::= comentario_a TEXTO3 ENTER
;
    COMENTARIO_B ::= comentario_b TEXTO2 comentario_c
;
    TEXTO2 ::= TEXTO2:a coma:b {: RESULT=a + b.toString(); :}
    |          TEXTO2:a punto:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a mas:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a menos:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a por:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a div:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a porcentaje:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a parentesis_a:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a parentesis_b:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a llave_a:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a llave_b:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a agrupacion_a:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a agrupacion_b:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a dosPuntos:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a comillaSimple:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a admiracion:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a igual:b {: RESULT = a + b.toString(); :} 
    |          TEXTO2:a menor:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a mayor:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a menorIgual:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a mayorIgual:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a and:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a or:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a not:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a mensaje:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a f:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condElse:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condReturn:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condFor:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condIn:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condRange:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condWhile:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condIf:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condElif:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a intInput:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a charInput:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a floatInput:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condDef:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condDel:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condPass:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a condEnd:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a tab {: RESULT = a + "\t"; :}
    |          TEXTO2:a enter {: RESULT = a + "\n"; :}
    |          TEXTO2:a numero:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a id:b {: RESULT = a + b.toString(); :}
    |          TEXTO2:a resto:b {: RESULT = a + b.toString(); :}
    |          {: RESULT=""; :}
;
    TEXTO3 ::= TEXTO3:a coma:b {: RESULT=a + b.toString(); :}
    |          TEXTO3:a punto:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a mas:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a menos:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a por:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a div:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a porcentaje:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a parentesis_a:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a parentesis_b:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a llave_a:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a llave_b:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a agrupacion_a:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a agrupacion_b:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a dosPuntos:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a comillaSimple:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a admiracion:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a igual:b {: RESULT = a + b.toString(); :} 
    |          TEXTO3:a menor:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a mayor:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a menorIgual:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a mayorIgual:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a and:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a or:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a not:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a mensaje:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a f:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condElse:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condReturn:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condFor:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condIn:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condRange:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condWhile:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condIf:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condElif:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a intInput:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a charInput:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a floatInput:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condDef:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condDel:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condPass:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a condEnd:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a tab {: RESULT = a + "\t"; :}
    |          TEXTO3:a numero:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a id:b {: RESULT = a + b.toString(); :}
    |          TEXTO3:a resto:b {: RESULT = a + b.toString(); :}
    |          {: RESULT=""; :}
;


    
