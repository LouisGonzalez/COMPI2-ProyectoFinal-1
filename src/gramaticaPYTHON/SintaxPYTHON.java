
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 11 19:27:55 CST 2020
//----------------------------------------------------

package gramaticaPYTHON;

import java_cup.runtime.*;
import java.util.*;
import Operaciones.*;
import verificaciones.*;
import Tablas.*;
import manejoCuartetos.*;
import objetosApoyo.*;
import cuartetos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 11 19:27:55 CST 2020
  */
public class SintaxPYTHON extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxPYTHON() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxPYTHON(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPYTHON(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\321\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\057\002\000\002\060\002\000\002\003\015" +
    "\000\002\047\004\000\002\047\002\000\002\050\005\000" +
    "\002\050\002\000\002\004\005\000\002\004\002\000\002" +
    "\005\003\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\005\000\002\056\005\000\002\056\004\000\002" +
    "\056\004\000\002\056\006\000\002\035\005\000\002\035" +
    "\003\000\002\035\003\000\002\035\005\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\005\000\002\006\004\000\002\006" +
    "\004\000\002\006\002\000\002\061\002\000\002\031\010" +
    "\000\002\031\006\000\002\062\002\000\002\010\010\000" +
    "\002\010\005\000\002\010\003\000\002\045\006\000\002" +
    "\046\005\000\002\046\002\000\002\044\006\000\002\043" +
    "\005\000\002\043\003\000\002\013\011\000\002\013\014" +
    "\000\002\052\003\000\002\052\005\000\002\052\007\000" +
    "\002\014\007\000\002\042\005\000\002\063\002\000\002" +
    "\042\006\000\002\042\003\000\002\042\006\000\002\042" +
    "\004\000\002\041\005\000\002\040\004\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\004\000\002\064\002\000\002\065\002\000\002" +
    "\015\011\000\002\066\002\000\002\017\007\000\002\067" +
    "\002\000\002\070\002\000\002\017\011\000\002\020\006" +
    "\000\002\027\014\000\002\027\011\000\002\027\012\000" +
    "\002\027\007\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\021\012\000\002\021\012\000\002\021" +
    "\007\000\002\053\005\000\002\053\005\000\002\053\002" +
    "\000\002\022\003\000\002\022\003\000\002\023\012\000" +
    "\002\023\005\000\002\024\005\000\002\024\002\000\002" +
    "\025\003\000\002\025\002\000\002\026\006\000\002\026" +
    "\014\000\002\026\002\000\002\054\003\000\002\054\003" +
    "\000\002\030\004\000\002\030\003\000\002\051\004\000" +
    "\002\051\003\000\002\032\005\000\002\033\005\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\002\000\002\037\004\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\006\002\uffff\052\uffff\001\002\000\006\002" +
    "\006\052\005\001\002\000\004\054\ufffe\001\002\000\004" +
    "\002\001\001\002\000\006\002\000\052\000\001\002\000" +
    "\004\054\011\001\002\000\004\013\012\001\002\000\006" +
    "\014\ufffa\054\014\001\002\000\004\014\021\001\002\000" +
    "\006\004\016\014\ufff8\001\002\000\004\014\ufffb\001\002" +
    "\000\004\054\017\001\002\000\006\004\016\014\ufff8\001" +
    "\002\000\004\014\ufff9\001\002\000\004\021\022\001\002" +
    "\000\004\062\023\001\002\000\022\002\uff92\040\uff92\052" +
    "\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92\001\002" +
    "\000\022\002\ufffd\040\ufffd\052\ufffd\060\ufffd\061\ufffd\062" +
    "\026\063\ufffd\064\ufffd\001\002\000\020\002\uffd7\040\uffd7" +
    "\052\uffd7\060\032\061\041\063\036\064\033\001\002\000" +
    "\022\002\uff93\040\uff93\052\uff93\060\uff93\061\uff93\062\uff93" +
    "\063\uff93\064\uff93\001\002\000\020\002\uffd7\040\uffd7\052" +
    "\uffd7\060\032\061\041\063\036\064\033\001\002\000\020" +
    "\002\uffd7\040\uffd7\052\uffd7\060\032\061\041\063\036\064" +
    "\033\001\002\000\010\002\ufff6\040\u0152\052\ufff6\001\002" +
    "\000\032\035\uff90\037\uff90\041\uff90\044\uff90\045\uff90\046" +
    "\uff90\047\uff90\050\uff90\051\uff90\054\uff90\057\uff90\060\uff90" +
    "\001\002\000\140\004\uff5f\005\uff5f\006\uff5f\007\uff5f\010" +
    "\uff5f\011\uff5f\012\uff5f\013\uff5f\014\uff5f\015\uff5f\016\uff5f" +
    "\017\uff5f\020\uff5f\021\uff5f\023\uff5f\024\uff5f\025\uff5f\026" +
    "\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f" +
    "\035\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043" +
    "\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051\uff5f" +
    "\052\uff5f\053\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f\060" +
    "\uff5f\061\uff5f\062\uff5f\065\uff5f\001\002\000\020\002\uffd7" +
    "\040\uffd7\052\uffd7\060\032\061\041\063\036\064\033\001" +
    "\002\000\020\002\uffd7\040\uffd7\052\uffd7\060\032\061\041" +
    "\063\036\064\033\001\002\000\136\004\uff31\005\uff31\006" +
    "\uff31\007\uff31\010\uff31\011\uff31\012\uff31\013\uff31\014\uff31" +
    "\015\uff31\016\uff31\017\uff31\020\uff31\021\uff31\023\uff31\024" +
    "\uff31\025\uff31\026\uff31\027\uff31\030\uff31\031\uff31\032\uff31" +
    "\033\uff31\034\uff31\035\uff31\036\uff31\037\uff31\040\uff31\041" +
    "\uff31\042\uff31\043\uff31\044\uff31\045\uff31\046\uff31\047\uff31" +
    "\050\uff31\051\uff31\052\uff31\053\uff31\054\uff31\055\uff31\056" +
    "\uff31\057\uff31\060\uff31\061\uff31\062\uff31\001\002\000\020" +
    "\002\uffd7\040\uffd7\052\uffd7\060\032\061\041\063\036\064" +
    "\033\001\002\000\020\002\uffd7\040\uffd7\052\uffd7\060\032" +
    "\061\041\063\036\064\033\001\002\000\004\062\023\001" +
    "\002\000\020\002\uffd7\040\uffd7\052\uffd7\060\032\061\041" +
    "\063\036\064\033\001\002\000\020\002\uffd7\040\uffd7\052" +
    "\uffd7\060\032\061\041\063\036\064\033\001\002\000\020" +
    "\002\uffd7\040\uffd7\052\uffd7\060\032\061\041\063\036\064" +
    "\033\001\002\000\032\035\057\037\061\041\063\044\056" +
    "\045\065\046\064\047\050\050\055\051\060\054\053\057" +
    "\051\060\054\001\002\000\020\002\uffd7\040\uffd7\052\uffd7" +
    "\060\032\061\041\063\036\064\033\001\002\000\010\002" +
    "\uffdd\040\uffdd\052\uffdd\001\002\000\004\013\uffa9\001\002" +
    "\000\004\054\u0115\001\002\000\004\013\u010d\001\002\000" +
    "\006\004\361\025\360\001\002\000\032\035\uff91\037\uff91" +
    "\041\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051" +
    "\uff91\054\uff91\057\uff91\060\uff91\001\002\000\004\013\uffa8" +
    "\001\002\000\016\007\073\013\076\023\077\034\071\053" +
    "\074\054\067\001\002\000\004\013\216\001\002\000\004" +
    "\013\uffa7\001\002\000\004\021\uffb3\001\002\000\004\025" +
    "\201\001\002\000\004\054\161\001\002\000\016\007\uffb1" +
    "\013\uffb1\023\uffb1\034\uffb1\053\uffb1\054\uffb1\001\002\000" +
    "\016\007\uffb6\013\uffb6\023\uffb6\034\uffb6\053\uffb6\054\uffb6" +
    "\001\002\000\016\007\073\013\076\023\077\034\071\053" +
    "\074\054\067\001\002\000\044\004\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\014\uffed\021\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\062\uffed\001\002\000\044\004\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\014\uffee\021\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\062" +
    "\uffee\001\002\000\014\007\073\013\147\023\077\053\074" +
    "\054\067\001\002\000\030\006\107\007\110\010\105\011" +
    "\111\012\106\024\141\025\143\026\137\027\142\030\140" +
    "\031\136\001\002\000\006\053\131\054\132\001\002\000" +
    "\046\004\uffec\005\127\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\014\uffec\021\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\062\uffec\001\002" +
    "\000\010\021\uffb5\032\117\033\121\001\002\000\014\007" +
    "\073\013\076\023\077\053\074\054\067\001\002\000\004" +
    "\054\101\001\002\000\010\021\uffc0\032\uffc0\033\uffc0\001" +
    "\002\000\004\023\102\001\002\000\044\004\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\014\uffea\021\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\062\uffea\001\002\000\016\006\107\007\110\010" +
    "\105\011\111\012\106\014\104\001\002\000\044\004\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\021" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\062\ufff4\001\002\000\014\007\073\013" +
    "\076\023\077\053\074\054\067\001\002\000\014\007\073" +
    "\013\076\023\077\053\074\054\067\001\002\000\014\007" +
    "\073\013\076\023\077\053\074\054\067\001\002\000\014" +
    "\007\073\013\076\023\077\053\074\054\067\001\002\000" +
    "\014\007\073\013\076\023\077\053\074\054\067\001\002" +
    "\000\044\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\014\ufff0\021\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\062\ufff0\001\002\000" +
    "\044\004\ufff2\006\ufff2\007\ufff2\010\105\011\111\012\106" +
    "\014\ufff2\021\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\062\ufff2\001\002\000\044" +
    "\004\ufff3\006\ufff3\007\ufff3\010\105\011\111\012\106\014" +
    "\ufff3\021\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\062\ufff3\001\002\000\044\004" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef" +
    "\021\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\062\uffef\001\002\000\044\004\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\021" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\062\ufff1\001\002\000\016\007\073\013" +
    "\076\023\077\034\071\053\074\054\067\001\002\000\004" +
    "\021\124\001\002\000\016\007\uffc2\013\uffc2\023\uffc2\034" +
    "\uffc2\053\uffc2\054\uffc2\001\002\000\016\007\073\013\076" +
    "\023\077\034\071\053\074\054\067\001\002\000\010\021" +
    "\uffc1\032\117\033\uffc1\001\002\000\004\062\023\001\002" +
    "\000\022\002\uffb4\040\uffb4\052\uffb4\060\uffb4\061\uffb4\062" +
    "\026\063\uffb4\064\uffb4\001\002\000\010\021\uffc3\032\uffc3" +
    "\033\uffc3\001\002\000\004\053\130\001\002\000\044\004" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb" +
    "\021\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\062\uffeb\001\002\000\046\004\uffe8" +
    "\005\133\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014" +
    "\uffe8\021\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\062\uffe8\001\002\000\044\004" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\014\uffe9" +
    "\021\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\062\uffe9\001\002\000\004\053\134" +
    "\001\002\000\044\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\014\uffe7\021\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\062\uffe7\001" +
    "\002\000\014\007\073\013\076\023\077\053\074\054\067" +
    "\001\002\000\014\007\uffb9\013\uffb9\023\uffb9\053\uffb9\054" +
    "\uffb9\001\002\000\014\007\uffba\013\uffba\023\uffba\053\uffba" +
    "\054\uffba\001\002\000\014\007\uffb8\013\uffb8\023\uffb8\053" +
    "\uffb8\054\uffb8\001\002\000\004\025\145\001\002\000\014" +
    "\007\uffbb\013\uffbb\023\uffbb\053\uffbb\054\uffbb\001\002\000" +
    "\004\025\144\001\002\000\014\007\uffbc\013\uffbc\023\uffbc" +
    "\053\uffbc\054\uffbc\001\002\000\014\007\uffb7\013\uffb7\023" +
    "\uffb7\053\uffb7\054\uffb7\001\002\000\024\006\107\007\110" +
    "\010\105\011\111\012\106\014\uffbd\021\uffbd\032\uffbd\033" +
    "\uffbd\001\002\000\014\007\073\013\076\023\077\053\074" +
    "\054\067\001\002\000\010\021\uffbe\032\uffbe\033\uffbe\001" +
    "\002\000\004\014\153\001\002\000\032\006\107\007\110" +
    "\010\105\011\111\012\106\014\104\024\141\025\143\026" +
    "\137\027\142\030\140\031\136\001\002\000\010\021\uffbf" +
    "\032\uffbf\033\uffbf\001\002\000\016\007\073\013\076\023" +
    "\077\034\071\053\074\054\067\001\002\000\010\021\uffb0" +
    "\032\117\033\121\001\002\000\004\021\157\001\002\000" +
    "\004\062\023\001\002\000\022\002\uffaf\040\uffaf\052\uffaf" +
    "\060\uffaf\061\uffaf\062\026\063\uffaf\064\uffaf\001\002\000" +
    "\004\042\162\001\002\000\016\007\073\013\076\023\077" +
    "\043\163\053\074\054\067\001\002\000\004\013\167\001" +
    "\002\000\016\006\107\007\110\010\105\011\111\012\106" +
    "\021\165\001\002\000\004\062\023\001\002\000\022\002" +
    "\uffc9\040\uffc9\052\uffc9\060\uffc9\061\uffc9\062\026\063\uffc9" +
    "\064\uffc9\001\002\000\014\007\073\013\076\023\077\053" +
    "\074\054\067\001\002\000\004\014\176\001\002\000\020" +
    "\004\172\006\107\007\110\010\105\011\111\012\106\014" +
    "\uffc7\001\002\000\014\007\073\013\076\023\077\053\074" +
    "\054\067\001\002\000\020\004\174\006\107\007\110\010" +
    "\105\011\111\012\106\014\uffc6\001\002\000\014\007\073" +
    "\013\076\023\077\053\074\054\067\001\002\000\016\006" +
    "\107\007\110\010\105\011\111\012\106\014\uffc5\001\002" +
    "\000\004\021\177\001\002\000\004\062\023\001\002\000" +
    "\022\002\uffc8\040\uffc8\052\uffc8\060\uffc8\061\uffc8\062\026" +
    "\063\uffc8\064\uffc8\001\002\000\014\007\073\013\076\023" +
    "\077\053\074\054\067\001\002\000\016\004\204\006\107" +
    "\007\110\010\105\011\111\012\106\001\002\000\020\002" +
    "\uffd4\040\uffd4\052\uffd4\060\uffd4\061\uffd4\063\uffd4\064\uffd4" +
    "\001\002\000\014\007\073\013\076\023\077\053\074\054" +
    "\067\001\002\000\020\004\206\006\107\007\110\010\105" +
    "\011\111\012\106\062\023\001\002\000\014\007\073\013" +
    "\076\023\077\053\074\054\067\001\002\000\020\002\uffcc" +
    "\040\uffcc\052\uffcc\060\uffcc\061\uffcc\063\uffcc\064\uffcc\001" +
    "\002\000\022\002\uffca\040\uffca\052\uffca\060\uffca\061\uffca" +
    "\062\026\063\uffca\064\uffca\001\002\000\020\004\206\006" +
    "\107\007\110\010\105\011\111\012\106\062\023\001\002" +
    "\000\020\002\uffcb\040\uffcb\052\uffcb\060\uffcb\061\uffcb\063" +
    "\uffcb\064\uffcb\001\002\000\004\021\214\001\002\000\004" +
    "\062\023\001\002\000\022\002\uffb2\040\uffb2\052\uffb2\060" +
    "\uffb2\061\uffb2\062\026\063\uffb2\064\uffb2\001\002\000\014" +
    "\014\217\022\224\036\223\053\221\054\225\001\002\000" +
    "\004\062\023\001\002\000\012\004\324\006\323\014\uffa1" +
    "\056\uffa1\001\002\000\012\004\uff94\006\uff94\014\uff94\056" +
    "\uff94\001\002\000\012\004\324\006\323\014\uffa1\056\uffa1" +
    "\001\002\000\004\022\306\001\002\000\140\004\uff5f\005" +
    "\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\012\uff5f\013\uff5f" +
    "\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f\022" +
    "\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f\030\uff5f" +
    "\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f\037" +
    "\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f\045\uff5f" +
    "\046\uff5f\047\uff5f\050\uff5f\051\uff5f\052\uff5f\053\uff5f\054" +
    "\uff5f\055\uff5f\056\uff5f\057\uff5f\060\uff5f\061\uff5f\062\uff5f" +
    "\001\002\000\012\004\uff95\006\uff95\014\uff95\056\uff95\001" +
    "\002\000\140\004\236\005\262\006\251\007\246\010\260" +
    "\011\276\012\250\013\267\014\265\015\235\016\234\017" +
    "\304\020\303\021\231\022\227\023\273\024\302\025\240" +
    "\026\247\027\255\030\243\031\253\032\271\033\257\034" +
    "\272\035\261\036\300\037\263\040\230\041\305\042\242" +
    "\043\266\044\232\045\244\046\275\047\233\050\237\051" +
    "\270\052\256\053\245\054\264\055\301\056\254\057\252" +
    "\060\274\061\241\062\277\001\002\000\012\004\uff9d\006" +
    "\uff9d\014\uff9d\056\uff9d\001\002\000\142\004\uff72\005\uff72" +
    "\006\uff72\007\uff72\010\uff72\011\uff72\012\uff72\013\uff72\014" +
    "\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72\022\uff72" +
    "\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031" +
    "\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72" +
    "\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046" +
    "\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72" +
    "\055\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72\065" +
    "\uff72\001\002\000\142\004\uff80\005\uff80\006\uff80\007\uff80" +
    "\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016" +
    "\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80" +
    "\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033" +
    "\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80" +
    "\057\uff80\060\uff80\061\uff80\062\uff80\065\uff80\001\002\000" +
    "\142\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e" +
    "\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020" +
    "\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e" +
    "\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035" +
    "\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e" +
    "\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052" +
    "\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e" +
    "\061\uff6e\062\uff6e\065\uff6e\001\002\000\142\004\uff6b\005" +
    "\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022" +
    "\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b" +
    "\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b" +
    "\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054" +
    "\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b" +
    "\065\uff6b\001\002\000\142\004\uff83\005\uff83\006\uff83\007" +
    "\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83" +
    "\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024" +
    "\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83" +
    "\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041" +
    "\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83" +
    "\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056" +
    "\uff83\057\uff83\060\uff83\061\uff83\062\uff83\065\uff83\001\002" +
    "\000\142\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011" +
    "\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84" +
    "\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84" +
    "\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043" +
    "\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84" +
    "\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060" +
    "\uff84\061\uff84\062\uff84\065\uff84\001\002\000\142\004\uff8d" +
    "\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d" +
    "\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030" +
    "\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045" +
    "\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062" +
    "\uff8d\065\uff8d\001\002\000\142\004\uff6a\005\uff6a\006\uff6a" +
    "\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015" +
    "\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a" +
    "\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032" +
    "\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a" +
    "\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\047" +
    "\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a" +
    "\056\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\065\uff6a\001" +
    "\002\000\142\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d" +
    "\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\017" +
    "\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034" +
    "\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d" +
    "\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051" +
    "\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d" +
    "\060\uff7d\061\uff7d\062\uff7d\065\uff7d\001\002\000\142\004" +
    "\uff66\005\uff66\006\uff66\007\uff66\010\uff66\011\uff66\012\uff66" +
    "\013\uff66\014\uff66\015\uff66\016\uff66\017\uff66\020\uff66\021" +
    "\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66" +
    "\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036" +
    "\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66" +
    "\045\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053" +
    "\uff66\054\uff66\055\uff66\056\uff66\057\uff66\060\uff66\061\uff66" +
    "\062\uff66\065\uff66\001\002\000\142\004\uff70\005\uff70\006" +
    "\uff70\007\uff70\010\uff70\011\uff70\012\uff70\013\uff70\014\uff70" +
    "\015\uff70\016\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023" +
    "\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040" +
    "\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70" +
    "\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055" +
    "\uff70\056\uff70\057\uff70\060\uff70\061\uff70\062\uff70\065\uff70" +
    "\001\002\000\142\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010" +
    "\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a" +
    "\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025" +
    "\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042" +
    "\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a" +
    "\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057" +
    "\uff7a\060\uff7a\061\uff7a\062\uff7a\065\uff7a\001\002\000\142" +
    "\004\uff6d\005\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\012" +
    "\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d" +
    "\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027" +
    "\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044" +
    "\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d" +
    "\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061" +
    "\uff6d\062\uff6d\065\uff6d\001\002\000\142\004\uff62\005\uff62" +
    "\006\uff62\007\uff62\010\uff62\011\uff62\012\uff62\013\uff62\014" +
    "\uff62\015\uff62\016\uff62\017\uff62\020\uff62\021\uff62\022\uff62" +
    "\023\uff62\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031" +
    "\uff62\032\uff62\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62" +
    "\040\uff62\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046" +
    "\uff62\047\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62" +
    "\055\uff62\056\uff62\057\uff62\060\uff62\061\uff62\062\uff62\065" +
    "\uff62\001\002\000\142\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a" +
    "\057\uff8a\060\uff8a\061\uff8a\062\uff8a\065\uff8a\001\002\000" +
    "\142\004\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c" +
    "\012\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020" +
    "\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c" +
    "\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035" +
    "\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c" +
    "\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052" +
    "\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c" +
    "\061\uff7c\062\uff7c\065\uff7c\001\002\000\142\004\uff87\005" +
    "\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87" +
    "\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022" +
    "\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87" +
    "\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87" +
    "\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054" +
    "\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87" +
    "\065\uff87\001\002\000\142\004\uff8b\005\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b" +
    "\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\065\uff8b\001\002" +
    "\000\142\004\uff67\005\uff67\006\uff67\007\uff67\010\uff67\011" +
    "\uff67\012\uff67\013\uff67\014\uff67\015\uff67\016\uff67\017\uff67" +
    "\020\uff67\021\uff67\022\uff67\023\uff67\024\uff67\025\uff67\026" +
    "\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67" +
    "\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67\042\uff67\043" +
    "\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67" +
    "\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67\057\uff67\060" +
    "\uff67\061\uff67\062\uff67\065\uff67\001\002\000\142\004\uff79" +
    "\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013" +
    "\uff79\014\uff79\015\uff79\016\uff79\017\uff79\020\uff79\021\uff79" +
    "\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030" +
    "\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79" +
    "\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045" +
    "\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79" +
    "\054\uff79\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062" +
    "\uff79\065\uff79\001\002\000\142\004\uff65\005\uff65\006\uff65" +
    "\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65\015" +
    "\uff65\016\uff65\017\uff65\020\uff65\021\uff65\022\uff65\023\uff65" +
    "\024\uff65\025\uff65\026\uff65\027\uff65\030\uff65\031\uff65\032" +
    "\uff65\033\uff65\034\uff65\035\uff65\036\uff65\037\uff65\040\uff65" +
    "\041\uff65\042\uff65\043\uff65\044\uff65\045\uff65\046\uff65\047" +
    "\uff65\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65\055\uff65" +
    "\056\uff65\057\uff65\060\uff65\061\uff65\062\uff65\065\uff65\001" +
    "\002\000\142\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b" +
    "\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017" +
    "\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b" +
    "\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034" +
    "\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b" +
    "\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051" +
    "\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b" +
    "\060\uff7b\061\uff7b\062\uff7b\065\uff7b\001\002\000\142\004" +
    "\uff68\005\uff68\006\uff68\007\uff68\010\uff68\011\uff68\012\uff68" +
    "\013\uff68\014\uff68\015\uff68\016\uff68\017\uff68\020\uff68\021" +
    "\uff68\022\uff68\023\uff68\024\uff68\025\uff68\026\uff68\027\uff68" +
    "\030\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68\036" +
    "\uff68\037\uff68\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68" +
    "\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053" +
    "\uff68\054\uff68\055\uff68\056\uff68\057\uff68\060\uff68\061\uff68" +
    "\062\uff68\065\uff68\001\002\000\142\004\uff77\005\uff77\006" +
    "\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77" +
    "\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023" +
    "\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77" +
    "\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040" +
    "\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77" +
    "\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77\055" +
    "\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77\065\uff77" +
    "\001\002\000\142\004\uff89\005\uff89\006\uff89\007\uff89\010" +
    "\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89" +
    "\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057" +
    "\uff89\060\uff89\061\uff89\062\uff89\065\uff89\001\002\000\142" +
    "\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012" +
    "\uff75\013\uff75\014\uff75\015\uff75\016\uff75\017\uff75\020\uff75" +
    "\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027" +
    "\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75" +
    "\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044" +
    "\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75" +
    "\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061" +
    "\uff75\062\uff75\065\uff75\001\002\000\142\004\uff8c\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c" +
    "\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\065" +
    "\uff8c\001\002\000\142\004\uff73\005\uff73\006\uff73\007\uff73" +
    "\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73\016" +
    "\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73" +
    "\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033" +
    "\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73" +
    "\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050" +
    "\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056\uff73" +
    "\057\uff73\060\uff73\061\uff73\062\uff73\065\uff73\001\002\000" +
    "\142\004\uff61\005\uff61\006\uff61\007\uff61\010\uff61\011\uff61" +
    "\012\uff61\013\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020" +
    "\uff61\021\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61" +
    "\027\uff61\030\uff61\031\uff61\032\uff61\033\uff61\034\uff61\035" +
    "\uff61\036\uff61\037\uff61\040\uff61\041\uff61\042\uff61\043\uff61" +
    "\044\uff61\045\uff61\046\uff61\047\uff61\050\uff61\051\uff61\052" +
    "\uff61\053\uff61\054\uff61\055\uff61\056\uff61\057\uff61\060\uff61" +
    "\061\uff61\062\uff61\065\uff61\001\002\000\142\004\uff85\005" +
    "\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85" +
    "\014\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022" +
    "\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85" +
    "\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054" +
    "\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062\uff85" +
    "\065\uff85\001\002\000\142\004\uff6f\005\uff6f\006\uff6f\007" +
    "\uff6f\010\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f" +
    "\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024" +
    "\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f" +
    "\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041" +
    "\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f" +
    "\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056" +
    "\uff6f\057\uff6f\060\uff6f\061\uff6f\062\uff6f\065\uff6f\001\002" +
    "\000\142\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011" +
    "\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\017\uff86" +
    "\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86" +
    "\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043" +
    "\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86" +
    "\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060" +
    "\uff86\061\uff86\062\uff86\065\uff86\001\002\000\142\004\uff69" +
    "\005\uff69\006\uff69\007\uff69\010\uff69\011\uff69\012\uff69\013" +
    "\uff69\014\uff69\015\uff69\016\uff69\017\uff69\020\uff69\021\uff69" +
    "\022\uff69\023\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030" +
    "\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69" +
    "\037\uff69\040\uff69\041\uff69\042\uff69\043\uff69\044\uff69\045" +
    "\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69" +
    "\054\uff69\055\uff69\056\uff69\057\uff69\060\uff69\061\uff69\062" +
    "\uff69\065\uff69\001\002\000\142\004\uff78\005\uff78\006\uff78" +
    "\007\uff78\010\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015" +
    "\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78" +
    "\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032" +
    "\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78" +
    "\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047" +
    "\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78" +
    "\056\uff78\057\uff78\060\uff78\061\uff78\062\uff78\065\uff78\001" +
    "\002\000\142\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76" +
    "\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76\017" +
    "\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76" +
    "\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034" +
    "\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76" +
    "\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051" +
    "\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76" +
    "\060\uff76\061\uff76\062\uff76\065\uff76\001\002\000\142\004" +
    "\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f" +
    "\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021" +
    "\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036" +
    "\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f" +
    "\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f" +
    "\062\uff7f\065\uff7f\001\002\000\142\004\uff64\005\uff64\006" +
    "\uff64\007\uff64\010\uff64\011\uff64\012\uff64\013\uff64\014\uff64" +
    "\015\uff64\016\uff64\017\uff64\020\uff64\021\uff64\022\uff64\023" +
    "\uff64\024\uff64\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64" +
    "\032\uff64\033\uff64\034\uff64\035\uff64\036\uff64\037\uff64\040" +
    "\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64" +
    "\047\uff64\050\uff64\051\uff64\052\uff64\053\uff64\054\uff64\055" +
    "\uff64\056\uff64\057\uff64\060\uff64\061\uff64\062\uff64\065\uff64" +
    "\001\002\000\142\004\uff6c\005\uff6c\006\uff6c\007\uff6c\010" +
    "\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c" +
    "\017\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\025" +
    "\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c" +
    "\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042" +
    "\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c" +
    "\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057" +
    "\uff6c\060\uff6c\061\uff6c\062\uff6c\065\uff6c\001\002\000\142" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012" +
    "\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044" +
    "\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88" +
    "\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061" +
    "\uff88\062\uff88\065\uff88\001\002\000\142\004\uff63\005\uff63" +
    "\006\uff63\007\uff63\010\uff63\011\uff63\012\uff63\013\uff63\014" +
    "\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021\uff63\022\uff63" +
    "\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030\uff63\031" +
    "\uff63\032\uff63\033\uff63\034\uff63\035\uff63\036\uff63\037\uff63" +
    "\040\uff63\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63\046" +
    "\uff63\047\uff63\050\uff63\051\uff63\052\uff63\053\uff63\054\uff63" +
    "\055\uff63\056\uff63\057\uff63\060\uff63\061\uff63\062\uff63\065" +
    "\uff63\001\002\000\142\004\uff74\005\uff74\006\uff74\007\uff74" +
    "\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74\016" +
    "\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74" +
    "\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033" +
    "\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74" +
    "\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050" +
    "\uff74\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74" +
    "\057\uff74\060\uff74\061\uff74\062\uff74\065\uff74\001\002\000" +
    "\142\004\uff60\005\uff60\006\uff60\007\uff60\010\uff60\011\uff60" +
    "\012\uff60\013\uff60\014\uff60\015\uff60\016\uff60\017\uff60\020" +
    "\uff60\021\uff60\022\uff60\023\uff60\024\uff60\025\uff60\026\uff60" +
    "\027\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035" +
    "\uff60\036\uff60\037\uff60\040\uff60\041\uff60\042\uff60\043\uff60" +
    "\044\uff60\045\uff60\046\uff60\047\uff60\050\uff60\051\uff60\052" +
    "\uff60\053\uff60\054\uff60\055\uff60\056\uff60\057\uff60\060\uff60" +
    "\061\uff60\062\uff60\065\uff60\001\002\000\142\004\uff7e\005" +
    "\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e" +
    "\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022" +
    "\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e" +
    "\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037" +
    "\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e" +
    "\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054" +
    "\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e" +
    "\065\uff7e\001\002\000\142\004\uff81\005\uff81\006\uff81\007" +
    "\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81" +
    "\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024" +
    "\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041" +
    "\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81" +
    "\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056" +
    "\uff81\057\uff81\060\uff81\061\uff81\062\uff81\065\uff81\001\002" +
    "\000\142\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011" +
    "\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82" +
    "\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82" +
    "\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043" +
    "\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82" +
    "\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060" +
    "\uff82\061\uff82\062\uff82\065\uff82\001\002\000\142\004\uff71" +
    "\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71\013" +
    "\uff71\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71" +
    "\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030" +
    "\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71" +
    "\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045" +
    "\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71" +
    "\054\uff71\055\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062" +
    "\uff71\065\uff71\001\002\000\004\015\307\001\002\000\004" +
    "\054\310\001\002\000\006\004\312\016\uff9b\001\002\000" +
    "\004\016\315\001\002\000\004\054\313\001\002\000\006" +
    "\004\312\016\uff9b\001\002\000\004\016\uff9c\001\002\000" +
    "\006\022\uff99\024\317\001\002\000\004\022\320\001\002" +
    "\000\004\022\uff9a\001\002\000\012\004\uff9e\006\uff9e\014" +
    "\uff9e\056\uff9e\001\002\000\012\022\224\036\223\053\221" +
    "\054\225\001\002\000\006\014\uff96\056\325\001\002\000" +
    "\012\022\uff9f\036\uff9f\053\uff9f\054\uff9f\001\002\000\012" +
    "\022\uffa0\036\uffa0\053\uffa0\054\uffa0\001\002\000\004\025" +
    "\331\001\002\000\004\014\327\001\002\000\004\062\023" +
    "\001\002\000\022\002\uffa6\040\uffa6\052\uffa6\060\uffa6\061" +
    "\uffa6\062\026\063\uffa6\064\uffa6\001\002\000\006\022\333" +
    "\036\332\001\002\000\004\022\335\001\002\000\004\022" +
    "\334\001\002\000\004\014\uff98\001\002\000\004\015\336" +
    "\001\002\000\004\054\337\001\002\000\006\004\312\016" +
    "\uff9b\001\002\000\004\016\341\001\002\000\006\022\uff99" +
    "\024\317\001\002\000\004\022\343\001\002\000\004\014" +
    "\uff97\001\002\000\012\004\324\006\323\014\uffa1\056\uffa1" +
    "\001\002\000\012\004\324\006\323\014\uffa1\056\uffa1\001" +
    "\002\000\006\014\uffa3\056\uffa3\001\002\000\006\014\uffa2" +
    "\056\uffa2\001\002\000\006\014\uff96\056\325\001\002\000" +
    "\004\014\352\001\002\000\004\062\023\001\002\000\022" +
    "\002\uffa5\040\uffa5\052\uffa5\060\uffa5\061\uffa5\062\026\063" +
    "\uffa5\064\uffa5\001\002\000\022\002\uffa4\040\uffa4\052\uffa4" +
    "\060\uffa4\061\uffa4\062\026\063\uffa4\064\uffa4\001\002\000" +
    "\010\021\356\032\117\033\121\001\002\000\004\062\023" +
    "\001\002\000\022\002\uffc4\040\uffc4\052\uffc4\060\uffc4\061" +
    "\uffc4\062\026\063\uffc4\064\uffc4\001\002\000\022\007\073" +
    "\013\076\023\077\047\050\050\055\051\060\053\074\054" +
    "\067\001\002\000\004\054\362\001\002\000\006\004\363" +
    "\025\uffcd\001\002\000\004\054\365\001\002\000\004\025" +
    "\uffcf\001\002\000\006\004\363\025\uffcd\001\002\000\004" +
    "\025\uffce\001\002\000\004\013\u0105\001\002\000\022\004" +
    "\uffd6\006\107\007\110\010\105\011\111\012\106\025\uffd6" +
    "\062\uffd6\001\002\000\010\004\374\025\373\062\023\001" +
    "\002\000\020\002\uffd5\040\uffd5\052\uffd5\060\uffd5\061\uffd5" +
    "\063\uffd5\064\uffd5\001\002\000\014\007\073\013\076\023" +
    "\077\053\074\054\067\001\002\000\004\054\376\001\002" +
    "\000\022\002\uffd0\040\uffd0\052\uffd0\060\uffd0\061\uffd0\062" +
    "\026\063\uffd0\064\uffd0\001\002\000\004\025\377\001\002" +
    "\000\014\007\073\013\076\023\077\053\074\054\067\001" +
    "\002\000\022\004\uffd3\006\107\007\110\010\105\011\111" +
    "\012\106\025\uffd3\062\uffd3\001\002\000\010\004\374\025" +
    "\373\062\023\001\002\000\020\002\uffd2\040\uffd2\052\uffd2" +
    "\060\uffd2\061\uffd2\063\uffd2\064\uffd2\001\002\000\022\004" +
    "\374\006\107\007\110\010\105\011\111\012\106\025\373" +
    "\062\023\001\002\000\020\002\uffd1\040\uffd1\052\uffd1\060" +
    "\uffd1\061\uffd1\063\uffd1\064\uffd1\001\002\000\006\014\u0106" +
    "\022\u0107\001\002\000\004\062\023\001\002\000\140\004" +
    "\uff5f\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\012\uff5f" +
    "\013\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f\021" +
    "\uff5f\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f" +
    "\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036" +
    "\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f" +
    "\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051\uff5f\052\uff5f\053" +
    "\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f\060\uff5f\061\uff5f" +
    "\062\uff5f\001\002\000\140\004\236\005\262\006\251\007" +
    "\246\010\260\011\276\012\250\013\267\014\265\015\235" +
    "\016\234\017\304\020\303\021\231\022\u0109\023\273\024" +
    "\302\025\240\026\247\027\255\030\243\031\253\032\271" +
    "\033\257\034\272\035\261\036\300\037\263\040\230\041" +
    "\305\042\242\043\266\044\232\045\244\046\275\047\233" +
    "\050\237\051\270\052\256\053\245\054\264\055\301\056" +
    "\254\057\252\060\274\061\241\062\277\001\002\000\004" +
    "\014\u010a\001\002\000\004\062\023\001\002\000\022\002" +
    "\uffad\040\uffad\052\uffad\060\uffad\061\uffad\062\026\063\uffad" +
    "\064\uffad\001\002\000\022\002\uffac\040\uffac\052\uffac\060" +
    "\uffac\061\uffac\062\026\063\uffac\064\uffac\001\002\000\006" +
    "\014\u010e\022\u010f\001\002\000\004\062\023\001\002\000" +
    "\140\004\uff5f\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f" +
    "\012\uff5f\013\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020" +
    "\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f" +
    "\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035" +
    "\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f" +
    "\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051\uff5f\052" +
    "\uff5f\053\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f\060\uff5f" +
    "\061\uff5f\062\uff5f\001\002\000\140\004\236\005\262\006" +
    "\251\007\246\010\260\011\276\012\250\013\267\014\265" +
    "\015\235\016\234\017\304\020\303\021\231\022\u0111\023" +
    "\273\024\302\025\240\026\247\027\255\030\243\031\253" +
    "\032\271\033\257\034\272\035\261\036\300\037\263\040" +
    "\230\041\305\042\242\043\266\044\232\045\244\046\275" +
    "\047\233\050\237\051\270\052\256\053\245\054\264\055" +
    "\301\056\254\057\252\060\274\061\241\062\277\001\002" +
    "\000\004\014\u0112\001\002\000\004\062\023\001\002\000" +
    "\022\002\uffab\040\uffab\052\uffab\060\uffab\061\uffab\062\026" +
    "\063\uffab\064\uffab\001\002\000\022\002\uffaa\040\uffaa\052" +
    "\uffaa\060\uffaa\061\uffaa\062\026\063\uffaa\064\uffaa\001\002" +
    "\000\004\062\023\001\002\000\022\002\uffae\040\uffae\052" +
    "\uffae\060\uffae\061\uffae\062\026\063\uffae\064\uffae\001\002" +
    "\000\010\002\uffe2\040\uffe2\052\uffe2\001\002\000\010\002" +
    "\uffdb\040\uffdb\052\uffdb\001\002\000\010\002\uffd8\040\uffd8" +
    "\052\uffd8\001\002\000\022\002\uffd7\040\uffd7\052\uffd7\060" +
    "\032\061\041\062\026\063\036\064\033\001\002\000\010" +
    "\002\uffda\040\uffda\052\uffda\001\002\000\010\002\uffd9\040" +
    "\uffd9\052\uffd9\001\002\000\010\002\uffdf\040\uffdf\052\uffdf" +
    "\001\002\000\136\004\u0127\005\u0139\006\u0131\007\u012e\010" +
    "\u0138\011\u0146\012\u0130\013\u013f\014\u013d\015\u0126\016\u0124" +
    "\017\u014b\020\u014a\021\u0121\023\u0143\024\u0149\025\u0128\026" +
    "\u012f\027\u0135\030\u012b\031\u0133\032\u0141\033\u0136\034\u0142" +
    "\035\u013a\036\u0147\037\u013b\040\u0120\041\u014c\042\u012a\043" +
    "\u013e\044\u0122\045\u012c\046\u0145\047\u0123\050\u0125\051\u0140" +
    "\052\u0137\053\u012d\054\u013c\055\u0148\056\u0134\057\u0132\060" +
    "\u0144\061\u0129\062\023\001\002\000\022\002\uff8f\040\uff8f" +
    "\052\uff8f\060\uff8f\061\uff8f\062\026\063\uff8f\064\uff8f\001" +
    "\002\000\136\004\uff43\005\uff43\006\uff43\007\uff43\010\uff43" +
    "\011\uff43\012\uff43\013\uff43\014\uff43\015\uff43\016\uff43\017" +
    "\uff43\020\uff43\021\uff43\023\uff43\024\uff43\025\uff43\026\uff43" +
    "\027\uff43\030\uff43\031\uff43\032\uff43\033\uff43\034\uff43\035" +
    "\uff43\036\uff43\037\uff43\040\uff43\041\uff43\042\uff43\043\uff43" +
    "\044\uff43\045\uff43\046\uff43\047\uff43\050\uff43\051\uff43\052" +
    "\uff43\053\uff43\054\uff43\055\uff43\056\uff43\057\uff43\060\uff43" +
    "\061\uff43\062\uff43\001\002\000\136\004\uff51\005\uff51\006" +
    "\uff51\007\uff51\010\uff51\011\uff51\012\uff51\013\uff51\014\uff51" +
    "\015\uff51\016\uff51\017\uff51\020\uff51\021\uff51\023\uff51\024" +
    "\uff51\025\uff51\026\uff51\027\uff51\030\uff51\031\uff51\032\uff51" +
    "\033\uff51\034\uff51\035\uff51\036\uff51\037\uff51\040\uff51\041" +
    "\uff51\042\uff51\043\uff51\044\uff51\045\uff51\046\uff51\047\uff51" +
    "\050\uff51\051\uff51\052\uff51\053\uff51\054\uff51\055\uff51\056" +
    "\uff51\057\uff51\060\uff51\061\uff51\062\uff51\001\002\000\136" +
    "\004\uff3f\005\uff3f\006\uff3f\007\uff3f\010\uff3f\011\uff3f\012" +
    "\uff3f\013\uff3f\014\uff3f\015\uff3f\016\uff3f\017\uff3f\020\uff3f" +
    "\021\uff3f\023\uff3f\024\uff3f\025\uff3f\026\uff3f\027\uff3f\030" +
    "\uff3f\031\uff3f\032\uff3f\033\uff3f\034\uff3f\035\uff3f\036\uff3f" +
    "\037\uff3f\040\uff3f\041\uff3f\042\uff3f\043\uff3f\044\uff3f\045" +
    "\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052\uff3f\053\uff3f" +
    "\054\uff3f\055\uff3f\056\uff3f\057\uff3f\060\uff3f\061\uff3f\062" +
    "\uff3f\001\002\000\136\004\uff3c\005\uff3c\006\uff3c\007\uff3c" +
    "\010\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c\015\uff3c\016" +
    "\uff3c\017\uff3c\020\uff3c\021\uff3c\023\uff3c\024\uff3c\025\uff3c" +
    "\026\uff3c\027\uff3c\030\uff3c\031\uff3c\032\uff3c\033\uff3c\034" +
    "\uff3c\035\uff3c\036\uff3c\037\uff3c\040\uff3c\041\uff3c\042\uff3c" +
    "\043\uff3c\044\uff3c\045\uff3c\046\uff3c\047\uff3c\050\uff3c\051" +
    "\uff3c\052\uff3c\053\uff3c\054\uff3c\055\uff3c\056\uff3c\057\uff3c" +
    "\060\uff3c\061\uff3c\062\uff3c\001\002\000\136\004\uff54\005" +
    "\uff54\006\uff54\007\uff54\010\uff54\011\uff54\012\uff54\013\uff54" +
    "\014\uff54\015\uff54\016\uff54\017\uff54\020\uff54\021\uff54\023" +
    "\uff54\024\uff54\025\uff54\026\uff54\027\uff54\030\uff54\031\uff54" +
    "\032\uff54\033\uff54\034\uff54\035\uff54\036\uff54\037\uff54\040" +
    "\uff54\041\uff54\042\uff54\043\uff54\044\uff54\045\uff54\046\uff54" +
    "\047\uff54\050\uff54\051\uff54\052\uff54\053\uff54\054\uff54\055" +
    "\uff54\056\uff54\057\uff54\060\uff54\061\uff54\062\uff54\001\002" +
    "\000\136\004\uff3b\005\uff3b\006\uff3b\007\uff3b\010\uff3b\011" +
    "\uff3b\012\uff3b\013\uff3b\014\uff3b\015\uff3b\016\uff3b\017\uff3b" +
    "\020\uff3b\021\uff3b\023\uff3b\024\uff3b\025\uff3b\026\uff3b\027" +
    "\uff3b\030\uff3b\031\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b" +
    "\036\uff3b\037\uff3b\040\uff3b\041\uff3b\042\uff3b\043\uff3b\044" +
    "\uff3b\045\uff3b\046\uff3b\047\uff3b\050\uff3b\051\uff3b\052\uff3b" +
    "\053\uff3b\054\uff3b\055\uff3b\056\uff3b\057\uff3b\060\uff3b\061" +
    "\uff3b\062\uff3b\001\002\000\136\004\uff55\005\uff55\006\uff55" +
    "\007\uff55\010\uff55\011\uff55\012\uff55\013\uff55\014\uff55\015" +
    "\uff55\016\uff55\017\uff55\020\uff55\021\uff55\023\uff55\024\uff55" +
    "\025\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032\uff55\033" +
    "\uff55\034\uff55\035\uff55\036\uff55\037\uff55\040\uff55\041\uff55" +
    "\042\uff55\043\uff55\044\uff55\045\uff55\046\uff55\047\uff55\050" +
    "\uff55\051\uff55\052\uff55\053\uff55\054\uff55\055\uff55\056\uff55" +
    "\057\uff55\060\uff55\061\uff55\062\uff55\001\002\000\136\004" +
    "\uff5e\005\uff5e\006\uff5e\007\uff5e\010\uff5e\011\uff5e\012\uff5e" +
    "\013\uff5e\014\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e\021" +
    "\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e" +
    "\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\037" +
    "\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e" +
    "\046\uff5e\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054" +
    "\uff5e\055\uff5e\056\uff5e\057\uff5e\060\uff5e\061\uff5e\062\uff5e" +
    "\001\002\000\136\004\uff4e\005\uff4e\006\uff4e\007\uff4e\010" +
    "\uff4e\011\uff4e\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e" +
    "\017\uff4e\020\uff4e\021\uff4e\023\uff4e\024\uff4e\025\uff4e\026" +
    "\uff4e\027\uff4e\030\uff4e\031\uff4e\032\uff4e\033\uff4e\034\uff4e" +
    "\035\uff4e\036\uff4e\037\uff4e\040\uff4e\041\uff4e\042\uff4e\043" +
    "\uff4e\044\uff4e\045\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e" +
    "\052\uff4e\053\uff4e\054\uff4e\055\uff4e\056\uff4e\057\uff4e\060" +
    "\uff4e\061\uff4e\062\uff4e\001\002\000\136\004\uff37\005\uff37" +
    "\006\uff37\007\uff37\010\uff37\011\uff37\012\uff37\013\uff37\014" +
    "\uff37\015\uff37\016\uff37\017\uff37\020\uff37\021\uff37\023\uff37" +
    "\024\uff37\025\uff37\026\uff37\027\uff37\030\uff37\031\uff37\032" +
    "\uff37\033\uff37\034\uff37\035\uff37\036\uff37\037\uff37\040\uff37" +
    "\041\uff37\042\uff37\043\uff37\044\uff37\045\uff37\046\uff37\047" +
    "\uff37\050\uff37\051\uff37\052\uff37\053\uff37\054\uff37\055\uff37" +
    "\056\uff37\057\uff37\060\uff37\061\uff37\062\uff37\001\002\000" +
    "\136\004\uff41\005\uff41\006\uff41\007\uff41\010\uff41\011\uff41" +
    "\012\uff41\013\uff41\014\uff41\015\uff41\016\uff41\017\uff41\020" +
    "\uff41\021\uff41\023\uff41\024\uff41\025\uff41\026\uff41\027\uff41" +
    "\030\uff41\031\uff41\032\uff41\033\uff41\034\uff41\035\uff41\036" +
    "\uff41\037\uff41\040\uff41\041\uff41\042\uff41\043\uff41\044\uff41" +
    "\045\uff41\046\uff41\047\uff41\050\uff41\051\uff41\052\uff41\053" +
    "\uff41\054\uff41\055\uff41\056\uff41\057\uff41\060\uff41\061\uff41" +
    "\062\uff41\001\002\000\136\004\uff4b\005\uff4b\006\uff4b\007" +
    "\uff4b\010\uff4b\011\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b" +
    "\016\uff4b\017\uff4b\020\uff4b\021\uff4b\023\uff4b\024\uff4b\025" +
    "\uff4b\026\uff4b\027\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b" +
    "\034\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b\042" +
    "\uff4b\043\uff4b\044\uff4b\045\uff4b\046\uff4b\047\uff4b\050\uff4b" +
    "\051\uff4b\052\uff4b\053\uff4b\054\uff4b\055\uff4b\056\uff4b\057" +
    "\uff4b\060\uff4b\061\uff4b\062\uff4b\001\002\000\136\004\uff3e" +
    "\005\uff3e\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e\013" +
    "\uff3e\014\uff3e\015\uff3e\016\uff3e\017\uff3e\020\uff3e\021\uff3e" +
    "\023\uff3e\024\uff3e\025\uff3e\026\uff3e\027\uff3e\030\uff3e\031" +
    "\uff3e\032\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e" +
    "\040\uff3e\041\uff3e\042\uff3e\043\uff3e\044\uff3e\045\uff3e\046" +
    "\uff3e\047\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e" +
    "\055\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e\001" +
    "\002\000\136\004\uff34\005\uff34\006\uff34\007\uff34\010\uff34" +
    "\011\uff34\012\uff34\013\uff34\014\uff34\015\uff34\016\uff34\017" +
    "\uff34\020\uff34\021\uff34\023\uff34\024\uff34\025\uff34\026\uff34" +
    "\027\uff34\030\uff34\031\uff34\032\uff34\033\uff34\034\uff34\035" +
    "\uff34\036\uff34\037\uff34\040\uff34\041\uff34\042\uff34\043\uff34" +
    "\044\uff34\045\uff34\046\uff34\047\uff34\050\uff34\051\uff34\052" +
    "\uff34\053\uff34\054\uff34\055\uff34\056\uff34\057\uff34\060\uff34" +
    "\061\uff34\062\uff34\001\002\000\136\004\uff5b\005\uff5b\006" +
    "\uff5b\007\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b\014\uff5b" +
    "\015\uff5b\016\uff5b\017\uff5b\020\uff5b\021\uff5b\023\uff5b\024" +
    "\uff5b\025\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b\032\uff5b" +
    "\033\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b\040\uff5b\041" +
    "\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046\uff5b\047\uff5b" +
    "\050\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b\055\uff5b\056" +
    "\uff5b\057\uff5b\060\uff5b\061\uff5b\062\uff5b\001\002\000\136" +
    "\004\uff4d\005\uff4d\006\uff4d\007\uff4d\010\uff4d\011\uff4d\012" +
    "\uff4d\013\uff4d\014\uff4d\015\uff4d\016\uff4d\017\uff4d\020\uff4d" +
    "\021\uff4d\023\uff4d\024\uff4d\025\uff4d\026\uff4d\027\uff4d\030" +
    "\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035\uff4d\036\uff4d" +
    "\037\uff4d\040\uff4d\041\uff4d\042\uff4d\043\uff4d\044\uff4d\045" +
    "\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d\052\uff4d\053\uff4d" +
    "\054\uff4d\055\uff4d\056\uff4d\057\uff4d\060\uff4d\061\uff4d\062" +
    "\uff4d\001\002\000\136\004\uff58\005\uff58\006\uff58\007\uff58" +
    "\010\uff58\011\uff58\012\uff58\013\uff58\014\uff58\015\uff58\016" +
    "\uff58\017\uff58\020\uff58\021\uff58\023\uff58\024\uff58\025\uff58" +
    "\026\uff58\027\uff58\030\uff58\031\uff58\032\uff58\033\uff58\034" +
    "\uff58\035\uff58\036\uff58\037\uff58\040\uff58\041\uff58\042\uff58" +
    "\043\uff58\044\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051" +
    "\uff58\052\uff58\053\uff58\054\uff58\055\uff58\056\uff58\057\uff58" +
    "\060\uff58\061\uff58\062\uff58\001\002\000\136\004\uff5c\005" +
    "\uff5c\006\uff5c\007\uff5c\010\uff5c\011\uff5c\012\uff5c\013\uff5c" +
    "\014\uff5c\015\uff5c\016\uff5c\017\uff5c\020\uff5c\021\uff5c\023" +
    "\uff5c\024\uff5c\025\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c" +
    "\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c\040" +
    "\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c" +
    "\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053\uff5c\054\uff5c\055" +
    "\uff5c\056\uff5c\057\uff5c\060\uff5c\061\uff5c\062\uff5c\001\002" +
    "\000\136\004\uff38\005\uff38\006\uff38\007\uff38\010\uff38\011" +
    "\uff38\012\uff38\013\uff38\014\uff38\015\uff38\016\uff38\017\uff38" +
    "\020\uff38\021\uff38\023\uff38\024\uff38\025\uff38\026\uff38\027" +
    "\uff38\030\uff38\031\uff38\032\uff38\033\uff38\034\uff38\035\uff38" +
    "\036\uff38\037\uff38\040\uff38\041\uff38\042\uff38\043\uff38\044" +
    "\uff38\045\uff38\046\uff38\047\uff38\050\uff38\051\uff38\052\uff38" +
    "\053\uff38\054\uff38\055\uff38\056\uff38\057\uff38\060\uff38\061" +
    "\uff38\062\uff38\001\002\000\136\004\uff4a\005\uff4a\006\uff4a" +
    "\007\uff4a\010\uff4a\011\uff4a\012\uff4a\013\uff4a\014\uff4a\015" +
    "\uff4a\016\uff4a\017\uff4a\020\uff4a\021\uff4a\023\uff4a\024\uff4a" +
    "\025\uff4a\026\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033" +
    "\uff4a\034\uff4a\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a" +
    "\042\uff4a\043\uff4a\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050" +
    "\uff4a\051\uff4a\052\uff4a\053\uff4a\054\uff4a\055\uff4a\056\uff4a" +
    "\057\uff4a\060\uff4a\061\uff4a\062\uff4a\001\002\000\136\004" +
    "\uff36\005\uff36\006\uff36\007\uff36\010\uff36\011\uff36\012\uff36" +
    "\013\uff36\014\uff36\015\uff36\016\uff36\017\uff36\020\uff36\021" +
    "\uff36\023\uff36\024\uff36\025\uff36\026\uff36\027\uff36\030\uff36" +
    "\031\uff36\032\uff36\033\uff36\034\uff36\035\uff36\036\uff36\037" +
    "\uff36\040\uff36\041\uff36\042\uff36\043\uff36\044\uff36\045\uff36" +
    "\046\uff36\047\uff36\050\uff36\051\uff36\052\uff36\053\uff36\054" +
    "\uff36\055\uff36\056\uff36\057\uff36\060\uff36\061\uff36\062\uff36" +
    "\001\002\000\136\004\uff4c\005\uff4c\006\uff4c\007\uff4c\010" +
    "\uff4c\011\uff4c\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c" +
    "\017\uff4c\020\uff4c\021\uff4c\023\uff4c\024\uff4c\025\uff4c\026" +
    "\uff4c\027\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c" +
    "\035\uff4c\036\uff4c\037\uff4c\040\uff4c\041\uff4c\042\uff4c\043" +
    "\uff4c\044\uff4c\045\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c" +
    "\052\uff4c\053\uff4c\054\uff4c\055\uff4c\056\uff4c\057\uff4c\060" +
    "\uff4c\061\uff4c\062\uff4c\001\002\000\136\004\uff48\005\uff48" +
    "\006\uff48\007\uff48\010\uff48\011\uff48\012\uff48\013\uff48\014" +
    "\uff48\015\uff48\016\uff48\017\uff48\020\uff48\021\uff48\023\uff48" +
    "\024\uff48\025\uff48\026\uff48\027\uff48\030\uff48\031\uff48\032" +
    "\uff48\033\uff48\034\uff48\035\uff48\036\uff48\037\uff48\040\uff48" +
    "\041\uff48\042\uff48\043\uff48\044\uff48\045\uff48\046\uff48\047" +
    "\uff48\050\uff48\051\uff48\052\uff48\053\uff48\054\uff48\055\uff48" +
    "\056\uff48\057\uff48\060\uff48\061\uff48\062\uff48\001\002\000" +
    "\136\004\uff39\005\uff39\006\uff39\007\uff39\010\uff39\011\uff39" +
    "\012\uff39\013\uff39\014\uff39\015\uff39\016\uff39\017\uff39\020" +
    "\uff39\021\uff39\023\uff39\024\uff39\025\uff39\026\uff39\027\uff39" +
    "\030\uff39\031\uff39\032\uff39\033\uff39\034\uff39\035\uff39\036" +
    "\uff39\037\uff39\040\uff39\041\uff39\042\uff39\043\uff39\044\uff39" +
    "\045\uff39\046\uff39\047\uff39\050\uff39\051\uff39\052\uff39\053" +
    "\uff39\054\uff39\055\uff39\056\uff39\057\uff39\060\uff39\061\uff39" +
    "\062\uff39\001\002\000\136\004\uff5a\005\uff5a\006\uff5a\007" +
    "\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a\014\uff5a\015\uff5a" +
    "\016\uff5a\017\uff5a\020\uff5a\021\uff5a\023\uff5a\024\uff5a\025" +
    "\uff5a\026\uff5a\027\uff5a\030\uff5a\031\uff5a\032\uff5a\033\uff5a" +
    "\034\uff5a\035\uff5a\036\uff5a\037\uff5a\040\uff5a\041\uff5a\042" +
    "\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a\047\uff5a\050\uff5a" +
    "\051\uff5a\052\uff5a\053\uff5a\054\uff5a\055\uff5a\056\uff5a\057" +
    "\uff5a\060\uff5a\061\uff5a\062\uff5a\001\002\000\136\004\uff5d" +
    "\005\uff5d\006\uff5d\007\uff5d\010\uff5d\011\uff5d\012\uff5d\013" +
    "\uff5d\014\uff5d\015\uff5d\016\uff5d\017\uff5d\020\uff5d\021\uff5d" +
    "\023\uff5d\024\uff5d\025\uff5d\026\uff5d\027\uff5d\030\uff5d\031" +
    "\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d\036\uff5d\037\uff5d" +
    "\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d\046" +
    "\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d\053\uff5d\054\uff5d" +
    "\055\uff5d\056\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d\001" +
    "\002\000\136\004\uff46\005\uff46\006\uff46\007\uff46\010\uff46" +
    "\011\uff46\012\uff46\013\uff46\014\uff46\015\uff46\016\uff46\017" +
    "\uff46\020\uff46\021\uff46\023\uff46\024\uff46\025\uff46\026\uff46" +
    "\027\uff46\030\uff46\031\uff46\032\uff46\033\uff46\034\uff46\035" +
    "\uff46\036\uff46\037\uff46\040\uff46\041\uff46\042\uff46\043\uff46" +
    "\044\uff46\045\uff46\046\uff46\047\uff46\050\uff46\051\uff46\052" +
    "\uff46\053\uff46\054\uff46\055\uff46\056\uff46\057\uff46\060\uff46" +
    "\061\uff46\062\uff46\001\002\000\136\004\uff44\005\uff44\006" +
    "\uff44\007\uff44\010\uff44\011\uff44\012\uff44\013\uff44\014\uff44" +
    "\015\uff44\016\uff44\017\uff44\020\uff44\021\uff44\023\uff44\024" +
    "\uff44\025\uff44\026\uff44\027\uff44\030\uff44\031\uff44\032\uff44" +
    "\033\uff44\034\uff44\035\uff44\036\uff44\037\uff44\040\uff44\041" +
    "\uff44\042\uff44\043\uff44\044\uff44\045\uff44\046\uff44\047\uff44" +
    "\050\uff44\051\uff44\052\uff44\053\uff44\054\uff44\055\uff44\056" +
    "\uff44\057\uff44\060\uff44\061\uff44\062\uff44\001\002\000\136" +
    "\004\uff33\005\uff33\006\uff33\007\uff33\010\uff33\011\uff33\012" +
    "\uff33\013\uff33\014\uff33\015\uff33\016\uff33\017\uff33\020\uff33" +
    "\021\uff33\023\uff33\024\uff33\025\uff33\026\uff33\027\uff33\030" +
    "\uff33\031\uff33\032\uff33\033\uff33\034\uff33\035\uff33\036\uff33" +
    "\037\uff33\040\uff33\041\uff33\042\uff33\043\uff33\044\uff33\045" +
    "\uff33\046\uff33\047\uff33\050\uff33\051\uff33\052\uff33\053\uff33" +
    "\054\uff33\055\uff33\056\uff33\057\uff33\060\uff33\061\uff33\062" +
    "\uff33\001\002\000\136\004\uff56\005\uff56\006\uff56\007\uff56" +
    "\010\uff56\011\uff56\012\uff56\013\uff56\014\uff56\015\uff56\016" +
    "\uff56\017\uff56\020\uff56\021\uff56\023\uff56\024\uff56\025\uff56" +
    "\026\uff56\027\uff56\030\uff56\031\uff56\032\uff56\033\uff56\034" +
    "\uff56\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56\042\uff56" +
    "\043\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050\uff56\051" +
    "\uff56\052\uff56\053\uff56\054\uff56\055\uff56\056\uff56\057\uff56" +
    "\060\uff56\061\uff56\062\uff56\001\002\000\136\004\uff40\005" +
    "\uff40\006\uff40\007\uff40\010\uff40\011\uff40\012\uff40\013\uff40" +
    "\014\uff40\015\uff40\016\uff40\017\uff40\020\uff40\021\uff40\023" +
    "\uff40\024\uff40\025\uff40\026\uff40\027\uff40\030\uff40\031\uff40" +
    "\032\uff40\033\uff40\034\uff40\035\uff40\036\uff40\037\uff40\040" +
    "\uff40\041\uff40\042\uff40\043\uff40\044\uff40\045\uff40\046\uff40" +
    "\047\uff40\050\uff40\051\uff40\052\uff40\053\uff40\054\uff40\055" +
    "\uff40\056\uff40\057\uff40\060\uff40\061\uff40\062\uff40\001\002" +
    "\000\136\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57\011" +
    "\uff57\012\uff57\013\uff57\014\uff57\015\uff57\016\uff57\017\uff57" +
    "\020\uff57\021\uff57\023\uff57\024\uff57\025\uff57\026\uff57\027" +
    "\uff57\030\uff57\031\uff57\032\uff57\033\uff57\034\uff57\035\uff57" +
    "\036\uff57\037\uff57\040\uff57\041\uff57\042\uff57\043\uff57\044" +
    "\uff57\045\uff57\046\uff57\047\uff57\050\uff57\051\uff57\052\uff57" +
    "\053\uff57\054\uff57\055\uff57\056\uff57\057\uff57\060\uff57\061" +
    "\uff57\062\uff57\001\002\000\136\004\uff3a\005\uff3a\006\uff3a" +
    "\007\uff3a\010\uff3a\011\uff3a\012\uff3a\013\uff3a\014\uff3a\015" +
    "\uff3a\016\uff3a\017\uff3a\020\uff3a\021\uff3a\023\uff3a\024\uff3a" +
    "\025\uff3a\026\uff3a\027\uff3a\030\uff3a\031\uff3a\032\uff3a\033" +
    "\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\040\uff3a\041\uff3a" +
    "\042\uff3a\043\uff3a\044\uff3a\045\uff3a\046\uff3a\047\uff3a\050" +
    "\uff3a\051\uff3a\052\uff3a\053\uff3a\054\uff3a\055\uff3a\056\uff3a" +
    "\057\uff3a\060\uff3a\061\uff3a\062\uff3a\001\002\000\136\004" +
    "\uff49\005\uff49\006\uff49\007\uff49\010\uff49\011\uff49\012\uff49" +
    "\013\uff49\014\uff49\015\uff49\016\uff49\017\uff49\020\uff49\021" +
    "\uff49\023\uff49\024\uff49\025\uff49\026\uff49\027\uff49\030\uff49" +
    "\031\uff49\032\uff49\033\uff49\034\uff49\035\uff49\036\uff49\037" +
    "\uff49\040\uff49\041\uff49\042\uff49\043\uff49\044\uff49\045\uff49" +
    "\046\uff49\047\uff49\050\uff49\051\uff49\052\uff49\053\uff49\054" +
    "\uff49\055\uff49\056\uff49\057\uff49\060\uff49\061\uff49\062\uff49" +
    "\001\002\000\136\004\uff47\005\uff47\006\uff47\007\uff47\010" +
    "\uff47\011\uff47\012\uff47\013\uff47\014\uff47\015\uff47\016\uff47" +
    "\017\uff47\020\uff47\021\uff47\023\uff47\024\uff47\025\uff47\026" +
    "\uff47\027\uff47\030\uff47\031\uff47\032\uff47\033\uff47\034\uff47" +
    "\035\uff47\036\uff47\037\uff47\040\uff47\041\uff47\042\uff47\043" +
    "\uff47\044\uff47\045\uff47\046\uff47\047\uff47\050\uff47\051\uff47" +
    "\052\uff47\053\uff47\054\uff47\055\uff47\056\uff47\057\uff47\060" +
    "\uff47\061\uff47\062\uff47\001\002\000\136\004\uff50\005\uff50" +
    "\006\uff50\007\uff50\010\uff50\011\uff50\012\uff50\013\uff50\014" +
    "\uff50\015\uff50\016\uff50\017\uff50\020\uff50\021\uff50\023\uff50" +
    "\024\uff50\025\uff50\026\uff50\027\uff50\030\uff50\031\uff50\032" +
    "\uff50\033\uff50\034\uff50\035\uff50\036\uff50\037\uff50\040\uff50" +
    "\041\uff50\042\uff50\043\uff50\044\uff50\045\uff50\046\uff50\047" +
    "\uff50\050\uff50\051\uff50\052\uff50\053\uff50\054\uff50\055\uff50" +
    "\056\uff50\057\uff50\060\uff50\061\uff50\062\uff50\001\002\000" +
    "\136\004\uff35\005\uff35\006\uff35\007\uff35\010\uff35\011\uff35" +
    "\012\uff35\013\uff35\014\uff35\015\uff35\016\uff35\017\uff35\020" +
    "\uff35\021\uff35\023\uff35\024\uff35\025\uff35\026\uff35\027\uff35" +
    "\030\uff35\031\uff35\032\uff35\033\uff35\034\uff35\035\uff35\036" +
    "\uff35\037\uff35\040\uff35\041\uff35\042\uff35\043\uff35\044\uff35" +
    "\045\uff35\046\uff35\047\uff35\050\uff35\051\uff35\052\uff35\053" +
    "\uff35\054\uff35\055\uff35\056\uff35\057\uff35\060\uff35\061\uff35" +
    "\062\uff35\001\002\000\136\004\uff3d\005\uff3d\006\uff3d\007" +
    "\uff3d\010\uff3d\011\uff3d\012\uff3d\013\uff3d\014\uff3d\015\uff3d" +
    "\016\uff3d\017\uff3d\020\uff3d\021\uff3d\023\uff3d\024\uff3d\025" +
    "\uff3d\026\uff3d\027\uff3d\030\uff3d\031\uff3d\032\uff3d\033\uff3d" +
    "\034\uff3d\035\uff3d\036\uff3d\037\uff3d\040\uff3d\041\uff3d\042" +
    "\uff3d\043\uff3d\044\uff3d\045\uff3d\046\uff3d\047\uff3d\050\uff3d" +
    "\051\uff3d\052\uff3d\053\uff3d\054\uff3d\055\uff3d\056\uff3d\057" +
    "\uff3d\060\uff3d\061\uff3d\062\uff3d\001\002\000\136\004\uff59" +
    "\005\uff59\006\uff59\007\uff59\010\uff59\011\uff59\012\uff59\013" +
    "\uff59\014\uff59\015\uff59\016\uff59\017\uff59\020\uff59\021\uff59" +
    "\023\uff59\024\uff59\025\uff59\026\uff59\027\uff59\030\uff59\031" +
    "\uff59\032\uff59\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59" +
    "\040\uff59\041\uff59\042\uff59\043\uff59\044\uff59\045\uff59\046" +
    "\uff59\047\uff59\050\uff59\051\uff59\052\uff59\053\uff59\054\uff59" +
    "\055\uff59\056\uff59\057\uff59\060\uff59\061\uff59\062\uff59\001" +
    "\002\000\136\004\uff45\005\uff45\006\uff45\007\uff45\010\uff45" +
    "\011\uff45\012\uff45\013\uff45\014\uff45\015\uff45\016\uff45\017" +
    "\uff45\020\uff45\021\uff45\023\uff45\024\uff45\025\uff45\026\uff45" +
    "\027\uff45\030\uff45\031\uff45\032\uff45\033\uff45\034\uff45\035" +
    "\uff45\036\uff45\037\uff45\040\uff45\041\uff45\042\uff45\043\uff45" +
    "\044\uff45\045\uff45\046\uff45\047\uff45\050\uff45\051\uff45\052" +
    "\uff45\053\uff45\054\uff45\055\uff45\056\uff45\057\uff45\060\uff45" +
    "\061\uff45\062\uff45\001\002\000\136\004\uff32\005\uff32\006" +
    "\uff32\007\uff32\010\uff32\011\uff32\012\uff32\013\uff32\014\uff32" +
    "\015\uff32\016\uff32\017\uff32\020\uff32\021\uff32\023\uff32\024" +
    "\uff32\025\uff32\026\uff32\027\uff32\030\uff32\031\uff32\032\uff32" +
    "\033\uff32\034\uff32\035\uff32\036\uff32\037\uff32\040\uff32\041" +
    "\uff32\042\uff32\043\uff32\044\uff32\045\uff32\046\uff32\047\uff32" +
    "\050\uff32\051\uff32\052\uff32\053\uff32\054\uff32\055\uff32\056" +
    "\uff32\057\uff32\060\uff32\061\uff32\062\uff32\001\002\000\136" +
    "\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f\011\uff4f\012" +
    "\uff4f\013\uff4f\014\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f" +
    "\021\uff4f\023\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f\030" +
    "\uff4f\031\uff4f\032\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f" +
    "\037\uff4f\040\uff4f\041\uff4f\042\uff4f\043\uff4f\044\uff4f\045" +
    "\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f\052\uff4f\053\uff4f" +
    "\054\uff4f\055\uff4f\056\uff4f\057\uff4f\060\uff4f\061\uff4f\062" +
    "\uff4f\001\002\000\136\004\uff52\005\uff52\006\uff52\007\uff52" +
    "\010\uff52\011\uff52\012\uff52\013\uff52\014\uff52\015\uff52\016" +
    "\uff52\017\uff52\020\uff52\021\uff52\023\uff52\024\uff52\025\uff52" +
    "\026\uff52\027\uff52\030\uff52\031\uff52\032\uff52\033\uff52\034" +
    "\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042\uff52" +
    "\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52\051" +
    "\uff52\052\uff52\053\uff52\054\uff52\055\uff52\056\uff52\057\uff52" +
    "\060\uff52\061\uff52\062\uff52\001\002\000\136\004\uff53\005" +
    "\uff53\006\uff53\007\uff53\010\uff53\011\uff53\012\uff53\013\uff53" +
    "\014\uff53\015\uff53\016\uff53\017\uff53\020\uff53\021\uff53\023" +
    "\uff53\024\uff53\025\uff53\026\uff53\027\uff53\030\uff53\031\uff53" +
    "\032\uff53\033\uff53\034\uff53\035\uff53\036\uff53\037\uff53\040" +
    "\uff53\041\uff53\042\uff53\043\uff53\044\uff53\045\uff53\046\uff53" +
    "\047\uff53\050\uff53\051\uff53\052\uff53\053\uff53\054\uff53\055" +
    "\uff53\056\uff53\057\uff53\060\uff53\061\uff53\062\uff53\001\002" +
    "\000\136\004\uff42\005\uff42\006\uff42\007\uff42\010\uff42\011" +
    "\uff42\012\uff42\013\uff42\014\uff42\015\uff42\016\uff42\017\uff42" +
    "\020\uff42\021\uff42\023\uff42\024\uff42\025\uff42\026\uff42\027" +
    "\uff42\030\uff42\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42" +
    "\036\uff42\037\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044" +
    "\uff42\045\uff42\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42" +
    "\053\uff42\054\uff42\055\uff42\056\uff42\057\uff42\060\uff42\061" +
    "\uff42\062\uff42\001\002\000\010\002\uffdc\040\uffdc\052\uffdc" +
    "\001\002\000\010\002\uffde\040\uffde\052\uffde\001\002\000" +
    "\140\004\236\005\262\006\251\007\246\010\260\011\276" +
    "\012\250\013\267\014\265\015\235\016\234\017\304\020" +
    "\303\021\231\023\273\024\302\025\240\026\247\027\255" +
    "\030\243\031\253\032\271\033\257\034\272\035\261\036" +
    "\300\037\263\040\230\041\305\042\242\043\266\044\232" +
    "\045\244\046\275\047\233\050\237\051\270\052\256\053" +
    "\245\054\264\055\301\056\254\057\252\060\274\061\241" +
    "\062\277\065\u0150\001\002\000\020\002\uff8e\040\uff8e\052" +
    "\uff8e\060\uff8e\061\uff8e\063\uff8e\064\uff8e\001\002\000\006" +
    "\002\ufffc\052\ufffc\001\002\000\014\007\073\013\076\023" +
    "\077\053\074\054\067\001\002\000\004\062\023\001\002" +
    "\000\016\006\107\007\110\010\105\011\111\012\106\062" +
    "\ufff5\001\002\000\010\002\ufff7\052\ufff7\062\026\001\002" +
    "\000\010\002\uffe1\040\uffe1\052\uffe1\001\002\000\010\002" +
    "\uffe0\040\uffe0\052\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\004\002\003\001\001\000\004\003\006\001" +
    "\001\000\004\057\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\012\001\001\000\002\001\001\000\004\050\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\023" +
    "\001\001\000\002\001\001\000\004\060\024\001\001\000" +
    "\032\006\030\013\027\014\026\015\036\017\042\020\033" +
    "\021\045\027\034\031\043\032\041\033\037\051\044\001" +
    "\001\000\002\001\001\000\032\006\u0156\013\027\014\026" +
    "\015\036\017\042\020\033\021\045\027\034\031\043\032" +
    "\041\033\037\051\044\001\001\000\032\006\u0155\013\027" +
    "\014\026\015\036\017\042\020\033\021\045\027\034\031" +
    "\043\032\041\033\037\051\044\001\001\000\004\004\u0150" +
    "\001\001\000\002\001\001\000\004\034\u014e\001\001\000" +
    "\032\006\u014d\013\027\014\026\015\036\017\042\020\033" +
    "\021\045\027\034\031\043\032\041\033\037\051\044\001" +
    "\001\000\032\006\u014c\013\027\014\026\015\036\017\042" +
    "\020\033\021\045\027\034\031\043\032\041\033\037\051" +
    "\044\001\001\000\004\037\u011d\001\001\000\032\006\u011c" +
    "\013\027\014\026\015\036\017\042\020\033\021\045\027" +
    "\034\031\043\032\041\033\037\051\044\001\001\000\032" +
    "\006\u011b\013\027\014\026\015\036\017\042\020\033\021" +
    "\045\027\034\031\043\032\041\033\037\051\044\001\001" +
    "\000\004\030\u0119\001\001\000\032\006\u0118\013\027\014" +
    "\026\015\036\017\042\020\033\021\045\027\034\031\043" +
    "\032\041\033\037\051\044\001\001\000\032\006\u0117\013" +
    "\027\014\026\015\036\017\042\020\033\021\045\027\034" +
    "\031\043\032\041\033\037\051\044\001\001\000\032\006" +
    "\u0116\013\027\014\026\015\036\017\042\020\033\021\045" +
    "\027\034\031\043\032\041\033\037\051\044\001\001\000" +
    "\006\036\051\045\061\001\001\000\032\006\046\013\027" +
    "\014\026\015\036\017\042\020\033\021\045\027\034\031" +
    "\043\032\041\033\037\051\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\041\077\042\354\055\071\056\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\153\001\001\000" +
    "\004\064\065\001\001\000\012\041\077\042\074\055\071" +
    "\056\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\041\147\055\071\056\067\001\001\000\004\040\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\117\001\001\000\006\055\102\056\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\055\115" +
    "\056\067\001\001\000\006\055\114\056\067\001\001\000" +
    "\006\055\113\056\067\001\001\000\006\055\112\056\067" +
    "\001\001\000\006\055\111\056\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\041\077\042\125\055\071\056" +
    "\067\001\001\000\002\001\001\000\004\063\121\001\001" +
    "\000\012\041\077\042\122\055\071\056\067\001\001\000" +
    "\002\001\001\000\004\030\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\055\145\056\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\041\150\055\151" +
    "\056\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\134\001\001\000\002\001\001\000\012\041\077" +
    "\042\154\055\071\056\067\001\001\000\004\070\155\001" +
    "\001\000\002\001\001\000\004\030\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\055\163\056\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\165" +
    "\001\001\000\002\001\001\000\010\052\167\055\170\056" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\055\172\056\067\001\001\000\002\001\001\000\006\055" +
    "\174\056\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\177\001\001\000\002\001\001\000\010\044" +
    "\202\055\201\056\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\055\204\056\067\001\001\000\006\030" +
    "\207\043\206\001\001\000\006\055\210\056\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\207\043" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\214\001\001\000\002\001\001\000\006\023\217\054" +
    "\221\001\001\000\004\030\353\001\001\000\006\022\320" +
    "\053\347\001\001\000\002\001\001\000\006\022\320\053" +
    "\321\001\001\000\002\001\001\000\004\034\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\313\001\001\000\002\001\001\000\004\025\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\343\054\344\001\001\000\004\026\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\337\001\001\000\002\001\001\000\004\025\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\320" +
    "\053\346\001\001\000\006\022\320\053\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\350\001\001" +
    "\000\002\001\001\000\004\030\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\356" +
    "\001\001\000\002\001\001\000\010\036\366\055\367\056" +
    "\067\001\001\000\002\001\001\000\004\046\363\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\365\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\370" +
    "\001\001\000\006\010\371\030\374\001\001\000\002\001" +
    "\001\000\006\055\u0102\056\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\055\377\056" +
    "\067\001\001\000\004\062\u0100\001\001\000\006\010\u0101" +
    "\030\374\001\001\000\002\001\001\000\006\010\u0103\030" +
    "\374\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\u010b\001\001\000\004\034\u0107\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\u010a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\u0113\001\001\000\004\034\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\u0112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\u011a\013\027\014\026\015\036\017\042" +
    "\020\033\021\045\027\034\031\043\032\041\033\037\051" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\u011e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\u0152\055\u0153\056\067\001" +
    "\001\000\004\030\u0154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPYTHON$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPYTHON$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPYTHON$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public TablaSimbolos tabla;

    //tabs de guia para las lines de instrucciones
    public ArrayList<Integer> instrucciones = new ArrayList<>();
    //tabs de guia que agarran el valor en la primer linea luego de una instruccion
    public ArrayList<Integer> lineasGuias = new ArrayList<>();
    public ArrayList<String> tipoInstruccion = new ArrayList<>();
    public static int jerarquia = 0;
    public static Boolean primerLinea = null;
    public OperacionesPY op = new OperacionesPY();
    public VerifPY verif = new VerifPY();

    /*MANEJO CUARTETOS*/
    public ManejoPython manejoPY = new ManejoPython();
    public static String aux2 = "", aux3 = "", etInst = "";
    public static boolean inst = false;
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();

    public SintaxPYTHON(AnalizadorLexico2 lex, TablaSimbolos tabla){
        super(lex);
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");        
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxPYTHON$actions {
  private final SintaxPYTHON parser;

  /** Constructor */
  CUP$SintaxPYTHON$actions(SintaxPYTHON parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxPYTHON$do_action(
    int                        CUP$SintaxPYTHON$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPYTHON$parser,
    java.util.Stack            CUP$SintaxPYTHON$stack,
    int                        CUP$SintaxPYTHON$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPYTHON$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPYTHON$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TEXTO3 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TEXTO3 ::= TEXTO3 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TEXTO3 ::= TEXTO3 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TEXTO3 ::= TEXTO3 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TEXTO3 ::= TEXTO3 tab 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a + "\t"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TEXTO3 ::= TEXTO3 condEnd 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TEXTO3 ::= TEXTO3 condPass 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TEXTO3 ::= TEXTO3 condDel 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TEXTO3 ::= TEXTO3 condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TEXTO3 ::= TEXTO3 floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TEXTO3 ::= TEXTO3 charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TEXTO3 ::= TEXTO3 intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TEXTO3 ::= TEXTO3 condElif 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TEXTO3 ::= TEXTO3 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TEXTO3 ::= TEXTO3 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TEXTO3 ::= TEXTO3 condRange 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TEXTO3 ::= TEXTO3 condIn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TEXTO3 ::= TEXTO3 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // TEXTO3 ::= TEXTO3 condReturn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // TEXTO3 ::= TEXTO3 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // TEXTO3 ::= TEXTO3 f 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // TEXTO3 ::= TEXTO3 mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TEXTO3 ::= TEXTO3 not 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TEXTO3 ::= TEXTO3 or 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TEXTO3 ::= TEXTO3 and 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TEXTO3 ::= TEXTO3 mayorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TEXTO3 ::= TEXTO3 menorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TEXTO3 ::= TEXTO3 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TEXTO3 ::= TEXTO3 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TEXTO3 ::= TEXTO3 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TEXTO3 ::= TEXTO3 admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TEXTO3 ::= TEXTO3 comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TEXTO3 ::= TEXTO3 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TEXTO3 ::= TEXTO3 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TEXTO3 ::= TEXTO3 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TEXTO3 ::= TEXTO3 llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TEXTO3 ::= TEXTO3 llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TEXTO3 ::= TEXTO3 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TEXTO3 ::= TEXTO3 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TEXTO3 ::= TEXTO3 porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TEXTO3 ::= TEXTO3 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TEXTO3 ::= TEXTO3 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TEXTO3 ::= TEXTO3 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TEXTO3 ::= TEXTO3 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TEXTO3 ::= TEXTO3 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TEXTO3 ::= TEXTO3 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TEXTO2 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TEXTO2 ::= TEXTO2 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TEXTO2 ::= TEXTO2 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TEXTO2 ::= TEXTO2 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TEXTO2 ::= TEXTO2 enter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a + "\n"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TEXTO2 ::= TEXTO2 tab 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a + "\t"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TEXTO2 ::= TEXTO2 condEnd 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TEXTO2 ::= TEXTO2 condPass 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TEXTO2 ::= TEXTO2 condDel 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TEXTO2 ::= TEXTO2 condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TEXTO2 ::= TEXTO2 floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TEXTO2 ::= TEXTO2 charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TEXTO2 ::= TEXTO2 intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TEXTO2 ::= TEXTO2 condElif 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TEXTO2 ::= TEXTO2 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TEXTO2 ::= TEXTO2 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // TEXTO2 ::= TEXTO2 condRange 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TEXTO2 ::= TEXTO2 condIn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TEXTO2 ::= TEXTO2 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TEXTO2 ::= TEXTO2 condReturn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TEXTO2 ::= TEXTO2 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TEXTO2 ::= TEXTO2 f 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // TEXTO2 ::= TEXTO2 mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TEXTO2 ::= TEXTO2 not 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TEXTO2 ::= TEXTO2 or 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TEXTO2 ::= TEXTO2 and 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TEXTO2 ::= TEXTO2 mayorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TEXTO2 ::= TEXTO2 menorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TEXTO2 ::= TEXTO2 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TEXTO2 ::= TEXTO2 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TEXTO2 ::= TEXTO2 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TEXTO2 ::= TEXTO2 admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TEXTO2 ::= TEXTO2 comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TEXTO2 ::= TEXTO2 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TEXTO2 ::= TEXTO2 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TEXTO2 ::= TEXTO2 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TEXTO2 ::= TEXTO2 llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TEXTO2 ::= TEXTO2 llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TEXTO2 ::= TEXTO2 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TEXTO2 ::= TEXTO2 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TEXTO2 ::= TEXTO2 porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TEXTO2 ::= TEXTO2 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TEXTO2 ::= TEXTO2 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TEXTO2 ::= TEXTO2 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TEXTO2 ::= TEXTO2 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TEXTO2 ::= TEXTO2 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TEXTO2 ::= TEXTO2 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COMENTARIO_B ::= comentario_b TEXTO2 comentario_c 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",25, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COMENTARIO_A ::= comentario_a TEXTO3 ENTER 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("COMENTARIO_A",24, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TAB ::= tab 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TAB",39, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TAB ::= TAB tab 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a+1; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TAB",39, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ENTER ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER",22, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ENTER ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER",22, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VAR_MENSAJE ::= numero 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=true; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",42, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VAR_MENSAJE ::= id 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=parser.verif.verifVarMensaje(parser.tabla.getObPython(), a.toString(), parser.jerarquia); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",42, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // END ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("END",20, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // END ::= condEnd igual f comilla llave_a id ID llave_b ADM comilla 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("END",20, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // END ::= condEnd igual comilla comilla 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("END",20, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ADM ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ADM",19, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ADM ::= admiracion 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ADM",19, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ID ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ID ::= coma id ID 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TEXTO ::= comilla TEXTO2 comilla 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO",17, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TEXTO ::= f comilla llave_a id ID llave_b ADM comilla 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO",17, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONC ::= mas 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CONC",16, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONC ::= coma 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CONC",16, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RESTO_MENSAJE ::= 
            {
              Boolean RESULT =null;
		 RESULT=true; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",41, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RESTO_MENSAJE ::= CONC TEXTO RESTO_MENSAJE 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=true; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",41, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RESTO_MENSAJE ::= CONC VAR_MENSAJE RESTO_MENSAJE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 if(a && b){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",41, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MENSAJES ::= TAB mensaje parentesis_a parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("MENSAJES",15, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MENSAJES ::= TAB mensaje parentesis_a TEXTO RESTO_MENSAJE END parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); parser.verif.verifMensaje(false, b, "tipo2"); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("MENSAJES",15, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MENSAJES ::= TAB mensaje parentesis_a VAR_MENSAJE RESTO_MENSAJE END parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); parser.verif.verifMensaje(b, c, "tipo1"); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("MENSAJES",15, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO_INPUT ::= floatInput 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO_INPUT ::= charInput 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO_INPUT ::= intInput 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LECTURA_DATOS ::= TAB TIPO_INPUT parentesis_a parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LECTURA_DATOS ::= TAB TIPO_INPUT parentesis_a comilla TEXTO2 comilla parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LECTURA_DATOS ::= TAB id igual TIPO_INPUT parentesis_a parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  String tipoVar = parser.op.buscarVariable(parser.tabla.getObPython(), b.toString(), parser.jerarquia); parser.verif.verifVarInput(parser.tabla.getObPython(), tipoVar, c, b.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LECTURA_DATOS ::= TAB id igual TIPO_INPUT parentesis_a comilla TEXTO2 comilla parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); String tipoVar = parser.op.buscarVariable(parser.tabla.getObPython(), b.toString(), parser.jerarquia);  parser.verif.verifVarInput(parser.tabla.getObPython(), tipoVar, c, b.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BORRAR ::= TAB condDel id ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  parser.op.borrarVariable(parser.tabla.getObPython(), b.toString(), parser.jerarquia); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("BORRAR",14, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELSE ::= TAB condElif NT$8 EXT NT$9 dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ELSE",13, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 parser.manejoPY.primerChequeoIf(parser.tabla.getObPython(), h); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$9",54, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); parser.tipoInstruccion.add("ELSEIF");    parser.pilaFalsas.add(new ArrayList<>());  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$8",53, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELSE ::= TAB condElse NT$7 dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ELSE",13, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion);    parser.tipoInstruccion.add("ELSE");   
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$7",52, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF ::= TAB condIf NT$5 EXT NT$6 dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 parser.manejoPY.primerChequeoIf(parser.tabla.getObPython(), h); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$6",51, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); parser.tipoInstruccion.add("IF");   parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= admiracion igual 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= menorIgual 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= mayorIgual 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP ::= menor 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP ::= mayor 
            {
              String RESULT =null;
		 RESULT=">"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP ::= igual igual 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDICION ::= OPERACION OP OPERACION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.agregarBooleans(parser.tabla.getObPython(), parser.pilaFalsas, a, b, c);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CONDICION",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXT ::= not CONDICION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXT ::= not parentesis_a CONDICION parentesis_b 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXT ::= CONDICION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXT ::= EXT or NT$4 EXT 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 parser.manejoPY.manejoOr(parser.tabla.getObPython(), parser.pilaCuarpeta, a, b); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$4 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
 parser.aux3 = parser.aux2; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXT ::= EXT and EXT 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.manejoAnd(a, b);   
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // WHILE ::= TAB condWhile EXT dosPuntos ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas,  parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RANGE ::= OPERACION coma OPERACION coma OPERACION 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean c = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 if(a.getTipo().equals("Integer") && b.getTipo().equals("Integer") && c.getTipo().equals("Integer")){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RANGE",40, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RANGE ::= OPERACION coma OPERACION 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 if(a.getTipo().equals("Integer") && b.getTipo().equals("Integer")){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RANGE",40, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RANGE ::= OPERACION 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 if(a.getTipo().equals("Integer")){ RESULT=true; } else{ RESULT=false; } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RANGE",40, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR ::= TAB condFor id condIn condRange parentesis_a RANGE parentesis_b dosPuntos ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); parser.verif.comprobacionFor(parser.tabla.getObPython(), b.toString(), "", c, "tipo2", parser.op, parser.jerarquia); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FOR ::= TAB condFor id condIn OPERACION dosPuntos ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean c = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion);  parser.verif.comprobacionFor(parser.tabla.getObPython(), b.toString(), c.getTipo(), false, "tipo1", parser.op, parser.jerarquia); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARS4 ::= ENTER 
            {
              ArrayList<NodoBoolean> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS4",33, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARS4 ::= coma OPERACION VARS4 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 if(b!=null){ if(!a.getTipo().equals("")){ b.add(a); RESULT=b; } else { RESULT=null; } } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS4",33, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LADO2 ::= OPERACION coma OPERACION VARS4 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 if(c!=null){ if(!a.getTipo().equals("") && !b.getTipo().equals("")){ c.add(a); c.add(b); RESULT=c; } else { RESULT=null; } } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LADO2",34, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARS2 ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS2",36, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARS2 ::= coma id VARS2 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS2",36, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LADO1 ::= id coma id VARS2 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 c.add(a.toString()); c.add(b.toString()); RESULT=c; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LADO1",35, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLES2 ::= ENTER 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES2",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARIABLES2 ::= igual OPERACION VARIABLES2 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES2",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARIABLES2 ::= coma id igual OPERACION NT$3 VARIABLES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES2",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 parser.manejoPY.agregarVariable(parser.tabla.getObPython(), a.toString(), b);  parser.op.asignarVariables(parser.tabla.getObPython(), a.toString(), b.getTipo()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARIABLES3 ::= TAB LADO1 igual LADO2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);    parser.manejoPY.asignacionesMultiples(parser.tabla.getObPython(), b, c);    parser.op.asignacionesMultiples(parser.tabla.getObPython(), b, c, parser.jerarquia); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES3",23, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARIABLES3 ::= TAB id igual OPERACION NT$2 VARIABLES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean c = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		 parser.op.verificarTabs(parser.tabla.getObPython(), parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES3",23, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean c = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 parser.manejoPY.agregarVariable(parser.tabla.getObPython(), b.toString(), c);  parser.op.asignarVariables(parser.tabla.getObPython(), b.toString(), c.getTipo()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUERPO_METODO ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPO_METODO ::= COMENTARIO_A CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO_METODO ::= COMENTARIO_B CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO_METODO ::= condPass ENTER CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO_METODO ::= ELSE CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_METODO ::= LECTURA_DATOS CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_METODO ::= MENSAJES CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_METODO ::= BORRAR CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_METODO ::= IF CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_METODO ::= WHILE CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_METODO ::= FOR CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_METODO ::= VARIABLES3 CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO_VAL2 ::= numero punto numero 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",27, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO_VAL2 ::= numero 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",27, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_VAL2 ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",27, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_VAL2 ::= comilla id comilla 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",27, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO_VAL ::= menos numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_VAL ::= menos numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_VAL ::= menos id 
            {
              NodoBoolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 String tip=parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia); RESULT = new NodoBoolean(tip, b.toString()+a.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_VAL ::= comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_VAL ::= numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_VAL ::= numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = new NodoBoolean("Integer", a.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_VAL ::= id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 String tip = parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia);   RESULT = new NodoBoolean(tip, a.toString());   
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERACION ::= TIPO_VAL 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERACION ::= OPERACION porcentaje OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "modulo"); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERACION ::= OPERACION div OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "div"); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERACION ::= OPERACION por OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "mult"); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPERACION ::= OPERACION menos OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "resta"); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPERACION ::= OPERACION mas OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "suma");  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT=a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RETORNO ::= OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=a.getTipo(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RETORNO",3, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RETURN ::= 
            {
              Object RESULT =null;
		 parser.op.agregarRetornoMetodo(parser.tabla.getObPython(), ""); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RETURN",2, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RETURN ::= condReturn RETORNO ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 parser.op.agregarRetornoMetodo(parser.tabla.getObPython(), a.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RETURN",2, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PARAMETROS2 ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",38, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PARAMETROS2 ::= coma id PARAMETROS2 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  b.add(a.toString()); RESULT=b; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",38, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARAMETROS ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS",37, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PARAMETROS ::= id PARAMETROS2 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS",37, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METODOS ::= condDef NT$0 id parentesis_a PARAMETROS parentesis_b dosPuntos ENTER NT$1 CUERPO_METODO RETURN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		 parser.jerarquia--; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("METODOS",1, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
 parser.op.agregarMetodo(parser.tabla.getObPython(), a.toString(), b, parser.jerarquia); parser.primerLinea=false;  parser.instrucciones.add(0); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO METODOS 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPYTHON$parser.done_parsing();
          return CUP$SintaxPYTHON$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

