
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 06 17:12:25 CST 2020
//----------------------------------------------------

package gramaticaPYTHON;

import java_cup.runtime.*;
import java.util.*;
import Operaciones.*;
import verificaciones.*;
import Tablas.*;
import manejoCuartetos.*;
import objetosApoyo.*;
import cuartetos.*;
import interfaz.*;
import manejoExe.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 06 17:12:25 CST 2020
  */
public class SintaxPYTHON extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxPYTHON() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxPYTHON(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPYTHON(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\002\002\004\000\002\036\004\000\002\002" +
    "\004\000\002\002\002\000\002\002\003\000\002\070\002" +
    "\000\002\071\002\000\002\072\002\000\002\073\002\000" +
    "\002\003\016\000\002\017\003\000\002\017\003\000\002" +
    "\064\006\000\002\005\010\000\002\065\003\000\002\065" +
    "\002\000\002\066\004\000\002\066\003\000\002\067\005" +
    "\000\002\067\002\000\002\067\003\000\002\074\002\000" +
    "\002\052\005\000\002\052\002\000\002\052\003\000\002" +
    "\075\002\000\002\053\006\000\002\053\002\000\002\053" +
    "\003\000\002\076\002\000\002\004\007\000\002\063\003" +
    "\000\002\063\003\000\002\061\005\000\002\061\005\000" +
    "\002\061\005\000\002\061\005\000\002\061\005\000\002" +
    "\061\005\000\002\061\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\004\000\002\062\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\006\000" +
    "\002\062\006\000\002\062\004\000\002\062\004\000\002" +
    "\062\006\000\002\040\005\000\002\040\003\000\002\040" +
    "\003\000\002\040\005\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\005\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\002\000\002\077\002" +
    "\000\002\100\002\000\002\033\011\000\002\033\006\000" +
    "\002\101\002\000\002\033\010\000\002\102\002\000\002" +
    "\103\002\000\002\012\011\000\002\012\005\000\002\012" +
    "\003\000\002\104\002\000\002\012\010\000\002\105\002" +
    "\000\002\012\006\000\002\106\002\000\002\107\002\000" +
    "\002\050\010\000\002\051\005\000\002\051\002\000\002" +
    "\047\006\000\002\046\005\000\002\046\003\000\002\046" +
    "\005\000\002\110\002\000\002\111\002\000\002\015\016" +
    "\000\002\055\003\000\002\055\005\000\002\055\007\000" +
    "\002\055\005\000\002\055\003\000\002\010\003\000\002" +
    "\010\004\000\002\010\003\000\002\010\004\000\002\010" +
    "\003\000\002\112\002\000\002\016\010\000\002\045\005" +
    "\000\002\113\002\000\002\045\006\000\002\045\003\000" +
    "\002\045\006\000\002\045\004\000\002\045\003\000\002" +
    "\044\005\000\002\043\004\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\004" +
    "\000\002\043\003\000\002\114\002\000\002\115\002\000" +
    "\002\020\011\000\002\116\002\000\002\022\007\000\002" +
    "\117\002\000\002\120\002\000\002\022\011\000\002\023" +
    "\006\000\002\031\012\000\002\031\011\000\002\031\010" +
    "\000\002\031\007\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\121\002\000\002\024\011\000\002" +
    "\122\002\000\002\024\010\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\123\002\000\002\056\005" +
    "\000\002\124\002\000\002\056\007\000\002\056\003\000" +
    "\002\057\004\000\002\057\002\000\002\026\005\000\002" +
    "\026\002\000\002\060\003\000\002\060\003\000\002\060" +
    "\005\000\002\060\004\000\002\060\004\000\002\060\006" +
    "\000\002\032\004\000\002\032\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\002\000\002\054\004\000\002" +
    "\054\003\000\002\034\005\000\002\035\005\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\037\004\000\002\037\004\000\002\037\004\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\004\000\002\037\004" +
    "\000\002\037\004\000\002\037\004\000\002\037\004\000" +
    "\002\037\002\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\042\004\000\002\042\004\000\002\042\004" +
    "\000\002\042\004\000\002\042\004\000\002\042\004\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\042\004\000\002\042\004\000\002\042\004" +
    "\000\002\042\004\000\002\042\004\000\002\042\004\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\042\004\000\002\042\004\000\002\042\004" +
    "\000\002\042\004\000\002\042\004\000\002\042\004\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\042\004\000\002\042" +
    "\004\000\002\042\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\012\002\uff5b\003\uff5b\052\uff5b\062\006\001" +
    "\002\000\010\002\ufffe\003\012\052\ufffe\001\002\000\004" +
    "\002\011\001\002\000\012\002\uff5c\003\uff5c\052\uff5c\062" +
    "\uff5e\001\002\000\004\062\010\001\002\000\012\002\uff5d" +
    "\003\uff5d\052\uff5d\062\uff5f\001\002\000\004\002\001\001" +
    "\002\000\006\002\ufffd\052\ufffd\001\002\000\006\002\000" +
    "\052\014\001\002\000\004\054\ufffc\001\002\000\006\002" +
    "\uffff\052\uffff\001\002\000\004\054\017\001\002\000\004" +
    "\013\ufffb\001\002\000\004\013\021\001\002\000\010\003" +
    "\022\014\uffea\054\024\001\002\000\004\014\uffe9\001\002" +
    "\000\004\014\034\001\002\000\010\003\uffec\004\uffec\014" +
    "\uffec\001\002\000\010\003\026\004\030\014\uffe6\001\002" +
    "\000\004\014\uffe5\001\002\000\004\014\uffeb\001\002\000" +
    "\004\054\031\001\002\000\010\003\uffe8\004\uffe8\014\uffe8" +
    "\001\002\000\010\003\026\004\030\014\uffe6\001\002\000" +
    "\004\014\uffe7\001\002\000\004\021\ufffa\001\002\000\004" +
    "\021\036\001\002\000\004\062\037\001\002\000\020\002" +
    "\uff5e\052\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e\064\uff5e" +
    "\001\002\000\020\002\ufff9\052\ufff9\060\ufff9\061\ufff9\062" +
    "\042\063\ufff9\064\ufff9\001\002\000\016\002\uffbc\052\uffbc" +
    "\060\045\061\051\063\056\064\055\001\002\000\020\002" +
    "\uff5f\052\uff5f\060\uff5f\061\uff5f\062\uff5f\063\uff5f\064\uff5f" +
    "\001\002\000\016\002\uffbc\052\uffbc\060\045\061\051\063" +
    "\056\064\055\001\002\000\016\002\uffbc\052\uffbc\060\045" +
    "\061\051\063\056\064\055\001\002\000\034\035\uff59\037" +
    "\uff59\040\uff59\041\uff59\044\uff59\045\uff59\046\uff59\047\uff59" +
    "\050\uff59\051\uff59\054\uff59\057\uff59\060\uff59\001\002\000" +
    "\016\002\uffbc\052\uffbc\060\045\061\051\063\056\064\055" +
    "\001\002\000\034\035\246\037\251\040\uffe4\041\253\044" +
    "\247\045\255\046\254\047\240\050\245\051\250\054\242" +
    "\057\241\060\244\001\002\000\016\002\uffbc\052\uffbc\060" +
    "\045\061\051\063\056\064\055\001\002\000\004\062\037" +
    "\001\002\000\016\002\uffbc\052\uffbc\060\045\061\051\063" +
    "\056\064\055\001\002\000\016\002\uffbc\052\uffbc\060\045" +
    "\061\051\063\056\064\055\001\002\000\016\002\uffbc\052" +
    "\uffbc\060\045\061\051\063\056\064\055\001\002\000\140" +
    "\004\uff28\005\uff28\006\uff28\007\uff28\010\uff28\011\uff28\012" +
    "\uff28\013\uff28\014\uff28\015\uff28\016\uff28\017\uff28\020\uff28" +
    "\021\uff28\023\uff28\024\uff28\025\uff28\026\uff28\027\uff28\030" +
    "\uff28\031\uff28\032\uff28\033\uff28\034\uff28\035\uff28\036\uff28" +
    "\037\uff28\040\uff28\041\uff28\042\uff28\043\uff28\044\uff28\045" +
    "\uff28\046\uff28\047\uff28\050\uff28\051\uff28\052\uff28\053\uff28" +
    "\054\uff28\055\uff28\056\uff28\057\uff28\060\uff28\061\uff28\062" +
    "\uff28\065\uff28\001\002\000\136\004\ufefa\005\ufefa\006\ufefa" +
    "\007\ufefa\010\ufefa\011\ufefa\012\ufefa\013\ufefa\014\ufefa\015" +
    "\ufefa\016\ufefa\017\ufefa\020\ufefa\021\ufefa\023\ufefa\024\ufefa" +
    "\025\ufefa\026\ufefa\027\ufefa\030\ufefa\031\ufefa\032\ufefa\033" +
    "\ufefa\034\ufefa\035\ufefa\036\ufefa\037\ufefa\040\ufefa\041\ufefa" +
    "\042\ufefa\043\ufefa\044\ufefa\045\ufefa\046\ufefa\047\ufefa\050" +
    "\ufefa\051\ufefa\052\ufefa\053\ufefa\054\ufefa\055\ufefa\056\ufefa" +
    "\057\ufefa\060\ufefa\061\ufefa\062\ufefa\001\002\000\006\002" +
    "\ufff8\052\ufff8\001\002\000\016\002\uffbc\052\uffbc\060\045" +
    "\061\051\063\056\064\055\001\002\000\016\002\uffbc\052" +
    "\uffbc\060\045\061\051\063\056\064\055\001\002\000\016" +
    "\002\uffbc\052\uffbc\060\045\061\051\063\056\064\055\001" +
    "\002\000\016\002\uffbc\052\uffbc\060\045\061\051\063\056" +
    "\064\055\001\002\000\016\002\uffbc\052\uffbc\060\045\061" +
    "\051\063\056\064\055\001\002\000\006\002\uffc4\052\uffc4" +
    "\001\002\000\006\002\uffc8\052\uffc8\001\002\000\006\002" +
    "\uffbd\052\uffbd\001\002\000\006\002\uffbf\052\uffbf\001\002" +
    "\000\006\002\uffc0\052\uffc0\001\002\000\136\004\103\005" +
    "\125\006\115\007\112\010\124\011\142\012\114\013\133" +
    "\014\131\015\102\016\100\017\147\020\145\021\075\023" +
    "\137\024\146\025\104\026\113\027\121\030\107\031\117" +
    "\032\135\033\122\034\136\035\126\036\144\037\127\040" +
    "\074\041\150\042\106\043\132\044\076\045\110\046\141" +
    "\047\077\050\101\051\134\052\123\053\111\054\130\055" +
    "\143\056\120\057\116\060\140\061\105\062\037\001\002" +
    "\000\020\002\uff58\052\uff58\060\uff58\061\uff58\062\042\063" +
    "\uff58\064\uff58\001\002\000\136\004\uff0c\005\uff0c\006\uff0c" +
    "\007\uff0c\010\uff0c\011\uff0c\012\uff0c\013\uff0c\014\uff0c\015" +
    "\uff0c\016\uff0c\017\uff0c\020\uff0c\021\uff0c\023\uff0c\024\uff0c" +
    "\025\uff0c\026\uff0c\027\uff0c\030\uff0c\031\uff0c\032\uff0c\033" +
    "\uff0c\034\uff0c\035\uff0c\036\uff0c\037\uff0c\040\uff0c\041\uff0c" +
    "\042\uff0c\043\uff0c\044\uff0c\045\uff0c\046\uff0c\047\uff0c\050" +
    "\uff0c\051\uff0c\052\uff0c\053\uff0c\054\uff0c\055\uff0c\056\uff0c" +
    "\057\uff0c\060\uff0c\061\uff0c\062\uff0c\001\002\000\136\004" +
    "\uff1a\005\uff1a\006\uff1a\007\uff1a\010\uff1a\011\uff1a\012\uff1a" +
    "\013\uff1a\014\uff1a\015\uff1a\016\uff1a\017\uff1a\020\uff1a\021" +
    "\uff1a\023\uff1a\024\uff1a\025\uff1a\026\uff1a\027\uff1a\030\uff1a" +
    "\031\uff1a\032\uff1a\033\uff1a\034\uff1a\035\uff1a\036\uff1a\037" +
    "\uff1a\040\uff1a\041\uff1a\042\uff1a\043\uff1a\044\uff1a\045\uff1a" +
    "\046\uff1a\047\uff1a\050\uff1a\051\uff1a\052\uff1a\053\uff1a\054" +
    "\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\061\uff1a\062\uff1a" +
    "\001\002\000\136\004\uff08\005\uff08\006\uff08\007\uff08\010" +
    "\uff08\011\uff08\012\uff08\013\uff08\014\uff08\015\uff08\016\uff08" +
    "\017\uff08\020\uff08\021\uff08\023\uff08\024\uff08\025\uff08\026" +
    "\uff08\027\uff08\030\uff08\031\uff08\032\uff08\033\uff08\034\uff08" +
    "\035\uff08\036\uff08\037\uff08\040\uff08\041\uff08\042\uff08\043" +
    "\uff08\044\uff08\045\uff08\046\uff08\047\uff08\050\uff08\051\uff08" +
    "\052\uff08\053\uff08\054\uff08\055\uff08\056\uff08\057\uff08\060" +
    "\uff08\061\uff08\062\uff08\001\002\000\136\004\uff05\005\uff05" +
    "\006\uff05\007\uff05\010\uff05\011\uff05\012\uff05\013\uff05\014" +
    "\uff05\015\uff05\016\uff05\017\uff05\020\uff05\021\uff05\023\uff05" +
    "\024\uff05\025\uff05\026\uff05\027\uff05\030\uff05\031\uff05\032" +
    "\uff05\033\uff05\034\uff05\035\uff05\036\uff05\037\uff05\040\uff05" +
    "\041\uff05\042\uff05\043\uff05\044\uff05\045\uff05\046\uff05\047" +
    "\uff05\050\uff05\051\uff05\052\uff05\053\uff05\054\uff05\055\uff05" +
    "\056\uff05\057\uff05\060\uff05\061\uff05\062\uff05\001\002\000" +
    "\136\004\uff1d\005\uff1d\006\uff1d\007\uff1d\010\uff1d\011\uff1d" +
    "\012\uff1d\013\uff1d\014\uff1d\015\uff1d\016\uff1d\017\uff1d\020" +
    "\uff1d\021\uff1d\023\uff1d\024\uff1d\025\uff1d\026\uff1d\027\uff1d" +
    "\030\uff1d\031\uff1d\032\uff1d\033\uff1d\034\uff1d\035\uff1d\036" +
    "\uff1d\037\uff1d\040\uff1d\041\uff1d\042\uff1d\043\uff1d\044\uff1d" +
    "\045\uff1d\046\uff1d\047\uff1d\050\uff1d\051\uff1d\052\uff1d\053" +
    "\uff1d\054\uff1d\055\uff1d\056\uff1d\057\uff1d\060\uff1d\061\uff1d" +
    "\062\uff1d\001\002\000\136\004\uff04\005\uff04\006\uff04\007" +
    "\uff04\010\uff04\011\uff04\012\uff04\013\uff04\014\uff04\015\uff04" +
    "\016\uff04\017\uff04\020\uff04\021\uff04\023\uff04\024\uff04\025" +
    "\uff04\026\uff04\027\uff04\030\uff04\031\uff04\032\uff04\033\uff04" +
    "\034\uff04\035\uff04\036\uff04\037\uff04\040\uff04\041\uff04\042" +
    "\uff04\043\uff04\044\uff04\045\uff04\046\uff04\047\uff04\050\uff04" +
    "\051\uff04\052\uff04\053\uff04\054\uff04\055\uff04\056\uff04\057" +
    "\uff04\060\uff04\061\uff04\062\uff04\001\002\000\136\004\uff1e" +
    "\005\uff1e\006\uff1e\007\uff1e\010\uff1e\011\uff1e\012\uff1e\013" +
    "\uff1e\014\uff1e\015\uff1e\016\uff1e\017\uff1e\020\uff1e\021\uff1e" +
    "\023\uff1e\024\uff1e\025\uff1e\026\uff1e\027\uff1e\030\uff1e\031" +
    "\uff1e\032\uff1e\033\uff1e\034\uff1e\035\uff1e\036\uff1e\037\uff1e" +
    "\040\uff1e\041\uff1e\042\uff1e\043\uff1e\044\uff1e\045\uff1e\046" +
    "\uff1e\047\uff1e\050\uff1e\051\uff1e\052\uff1e\053\uff1e\054\uff1e" +
    "\055\uff1e\056\uff1e\057\uff1e\060\uff1e\061\uff1e\062\uff1e\001" +
    "\002\000\136\004\uff27\005\uff27\006\uff27\007\uff27\010\uff27" +
    "\011\uff27\012\uff27\013\uff27\014\uff27\015\uff27\016\uff27\017" +
    "\uff27\020\uff27\021\uff27\023\uff27\024\uff27\025\uff27\026\uff27" +
    "\027\uff27\030\uff27\031\uff27\032\uff27\033\uff27\034\uff27\035" +
    "\uff27\036\uff27\037\uff27\040\uff27\041\uff27\042\uff27\043\uff27" +
    "\044\uff27\045\uff27\046\uff27\047\uff27\050\uff27\051\uff27\052" +
    "\uff27\053\uff27\054\uff27\055\uff27\056\uff27\057\uff27\060\uff27" +
    "\061\uff27\062\uff27\001\002\000\136\004\uff17\005\uff17\006" +
    "\uff17\007\uff17\010\uff17\011\uff17\012\uff17\013\uff17\014\uff17" +
    "\015\uff17\016\uff17\017\uff17\020\uff17\021\uff17\023\uff17\024" +
    "\uff17\025\uff17\026\uff17\027\uff17\030\uff17\031\uff17\032\uff17" +
    "\033\uff17\034\uff17\035\uff17\036\uff17\037\uff17\040\uff17\041" +
    "\uff17\042\uff17\043\uff17\044\uff17\045\uff17\046\uff17\047\uff17" +
    "\050\uff17\051\uff17\052\uff17\053\uff17\054\uff17\055\uff17\056" +
    "\uff17\057\uff17\060\uff17\061\uff17\062\uff17\001\002\000\136" +
    "\004\uff00\005\uff00\006\uff00\007\uff00\010\uff00\011\uff00\012" +
    "\uff00\013\uff00\014\uff00\015\uff00\016\uff00\017\uff00\020\uff00" +
    "\021\uff00\023\uff00\024\uff00\025\uff00\026\uff00\027\uff00\030" +
    "\uff00\031\uff00\032\uff00\033\uff00\034\uff00\035\uff00\036\uff00" +
    "\037\uff00\040\uff00\041\uff00\042\uff00\043\uff00\044\uff00\045" +
    "\uff00\046\uff00\047\uff00\050\uff00\051\uff00\052\uff00\053\uff00" +
    "\054\uff00\055\uff00\056\uff00\057\uff00\060\uff00\061\uff00\062" +
    "\uff00\001\002\000\136\004\uff0a\005\uff0a\006\uff0a\007\uff0a" +
    "\010\uff0a\011\uff0a\012\uff0a\013\uff0a\014\uff0a\015\uff0a\016" +
    "\uff0a\017\uff0a\020\uff0a\021\uff0a\023\uff0a\024\uff0a\025\uff0a" +
    "\026\uff0a\027\uff0a\030\uff0a\031\uff0a\032\uff0a\033\uff0a\034" +
    "\uff0a\035\uff0a\036\uff0a\037\uff0a\040\uff0a\041\uff0a\042\uff0a" +
    "\043\uff0a\044\uff0a\045\uff0a\046\uff0a\047\uff0a\050\uff0a\051" +
    "\uff0a\052\uff0a\053\uff0a\054\uff0a\055\uff0a\056\uff0a\057\uff0a" +
    "\060\uff0a\061\uff0a\062\uff0a\001\002\000\136\004\uff14\005" +
    "\uff14\006\uff14\007\uff14\010\uff14\011\uff14\012\uff14\013\uff14" +
    "\014\uff14\015\uff14\016\uff14\017\uff14\020\uff14\021\uff14\023" +
    "\uff14\024\uff14\025\uff14\026\uff14\027\uff14\030\uff14\031\uff14" +
    "\032\uff14\033\uff14\034\uff14\035\uff14\036\uff14\037\uff14\040" +
    "\uff14\041\uff14\042\uff14\043\uff14\044\uff14\045\uff14\046\uff14" +
    "\047\uff14\050\uff14\051\uff14\052\uff14\053\uff14\054\uff14\055" +
    "\uff14\056\uff14\057\uff14\060\uff14\061\uff14\062\uff14\001\002" +
    "\000\136\004\uff07\005\uff07\006\uff07\007\uff07\010\uff07\011" +
    "\uff07\012\uff07\013\uff07\014\uff07\015\uff07\016\uff07\017\uff07" +
    "\020\uff07\021\uff07\023\uff07\024\uff07\025\uff07\026\uff07\027" +
    "\uff07\030\uff07\031\uff07\032\uff07\033\uff07\034\uff07\035\uff07" +
    "\036\uff07\037\uff07\040\uff07\041\uff07\042\uff07\043\uff07\044" +
    "\uff07\045\uff07\046\uff07\047\uff07\050\uff07\051\uff07\052\uff07" +
    "\053\uff07\054\uff07\055\uff07\056\uff07\057\uff07\060\uff07\061" +
    "\uff07\062\uff07\001\002\000\136\004\ufefd\005\ufefd\006\ufefd" +
    "\007\ufefd\010\ufefd\011\ufefd\012\ufefd\013\ufefd\014\ufefd\015" +
    "\ufefd\016\ufefd\017\ufefd\020\ufefd\021\ufefd\023\ufefd\024\ufefd" +
    "\025\ufefd\026\ufefd\027\ufefd\030\ufefd\031\ufefd\032\ufefd\033" +
    "\ufefd\034\ufefd\035\ufefd\036\ufefd\037\ufefd\040\ufefd\041\ufefd" +
    "\042\ufefd\043\ufefd\044\ufefd\045\ufefd\046\ufefd\047\ufefd\050" +
    "\ufefd\051\ufefd\052\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd" +
    "\057\ufefd\060\ufefd\061\ufefd\062\ufefd\001\002\000\136\004" +
    "\uff24\005\uff24\006\uff24\007\uff24\010\uff24\011\uff24\012\uff24" +
    "\013\uff24\014\uff24\015\uff24\016\uff24\017\uff24\020\uff24\021" +
    "\uff24\023\uff24\024\uff24\025\uff24\026\uff24\027\uff24\030\uff24" +
    "\031\uff24\032\uff24\033\uff24\034\uff24\035\uff24\036\uff24\037" +
    "\uff24\040\uff24\041\uff24\042\uff24\043\uff24\044\uff24\045\uff24" +
    "\046\uff24\047\uff24\050\uff24\051\uff24\052\uff24\053\uff24\054" +
    "\uff24\055\uff24\056\uff24\057\uff24\060\uff24\061\uff24\062\uff24" +
    "\001\002\000\136\004\uff16\005\uff16\006\uff16\007\uff16\010" +
    "\uff16\011\uff16\012\uff16\013\uff16\014\uff16\015\uff16\016\uff16" +
    "\017\uff16\020\uff16\021\uff16\023\uff16\024\uff16\025\uff16\026" +
    "\uff16\027\uff16\030\uff16\031\uff16\032\uff16\033\uff16\034\uff16" +
    "\035\uff16\036\uff16\037\uff16\040\uff16\041\uff16\042\uff16\043" +
    "\uff16\044\uff16\045\uff16\046\uff16\047\uff16\050\uff16\051\uff16" +
    "\052\uff16\053\uff16\054\uff16\055\uff16\056\uff16\057\uff16\060" +
    "\uff16\061\uff16\062\uff16\001\002\000\136\004\uff21\005\uff21" +
    "\006\uff21\007\uff21\010\uff21\011\uff21\012\uff21\013\uff21\014" +
    "\uff21\015\uff21\016\uff21\017\uff21\020\uff21\021\uff21\023\uff21" +
    "\024\uff21\025\uff21\026\uff21\027\uff21\030\uff21\031\uff21\032" +
    "\uff21\033\uff21\034\uff21\035\uff21\036\uff21\037\uff21\040\uff21" +
    "\041\uff21\042\uff21\043\uff21\044\uff21\045\uff21\046\uff21\047" +
    "\uff21\050\uff21\051\uff21\052\uff21\053\uff21\054\uff21\055\uff21" +
    "\056\uff21\057\uff21\060\uff21\061\uff21\062\uff21\001\002\000" +
    "\136\004\uff25\005\uff25\006\uff25\007\uff25\010\uff25\011\uff25" +
    "\012\uff25\013\uff25\014\uff25\015\uff25\016\uff25\017\uff25\020" +
    "\uff25\021\uff25\023\uff25\024\uff25\025\uff25\026\uff25\027\uff25" +
    "\030\uff25\031\uff25\032\uff25\033\uff25\034\uff25\035\uff25\036" +
    "\uff25\037\uff25\040\uff25\041\uff25\042\uff25\043\uff25\044\uff25" +
    "\045\uff25\046\uff25\047\uff25\050\uff25\051\uff25\052\uff25\053" +
    "\uff25\054\uff25\055\uff25\056\uff25\057\uff25\060\uff25\061\uff25" +
    "\062\uff25\001\002\000\136\004\uff01\005\uff01\006\uff01\007" +
    "\uff01\010\uff01\011\uff01\012\uff01\013\uff01\014\uff01\015\uff01" +
    "\016\uff01\017\uff01\020\uff01\021\uff01\023\uff01\024\uff01\025" +
    "\uff01\026\uff01\027\uff01\030\uff01\031\uff01\032\uff01\033\uff01" +
    "\034\uff01\035\uff01\036\uff01\037\uff01\040\uff01\041\uff01\042" +
    "\uff01\043\uff01\044\uff01\045\uff01\046\uff01\047\uff01\050\uff01" +
    "\051\uff01\052\uff01\053\uff01\054\uff01\055\uff01\056\uff01\057" +
    "\uff01\060\uff01\061\uff01\062\uff01\001\002\000\136\004\uff13" +
    "\005\uff13\006\uff13\007\uff13\010\uff13\011\uff13\012\uff13\013" +
    "\uff13\014\uff13\015\uff13\016\uff13\017\uff13\020\uff13\021\uff13" +
    "\023\uff13\024\uff13\025\uff13\026\uff13\027\uff13\030\uff13\031" +
    "\uff13\032\uff13\033\uff13\034\uff13\035\uff13\036\uff13\037\uff13" +
    "\040\uff13\041\uff13\042\uff13\043\uff13\044\uff13\045\uff13\046" +
    "\uff13\047\uff13\050\uff13\051\uff13\052\uff13\053\uff13\054\uff13" +
    "\055\uff13\056\uff13\057\uff13\060\uff13\061\uff13\062\uff13\001" +
    "\002\000\136\004\ufeff\005\ufeff\006\ufeff\007\ufeff\010\ufeff" +
    "\011\ufeff\012\ufeff\013\ufeff\014\ufeff\015\ufeff\016\ufeff\017" +
    "\ufeff\020\ufeff\021\ufeff\023\ufeff\024\ufeff\025\ufeff\026\ufeff" +
    "\027\ufeff\030\ufeff\031\ufeff\032\ufeff\033\ufeff\034\ufeff\035" +
    "\ufeff\036\ufeff\037\ufeff\040\ufeff\041\ufeff\042\ufeff\043\ufeff" +
    "\044\ufeff\045\ufeff\046\ufeff\047\ufeff\050\ufeff\051\ufeff\052" +
    "\ufeff\053\ufeff\054\ufeff\055\ufeff\056\ufeff\057\ufeff\060\ufeff" +
    "\061\ufeff\062\ufeff\001\002\000\136\004\uff15\005\uff15\006" +
    "\uff15\007\uff15\010\uff15\011\uff15\012\uff15\013\uff15\014\uff15" +
    "\015\uff15\016\uff15\017\uff15\020\uff15\021\uff15\023\uff15\024" +
    "\uff15\025\uff15\026\uff15\027\uff15\030\uff15\031\uff15\032\uff15" +
    "\033\uff15\034\uff15\035\uff15\036\uff15\037\uff15\040\uff15\041" +
    "\uff15\042\uff15\043\uff15\044\uff15\045\uff15\046\uff15\047\uff15" +
    "\050\uff15\051\uff15\052\uff15\053\uff15\054\uff15\055\uff15\056" +
    "\uff15\057\uff15\060\uff15\061\uff15\062\uff15\001\002\000\136" +
    "\004\uff11\005\uff11\006\uff11\007\uff11\010\uff11\011\uff11\012" +
    "\uff11\013\uff11\014\uff11\015\uff11\016\uff11\017\uff11\020\uff11" +
    "\021\uff11\023\uff11\024\uff11\025\uff11\026\uff11\027\uff11\030" +
    "\uff11\031\uff11\032\uff11\033\uff11\034\uff11\035\uff11\036\uff11" +
    "\037\uff11\040\uff11\041\uff11\042\uff11\043\uff11\044\uff11\045" +
    "\uff11\046\uff11\047\uff11\050\uff11\051\uff11\052\uff11\053\uff11" +
    "\054\uff11\055\uff11\056\uff11\057\uff11\060\uff11\061\uff11\062" +
    "\uff11\001\002\000\136\004\uff02\005\uff02\006\uff02\007\uff02" +
    "\010\uff02\011\uff02\012\uff02\013\uff02\014\uff02\015\uff02\016" +
    "\uff02\017\uff02\020\uff02\021\uff02\023\uff02\024\uff02\025\uff02" +
    "\026\uff02\027\uff02\030\uff02\031\uff02\032\uff02\033\uff02\034" +
    "\uff02\035\uff02\036\uff02\037\uff02\040\uff02\041\uff02\042\uff02" +
    "\043\uff02\044\uff02\045\uff02\046\uff02\047\uff02\050\uff02\051" +
    "\uff02\052\uff02\053\uff02\054\uff02\055\uff02\056\uff02\057\uff02" +
    "\060\uff02\061\uff02\062\uff02\001\002\000\136\004\uff23\005" +
    "\uff23\006\uff23\007\uff23\010\uff23\011\uff23\012\uff23\013\uff23" +
    "\014\uff23\015\uff23\016\uff23\017\uff23\020\uff23\021\uff23\023" +
    "\uff23\024\uff23\025\uff23\026\uff23\027\uff23\030\uff23\031\uff23" +
    "\032\uff23\033\uff23\034\uff23\035\uff23\036\uff23\037\uff23\040" +
    "\uff23\041\uff23\042\uff23\043\uff23\044\uff23\045\uff23\046\uff23" +
    "\047\uff23\050\uff23\051\uff23\052\uff23\053\uff23\054\uff23\055" +
    "\uff23\056\uff23\057\uff23\060\uff23\061\uff23\062\uff23\001\002" +
    "\000\136\004\uff26\005\uff26\006\uff26\007\uff26\010\uff26\011" +
    "\uff26\012\uff26\013\uff26\014\uff26\015\uff26\016\uff26\017\uff26" +
    "\020\uff26\021\uff26\023\uff26\024\uff26\025\uff26\026\uff26\027" +
    "\uff26\030\uff26\031\uff26\032\uff26\033\uff26\034\uff26\035\uff26" +
    "\036\uff26\037\uff26\040\uff26\041\uff26\042\uff26\043\uff26\044" +
    "\uff26\045\uff26\046\uff26\047\uff26\050\uff26\051\uff26\052\uff26" +
    "\053\uff26\054\uff26\055\uff26\056\uff26\057\uff26\060\uff26\061" +
    "\uff26\062\uff26\001\002\000\136\004\uff0f\005\uff0f\006\uff0f" +
    "\007\uff0f\010\uff0f\011\uff0f\012\uff0f\013\uff0f\014\uff0f\015" +
    "\uff0f\016\uff0f\017\uff0f\020\uff0f\021\uff0f\023\uff0f\024\uff0f" +
    "\025\uff0f\026\uff0f\027\uff0f\030\uff0f\031\uff0f\032\uff0f\033" +
    "\uff0f\034\uff0f\035\uff0f\036\uff0f\037\uff0f\040\uff0f\041\uff0f" +
    "\042\uff0f\043\uff0f\044\uff0f\045\uff0f\046\uff0f\047\uff0f\050" +
    "\uff0f\051\uff0f\052\uff0f\053\uff0f\054\uff0f\055\uff0f\056\uff0f" +
    "\057\uff0f\060\uff0f\061\uff0f\062\uff0f\001\002\000\136\004" +
    "\uff0d\005\uff0d\006\uff0d\007\uff0d\010\uff0d\011\uff0d\012\uff0d" +
    "\013\uff0d\014\uff0d\015\uff0d\016\uff0d\017\uff0d\020\uff0d\021" +
    "\uff0d\023\uff0d\024\uff0d\025\uff0d\026\uff0d\027\uff0d\030\uff0d" +
    "\031\uff0d\032\uff0d\033\uff0d\034\uff0d\035\uff0d\036\uff0d\037" +
    "\uff0d\040\uff0d\041\uff0d\042\uff0d\043\uff0d\044\uff0d\045\uff0d" +
    "\046\uff0d\047\uff0d\050\uff0d\051\uff0d\052\uff0d\053\uff0d\054" +
    "\uff0d\055\uff0d\056\uff0d\057\uff0d\060\uff0d\061\uff0d\062\uff0d" +
    "\001\002\000\136\004\ufefc\005\ufefc\006\ufefc\007\ufefc\010" +
    "\ufefc\011\ufefc\012\ufefc\013\ufefc\014\ufefc\015\ufefc\016\ufefc" +
    "\017\ufefc\020\ufefc\021\ufefc\023\ufefc\024\ufefc\025\ufefc\026" +
    "\ufefc\027\ufefc\030\ufefc\031\ufefc\032\ufefc\033\ufefc\034\ufefc" +
    "\035\ufefc\036\ufefc\037\ufefc\040\ufefc\041\ufefc\042\ufefc\043" +
    "\ufefc\044\ufefc\045\ufefc\046\ufefc\047\ufefc\050\ufefc\051\ufefc" +
    "\052\ufefc\053\ufefc\054\ufefc\055\ufefc\056\ufefc\057\ufefc\060" +
    "\ufefc\061\ufefc\062\ufefc\001\002\000\136\004\uff1f\005\uff1f" +
    "\006\uff1f\007\uff1f\010\uff1f\011\uff1f\012\uff1f\013\uff1f\014" +
    "\uff1f\015\uff1f\016\uff1f\017\uff1f\020\uff1f\021\uff1f\023\uff1f" +
    "\024\uff1f\025\uff1f\026\uff1f\027\uff1f\030\uff1f\031\uff1f\032" +
    "\uff1f\033\uff1f\034\uff1f\035\uff1f\036\uff1f\037\uff1f\040\uff1f" +
    "\041\uff1f\042\uff1f\043\uff1f\044\uff1f\045\uff1f\046\uff1f\047" +
    "\uff1f\050\uff1f\051\uff1f\052\uff1f\053\uff1f\054\uff1f\055\uff1f" +
    "\056\uff1f\057\uff1f\060\uff1f\061\uff1f\062\uff1f\001\002\000" +
    "\136\004\uff09\005\uff09\006\uff09\007\uff09\010\uff09\011\uff09" +
    "\012\uff09\013\uff09\014\uff09\015\uff09\016\uff09\017\uff09\020" +
    "\uff09\021\uff09\023\uff09\024\uff09\025\uff09\026\uff09\027\uff09" +
    "\030\uff09\031\uff09\032\uff09\033\uff09\034\uff09\035\uff09\036" +
    "\uff09\037\uff09\040\uff09\041\uff09\042\uff09\043\uff09\044\uff09" +
    "\045\uff09\046\uff09\047\uff09\050\uff09\051\uff09\052\uff09\053" +
    "\uff09\054\uff09\055\uff09\056\uff09\057\uff09\060\uff09\061\uff09" +
    "\062\uff09\001\002\000\136\004\uff20\005\uff20\006\uff20\007" +
    "\uff20\010\uff20\011\uff20\012\uff20\013\uff20\014\uff20\015\uff20" +
    "\016\uff20\017\uff20\020\uff20\021\uff20\023\uff20\024\uff20\025" +
    "\uff20\026\uff20\027\uff20\030\uff20\031\uff20\032\uff20\033\uff20" +
    "\034\uff20\035\uff20\036\uff20\037\uff20\040\uff20\041\uff20\042" +
    "\uff20\043\uff20\044\uff20\045\uff20\046\uff20\047\uff20\050\uff20" +
    "\051\uff20\052\uff20\053\uff20\054\uff20\055\uff20\056\uff20\057" +
    "\uff20\060\uff20\061\uff20\062\uff20\001\002\000\136\004\uff03" +
    "\005\uff03\006\uff03\007\uff03\010\uff03\011\uff03\012\uff03\013" +
    "\uff03\014\uff03\015\uff03\016\uff03\017\uff03\020\uff03\021\uff03" +
    "\023\uff03\024\uff03\025\uff03\026\uff03\027\uff03\030\uff03\031" +
    "\uff03\032\uff03\033\uff03\034\uff03\035\uff03\036\uff03\037\uff03" +
    "\040\uff03\041\uff03\042\uff03\043\uff03\044\uff03\045\uff03\046" +
    "\uff03\047\uff03\050\uff03\051\uff03\052\uff03\053\uff03\054\uff03" +
    "\055\uff03\056\uff03\057\uff03\060\uff03\061\uff03\062\uff03\001" +
    "\002\000\136\004\uff12\005\uff12\006\uff12\007\uff12\010\uff12" +
    "\011\uff12\012\uff12\013\uff12\014\uff12\015\uff12\016\uff12\017" +
    "\uff12\020\uff12\021\uff12\023\uff12\024\uff12\025\uff12\026\uff12" +
    "\027\uff12\030\uff12\031\uff12\032\uff12\033\uff12\034\uff12\035" +
    "\uff12\036\uff12\037\uff12\040\uff12\041\uff12\042\uff12\043\uff12" +
    "\044\uff12\045\uff12\046\uff12\047\uff12\050\uff12\051\uff12\052" +
    "\uff12\053\uff12\054\uff12\055\uff12\056\uff12\057\uff12\060\uff12" +
    "\061\uff12\062\uff12\001\002\000\136\004\uff10\005\uff10\006" +
    "\uff10\007\uff10\010\uff10\011\uff10\012\uff10\013\uff10\014\uff10" +
    "\015\uff10\016\uff10\017\uff10\020\uff10\021\uff10\023\uff10\024" +
    "\uff10\025\uff10\026\uff10\027\uff10\030\uff10\031\uff10\032\uff10" +
    "\033\uff10\034\uff10\035\uff10\036\uff10\037\uff10\040\uff10\041" +
    "\uff10\042\uff10\043\uff10\044\uff10\045\uff10\046\uff10\047\uff10" +
    "\050\uff10\051\uff10\052\uff10\053\uff10\054\uff10\055\uff10\056" +
    "\uff10\057\uff10\060\uff10\061\uff10\062\uff10\001\002\000\136" +
    "\004\uff19\005\uff19\006\uff19\007\uff19\010\uff19\011\uff19\012" +
    "\uff19\013\uff19\014\uff19\015\uff19\016\uff19\017\uff19\020\uff19" +
    "\021\uff19\023\uff19\024\uff19\025\uff19\026\uff19\027\uff19\030" +
    "\uff19\031\uff19\032\uff19\033\uff19\034\uff19\035\uff19\036\uff19" +
    "\037\uff19\040\uff19\041\uff19\042\uff19\043\uff19\044\uff19\045" +
    "\uff19\046\uff19\047\uff19\050\uff19\051\uff19\052\uff19\053\uff19" +
    "\054\uff19\055\uff19\056\uff19\057\uff19\060\uff19\061\uff19\062" +
    "\uff19\001\002\000\136\004\ufefe\005\ufefe\006\ufefe\007\ufefe" +
    "\010\ufefe\011\ufefe\012\ufefe\013\ufefe\014\ufefe\015\ufefe\016" +
    "\ufefe\017\ufefe\020\ufefe\021\ufefe\023\ufefe\024\ufefe\025\ufefe" +
    "\026\ufefe\027\ufefe\030\ufefe\031\ufefe\032\ufefe\033\ufefe\034" +
    "\ufefe\035\ufefe\036\ufefe\037\ufefe\040\ufefe\041\ufefe\042\ufefe" +
    "\043\ufefe\044\ufefe\045\ufefe\046\ufefe\047\ufefe\050\ufefe\051" +
    "\ufefe\052\ufefe\053\ufefe\054\ufefe\055\ufefe\056\ufefe\057\ufefe" +
    "\060\ufefe\061\ufefe\062\ufefe\001\002\000\136\004\uff06\005" +
    "\uff06\006\uff06\007\uff06\010\uff06\011\uff06\012\uff06\013\uff06" +
    "\014\uff06\015\uff06\016\uff06\017\uff06\020\uff06\021\uff06\023" +
    "\uff06\024\uff06\025\uff06\026\uff06\027\uff06\030\uff06\031\uff06" +
    "\032\uff06\033\uff06\034\uff06\035\uff06\036\uff06\037\uff06\040" +
    "\uff06\041\uff06\042\uff06\043\uff06\044\uff06\045\uff06\046\uff06" +
    "\047\uff06\050\uff06\051\uff06\052\uff06\053\uff06\054\uff06\055" +
    "\uff06\056\uff06\057\uff06\060\uff06\061\uff06\062\uff06\001\002" +
    "\000\136\004\uff22\005\uff22\006\uff22\007\uff22\010\uff22\011" +
    "\uff22\012\uff22\013\uff22\014\uff22\015\uff22\016\uff22\017\uff22" +
    "\020\uff22\021\uff22\023\uff22\024\uff22\025\uff22\026\uff22\027" +
    "\uff22\030\uff22\031\uff22\032\uff22\033\uff22\034\uff22\035\uff22" +
    "\036\uff22\037\uff22\040\uff22\041\uff22\042\uff22\043\uff22\044" +
    "\uff22\045\uff22\046\uff22\047\uff22\050\uff22\051\uff22\052\uff22" +
    "\053\uff22\054\uff22\055\uff22\056\uff22\057\uff22\060\uff22\061" +
    "\uff22\062\uff22\001\002\000\136\004\ufefb\005\ufefb\006\ufefb" +
    "\007\ufefb\010\ufefb\011\ufefb\012\ufefb\013\ufefb\014\ufefb\015" +
    "\ufefb\016\ufefb\017\ufefb\020\ufefb\021\ufefb\023\ufefb\024\ufefb" +
    "\025\ufefb\026\ufefb\027\ufefb\030\ufefb\031\ufefb\032\ufefb\033" +
    "\ufefb\034\ufefb\035\ufefb\036\ufefb\037\ufefb\040\ufefb\041\ufefb" +
    "\042\ufefb\043\ufefb\044\ufefb\045\ufefb\046\ufefb\047\ufefb\050" +
    "\ufefb\051\ufefb\052\ufefb\053\ufefb\054\ufefb\055\ufefb\056\ufefb" +
    "\057\ufefb\060\ufefb\061\ufefb\062\ufefb\001\002\000\136\004" +
    "\uff0e\005\uff0e\006\uff0e\007\uff0e\010\uff0e\011\uff0e\012\uff0e" +
    "\013\uff0e\014\uff0e\015\uff0e\016\uff0e\017\uff0e\020\uff0e\021" +
    "\uff0e\023\uff0e\024\uff0e\025\uff0e\026\uff0e\027\uff0e\030\uff0e" +
    "\031\uff0e\032\uff0e\033\uff0e\034\uff0e\035\uff0e\036\uff0e\037" +
    "\uff0e\040\uff0e\041\uff0e\042\uff0e\043\uff0e\044\uff0e\045\uff0e" +
    "\046\uff0e\047\uff0e\050\uff0e\051\uff0e\052\uff0e\053\uff0e\054" +
    "\uff0e\055\uff0e\056\uff0e\057\uff0e\060\uff0e\061\uff0e\062\uff0e" +
    "\001\002\000\136\004\uff1b\005\uff1b\006\uff1b\007\uff1b\010" +
    "\uff1b\011\uff1b\012\uff1b\013\uff1b\014\uff1b\015\uff1b\016\uff1b" +
    "\017\uff1b\020\uff1b\021\uff1b\023\uff1b\024\uff1b\025\uff1b\026" +
    "\uff1b\027\uff1b\030\uff1b\031\uff1b\032\uff1b\033\uff1b\034\uff1b" +
    "\035\uff1b\036\uff1b\037\uff1b\040\uff1b\041\uff1b\042\uff1b\043" +
    "\uff1b\044\uff1b\045\uff1b\046\uff1b\047\uff1b\050\uff1b\051\uff1b" +
    "\052\uff1b\053\uff1b\054\uff1b\055\uff1b\056\uff1b\057\uff1b\060" +
    "\uff1b\061\uff1b\062\uff1b\001\002\000\136\004\uff18\005\uff18" +
    "\006\uff18\007\uff18\010\uff18\011\uff18\012\uff18\013\uff18\014" +
    "\uff18\015\uff18\016\uff18\017\uff18\020\uff18\021\uff18\023\uff18" +
    "\024\uff18\025\uff18\026\uff18\027\uff18\030\uff18\031\uff18\032" +
    "\uff18\033\uff18\034\uff18\035\uff18\036\uff18\037\uff18\040\uff18" +
    "\041\uff18\042\uff18\043\uff18\044\uff18\045\uff18\046\uff18\047" +
    "\uff18\050\uff18\051\uff18\052\uff18\053\uff18\054\uff18\055\uff18" +
    "\056\uff18\057\uff18\060\uff18\061\uff18\062\uff18\001\002\000" +
    "\136\004\uff1c\005\uff1c\006\uff1c\007\uff1c\010\uff1c\011\uff1c" +
    "\012\uff1c\013\uff1c\014\uff1c\015\uff1c\016\uff1c\017\uff1c\020" +
    "\uff1c\021\uff1c\023\uff1c\024\uff1c\025\uff1c\026\uff1c\027\uff1c" +
    "\030\uff1c\031\uff1c\032\uff1c\033\uff1c\034\uff1c\035\uff1c\036" +
    "\uff1c\037\uff1c\040\uff1c\041\uff1c\042\uff1c\043\uff1c\044\uff1c" +
    "\045\uff1c\046\uff1c\047\uff1c\050\uff1c\051\uff1c\052\uff1c\053" +
    "\uff1c\054\uff1c\055\uff1c\056\uff1c\057\uff1c\060\uff1c\061\uff1c" +
    "\062\uff1c\001\002\000\136\004\uff0b\005\uff0b\006\uff0b\007" +
    "\uff0b\010\uff0b\011\uff0b\012\uff0b\013\uff0b\014\uff0b\015\uff0b" +
    "\016\uff0b\017\uff0b\020\uff0b\021\uff0b\023\uff0b\024\uff0b\025" +
    "\uff0b\026\uff0b\027\uff0b\030\uff0b\031\uff0b\032\uff0b\033\uff0b" +
    "\034\uff0b\035\uff0b\036\uff0b\037\uff0b\040\uff0b\041\uff0b\042" +
    "\uff0b\043\uff0b\044\uff0b\045\uff0b\046\uff0b\047\uff0b\050\uff0b" +
    "\051\uff0b\052\uff0b\053\uff0b\054\uff0b\055\uff0b\056\uff0b\057" +
    "\uff0b\060\uff0b\061\uff0b\062\uff0b\001\002\000\140\004\157" +
    "\005\204\006\174\007\171\010\203\011\221\012\173\013" +
    "\212\014\210\015\160\016\156\017\227\020\226\021\153" +
    "\023\216\024\225\025\162\026\172\027\200\030\165\031" +
    "\176\032\215\033\202\034\214\035\205\036\222\037\206" +
    "\040\152\041\230\042\164\043\211\044\154\045\166\046" +
    "\220\047\155\050\161\051\213\052\201\053\167\054\207" +
    "\055\224\056\177\057\175\060\217\061\163\062\223\065" +
    "\170\001\002\000\142\004\uff3b\005\uff3b\006\uff3b\007\uff3b" +
    "\010\uff3b\011\uff3b\012\uff3b\013\uff3b\014\uff3b\015\uff3b\016" +
    "\uff3b\017\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b\024\uff3b" +
    "\025\uff3b\026\uff3b\027\uff3b\030\uff3b\031\uff3b\032\uff3b\033" +
    "\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b\040\uff3b\041\uff3b" +
    "\042\uff3b\043\uff3b\044\uff3b\045\uff3b\046\uff3b\047\uff3b\050" +
    "\uff3b\051\uff3b\052\uff3b\053\uff3b\054\uff3b\055\uff3b\056\uff3b" +
    "\057\uff3b\060\uff3b\061\uff3b\062\uff3b\065\uff3b\001\002\000" +
    "\142\004\uff49\005\uff49\006\uff49\007\uff49\010\uff49\011\uff49" +
    "\012\uff49\013\uff49\014\uff49\015\uff49\016\uff49\017\uff49\020" +
    "\uff49\021\uff49\022\uff49\023\uff49\024\uff49\025\uff49\026\uff49" +
    "\027\uff49\030\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035" +
    "\uff49\036\uff49\037\uff49\040\uff49\041\uff49\042\uff49\043\uff49" +
    "\044\uff49\045\uff49\046\uff49\047\uff49\050\uff49\051\uff49\052" +
    "\uff49\053\uff49\054\uff49\055\uff49\056\uff49\057\uff49\060\uff49" +
    "\061\uff49\062\uff49\065\uff49\001\002\000\142\004\uff37\005" +
    "\uff37\006\uff37\007\uff37\010\uff37\011\uff37\012\uff37\013\uff37" +
    "\014\uff37\015\uff37\016\uff37\017\uff37\020\uff37\021\uff37\022" +
    "\uff37\023\uff37\024\uff37\025\uff37\026\uff37\027\uff37\030\uff37" +
    "\031\uff37\032\uff37\033\uff37\034\uff37\035\uff37\036\uff37\037" +
    "\uff37\040\uff37\041\uff37\042\uff37\043\uff37\044\uff37\045\uff37" +
    "\046\uff37\047\uff37\050\uff37\051\uff37\052\uff37\053\uff37\054" +
    "\uff37\055\uff37\056\uff37\057\uff37\060\uff37\061\uff37\062\uff37" +
    "\065\uff37\001\002\000\142\004\uff34\005\uff34\006\uff34\007" +
    "\uff34\010\uff34\011\uff34\012\uff34\013\uff34\014\uff34\015\uff34" +
    "\016\uff34\017\uff34\020\uff34\021\uff34\022\uff34\023\uff34\024" +
    "\uff34\025\uff34\026\uff34\027\uff34\030\uff34\031\uff34\032\uff34" +
    "\033\uff34\034\uff34\035\uff34\036\uff34\037\uff34\040\uff34\041" +
    "\uff34\042\uff34\043\uff34\044\uff34\045\uff34\046\uff34\047\uff34" +
    "\050\uff34\051\uff34\052\uff34\053\uff34\054\uff34\055\uff34\056" +
    "\uff34\057\uff34\060\uff34\061\uff34\062\uff34\065\uff34\001\002" +
    "\000\142\004\uff4c\005\uff4c\006\uff4c\007\uff4c\010\uff4c\011" +
    "\uff4c\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\017\uff4c" +
    "\020\uff4c\021\uff4c\022\uff4c\023\uff4c\024\uff4c\025\uff4c\026" +
    "\uff4c\027\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c" +
    "\035\uff4c\036\uff4c\037\uff4c\040\uff4c\041\uff4c\042\uff4c\043" +
    "\uff4c\044\uff4c\045\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c" +
    "\052\uff4c\053\uff4c\054\uff4c\055\uff4c\056\uff4c\057\uff4c\060" +
    "\uff4c\061\uff4c\062\uff4c\065\uff4c\001\002\000\142\004\uff56" +
    "\005\uff56\006\uff56\007\uff56\010\uff56\011\uff56\012\uff56\013" +
    "\uff56\014\uff56\015\uff56\016\uff56\017\uff56\020\uff56\021\uff56" +
    "\022\uff56\023\uff56\024\uff56\025\uff56\026\uff56\027\uff56\030" +
    "\uff56\031\uff56\032\uff56\033\uff56\034\uff56\035\uff56\036\uff56" +
    "\037\uff56\040\uff56\041\uff56\042\uff56\043\uff56\044\uff56\045" +
    "\uff56\046\uff56\047\uff56\050\uff56\051\uff56\052\uff56\053\uff56" +
    "\054\uff56\055\uff56\056\uff56\057\uff56\060\uff56\061\uff56\062" +
    "\uff56\065\uff56\001\002\000\142\004\uff4d\005\uff4d\006\uff4d" +
    "\007\uff4d\010\uff4d\011\uff4d\012\uff4d\013\uff4d\014\uff4d\015" +
    "\uff4d\016\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d\023\uff4d" +
    "\024\uff4d\025\uff4d\026\uff4d\027\uff4d\030\uff4d\031\uff4d\032" +
    "\uff4d\033\uff4d\034\uff4d\035\uff4d\036\uff4d\037\uff4d\040\uff4d" +
    "\041\uff4d\042\uff4d\043\uff4d\044\uff4d\045\uff4d\046\uff4d\047" +
    "\uff4d\050\uff4d\051\uff4d\052\uff4d\053\uff4d\054\uff4d\055\uff4d" +
    "\056\uff4d\057\uff4d\060\uff4d\061\uff4d\062\uff4d\065\uff4d\001" +
    "\002\000\142\004\uff33\005\uff33\006\uff33\007\uff33\010\uff33" +
    "\011\uff33\012\uff33\013\uff33\014\uff33\015\uff33\016\uff33\017" +
    "\uff33\020\uff33\021\uff33\022\uff33\023\uff33\024\uff33\025\uff33" +
    "\026\uff33\027\uff33\030\uff33\031\uff33\032\uff33\033\uff33\034" +
    "\uff33\035\uff33\036\uff33\037\uff33\040\uff33\041\uff33\042\uff33" +
    "\043\uff33\044\uff33\045\uff33\046\uff33\047\uff33\050\uff33\051" +
    "\uff33\052\uff33\053\uff33\054\uff33\055\uff33\056\uff33\057\uff33" +
    "\060\uff33\061\uff33\062\uff33\065\uff33\001\002\000\142\004" +
    "\uff46\005\uff46\006\uff46\007\uff46\010\uff46\011\uff46\012\uff46" +
    "\013\uff46\014\uff46\015\uff46\016\uff46\017\uff46\020\uff46\021" +
    "\uff46\022\uff46\023\uff46\024\uff46\025\uff46\026\uff46\027\uff46" +
    "\030\uff46\031\uff46\032\uff46\033\uff46\034\uff46\035\uff46\036" +
    "\uff46\037\uff46\040\uff46\041\uff46\042\uff46\043\uff46\044\uff46" +
    "\045\uff46\046\uff46\047\uff46\050\uff46\051\uff46\052\uff46\053" +
    "\uff46\054\uff46\055\uff46\056\uff46\057\uff46\060\uff46\061\uff46" +
    "\062\uff46\065\uff46\001\002\000\142\004\uff2f\005\uff2f\006" +
    "\uff2f\007\uff2f\010\uff2f\011\uff2f\012\uff2f\013\uff2f\014\uff2f" +
    "\015\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f\022\uff2f\023" +
    "\uff2f\024\uff2f\025\uff2f\026\uff2f\027\uff2f\030\uff2f\031\uff2f" +
    "\032\uff2f\033\uff2f\034\uff2f\035\uff2f\036\uff2f\037\uff2f\040" +
    "\uff2f\041\uff2f\042\uff2f\043\uff2f\044\uff2f\045\uff2f\046\uff2f" +
    "\047\uff2f\050\uff2f\051\uff2f\052\uff2f\053\uff2f\054\uff2f\055" +
    "\uff2f\056\uff2f\057\uff2f\060\uff2f\061\uff2f\062\uff2f\065\uff2f" +
    "\001\002\000\142\004\uff39\005\uff39\006\uff39\007\uff39\010" +
    "\uff39\011\uff39\012\uff39\013\uff39\014\uff39\015\uff39\016\uff39" +
    "\017\uff39\020\uff39\021\uff39\022\uff39\023\uff39\024\uff39\025" +
    "\uff39\026\uff39\027\uff39\030\uff39\031\uff39\032\uff39\033\uff39" +
    "\034\uff39\035\uff39\036\uff39\037\uff39\040\uff39\041\uff39\042" +
    "\uff39\043\uff39\044\uff39\045\uff39\046\uff39\047\uff39\050\uff39" +
    "\051\uff39\052\uff39\053\uff39\054\uff39\055\uff39\056\uff39\057" +
    "\uff39\060\uff39\061\uff39\062\uff39\065\uff39\001\002\000\142" +
    "\004\uff43\005\uff43\006\uff43\007\uff43\010\uff43\011\uff43\012" +
    "\uff43\013\uff43\014\uff43\015\uff43\016\uff43\017\uff43\020\uff43" +
    "\021\uff43\022\uff43\023\uff43\024\uff43\025\uff43\026\uff43\027" +
    "\uff43\030\uff43\031\uff43\032\uff43\033\uff43\034\uff43\035\uff43" +
    "\036\uff43\037\uff43\040\uff43\041\uff43\042\uff43\043\uff43\044" +
    "\uff43\045\uff43\046\uff43\047\uff43\050\uff43\051\uff43\052\uff43" +
    "\053\uff43\054\uff43\055\uff43\056\uff43\057\uff43\060\uff43\061" +
    "\uff43\062\uff43\065\uff43\001\002\000\142\004\uff36\005\uff36" +
    "\006\uff36\007\uff36\010\uff36\011\uff36\012\uff36\013\uff36\014" +
    "\uff36\015\uff36\016\uff36\017\uff36\020\uff36\021\uff36\022\uff36" +
    "\023\uff36\024\uff36\025\uff36\026\uff36\027\uff36\030\uff36\031" +
    "\uff36\032\uff36\033\uff36\034\uff36\035\uff36\036\uff36\037\uff36" +
    "\040\uff36\041\uff36\042\uff36\043\uff36\044\uff36\045\uff36\046" +
    "\uff36\047\uff36\050\uff36\051\uff36\052\uff36\053\uff36\054\uff36" +
    "\055\uff36\056\uff36\057\uff36\060\uff36\061\uff36\062\uff36\065" +
    "\uff36\001\002\000\142\004\uff2b\005\uff2b\006\uff2b\007\uff2b" +
    "\010\uff2b\011\uff2b\012\uff2b\013\uff2b\014\uff2b\015\uff2b\016" +
    "\uff2b\017\uff2b\020\uff2b\021\uff2b\022\uff2b\023\uff2b\024\uff2b" +
    "\025\uff2b\026\uff2b\027\uff2b\030\uff2b\031\uff2b\032\uff2b\033" +
    "\uff2b\034\uff2b\035\uff2b\036\uff2b\037\uff2b\040\uff2b\041\uff2b" +
    "\042\uff2b\043\uff2b\044\uff2b\045\uff2b\046\uff2b\047\uff2b\050" +
    "\uff2b\051\uff2b\052\uff2b\053\uff2b\054\uff2b\055\uff2b\056\uff2b" +
    "\057\uff2b\060\uff2b\061\uff2b\062\uff2b\065\uff2b\001\002\000" +
    "\016\002\uff57\052\uff57\060\uff57\061\uff57\063\uff57\064\uff57" +
    "\001\002\000\142\004\uff53\005\uff53\006\uff53\007\uff53\010" +
    "\uff53\011\uff53\012\uff53\013\uff53\014\uff53\015\uff53\016\uff53" +
    "\017\uff53\020\uff53\021\uff53\022\uff53\023\uff53\024\uff53\025" +
    "\uff53\026\uff53\027\uff53\030\uff53\031\uff53\032\uff53\033\uff53" +
    "\034\uff53\035\uff53\036\uff53\037\uff53\040\uff53\041\uff53\042" +
    "\uff53\043\uff53\044\uff53\045\uff53\046\uff53\047\uff53\050\uff53" +
    "\051\uff53\052\uff53\053\uff53\054\uff53\055\uff53\056\uff53\057" +
    "\uff53\060\uff53\061\uff53\062\uff53\065\uff53\001\002\000\142" +
    "\004\uff45\005\uff45\006\uff45\007\uff45\010\uff45\011\uff45\012" +
    "\uff45\013\uff45\014\uff45\015\uff45\016\uff45\017\uff45\020\uff45" +
    "\021\uff45\022\uff45\023\uff45\024\uff45\025\uff45\026\uff45\027" +
    "\uff45\030\uff45\031\uff45\032\uff45\033\uff45\034\uff45\035\uff45" +
    "\036\uff45\037\uff45\040\uff45\041\uff45\042\uff45\043\uff45\044" +
    "\uff45\045\uff45\046\uff45\047\uff45\050\uff45\051\uff45\052\uff45" +
    "\053\uff45\054\uff45\055\uff45\056\uff45\057\uff45\060\uff45\061" +
    "\uff45\062\uff45\065\uff45\001\002\000\142\004\uff50\005\uff50" +
    "\006\uff50\007\uff50\010\uff50\011\uff50\012\uff50\013\uff50\014" +
    "\uff50\015\uff50\016\uff50\017\uff50\020\uff50\021\uff50\022\uff50" +
    "\023\uff50\024\uff50\025\uff50\026\uff50\027\uff50\030\uff50\031" +
    "\uff50\032\uff50\033\uff50\034\uff50\035\uff50\036\uff50\037\uff50" +
    "\040\uff50\041\uff50\042\uff50\043\uff50\044\uff50\045\uff50\046" +
    "\uff50\047\uff50\050\uff50\051\uff50\052\uff50\053\uff50\054\uff50" +
    "\055\uff50\056\uff50\057\uff50\060\uff50\061\uff50\062\uff50\065" +
    "\uff50\001\002\000\142\004\uff54\005\uff54\006\uff54\007\uff54" +
    "\010\uff54\011\uff54\012\uff54\013\uff54\014\uff54\015\uff54\016" +
    "\uff54\017\uff54\020\uff54\021\uff54\022\uff54\023\uff54\024\uff54" +
    "\025\uff54\026\uff54\027\uff54\030\uff54\031\uff54\032\uff54\033" +
    "\uff54\034\uff54\035\uff54\036\uff54\037\uff54\040\uff54\041\uff54" +
    "\042\uff54\043\uff54\044\uff54\045\uff54\046\uff54\047\uff54\050" +
    "\uff54\051\uff54\052\uff54\053\uff54\054\uff54\055\uff54\056\uff54" +
    "\057\uff54\060\uff54\061\uff54\062\uff54\065\uff54\001\002\000" +
    "\142\004\uff30\005\uff30\006\uff30\007\uff30\010\uff30\011\uff30" +
    "\012\uff30\013\uff30\014\uff30\015\uff30\016\uff30\017\uff30\020" +
    "\uff30\021\uff30\022\uff30\023\uff30\024\uff30\025\uff30\026\uff30" +
    "\027\uff30\030\uff30\031\uff30\032\uff30\033\uff30\034\uff30\035" +
    "\uff30\036\uff30\037\uff30\040\uff30\041\uff30\042\uff30\043\uff30" +
    "\044\uff30\045\uff30\046\uff30\047\uff30\050\uff30\051\uff30\052" +
    "\uff30\053\uff30\054\uff30\055\uff30\056\uff30\057\uff30\060\uff30" +
    "\061\uff30\062\uff30\065\uff30\001\002\000\142\004\uff42\005" +
    "\uff42\006\uff42\007\uff42\010\uff42\011\uff42\012\uff42\013\uff42" +
    "\014\uff42\015\uff42\016\uff42\017\uff42\020\uff42\021\uff42\022" +
    "\uff42\023\uff42\024\uff42\025\uff42\026\uff42\027\uff42\030\uff42" +
    "\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42\036\uff42\037" +
    "\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044\uff42\045\uff42" +
    "\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42\053\uff42\054" +
    "\uff42\055\uff42\056\uff42\057\uff42\060\uff42\061\uff42\062\uff42" +
    "\065\uff42\001\002\000\142\004\uff2e\005\uff2e\006\uff2e\007" +
    "\uff2e\010\uff2e\011\uff2e\012\uff2e\013\uff2e\014\uff2e\015\uff2e" +
    "\016\uff2e\017\uff2e\020\uff2e\021\uff2e\022\uff2e\023\uff2e\024" +
    "\uff2e\025\uff2e\026\uff2e\027\uff2e\030\uff2e\031\uff2e\032\uff2e" +
    "\033\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e\040\uff2e\041" +
    "\uff2e\042\uff2e\043\uff2e\044\uff2e\045\uff2e\046\uff2e\047\uff2e" +
    "\050\uff2e\051\uff2e\052\uff2e\053\uff2e\054\uff2e\055\uff2e\056" +
    "\uff2e\057\uff2e\060\uff2e\061\uff2e\062\uff2e\065\uff2e\001\002" +
    "\000\142\004\uff44\005\uff44\006\uff44\007\uff44\010\uff44\011" +
    "\uff44\012\uff44\013\uff44\014\uff44\015\uff44\016\uff44\017\uff44" +
    "\020\uff44\021\uff44\022\uff44\023\uff44\024\uff44\025\uff44\026" +
    "\uff44\027\uff44\030\uff44\031\uff44\032\uff44\033\uff44\034\uff44" +
    "\035\uff44\036\uff44\037\uff44\040\uff44\041\uff44\042\uff44\043" +
    "\uff44\044\uff44\045\uff44\046\uff44\047\uff44\050\uff44\051\uff44" +
    "\052\uff44\053\uff44\054\uff44\055\uff44\056\uff44\057\uff44\060" +
    "\uff44\061\uff44\062\uff44\065\uff44\001\002\000\142\004\uff31" +
    "\005\uff31\006\uff31\007\uff31\010\uff31\011\uff31\012\uff31\013" +
    "\uff31\014\uff31\015\uff31\016\uff31\017\uff31\020\uff31\021\uff31" +
    "\022\uff31\023\uff31\024\uff31\025\uff31\026\uff31\027\uff31\030" +
    "\uff31\031\uff31\032\uff31\033\uff31\034\uff31\035\uff31\036\uff31" +
    "\037\uff31\040\uff31\041\uff31\042\uff31\043\uff31\044\uff31\045" +
    "\uff31\046\uff31\047\uff31\050\uff31\051\uff31\052\uff31\053\uff31" +
    "\054\uff31\055\uff31\056\uff31\057\uff31\060\uff31\061\uff31\062" +
    "\uff31\065\uff31\001\002\000\142\004\uff40\005\uff40\006\uff40" +
    "\007\uff40\010\uff40\011\uff40\012\uff40\013\uff40\014\uff40\015" +
    "\uff40\016\uff40\017\uff40\020\uff40\021\uff40\022\uff40\023\uff40" +
    "\024\uff40\025\uff40\026\uff40\027\uff40\030\uff40\031\uff40\032" +
    "\uff40\033\uff40\034\uff40\035\uff40\036\uff40\037\uff40\040\uff40" +
    "\041\uff40\042\uff40\043\uff40\044\uff40\045\uff40\046\uff40\047" +
    "\uff40\050\uff40\051\uff40\052\uff40\053\uff40\054\uff40\055\uff40" +
    "\056\uff40\057\uff40\060\uff40\061\uff40\062\uff40\065\uff40\001" +
    "\002\000\142\004\uff52\005\uff52\006\uff52\007\uff52\010\uff52" +
    "\011\uff52\012\uff52\013\uff52\014\uff52\015\uff52\016\uff52\017" +
    "\uff52\020\uff52\021\uff52\022\uff52\023\uff52\024\uff52\025\uff52" +
    "\026\uff52\027\uff52\030\uff52\031\uff52\032\uff52\033\uff52\034" +
    "\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042\uff52" +
    "\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52\051" +
    "\uff52\052\uff52\053\uff52\054\uff52\055\uff52\056\uff52\057\uff52" +
    "\060\uff52\061\uff52\062\uff52\065\uff52\001\002\000\142\004" +
    "\uff55\005\uff55\006\uff55\007\uff55\010\uff55\011\uff55\012\uff55" +
    "\013\uff55\014\uff55\015\uff55\016\uff55\017\uff55\020\uff55\021" +
    "\uff55\022\uff55\023\uff55\024\uff55\025\uff55\026\uff55\027\uff55" +
    "\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55\035\uff55\036" +
    "\uff55\037\uff55\040\uff55\041\uff55\042\uff55\043\uff55\044\uff55" +
    "\045\uff55\046\uff55\047\uff55\050\uff55\051\uff55\052\uff55\053" +
    "\uff55\054\uff55\055\uff55\056\uff55\057\uff55\060\uff55\061\uff55" +
    "\062\uff55\065\uff55\001\002\000\142\004\uff3e\005\uff3e\006" +
    "\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e\013\uff3e\014\uff3e" +
    "\015\uff3e\016\uff3e\017\uff3e\020\uff3e\021\uff3e\022\uff3e\023" +
    "\uff3e\024\uff3e\025\uff3e\026\uff3e\027\uff3e\030\uff3e\031\uff3e" +
    "\032\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e\040" +
    "\uff3e\041\uff3e\042\uff3e\043\uff3e\044\uff3e\045\uff3e\046\uff3e" +
    "\047\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e\055" +
    "\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e\065\uff3e" +
    "\001\002\000\142\004\uff3c\005\uff3c\006\uff3c\007\uff3c\010" +
    "\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c\015\uff3c\016\uff3c" +
    "\017\uff3c\020\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c\025" +
    "\uff3c\026\uff3c\027\uff3c\030\uff3c\031\uff3c\032\uff3c\033\uff3c" +
    "\034\uff3c\035\uff3c\036\uff3c\037\uff3c\040\uff3c\041\uff3c\042" +
    "\uff3c\043\uff3c\044\uff3c\045\uff3c\046\uff3c\047\uff3c\050\uff3c" +
    "\051\uff3c\052\uff3c\053\uff3c\054\uff3c\055\uff3c\056\uff3c\057" +
    "\uff3c\060\uff3c\061\uff3c\062\uff3c\065\uff3c\001\002\000\142" +
    "\004\uff2a\005\uff2a\006\uff2a\007\uff2a\010\uff2a\011\uff2a\012" +
    "\uff2a\013\uff2a\014\uff2a\015\uff2a\016\uff2a\017\uff2a\020\uff2a" +
    "\021\uff2a\022\uff2a\023\uff2a\024\uff2a\025\uff2a\026\uff2a\027" +
    "\uff2a\030\uff2a\031\uff2a\032\uff2a\033\uff2a\034\uff2a\035\uff2a" +
    "\036\uff2a\037\uff2a\040\uff2a\041\uff2a\042\uff2a\043\uff2a\044" +
    "\uff2a\045\uff2a\046\uff2a\047\uff2a\050\uff2a\051\uff2a\052\uff2a" +
    "\053\uff2a\054\uff2a\055\uff2a\056\uff2a\057\uff2a\060\uff2a\061" +
    "\uff2a\062\uff2a\065\uff2a\001\002\000\142\004\uff4e\005\uff4e" +
    "\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\014" +
    "\uff4e\015\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e" +
    "\023\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\030\uff4e\031" +
    "\uff4e\032\uff4e\033\uff4e\034\uff4e\035\uff4e\036\uff4e\037\uff4e" +
    "\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e\046" +
    "\uff4e\047\uff4e\050\uff4e\051\uff4e\052\uff4e\053\uff4e\054\uff4e" +
    "\055\uff4e\056\uff4e\057\uff4e\060\uff4e\061\uff4e\062\uff4e\065" +
    "\uff4e\001\002\000\142\004\uff38\005\uff38\006\uff38\007\uff38" +
    "\010\uff38\011\uff38\012\uff38\013\uff38\014\uff38\015\uff38\016" +
    "\uff38\017\uff38\020\uff38\021\uff38\022\uff38\023\uff38\024\uff38" +
    "\025\uff38\026\uff38\027\uff38\030\uff38\031\uff38\032\uff38\033" +
    "\uff38\034\uff38\035\uff38\036\uff38\037\uff38\040\uff38\041\uff38" +
    "\042\uff38\043\uff38\044\uff38\045\uff38\046\uff38\047\uff38\050" +
    "\uff38\051\uff38\052\uff38\053\uff38\054\uff38\055\uff38\056\uff38" +
    "\057\uff38\060\uff38\061\uff38\062\uff38\065\uff38\001\002\000" +
    "\142\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f\011\uff4f" +
    "\012\uff4f\013\uff4f\014\uff4f\015\uff4f\016\uff4f\017\uff4f\020" +
    "\uff4f\021\uff4f\022\uff4f\023\uff4f\024\uff4f\025\uff4f\026\uff4f" +
    "\027\uff4f\030\uff4f\031\uff4f\032\uff4f\033\uff4f\034\uff4f\035" +
    "\uff4f\036\uff4f\037\uff4f\040\uff4f\041\uff4f\042\uff4f\043\uff4f" +
    "\044\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f\052" +
    "\uff4f\053\uff4f\054\uff4f\055\uff4f\056\uff4f\057\uff4f\060\uff4f" +
    "\061\uff4f\062\uff4f\065\uff4f\001\002\000\142\004\uff32\005" +
    "\uff32\006\uff32\007\uff32\010\uff32\011\uff32\012\uff32\013\uff32" +
    "\014\uff32\015\uff32\016\uff32\017\uff32\020\uff32\021\uff32\022" +
    "\uff32\023\uff32\024\uff32\025\uff32\026\uff32\027\uff32\030\uff32" +
    "\031\uff32\032\uff32\033\uff32\034\uff32\035\uff32\036\uff32\037" +
    "\uff32\040\uff32\041\uff32\042\uff32\043\uff32\044\uff32\045\uff32" +
    "\046\uff32\047\uff32\050\uff32\051\uff32\052\uff32\053\uff32\054" +
    "\uff32\055\uff32\056\uff32\057\uff32\060\uff32\061\uff32\062\uff32" +
    "\065\uff32\001\002\000\142\004\uff3f\005\uff3f\006\uff3f\007" +
    "\uff3f\010\uff3f\011\uff3f\012\uff3f\013\uff3f\014\uff3f\015\uff3f" +
    "\016\uff3f\017\uff3f\020\uff3f\021\uff3f\022\uff3f\023\uff3f\024" +
    "\uff3f\025\uff3f\026\uff3f\027\uff3f\030\uff3f\031\uff3f\032\uff3f" +
    "\033\uff3f\034\uff3f\035\uff3f\036\uff3f\037\uff3f\040\uff3f\041" +
    "\uff3f\042\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f\047\uff3f" +
    "\050\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f\055\uff3f\056" +
    "\uff3f\057\uff3f\060\uff3f\061\uff3f\062\uff3f\065\uff3f\001\002" +
    "\000\142\004\uff41\005\uff41\006\uff41\007\uff41\010\uff41\011" +
    "\uff41\012\uff41\013\uff41\014\uff41\015\uff41\016\uff41\017\uff41" +
    "\020\uff41\021\uff41\022\uff41\023\uff41\024\uff41\025\uff41\026" +
    "\uff41\027\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034\uff41" +
    "\035\uff41\036\uff41\037\uff41\040\uff41\041\uff41\042\uff41\043" +
    "\uff41\044\uff41\045\uff41\046\uff41\047\uff41\050\uff41\051\uff41" +
    "\052\uff41\053\uff41\054\uff41\055\uff41\056\uff41\057\uff41\060" +
    "\uff41\061\uff41\062\uff41\065\uff41\001\002\000\142\004\uff48" +
    "\005\uff48\006\uff48\007\uff48\010\uff48\011\uff48\012\uff48\013" +
    "\uff48\014\uff48\015\uff48\016\uff48\017\uff48\020\uff48\021\uff48" +
    "\022\uff48\023\uff48\024\uff48\025\uff48\026\uff48\027\uff48\030" +
    "\uff48\031\uff48\032\uff48\033\uff48\034\uff48\035\uff48\036\uff48" +
    "\037\uff48\040\uff48\041\uff48\042\uff48\043\uff48\044\uff48\045" +
    "\uff48\046\uff48\047\uff48\050\uff48\051\uff48\052\uff48\053\uff48" +
    "\054\uff48\055\uff48\056\uff48\057\uff48\060\uff48\061\uff48\062" +
    "\uff48\065\uff48\001\002\000\142\004\uff2d\005\uff2d\006\uff2d" +
    "\007\uff2d\010\uff2d\011\uff2d\012\uff2d\013\uff2d\014\uff2d\015" +
    "\uff2d\016\uff2d\017\uff2d\020\uff2d\021\uff2d\022\uff2d\023\uff2d" +
    "\024\uff2d\025\uff2d\026\uff2d\027\uff2d\030\uff2d\031\uff2d\032" +
    "\uff2d\033\uff2d\034\uff2d\035\uff2d\036\uff2d\037\uff2d\040\uff2d" +
    "\041\uff2d\042\uff2d\043\uff2d\044\uff2d\045\uff2d\046\uff2d\047" +
    "\uff2d\050\uff2d\051\uff2d\052\uff2d\053\uff2d\054\uff2d\055\uff2d" +
    "\056\uff2d\057\uff2d\060\uff2d\061\uff2d\062\uff2d\065\uff2d\001" +
    "\002\000\142\004\uff35\005\uff35\006\uff35\007\uff35\010\uff35" +
    "\011\uff35\012\uff35\013\uff35\014\uff35\015\uff35\016\uff35\017" +
    "\uff35\020\uff35\021\uff35\022\uff35\023\uff35\024\uff35\025\uff35" +
    "\026\uff35\027\uff35\030\uff35\031\uff35\032\uff35\033\uff35\034" +
    "\uff35\035\uff35\036\uff35\037\uff35\040\uff35\041\uff35\042\uff35" +
    "\043\uff35\044\uff35\045\uff35\046\uff35\047\uff35\050\uff35\051" +
    "\uff35\052\uff35\053\uff35\054\uff35\055\uff35\056\uff35\057\uff35" +
    "\060\uff35\061\uff35\062\uff35\065\uff35\001\002\000\142\004" +
    "\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51" +
    "\013\uff51\014\uff51\015\uff51\016\uff51\017\uff51\020\uff51\021" +
    "\uff51\022\uff51\023\uff51\024\uff51\025\uff51\026\uff51\027\uff51" +
    "\030\uff51\031\uff51\032\uff51\033\uff51\034\uff51\035\uff51\036" +
    "\uff51\037\uff51\040\uff51\041\uff51\042\uff51\043\uff51\044\uff51" +
    "\045\uff51\046\uff51\047\uff51\050\uff51\051\uff51\052\uff51\053" +
    "\uff51\054\uff51\055\uff51\056\uff51\057\uff51\060\uff51\061\uff51" +
    "\062\uff51\065\uff51\001\002\000\142\004\uff3d\005\uff3d\006" +
    "\uff3d\007\uff3d\010\uff3d\011\uff3d\012\uff3d\013\uff3d\014\uff3d" +
    "\015\uff3d\016\uff3d\017\uff3d\020\uff3d\021\uff3d\022\uff3d\023" +
    "\uff3d\024\uff3d\025\uff3d\026\uff3d\027\uff3d\030\uff3d\031\uff3d" +
    "\032\uff3d\033\uff3d\034\uff3d\035\uff3d\036\uff3d\037\uff3d\040" +
    "\uff3d\041\uff3d\042\uff3d\043\uff3d\044\uff3d\045\uff3d\046\uff3d" +
    "\047\uff3d\050\uff3d\051\uff3d\052\uff3d\053\uff3d\054\uff3d\055" +
    "\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d\062\uff3d\065\uff3d" +
    "\001\002\000\142\004\uff2c\005\uff2c\006\uff2c\007\uff2c\010" +
    "\uff2c\011\uff2c\012\uff2c\013\uff2c\014\uff2c\015\uff2c\016\uff2c" +
    "\017\uff2c\020\uff2c\021\uff2c\022\uff2c\023\uff2c\024\uff2c\025" +
    "\uff2c\026\uff2c\027\uff2c\030\uff2c\031\uff2c\032\uff2c\033\uff2c" +
    "\034\uff2c\035\uff2c\036\uff2c\037\uff2c\040\uff2c\041\uff2c\042" +
    "\uff2c\043\uff2c\044\uff2c\045\uff2c\046\uff2c\047\uff2c\050\uff2c" +
    "\051\uff2c\052\uff2c\053\uff2c\054\uff2c\055\uff2c\056\uff2c\057" +
    "\uff2c\060\uff2c\061\uff2c\062\uff2c\065\uff2c\001\002\000\142" +
    "\004\uff29\005\uff29\006\uff29\007\uff29\010\uff29\011\uff29\012" +
    "\uff29\013\uff29\014\uff29\015\uff29\016\uff29\017\uff29\020\uff29" +
    "\021\uff29\022\uff29\023\uff29\024\uff29\025\uff29\026\uff29\027" +
    "\uff29\030\uff29\031\uff29\032\uff29\033\uff29\034\uff29\035\uff29" +
    "\036\uff29\037\uff29\040\uff29\041\uff29\042\uff29\043\uff29\044" +
    "\uff29\045\uff29\046\uff29\047\uff29\050\uff29\051\uff29\052\uff29" +
    "\053\uff29\054\uff29\055\uff29\056\uff29\057\uff29\060\uff29\061" +
    "\uff29\062\uff29\065\uff29\001\002\000\142\004\uff47\005\uff47" +
    "\006\uff47\007\uff47\010\uff47\011\uff47\012\uff47\013\uff47\014" +
    "\uff47\015\uff47\016\uff47\017\uff47\020\uff47\021\uff47\022\uff47" +
    "\023\uff47\024\uff47\025\uff47\026\uff47\027\uff47\030\uff47\031" +
    "\uff47\032\uff47\033\uff47\034\uff47\035\uff47\036\uff47\037\uff47" +
    "\040\uff47\041\uff47\042\uff47\043\uff47\044\uff47\045\uff47\046" +
    "\uff47\047\uff47\050\uff47\051\uff47\052\uff47\053\uff47\054\uff47" +
    "\055\uff47\056\uff47\057\uff47\060\uff47\061\uff47\062\uff47\065" +
    "\uff47\001\002\000\142\004\uff4a\005\uff4a\006\uff4a\007\uff4a" +
    "\010\uff4a\011\uff4a\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016" +
    "\uff4a\017\uff4a\020\uff4a\021\uff4a\022\uff4a\023\uff4a\024\uff4a" +
    "\025\uff4a\026\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033" +
    "\uff4a\034\uff4a\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a" +
    "\042\uff4a\043\uff4a\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050" +
    "\uff4a\051\uff4a\052\uff4a\053\uff4a\054\uff4a\055\uff4a\056\uff4a" +
    "\057\uff4a\060\uff4a\061\uff4a\062\uff4a\065\uff4a\001\002\000" +
    "\142\004\uff4b\005\uff4b\006\uff4b\007\uff4b\010\uff4b\011\uff4b" +
    "\012\uff4b\013\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b\020" +
    "\uff4b\021\uff4b\022\uff4b\023\uff4b\024\uff4b\025\uff4b\026\uff4b" +
    "\027\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b\035" +
    "\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b\042\uff4b\043\uff4b" +
    "\044\uff4b\045\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052" +
    "\uff4b\053\uff4b\054\uff4b\055\uff4b\056\uff4b\057\uff4b\060\uff4b" +
    "\061\uff4b\062\uff4b\065\uff4b\001\002\000\142\004\uff3a\005" +
    "\uff3a\006\uff3a\007\uff3a\010\uff3a\011\uff3a\012\uff3a\013\uff3a" +
    "\014\uff3a\015\uff3a\016\uff3a\017\uff3a\020\uff3a\021\uff3a\022" +
    "\uff3a\023\uff3a\024\uff3a\025\uff3a\026\uff3a\027\uff3a\030\uff3a" +
    "\031\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037" +
    "\uff3a\040\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a\045\uff3a" +
    "\046\uff3a\047\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\054" +
    "\uff3a\055\uff3a\056\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a" +
    "\065\uff3a\001\002\000\006\002\uffc6\052\uffc6\001\002\000" +
    "\006\002\uffc9\052\uffc9\001\002\000\006\002\uffbe\052\uffbe" +
    "\001\002\000\020\002\uffbc\052\uffbc\060\045\061\051\062" +
    "\042\063\056\064\055\001\002\000\006\002\uffc1\052\uffc1" +
    "\001\002\000\006\002\uffc7\052\uffc7\001\002\000\004\040" +
    "\u0179\001\002\000\004\013\uff78\001\002\000\004\054\u0177" +
    "\001\002\000\010\004\uffac\013\u014b\025\u014c\001\002\000" +
    "\004\013\u0145\001\002\000\034\035\uff5a\037\uff5a\040\uff5a" +
    "\041\uff5a\044\uff5a\045\uff5a\046\uff5a\047\uff5a\050\uff5a\051" +
    "\uff5a\054\uff5a\057\uff5a\060\uff5a\001\002\000\004\013\uff77" +
    "\001\002\000\004\013\u0126\001\002\000\020\003\uff96\007" +
    "\uff96\013\uff96\023\uff96\034\uff96\053\uff96\054\uff96\001\002" +
    "\000\004\013\uff76\001\002\000\004\021\uff82\001\002\000" +
    "\004\025\u0113\001\002\000\004\054\uffa3\001\002\000\020" +
    "\003\uff80\007\uff80\013\uff80\023\uff80\034\uff80\053\uff80\054" +
    "\uff80\001\002\000\020\003\uff85\007\uff85\013\uff85\023\uff85" +
    "\034\uff85\053\uff85\054\uff85\001\002\000\020\003\266\007" +
    "\263\013\270\023\271\034\261\053\264\054\257\001\002" +
    "\000\050\003\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\331\014\uffd9\021\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\062" +
    "\uffd9\001\002\000\046\003\uffda\004\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\014\uffda\021\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\062\uffda\001\002\000\014\007\263\013\362\023\271\053" +
    "\264\054\257\001\002\000\032\003\354\006\303\007\304" +
    "\010\301\011\305\012\302\024\353\025\356\026\351\027" +
    "\355\030\352\031\350\001\002\000\010\023\326\053\325" +
    "\054\330\001\002\000\050\003\uffd8\004\uffd8\005\323\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8\021\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\062\uffd8\001\002\000\046\003\uffd7\004\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\014\uffd7\021" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\062\uffd7\001\002\000\010\021\uff8e\032" +
    "\uff8e\033\uff8e\001\002\000\010\021\uff84\032\314\033\315" +
    "\001\002\000\014\007\263\013\270\023\271\053\264\054" +
    "\257\001\002\000\006\053\273\054\274\001\002\000\010" +
    "\021\uff91\032\uff91\033\uff91\001\002\000\004\023\276\001" +
    "\002\000\004\023\275\001\002\000\046\003\uffd4\004\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\014\uffd4\021" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\062\uffd4\001\002\000\046\003\uffd3\004" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\014\uffd3" +
    "\021\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\062\uffd3\001\002\000\016\006\303" +
    "\007\304\010\301\011\305\012\302\014\300\001\002\000" +
    "\046\003\uffe0\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\014\uffe0\021\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\062\uffe0\001\002" +
    "\000\014\007\263\013\270\023\271\053\264\054\257\001" +
    "\002\000\014\007\263\013\270\023\271\053\264\054\257" +
    "\001\002\000\014\007\263\013\270\023\271\053\264\054" +
    "\257\001\002\000\014\007\263\013\270\023\271\053\264" +
    "\054\257\001\002\000\014\007\263\013\270\023\271\053" +
    "\264\054\257\001\002\000\046\003\uffdc\004\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\014\uffdc\021\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\062\uffdc\001\002\000\046\003\uffde\004\uffde\006" +
    "\uffde\007\uffde\010\301\011\305\012\302\014\uffde\021\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\062\uffde\001\002\000\046\003\uffdf\004\uffdf" +
    "\006\uffdf\007\uffdf\010\301\011\305\012\302\014\uffdf\021" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\062\uffdf\001\002\000\046\003\uffdb\004" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb" +
    "\021\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\062\uffdb\001\002\000\046\003\uffdd" +
    "\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014" +
    "\uffdd\021\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\062\uffdd\001\002\000\004\021" +
    "\321\001\002\000\020\003\266\007\263\013\270\023\271" +
    "\034\261\053\264\054\257\001\002\000\020\003\uff93\007" +
    "\uff93\013\uff93\023\uff93\034\uff93\053\uff93\054\uff93\001\002" +
    "\000\020\003\266\007\263\013\270\023\271\034\261\053" +
    "\264\054\257\001\002\000\010\021\uff92\032\314\033\uff92" +
    "\001\002\000\010\021\uff94\032\uff94\033\uff94\001\002\000" +
    "\004\062\037\001\002\000\020\002\uff83\052\uff83\060\uff83" +
    "\061\uff83\062\042\063\uff83\064\uff83\001\002\000\004\053" +
    "\324\001\002\000\046\003\uffd5\004\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\014\uffd5\021\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\062\uffd5\001\002\000\050\003\uffcf\004\uffcf\005\345\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf\021\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\062\uffcf\001\002\000\006\053\341\054\342" +
    "\001\002\000\046\003\uffd6\004\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\014\uffd6\021\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\062" +
    "\uffd6\001\002\000\050\003\uffd0\004\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\013\331\014\uffd0\021\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\062\uffd0\001\002\000\020\003\332\007\uffee\013" +
    "\uffee\014\ufff2\023\uffee\053\uffee\054\uffee\001\002\000\016" +
    "\007\uffed\013\uffed\014\ufff0\023\uffed\053\uffed\054\uffed\001" +
    "\002\000\004\014\340\001\002\000\014\007\263\013\270" +
    "\023\271\053\264\054\257\001\002\000\004\014\ufff3\001" +
    "\002\000\020\004\337\006\303\007\304\010\301\011\305" +
    "\012\302\014\ufff1\001\002\000\014\007\uffef\013\uffef\023" +
    "\uffef\053\uffef\054\uffef\001\002\000\046\003\ufff5\004\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\021" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\062\ufff5\001\002\000\004\023\344\001" +
    "\002\000\004\023\343\001\002\000\046\003\uffd2\004\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2\021" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\062\uffd2\001\002\000\046\003\uffd1\004" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\014\uffd1" +
    "\021\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\062\uffd1\001\002\000\004\053\346" +
    "\001\002\000\046\003\uffce\004\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\014\uffce\021\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\062" +
    "\uffce\001\002\000\014\007\263\013\270\023\271\053\264" +
    "\054\257\001\002\000\014\007\uff89\013\uff89\023\uff89\053" +
    "\uff89\054\uff89\001\002\000\014\007\uff8a\013\uff8a\023\uff8a" +
    "\053\uff8a\054\uff8a\001\002\000\014\007\uff88\013\uff88\023" +
    "\uff88\053\uff88\054\uff88\001\002\000\004\025\360\001\002" +
    "\000\014\007\uff86\013\uff86\023\uff86\053\uff86\054\uff86\001" +
    "\002\000\014\007\uff8b\013\uff8b\023\uff8b\053\uff8b\054\uff8b" +
    "\001\002\000\004\025\357\001\002\000\014\007\uff8c\013" +
    "\uff8c\023\uff8c\053\uff8c\054\uff8c\001\002\000\014\007\uff87" +
    "\013\uff87\023\uff87\053\uff87\054\uff87\001\002\000\024\006" +
    "\303\007\304\010\301\011\305\012\302\014\uff8d\021\uff8d" +
    "\032\uff8d\033\uff8d\001\002\000\014\007\263\013\270\023" +
    "\271\053\264\054\257\001\002\000\010\021\uff8f\032\uff8f" +
    "\033\uff8f\001\002\000\034\003\354\006\303\007\304\010" +
    "\301\011\305\012\302\014\300\024\353\025\356\026\351" +
    "\027\355\030\352\031\350\001\002\000\004\014\366\001" +
    "\002\000\010\021\uff90\032\uff90\033\uff90\001\002\000\020" +
    "\003\266\007\263\013\270\023\271\034\261\053\264\054" +
    "\257\001\002\000\010\021\uff7f\032\314\033\315\001\002" +
    "\000\004\021\372\001\002\000\004\062\037\001\002\000" +
    "\020\002\uff7e\052\uff7e\060\uff7e\061\uff7e\062\042\063\uff7e" +
    "\064\uff7e\001\002\000\004\054\375\001\002\000\004\042" +
    "\uffa2\001\002\000\004\042\377\001\002\000\004\043\u0100" +
    "\001\002\000\004\013\u0101\001\002\000\016\003\u0104\007" +
    "\263\013\270\023\271\053\264\054\257\001\002\000\004" +
    "\014\u0110\001\002\000\020\004\u0105\006\303\007\304\010" +
    "\301\011\305\012\302\014\uffa0\001\002\000\004\014\uff9c" +
    "\001\002\000\016\003\u0107\007\263\013\270\023\271\053" +
    "\264\054\257\001\002\000\020\004\u0108\006\303\007\304" +
    "\010\301\011\305\012\302\014\uff9f\001\002\000\004\014" +
    "\uff9d\001\002\000\012\003\u010b\007\u010c\053\u010a\054\u010d" +
    "\001\002\000\004\014\uff9e\001\002\000\004\014\uff99\001" +
    "\002\000\004\014\uff97\001\002\000\006\053\u010e\054\u010f" +
    "\001\002\000\004\014\uff9b\001\002\000\004\014\uff98\001" +
    "\002\000\004\014\uff9a\001\002\000\004\021\u0111\001\002" +
    "\000\004\062\037\001\002\000\020\002\uffa1\052\uffa1\060" +
    "\uffa1\061\uffa1\062\042\063\uffa1\064\uffa1\001\002\000\014" +
    "\007\263\013\270\023\271\053\264\054\257\001\002\000" +
    "\016\004\u0116\006\303\007\304\010\301\011\305\012\302" +
    "\001\002\000\016\002\uffb8\052\uffb8\060\uffb8\061\uffb8\063" +
    "\uffb8\064\uffb8\001\002\000\014\007\263\013\270\023\271" +
    "\053\264\054\257\001\002\000\020\004\u0118\006\303\007" +
    "\304\010\301\011\305\012\302\062\037\001\002\000\016" +
    "\003\u011c\007\263\013\270\023\271\053\264\054\257\001" +
    "\002\000\016\002\uffa7\052\uffa7\060\uffa7\061\uffa7\063\uffa7" +
    "\064\uffa7\001\002\000\020\002\uffa5\052\uffa5\060\uffa5\061" +
    "\uffa5\062\042\063\uffa5\064\uffa5\001\002\000\020\004\u0118" +
    "\006\303\007\304\010\301\011\305\012\302\062\037\001" +
    "\002\000\006\004\u0118\062\037\001\002\000\016\002\uffa4" +
    "\052\uffa4\060\uffa4\061\uffa4\063\uffa4\064\uffa4\001\002\000" +
    "\016\002\uffa6\052\uffa6\060\uffa6\061\uffa6\063\uffa6\064\uffa6" +
    "\001\002\000\004\021\u0120\001\002\000\004\062\037\001" +
    "\002\000\020\002\uff81\052\uff81\060\uff81\061\uff81\062\042" +
    "\063\uff81\064\uff81\001\002\000\020\003\266\007\263\013" +
    "\270\023\271\034\261\053\264\054\257\001\002\000\010" +
    "\021\u0124\032\314\033\315\001\002\000\004\062\037\001" +
    "\002\000\020\002\uff95\052\uff95\060\uff95\061\uff95\062\042" +
    "\063\uff95\064\uff95\001\002\000\016\003\uff75\007\uff75\014" +
    "\uff73\022\uff75\053\uff75\054\uff75\001\002\000\004\014\u0143" +
    "\001\002\000\014\003\u012b\007\u012d\022\u012e\053\u012a\054" +
    "\u012f\001\002\000\004\014\u0141\001\002\000\014\003\uff64" +
    "\004\uff64\005\u013f\006\uff64\014\uff64\001\002\000\004\014" +
    "\uff6a\001\002\000\012\003\uff6e\004\uff6e\006\uff6e\014\uff6e" +
    "\001\002\000\006\053\u0139\054\u013a\001\002\000\140\004" +
    "\uff28\005\uff28\006\uff28\007\uff28\010\uff28\011\uff28\012\uff28" +
    "\013\uff28\014\uff28\015\uff28\016\uff28\017\uff28\020\uff28\021" +
    "\uff28\022\uff28\023\uff28\024\uff28\025\uff28\026\uff28\027\uff28" +
    "\030\uff28\031\uff28\032\uff28\033\uff28\034\uff28\035\uff28\036" +
    "\uff28\037\uff28\040\uff28\041\uff28\042\uff28\043\uff28\044\uff28" +
    "\045\uff28\046\uff28\047\uff28\050\uff28\051\uff28\052\uff28\053" +
    "\uff28\054\uff28\055\uff28\056\uff28\057\uff28\060\uff28\061\uff28" +
    "\062\uff28\001\002\000\012\003\uff65\004\uff65\006\uff65\014" +
    "\uff65\001\002\000\140\004\157\005\204\006\174\007\171" +
    "\010\203\011\221\012\173\013\212\014\210\015\160\016" +
    "\156\017\227\020\226\021\153\022\u0131\023\216\024\225" +
    "\025\162\026\172\027\200\030\165\031\176\032\215\033" +
    "\202\034\214\035\205\036\222\037\206\040\152\041\230" +
    "\042\164\043\211\044\154\045\166\046\220\047\155\050" +
    "\161\051\213\052\201\053\167\054\207\055\224\056\177" +
    "\057\175\060\217\061\163\062\223\001\002\000\012\003" +
    "\uff6c\004\uff6c\006\uff6c\014\uff6c\001\002\000\012\003\u0135" +
    "\004\u0137\006\u0136\014\uff68\001\002\000\014\003\u012b\007" +
    "\u012d\022\u012e\053\u012a\054\u012f\001\002\000\004\014\uff6b" +
    "\001\002\000\014\003\uff6f\007\uff6f\022\uff6f\053\uff6f\054" +
    "\uff6f\001\002\000\014\003\uff70\007\uff70\022\uff70\053\uff70" +
    "\054\uff70\001\002\000\014\003\uff71\007\uff71\022\uff71\053" +
    "\uff71\054\uff71\001\002\000\004\014\uff69\001\002\000\014" +
    "\003\uff61\004\uff61\005\u013b\006\uff61\014\uff61\001\002\000" +
    "\012\003\uff62\004\uff62\006\uff62\014\uff62\001\002\000\004" +
    "\053\u013c\001\002\000\012\003\uff60\004\uff60\006\uff60\014" +
    "\uff60\001\002\000\012\003\u0135\004\u0137\006\u0136\014\uff68" +
    "\001\002\000\004\014\uff6d\001\002\000\004\053\u0140\001" +
    "\002\000\012\003\uff63\004\uff63\006\uff63\014\uff63\001\002" +
    "\000\004\062\037\001\002\000\020\002\uff74\052\uff74\060" +
    "\uff74\061\uff74\062\042\063\uff74\064\uff74\001\002\000\004" +
    "\062\037\001\002\000\020\002\uff72\052\uff72\060\uff72\061" +
    "\uff72\062\042\063\uff72\064\uff72\001\002\000\016\003\u012b" +
    "\007\u012d\014\u0147\022\u012e\053\u012a\054\u012f\001\002\000" +
    "\004\014\u0149\001\002\000\004\062\037\001\002\000\020" +
    "\002\uff79\052\uff79\060\uff79\061\uff79\062\042\063\uff79\064" +
    "\uff79\001\002\000\004\062\037\001\002\000\020\002\uff7a" +
    "\052\uff7a\060\uff7a\061\uff7a\062\042\063\uff7a\064\uff7a\001" +
    "\002\000\020\003\332\007\uffee\013\uffee\014\ufff2\023\uffee" +
    "\053\uffee\054\uffee\001\002\000\024\003\u0155\007\uffbb\013" +
    "\uffbb\023\uffbb\047\240\050\245\051\250\053\uffbb\054\uffbb" +
    "\001\002\000\004\004\u014e\001\002\000\004\054\u014f\001" +
    "\002\000\006\004\uffab\025\uffab\001\002\000\006\004\u0151" +
    "\025\uffa8\001\002\000\004\054\u0153\001\002\000\004\025" +
    "\uffaa\001\002\000\006\004\u0151\025\uffa8\001\002\000\004" +
    "\025\uffa9\001\002\000\010\004\uffb7\025\uffb7\062\uffb7\001" +
    "\002\000\014\007\263\013\270\023\271\053\264\054\257" +
    "\001\002\000\004\013\u0158\001\002\000\016\003\u012b\007" +
    "\u012d\014\u015a\022\u012e\053\u012a\054\u012f\001\002\000\004" +
    "\014\u015c\001\002\000\004\062\037\001\002\000\020\002" +
    "\uff7b\052\uff7b\060\uff7b\061\uff7b\062\042\063\uff7b\064\uff7b" +
    "\001\002\000\004\062\037\001\002\000\020\002\uff7c\052" +
    "\uff7c\060\uff7c\061\uff7c\062\042\063\uff7c\064\uff7c\001\002" +
    "\000\022\004\uffba\006\303\007\304\010\301\011\305\012" +
    "\302\025\uffba\062\uffba\001\002\000\010\004\u0162\025\u0161" +
    "\062\037\001\002\000\016\002\uffb9\052\uffb9\060\uffb9\061" +
    "\uffb9\063\uffb9\064\uffb9\001\002\000\016\003\u016e\007\263" +
    "\013\270\023\271\053\264\054\257\001\002\000\004\054" +
    "\u0164\001\002\000\020\002\uffb1\052\uffb1\060\uffb1\061\uffb1" +
    "\062\042\063\uffb1\064\uffb1\001\002\000\004\025\u0165\001" +
    "\002\000\016\003\u0167\007\uffb5\013\uffb5\023\uffb5\053\uffb5" +
    "\054\uffb5\001\002\000\014\007\263\013\270\023\271\053" +
    "\264\054\257\001\002\000\010\004\uffb0\025\uffb0\062\uffb0" +
    "\001\002\000\010\004\u0162\025\u0161\062\037\001\002\000" +
    "\016\002\uffaf\052\uffaf\060\uffaf\061\uffaf\063\uffaf\064\uffaf" +
    "\001\002\000\022\004\uffb4\006\303\007\304\010\301\011" +
    "\305\012\302\025\uffb4\062\uffb4\001\002\000\010\004\u0162" +
    "\025\u0161\062\037\001\002\000\016\002\uffb3\052\uffb3\060" +
    "\uffb3\061\uffb3\063\uffb3\064\uffb3\001\002\000\022\004\u0162" +
    "\006\303\007\304\010\301\011\305\012\302\025\u0161\062" +
    "\037\001\002\000\010\004\uffae\025\uffae\062\uffae\001\002" +
    "\000\010\004\u0162\025\u0161\062\037\001\002\000\016\002" +
    "\uffad\052\uffad\060\uffad\061\uffad\063\uffad\064\uffad\001\002" +
    "\000\016\002\uffb2\052\uffb2\060\uffb2\061\uffb2\063\uffb2\064" +
    "\uffb2\001\002\000\010\004\u0162\025\u0161\062\037\001\002" +
    "\000\016\002\uffb6\052\uffb6\060\uffb6\061\uffb6\063\uffb6\064" +
    "\uffb6\001\002\000\004\014\u0175\001\002\000\004\062\037" +
    "\001\002\000\020\002\ufff4\052\ufff4\060\ufff4\061\ufff4\062" +
    "\042\063\ufff4\064\ufff4\001\002\000\004\062\037\001\002" +
    "\000\020\002\uff7d\052\uff7d\060\uff7d\061\uff7d\062\042\063" +
    "\uff7d\064\uff7d\001\002\000\016\003\u017b\007\263\013\270" +
    "\023\271\053\264\054\257\001\002\000\016\006\303\007" +
    "\304\010\301\011\305\012\302\062\uffe2\001\002\000\004" +
    "\062\uffe1\001\002\000\004\062\037\001\002\000\020\002" +
    "\uffe3\052\uffe3\060\uffe3\061\uffe3\062\042\063\uffe3\064\uffe3" +
    "\001\002\000\006\002\uffc5\052\uffc5\001\002\000\006\002" +
    "\uffc2\052\uffc2\001\002\000\006\002\uffc3\052\uffc3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\010\011\003\032\006\036\004\001\001\000" +
    "\004\002\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\014\001\001\000\004\070\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\017\001\001\000\002\001\001\000\004\052\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\074\024\001" +
    "\001\000\004\053\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\075\031\001\001\000" +
    "\004\053\032\001\001\000\002\001\001\000\004\072\034" +
    "\001\001\000\002\001\001\000\004\032\037\001\001\000" +
    "\002\001\001\000\004\073\040\001\001\000\036\004\051" +
    "\005\061\006\056\015\062\016\047\020\053\022\043\023" +
    "\045\024\063\031\042\033\052\034\060\035\057\054\046" +
    "\001\001\000\002\001\001\000\036\004\051\005\061\006" +
    "\u017f\015\062\016\047\020\053\022\043\023\045\024\063" +
    "\031\042\033\052\034\060\035\057\054\046\001\001\000" +
    "\036\004\051\005\061\006\u017e\015\062\016\047\020\053" +
    "\022\043\023\045\024\063\031\042\033\052\034\060\035" +
    "\057\054\046\001\001\000\002\001\001\000\036\004\051" +
    "\005\061\006\u017d\015\062\016\047\020\053\022\043\023" +
    "\045\024\063\031\042\033\052\034\060\035\057\054\046" +
    "\001\001\000\010\041\242\050\251\076\236\001\001\000" +
    "\036\004\051\005\061\006\235\015\062\016\047\020\053" +
    "\022\043\023\045\024\063\031\042\033\052\034\060\035" +
    "\057\054\046\001\001\000\004\032\233\001\001\000\036" +
    "\004\051\005\061\006\232\015\062\016\047\020\053\022" +
    "\043\023\045\024\063\031\042\033\052\034\060\035\057" +
    "\054\046\001\001\000\036\004\051\005\061\006\231\015" +
    "\062\016\047\020\053\022\043\023\045\024\063\031\042" +
    "\033\052\034\060\035\057\054\046\001\001\000\036\004" +
    "\051\005\061\006\230\015\062\016\047\020\053\022\043" +
    "\023\045\024\063\031\042\033\052\034\060\035\057\054" +
    "\046\001\001\000\004\037\150\001\001\000\004\042\071" +
    "\001\001\000\002\001\001\000\036\004\051\005\061\006" +
    "\070\015\062\016\047\020\053\022\043\023\045\024\063" +
    "\031\042\033\052\034\060\035\057\054\046\001\001\000" +
    "\036\004\051\005\061\006\067\015\062\016\047\020\053" +
    "\022\043\023\045\024\063\031\042\033\052\034\060\035" +
    "\057\054\046\001\001\000\036\004\051\005\061\006\066" +
    "\015\062\016\047\020\053\022\043\023\045\024\063\031" +
    "\042\033\052\034\060\035\057\054\046\001\001\000\036" +
    "\004\051\005\061\006\065\015\062\016\047\020\053\022" +
    "\043\023\045\024\063\031\042\033\052\034\060\035\057" +
    "\054\046\001\001\000\036\004\051\005\061\006\064\015" +
    "\062\016\047\020\053\022\043\023\045\024\063\031\042" +
    "\033\052\034\060\035\057\054\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\051\005" +
    "\061\006\234\015\062\016\047\020\053\022\043\023\045" +
    "\024\063\031\042\033\052\034\060\035\057\054\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\106\u014c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\112\u0121\001\001\000\002\001" +
    "\001\000\004\116\u011e\001\001\000\002\001\001\000\004" +
    "\110\373\001\001\000\004\117\366\001\001\000\004\114" +
    "\255\001\001\000\014\044\271\045\266\061\261\062\257" +
    "\064\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\044\362\061\261\062\257\064\264\001\001\000\004" +
    "\043\346\001\001\000\004\064\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\115\312" +
    "\001\001\000\010\061\276\062\257\064\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\061\311\062\257\064\264" +
    "\001\001\000\010\061\310\062\257\064\264\001\001\000" +
    "\010\061\307\062\257\064\264\001\001\000\010\061\306" +
    "\062\257\064\264\001\001\000\010\061\305\062\257\064" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\044\271\045\317\061\261\062\257\064\264" +
    "\001\001\000\004\113\315\001\001\000\014\044\271\045" +
    "\316\061\261\062\257\064\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\065\332\066\334\067\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\061\335\062\257\064\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\061\360\062\257\064\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\044\364\061\363\062\257\064\264\001\001\000" +
    "\002\001\001\000\004\043\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\044\271\045\367\061\261\062" +
    "\257\064\264\001\001\000\004\120\370\001\001\000\002" +
    "\001\001\000\004\032\372\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\111\375\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\055\u0101\061" +
    "\u0102\062\257\064\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\061\u0105\062\257\064" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u0108\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0111\001\001\000\002\001\001\000\012\047\u0114\061\u0113" +
    "\062\257\064\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\061\u0116\062\257\064\264\001\001\000\006" +
    "\032\u0119\046\u0118\001\001\000\010\061\u011a\062\257\064" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\u0119\046\u011d\001\001\000\006\032\u0119\046\u011c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u0120\001\001\000\002\001\001\000\014\044" +
    "\271\045\u0122\061\261\062\257\064\264\001\001\000\002" +
    "\001\001\000\004\032\u0124\001\001\000\002\001\001\000" +
    "\006\121\u0127\122\u0126\001\001\000\002\001\001\000\006" +
    "\056\u0128\060\u012b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\u013c\001\001\000\002" +
    "\001\001\000\004\037\u012f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\124\u0131\001\001\000\006\025\u0132" +
    "\057\u0133\001\001\000\006\056\u0137\060\u012b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\u0132" +
    "\057\u013d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0141\001\001\000\002\001\001" +
    "\000\004\032\u0143\001\001\000\002\001\001\000\006\056" +
    "\u0145\060\u012b\001\001\000\002\001\001\000\004\032\u0147" +
    "\001\001\000\002\001\001\000\004\032\u0149\001\001\000" +
    "\002\001\001\000\010\065\u0173\066\334\067\333\001\001" +
    "\000\006\041\u0156\077\u0155\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\u014f\001\001\000\004\051\u0151" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u0153\001\001\000\002\001\001\000\004\101\u0171\001\001" +
    "\000\010\061\u015d\062\257\064\264\001\001\000\002\001" +
    "\001\000\006\056\u0158\060\u012b\001\001\000\002\001\001" +
    "\000\004\032\u015a\001\001\000\002\001\001\000\004\032" +
    "\u015c\001\001\000\002\001\001\000\004\100\u015e\001\001" +
    "\000\006\012\u015f\032\u0162\001\001\000\002\001\001\000" +
    "\010\061\u016c\062\257\064\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0165\001" +
    "\001\000\010\061\u0169\062\257\064\264\001\001\000\004" +
    "\104\u0167\001\001\000\006\012\u0168\032\u0162\001\001\000" +
    "\002\001\001\000\004\103\u016a\001\001\000\006\012\u016b" +
    "\032\u0162\001\001\000\002\001\001\000\006\012\u0170\032" +
    "\u0162\001\001\000\004\105\u016e\001\001\000\006\012\u016f" +
    "\032\u0162\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\u0172\032\u0162\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u0175\001\001\000\002\001\001\000" +
    "\004\032\u0177\001\001\000\002\001\001\000\012\061\u0179" +
    "\062\257\063\u017b\064\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u017c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPYTHON$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPYTHON$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPYTHON$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public TablaSimbolos tabla;

    //tabs de guia para las lines de instrucciones
    public ArrayList<Integer> instrucciones = new ArrayList<>();
    //tabs de guia que agarran el valor en la primer linea luego de una instruccion
    public ArrayList<Integer> lineasGuias = new ArrayList<>();
    public ArrayList<String> tipoInstruccion = new ArrayList<>();
    public static int jerarquia = 0;
    public static Boolean primerLinea = null;
    public OperacionesPY op = new OperacionesPY();
    public VerifPY verif = new VerifPY();

    /*MANEJO CUARTETOS*/
    public ArrayList<Boolean> usoPila = new ArrayList<>();
    public String idFor = "";
    public ArrayList<ArrayList<Nodo>> pilaFor = new ArrayList<>();
    public ManejoPython manejoPY = new ManejoPython();
    public static String aux2 = "", aux3 = "", etInst = "";
    public static boolean inst = false;
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();

    /*---------------------------------------CODIGO EJECUTABLE--------------------------------------------*/

    public ExePython exe = new ExePython();
    public String metodo = "";

    public SintaxPYTHON(AnalizadorLexico2 lex, TablaSimbolos tabla){
        super(lex);
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
       // setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,""); 
       int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" Token no reconocido: "+s.toString()+"\n";
        
    }
    
   /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" ";
    }*/



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxPYTHON$actions {
  private final SintaxPYTHON parser;

  /** Constructor */
  CUP$SintaxPYTHON$actions(SintaxPYTHON parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxPYTHON$do_action(
    int                        CUP$SintaxPYTHON$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPYTHON$parser,
    java.util.Stack            CUP$SintaxPYTHON$stack,
    int                        CUP$SintaxPYTHON$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPYTHON$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPYTHON$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // TEXTO3 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TEXTO3 ::= TEXTO3 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // TEXTO3 ::= TEXTO3 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // TEXTO3 ::= TEXTO3 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // TEXTO3 ::= TEXTO3 tab 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a + " " + "\t"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // TEXTO3 ::= TEXTO3 condEnd 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // TEXTO3 ::= TEXTO3 condPass 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // TEXTO3 ::= TEXTO3 condDel 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TEXTO3 ::= TEXTO3 condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // TEXTO3 ::= TEXTO3 floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // TEXTO3 ::= TEXTO3 charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // TEXTO3 ::= TEXTO3 intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // TEXTO3 ::= TEXTO3 condElif 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // TEXTO3 ::= TEXTO3 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // TEXTO3 ::= TEXTO3 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // TEXTO3 ::= TEXTO3 condRange 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // TEXTO3 ::= TEXTO3 condIn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // TEXTO3 ::= TEXTO3 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TEXTO3 ::= TEXTO3 condReturn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TEXTO3 ::= TEXTO3 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TEXTO3 ::= TEXTO3 f 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TEXTO3 ::= TEXTO3 mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TEXTO3 ::= TEXTO3 not 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TEXTO3 ::= TEXTO3 or 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TEXTO3 ::= TEXTO3 and 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TEXTO3 ::= TEXTO3 mayorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TEXTO3 ::= TEXTO3 menorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TEXTO3 ::= TEXTO3 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TEXTO3 ::= TEXTO3 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TEXTO3 ::= TEXTO3 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TEXTO3 ::= TEXTO3 admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TEXTO3 ::= TEXTO3 comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TEXTO3 ::= TEXTO3 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // TEXTO3 ::= TEXTO3 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TEXTO3 ::= TEXTO3 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TEXTO3 ::= TEXTO3 llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // TEXTO3 ::= TEXTO3 llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // TEXTO3 ::= TEXTO3 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // TEXTO3 ::= TEXTO3 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // TEXTO3 ::= TEXTO3 porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // TEXTO3 ::= TEXTO3 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // TEXTO3 ::= TEXTO3 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // TEXTO3 ::= TEXTO3 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TEXTO3 ::= TEXTO3 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TEXTO3 ::= TEXTO3 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TEXTO3 ::= TEXTO3 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // TEXTO2 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // TEXTO2 ::= TEXTO2 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TEXTO2 ::= TEXTO2 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TEXTO2 ::= TEXTO2 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TEXTO2 ::= TEXTO2 enter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a + " " + "\n"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TEXTO2 ::= TEXTO2 tab 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a + " " + "\t"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TEXTO2 ::= TEXTO2 condEnd 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TEXTO2 ::= TEXTO2 condPass 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TEXTO2 ::= TEXTO2 condDel 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TEXTO2 ::= TEXTO2 condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TEXTO2 ::= TEXTO2 floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TEXTO2 ::= TEXTO2 charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TEXTO2 ::= TEXTO2 intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TEXTO2 ::= TEXTO2 condElif 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TEXTO2 ::= TEXTO2 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TEXTO2 ::= TEXTO2 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TEXTO2 ::= TEXTO2 condRange 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TEXTO2 ::= TEXTO2 condIn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TEXTO2 ::= TEXTO2 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TEXTO2 ::= TEXTO2 condReturn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TEXTO2 ::= TEXTO2 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TEXTO2 ::= TEXTO2 f 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TEXTO2 ::= TEXTO2 mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TEXTO2 ::= TEXTO2 not 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TEXTO2 ::= TEXTO2 or 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TEXTO2 ::= TEXTO2 and 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TEXTO2 ::= TEXTO2 mayorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // TEXTO2 ::= TEXTO2 menorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // TEXTO2 ::= TEXTO2 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // TEXTO2 ::= TEXTO2 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // TEXTO2 ::= TEXTO2 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TEXTO2 ::= TEXTO2 admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TEXTO2 ::= TEXTO2 comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TEXTO2 ::= TEXTO2 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TEXTO2 ::= TEXTO2 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TEXTO2 ::= TEXTO2 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TEXTO2 ::= TEXTO2 llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TEXTO2 ::= TEXTO2 llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TEXTO2 ::= TEXTO2 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TEXTO2 ::= TEXTO2 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TEXTO2 ::= TEXTO2 porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TEXTO2 ::= TEXTO2 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TEXTO2 ::= TEXTO2 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TEXTO2 ::= TEXTO2 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TEXTO2 ::= TEXTO2 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TEXTO2 ::= TEXTO2 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TEXTO2 ::= TEXTO2 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=a + " " + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // COMENTARIO_B ::= comentario_b TEXTO2 comentario_c 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",27, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // COMENTARIO_A ::= comentario_a TEXTO3 ENTER 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("COMENTARIO_A",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TAB ::= tab 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TAB",42, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TAB ::= TAB tab 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a+1; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TAB",42, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ENTER2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER2",7, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ENTER2 ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER2",7, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ENTER2 ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER2",7, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ENTER ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER",24, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ENTER ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER",24, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // VAR_MENSAJE ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // VAR_MENSAJE ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = a.toString() + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // VAR_MENSAJE ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.verif.verifVarMensaje(parser.tabla.getObPython(), b.toString(), parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright);    
                                                            RESULT = parser.manejoPY.retornarEtiquetaId(parser.tabla, b.toString(), parser.metodo);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // VAR_MENSAJE ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // VAR_MENSAJE ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT= a.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // VAR_MENSAJE ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.verif.verifVarMensaje(parser.tabla.getObPython(), a.toString(), parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); 
                                                            RESULT = parser.manejoPY.retornarEtiquetaId(parser.tabla, a.toString(), parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ID ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ID ::= coma id ID 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // RESTO_MENSAJE ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",45, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // RESTO_MENSAJE ::= CONC TEXTO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",45, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TEXTO ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en instruccion print\n"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TEXTO ::= comilla TEXTO2 comilla NT$28 RESTO_MENSAJE 
            {
              String RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$28 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  String et = a.toString() + b + c.toString();
                                                    parser.manejoPY.mostrarMensaje(parser.tabla.getObPython(), et, null); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$28",82, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TEXTO ::= VAR_MENSAJE NT$27 RESTO_MENSAJE 
            {
              String RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$27 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 parser.manejoPY.mostrarMensaje(parser.tabla.getObPython(), a, "%f"); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$27",81, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONC ::= error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en concatenacion de mensaje, se esperaba token tipo ',' o '+'\n";  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CONC",19, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONC ::= mas 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CONC",19, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONC ::= coma 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CONC",19, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // MENSAJES ::= TAB mensaje parentesis_a NT$26 parentesis_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		 parser.manejoPY.mostrarQuiebre(parser.tabla); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("MENSAJES",18, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$26 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
 parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$26",80, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // MENSAJES ::= TAB mensaje parentesis_a NT$25 TEXTO parentesis_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		 parser.manejoPY.mostrarQuiebre(parser.tabla);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("MENSAJES",18, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$25 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
 parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$25",79, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TIPO_INPUT ::= floatInput 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIPO_INPUT ::= charInput 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPO_INPUT ::= intInput 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LECTURA_DATOS ::= TAB TIPO_INPUT parentesis_a parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  
                                                                                                                parser.manejoPY.crearScanf(parser.tabla, "", c, parser.metodo);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",23, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LECTURA_DATOS ::= TAB TIPO_INPUT parentesis_a TEXTO parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  
                                                                                                                parser.manejoPY.mostrarQuiebre(parser.tabla);
                                                                                                                parser.manejoPY.crearScanf(parser.tabla, "", c, parser.metodo);   
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",23, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LECTURA_DATOS ::= TAB id igual TIPO_INPUT parentesis_a parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);    
                                                                                                                parser.manejoPY.crearScanf(parser.tabla, b.toString(), c, parser.metodo);     
                                                                                                                parser.op.valorVariableInput(parser.tabla.getObPython(), b.toString(), parser.jerarquia, c); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",23, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LECTURA_DATOS ::= TAB id igual TIPO_INPUT parentesis_a TEXTO parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);
                                                                                                                parser.manejoPY.mostrarQuiebre(parser.tabla);
                                                                                                                parser.manejoPY.crearScanf(parser.tabla, b.toString(), c, parser.metodo);     
                                                                                                                parser.op.valorVariableInput(parser.tabla.getObPython(), b.toString(), parser.jerarquia, c);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",23, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // BORRAR ::= TAB condDel id ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  parser.op.borrarVariable(parser.tabla.getObPython(), b.toString(), parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("BORRAR",17, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ELSE ::= TAB condElif NT$23 EXT NT$24 dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.manejoPY.primerChequeoIf(parser.tabla.getObPython(), h); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$24",78, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$23 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); 
                                                            parser.usoPila.add(false); 
                                                            parser.tipoInstruccion.add("ELSEIF");    
                                                            parser.pilaFalsas.add(new ArrayList<>());  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$23",77, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ELSE ::= TAB condElse NT$22 dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$22 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion);    
                                                            parser.tipoInstruccion.add("ELSE");   
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$22",76, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IF ::= TAB condIf NT$20 EXT NT$21 dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.manejoPY.primerChequeoIf(parser.tabla.getObPython(), h); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$21",75, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$20 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); 
                                                            parser.usoPila.add(false); 
                                                            parser.tipoInstruccion.add("IF");   
                                                            parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$20",74, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de valor, se esperaba un operador logico\n";
                                                           RESULT = "==";  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",33, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP ::= admiracion igual 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",33, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP ::= menorIgual 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",33, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP ::= mayorIgual 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",33, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP ::= menor 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",33, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP ::= mayor 
            {
              String RESULT =null;
		 RESULT=">"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",33, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP ::= igual igual 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",33, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONDICION ::= OPERACION OP OPERACION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.agregarBooleans(parser.tabla.getObPython(), parser.pilaFalsas, a, b, c, aleft+PanelPrincipal.totalLineas, aright);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CONDICION",34, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXT ::= error 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de booleano\n";
                                                           RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",35, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXT ::= not CONDICION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.cambiarGotos(a); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",35, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXT ::= not parentesis_a CONDICION parentesis_b 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = parser.manejoPY.cambiarGotos(a); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",35, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXT ::= CONDICION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",35, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXT ::= EXT or NT$19 EXT 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 parser.manejoPY.manejoOr(parser.tabla.getObPython(), parser.usoPila, parser.pilaCuarpeta, a, b); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",35, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$19 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
 parser.aux3 = parser.aux2; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$19",73, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXT ::= EXT and EXT 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.manejoAnd(a, b);   
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",35, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // WHILE ::= TAB condWhile NT$18 EXT dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		  parser.manejoPY.agregarWhile(parser.tabla.getObPython(), h);  
                                                                    parser.usoPila.add(false); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$18 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas,  parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); 
                                                                    parser.tipoInstruccion.add("WHILE"); 
                                                                    parser.pilaFalsas.add(new ArrayList<>());
                                                                    parser.manejoPY.agregarPreludioWhile(parser.tabla.getObPython()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$18",72, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_FOR ::= error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de salto en for, se esperaba un token numero\n"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP_FOR",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_FOR ::= menos numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.manejoPY.agregarAuxPilaFor(parser.tabla, parser.pilaFor, b.toString(), parser.idFor, true, parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP_FOR",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_FOR ::= numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.manejoPY.agregarAuxPilaFor(parser.tabla, parser.pilaFor, a.toString(), parser.idFor, true, parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP_FOR",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP_FOR ::= menos id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.op.buscarVariable(parser.tabla.getObPython(), b.toString(), parser.jerarquia); 
                                                parser.manejoPY.agregarAuxPilaFor(parser.tabla, parser.pilaFor, a.toString(), parser.idFor, false, parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP_FOR",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP_FOR ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia); 
                                                parser.manejoPY.agregarAuxPilaFor(parser.tabla, parser.pilaFor, a.toString(), parser.idFor, false, parser.metodo);   
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP_FOR",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RANGE ::= error 
            {
              NodoFor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de rango en for, se esperaba un token numero\n";
                                                               RESULT = new NodoFor(null, null, false);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RANGE",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RANGE ::= OPERACION coma error 
            {
              NodoFor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  int linea = bleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + bright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de rango en for, se esperaba un token numero\n"; 
                                                               RESULT = new NodoFor(null, a.getId(), true); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RANGE",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RANGE ::= OPERACION coma OPERACION coma OP_FOR 
            {
              NodoFor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		  if(a.getTipo().equals("Integer") && b.getTipo().equals("Integer")){ 
                                                                    RESULT=new NodoFor(a.getId(), b.getId(), true); 
                                                                } else { 
                                                                    RESULT=new NodoFor(a.getId(), b.getId(), false); 
                                                                } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RANGE",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RANGE ::= OPERACION coma OPERACION 
            {
              NodoFor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  if(a.getTipo().equals("Integer") && b.getTipo().equals("Integer")){ 
                                                                    RESULT=new NodoFor(a.getId(), b.getId(), true); 
                                                                } else { 
                                                                    RESULT=new NodoFor(a.getId(), b.getId(), false); 
                                                                } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RANGE",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RANGE ::= OPERACION 
            {
              NodoFor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  if(a.getTipo().equals("Integer")){ 
                                                                    RESULT=new NodoFor(null, a.getId(), true); 
                                                                } else {    
                                                                    RESULT=new NodoFor(null, a.getId(), false); 
                                                                } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RANGE",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FOR ::= TAB condFor NT$16 id NT$17 condIn condRange parentesis_a RANGE parentesis_b dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-11)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		NodoFor c = (NodoFor)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		  parser.manejoPY.agregarFor(parser.tabla, parser.pilaFalsas, b.toString(), c.getIdInicio(), c.getIdFin(), parser.metodo);  
                                                                                    parser.verif.comprobacionFor(parser.tabla.getObPython(), b.toString(), "", c.getValor(), "tipo2", parser.op, parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright, cleft+PanelPrincipal.totalLineas, cright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.exe.agregarVariable(parser.tabla, b.toString(), parser.metodo, null);
                                                                                    parser.idFor = b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$17",71, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$16 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); 
                                                                                    parser.tipoInstruccion.add("FOR"); 
                                                                                    parser.usoPila.add(false); 
                                                                                    parser.pilaFalsas.add(new ArrayList<>()); 
                                                                                    parser.pilaFor.add(new ArrayList<>()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$16",70, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VARS4 ::= coma error VARS4 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		  int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de valores, se esperaba operacion aritmetica\n";
                                                            RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS4",36, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VARS4 ::= ENTER 
            {
              ArrayList<NodoBoolean> RESULT =null;
		  RESULT=new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS4",36, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARS4 ::= coma OPERACION VARS4 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  if(b!=null){ 
                                                                if(!a.getTipo().equals("")){ 
                                                                    b.add(a); 
                                                                    RESULT=b; 
                                                                } else { 
                                                                    RESULT=null; 
                                                                } 
                                                            } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS4",36, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LADO2 ::= OPERACION coma OPERACION VARS4 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		   if(c!=null){ 
                                                            if(!a.getTipo().equals("") && !b.getTipo().equals("")){ 
                                                                c.add(a); 
                                                                c.add(b); 
                                                                RESULT=c; 
                                                            } else { 
                                                                RESULT=null; 
                                                            } 
                                                        } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LADO2",37, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARS2 ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS2",39, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARS2 ::= coma id VARS2 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS2",39, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LADO1 ::= id NT$14 coma id NT$15 VARS2 
            {
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  c.add(a.toString()); 
                                                            c.add(b.toString()); RESULT=c; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LADO1",38, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$15 ::= 
            {
              ArrayList<String> RESULT =(ArrayList<String>) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$15",69, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$14 ::= 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$14",68, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIABLES2 ::= igual error NT$13 VARIABLES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES2",8, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de valores, se esperaba operacion aritmetica\n"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$13",67, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARIABLES2 ::= coma id igual error NT$12 VARIABLES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES2",8, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$12 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  int linea = bleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + bright + " Tipo de error: SINTACTICO - Causa: Error en asignacion en variable: "+a.toString()+", se esperaba operacion aritmetica\n"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$12",66, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARIABLES2 ::= ENTER 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES2",8, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VARIABLES2 ::= igual OPERACION VARIABLES2 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES2",8, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARIABLES2 ::= coma id igual NT$10 OPERACION NT$11 VARIABLES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES2",8, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.manejoPY.agregarVariable(parser.tabla, parser.metodo, a.toString(), b, aleft+PanelPrincipal.totalLineas, aright);  
                                                        parser.exe.cambiarTipoVar(parser.tabla, a.toString(), parser.metodo, b.getTipo());    
                                                        parser.op.asignarVariables(parser.tabla.getObPython(), a.toString(), b.getTipo(), aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$11",65, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodo, null); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$10",64, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VARIABLES3 ::= TAB id igual error NT$9 VARIABLES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES3",25, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
   int linea = cleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + cright + " Tipo de error: SINTACTICO - Causa: Error en asignacion en variable: "+b.toString()+", se esperaba operacion aritmetica\n"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$9",63, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARIABLES3 ::= TAB LADO1 igual LADO2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);    
                                                        parser.manejoPY.asignacionesMultiples(parser.tabla.getObPython(), b, c, bleft+PanelPrincipal.totalLineas, bright);    
                                                        parser.op.asignacionesMultiples(parser.tabla.getObPython(), b, c, parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright); 
                                                        parser.exe.agregacionesMultiples(parser.tabla, b, c, parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES3",25, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VARIABLES3 ::= TAB id igual NT$7 OPERACION NT$8 VARIABLES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean c = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES3",25, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean c = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.manejoPY.agregarVariable(parser.tabla, parser.metodo, b.toString(), c, bleft+PanelPrincipal.totalLineas, bright);  
                                                        parser.exe.cambiarTipoVar(parser.tabla, b.toString(), parser.metodo, c.getTipo());
                                                        parser.op.asignarVariables(parser.tabla.getObPython(), b.toString(), c.getTipo(), bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$8",62, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.exe.agregarVariable(parser.tabla, b.toString(), parser.metodo, null); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPO_METODO ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPO_METODO ::= METODO_VOID CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUERPO_METODO ::= RETURN CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUERPO_METODO ::= COMENTARIO_A CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUERPO_METODO ::= COMENTARIO_B CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUERPO_METODO ::= condPass ENTER CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CUERPO_METODO ::= ELSE CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CUERPO_METODO ::= LECTURA_DATOS CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CUERPO_METODO ::= MENSAJES CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CUERPO_METODO ::= BORRAR CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CUERPO_METODO ::= IF CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUERPO_METODO ::= WHILE CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUERPO_METODO ::= FOR CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUERPO_METODO ::= VARIABLES3 CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO_VAL2 ::= numero punto numero 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_VAL2 ::= numero 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_VAL2 ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_VAL2 ::= comilla id comilla 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_VAL ::= menos numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_VAL ::= menos numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_VAL ::= menos id 
            {
              NodoBoolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  String tip=parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia);   
                                                                            if(tip.equals("")){ 
                                                                                int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: La variable "+a.toString()+" no existe dentro del archivo PYTHON.\n"; 
                                                                            }     
                                                                            RESULT = parser.manejoPY.devEtiquetaId(parser.tabla, a.toString(), parser.metodo, tip, true);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_VAL ::= menos comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_VAL ::= menos comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_VAL ::= comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_VAL ::= comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_VAL ::= numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_VAL ::= menos METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  String et = "-"+a.getId();
                                                                            RESULT = new NodoBoolean(a.getTipo(), et);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_VAL ::= METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_VAL ::= numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_VAL ::= id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  String tip = parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia); if(tip.equals("")){ 
                                                                                int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: La variable "+a.toString()+" no existe dentro del archivo PYTHON.\n"; 
                                                                            }
                                                                            RESULT = parser.manejoPY.devEtiquetaId(parser.tabla, a.toString(), parser.metodo, tip, false); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION ::= TIPO_VAL 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= OPERACION porcentaje OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "modulo",aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= OPERACION div OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "div", aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= OPERACION por OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "mult", aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= OPERACION menos OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "resta",aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= OPERACION mas OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "suma",aleft+PanelPrincipal.totalLineas, aright);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT=a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RETORNO ::= error 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en definicion de return\n"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RETORNO",49, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RETORNO ::= OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RETORNO",49, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RETURN ::= TAB NT$6 condReturn RETORNO ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		  parser.exe.agregarReturn(parser.tabla, parser.metodo, a.getTipo());
                                                parser.manejoPY.agregarReturn(parser.tabla, a.getId(), parser.metodo); 
                                                parser.op.agregarRetornoMetodo(parser.tabla.getObPython(), a.getTipo()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RETURN",2, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$6 ::= 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.op.verificarTabs(hright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, h, true, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETROS2 ::= error 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en definicion de parametros del metodo: "+parser.metodo+", se esperaba token id\n";
                                                                RESULT=new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",41, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETROS2 ::= 
            {
              ArrayList<String> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",41, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETROS2 ::= coma id NT$5 PARAMETROS2 
            {
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  b.add(a.toString()); RESULT=b; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",41, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$5 ::= 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.exe.agregarParametro(parser.tabla, a.toString(), parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETROS ::= error 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en definicion de parametros del metodo: "+parser.metodo+", se esperaba token id\n";
                                                                RESULT=new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS",40, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS ::= 
            {
              ArrayList<String> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS",40, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS ::= id NT$4 PARAMETROS2 
            {
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  if(b!=null){ 
                                                                    b.add(a.toString()); 
                                                                    RESULT=b; 
                                                                } else {    
                                                                    RESULT = new ArrayList<>(); 
                                                                } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS",40, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.exe.agregarParametro(parser.tabla, a.toString(), parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAM2 ::= error 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en definicion de parametros, se esperaba token id\n";
                                                                       RESULT = new ArrayList<>();  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM2",53, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAM2 ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM2",53, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAM2 ::= PARAM2 OPERACION coma 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		  if(a != null){
                                                                            if(!b.getTipo().equals("")){
                                                                                a.add(b);
                                                                                RESULT = a;
                                                                            } else {
                                                                                RESULT = null;
                                                                            }
                                                                        } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM2",53, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAM ::= error 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en definicion de parametros, se esperaba token id\n";
                                                                       RESULT = new ArrayList<>();  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM",52, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAM ::= PARAM2 OPERACION 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  if(a != null){
                                                                            if(!b.getTipo().equals("")){
                                                                                a.add(b);
                                                                                RESULT = a;
                                                                            } else {
                                                                                RESULT = null;
                                                                            }
                                                                        } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM",52, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAM_METODOS ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",51, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAM_METODOS ::= PARAM 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",51, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // METODO_VOID ::= TAB id parentesis_a PARAM_METODOS parentesis_b ENTER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		   parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, c, true, parser.tipoInstruccion);
                                                                                        parser.verif.verificarMetodo(parser.tabla, a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                                        parser.manejoPY.invocarMetodo(parser.tabla, a.toString(), b, aleft+PanelPrincipal.totalLineas); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("METODO_VOID",3, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // METODO_COND ::= id parentesis_a PARAM_METODOS parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		  boolean existe = parser.verif.verificarMetodo(parser.tabla, a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                            String et = parser.manejoPY.devolverEtiquetaMetodo(parser.tabla, a.toString(), b, aleft+PanelPrincipal.totalLineas);
                                                                            String tip = "";
                                                                            if(existe){
                                                                                tip = "Metodo";
                                                                            }  
                                                                            RESULT = new NodoBoolean(tip, et);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("METODO_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEF ::= error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en inicio de metodo, se esperaba token: Def\n"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("DEF",13, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEF ::= condDef 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("DEF",13, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODOS ::= condDef NT$0 id NT$1 parentesis_a PARAMETROS parentesis_b NT$2 dosPuntos ENTER NT$3 CUERPO_METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		  parser.manejoPY.finMetodo(parser.tabla.getObPython());  
                                                                    parser.jerarquia--; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("METODOS",1, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
  parser.op.agregarMetodo(parser.tabla.getObPython(), a.toString(), b, parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); 
                                                                    parser.primerLinea=false;  
                                                                    parser.instrucciones.add(0); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.manejoPY.crearMetodo(parser.tabla.getObPython(), a.toString(), b, "void"); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.exe.agregarMetodo(parser.tabla, a.toString()); 
                                                                    parser.metodo = a.toString();  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error 
            {
              Object RESULT =null;
		 PanelPrincipal.errores += " Error tipo: SINTACTICO, Posible error debido a una mal definicion en un metodo.\n";  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO METODOS 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO1 ::= ENTER2 INICIO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("INICIO1",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPYTHON$parser.done_parsing();
          return CUP$SintaxPYTHON$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

