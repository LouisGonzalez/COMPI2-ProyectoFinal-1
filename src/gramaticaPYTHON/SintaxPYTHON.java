
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 01 23:57:04 CST 2020
//----------------------------------------------------

package gramaticaPYTHON;

import java_cup.runtime.*;
import java.util.*;
import Operaciones.*;
import verificaciones.*;
import Tablas.*;
import manejoCuartetos.*;
import objetosApoyo.*;
import cuartetos.*;
import interfaz.*;
import manejoExe.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 01 23:57:04 CST 2020
  */
public class SintaxPYTHON extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxPYTHON() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxPYTHON(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxPYTHON(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\366\000\002\002\004\000\002\035\004\000\002\002" +
    "\004\000\002\002\002\000\002\002\003\000\002\067\002" +
    "\000\002\070\002\000\002\071\002\000\002\072\002\000" +
    "\002\003\016\000\002\063\006\000\002\005\010\000\002" +
    "\064\003\000\002\064\002\000\002\065\004\000\002\066" +
    "\005\000\002\066\002\000\002\073\002\000\002\051\005" +
    "\000\002\051\002\000\002\051\003\000\002\074\002\000" +
    "\002\052\006\000\002\052\002\000\002\052\003\000\002" +
    "\075\002\000\002\004\007\000\002\062\003\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\004\000\002\061\005\000\002\061\005\000\002\061" +
    "\005\000\002\061\006\000\002\061\006\000\002\061\004" +
    "\000\002\061\004\000\002\061\006\000\002\037\005\000" +
    "\002\037\003\000\002\037\003\000\002\037\005\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\005\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\002\000\002\006\004\000\002\076\002\000\002\077" +
    "\002\000\002\032\011\000\002\032\006\000\002\100\002" +
    "\000\002\101\002\000\002\012\011\000\002\012\005\000" +
    "\002\012\003\000\002\102\002\000\002\103\002\000\002" +
    "\047\010\000\002\050\005\000\002\050\002\000\002\046" +
    "\006\000\002\045\005\000\002\045\003\000\002\104\002" +
    "\000\002\105\002\000\002\015\016\000\002\054\003\000" +
    "\002\054\005\000\002\054\007\000\002\010\003\000\002" +
    "\010\004\000\002\010\003\000\002\010\004\000\002\106" +
    "\002\000\002\016\010\000\002\044\005\000\002\107\002" +
    "\000\002\044\006\000\002\044\003\000\002\044\006\000" +
    "\002\044\004\000\002\043\005\000\002\042\004\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\004\000\002\110\002\000\002\111\002" +
    "\000\002\017\011\000\002\112\002\000\002\021\007\000" +
    "\002\113\002\000\002\114\002\000\002\021\011\000\002" +
    "\022\006\000\002\030\014\000\002\030\011\000\002\030" +
    "\012\000\002\030\007\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\115\002\000\002\023\011\000" +
    "\002\116\002\000\002\023\010\000\002\024\003\000\002" +
    "\024\003\000\002\117\002\000\002\055\005\000\002\120" +
    "\002\000\002\055\007\000\002\056\004\000\002\056\002" +
    "\000\002\025\005\000\002\025\002\000\002\057\003\000" +
    "\002\057\003\000\002\057\005\000\002\057\004\000\002" +
    "\057\004\000\002\057\006\000\002\031\004\000\002\031" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\002" +
    "\000\002\053\004\000\002\053\003\000\002\033\005\000" +
    "\002\034\005\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\004\000\002\036\004\000\002\036\004" +
    "\000\002\036\004\000\002\036\004\000\002\036\004\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\004\000\002\036\004\000\002\036\004" +
    "\000\002\036\004\000\002\036\004\000\002\036\004\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\004\000\002\036\004\000\002\036\004" +
    "\000\002\036\004\000\002\036\004\000\002\036\004\000" +
    "\002\036\004\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\004\000\002\036\002\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0170\000\012\002\uff6d\003\uff6d\052\uff6d\062\007\001" +
    "\002\000\010\002\ufffe\003\012\052\ufffe\001\002\000\004" +
    "\002\011\001\002\000\004\062\010\001\002\000\012\002" +
    "\uff6e\003\uff6e\052\uff6e\062\uff70\001\002\000\012\002\uff6f" +
    "\003\uff6f\052\uff6f\062\uff71\001\002\000\004\002\001\001" +
    "\002\000\006\002\ufffd\052\ufffd\001\002\000\006\002\000" +
    "\052\014\001\002\000\004\054\ufffc\001\002\000\006\002" +
    "\uffff\052\uffff\001\002\000\004\054\017\001\002\000\004" +
    "\013\ufffb\001\002\000\004\013\021\001\002\000\010\003" +
    "\022\014\uffee\054\024\001\002\000\004\014\uffed\001\002" +
    "\000\004\014\034\001\002\000\010\003\ufff0\004\ufff0\014" +
    "\ufff0\001\002\000\010\003\026\004\030\014\uffea\001\002" +
    "\000\004\014\uffe9\001\002\000\004\014\uffef\001\002\000" +
    "\004\054\031\001\002\000\010\003\uffec\004\uffec\014\uffec" +
    "\001\002\000\010\003\026\004\030\014\uffea\001\002\000" +
    "\004\014\uffeb\001\002\000\004\021\ufffa\001\002\000\004" +
    "\021\036\001\002\000\004\062\040\001\002\000\022\002" +
    "\ufff9\003\ufff9\052\ufff9\060\ufff9\061\ufff9\062\042\063\ufff9" +
    "\064\ufff9\001\002\000\022\002\uff70\003\uff70\052\uff70\060" +
    "\uff70\061\uff70\062\uff70\063\uff70\064\uff70\001\002\000\020" +
    "\002\uffc1\003\060\052\uffc1\060\045\061\051\063\056\064" +
    "\055\001\002\000\022\002\uff71\003\uff71\052\uff71\060\uff71" +
    "\061\uff71\062\uff71\063\uff71\064\uff71\001\002\000\020\002" +
    "\uffc1\003\060\052\uffc1\060\045\061\051\063\056\064\055" +
    "\001\002\000\020\002\uffc1\003\060\052\uffc1\060\045\061" +
    "\051\063\056\064\055\001\002\000\034\035\uff6b\037\uff6b" +
    "\040\uff6b\041\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050" +
    "\uff6b\051\uff6b\054\uff6b\057\uff6b\060\uff6b\001\002\000\020" +
    "\002\uffc1\003\060\052\uffc1\060\045\061\051\063\056\064" +
    "\055\001\002\000\034\035\251\037\253\040\uffe8\041\255" +
    "\044\250\045\257\046\256\047\241\050\247\051\252\054" +
    "\245\057\243\060\246\001\002\000\020\002\uffc1\003\060" +
    "\052\uffc1\060\045\061\051\063\056\064\055\001\002\000" +
    "\004\062\040\001\002\000\020\002\uffc1\003\060\052\uffc1" +
    "\060\045\061\051\063\056\064\055\001\002\000\020\002" +
    "\uffc1\003\060\052\uffc1\060\045\061\051\063\056\064\055" +
    "\001\002\000\020\002\uffc1\003\060\052\uffc1\060\045\061" +
    "\051\063\056\064\055\001\002\000\140\004\uff3a\005\uff3a" +
    "\006\uff3a\007\uff3a\010\uff3a\011\uff3a\012\uff3a\013\uff3a\014" +
    "\uff3a\015\uff3a\016\uff3a\017\uff3a\020\uff3a\021\uff3a\023\uff3a" +
    "\024\uff3a\025\uff3a\026\uff3a\027\uff3a\030\uff3a\031\uff3a\032" +
    "\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\040\uff3a" +
    "\041\uff3a\042\uff3a\043\uff3a\044\uff3a\045\uff3a\046\uff3a\047" +
    "\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\054\uff3a\055\uff3a" +
    "\056\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a\065\uff3a\001" +
    "\002\000\136\004\uff0c\005\uff0c\006\uff0c\007\uff0c\010\uff0c" +
    "\011\uff0c\012\uff0c\013\uff0c\014\uff0c\015\uff0c\016\uff0c\017" +
    "\uff0c\020\uff0c\021\uff0c\023\uff0c\024\uff0c\025\uff0c\026\uff0c" +
    "\027\uff0c\030\uff0c\031\uff0c\032\uff0c\033\uff0c\034\uff0c\035" +
    "\uff0c\036\uff0c\037\uff0c\040\uff0c\041\uff0c\042\uff0c\043\uff0c" +
    "\044\uff0c\045\uff0c\046\uff0c\047\uff0c\050\uff0c\051\uff0c\052" +
    "\uff0c\053\uff0c\054\uff0c\055\uff0c\056\uff0c\057\uff0c\060\uff0c" +
    "\061\uff0c\062\uff0c\001\002\000\006\002\ufff8\052\ufff8\001" +
    "\002\000\020\002\uffc1\003\060\052\uffc1\060\045\061\051" +
    "\063\056\064\055\001\002\000\020\002\uffc1\003\060\052" +
    "\uffc1\060\045\061\051\063\056\064\055\001\002\000\020" +
    "\002\uffc1\003\060\052\uffc1\060\045\061\051\063\056\064" +
    "\055\001\002\000\020\002\uffc1\003\060\052\uffc1\060\045" +
    "\061\051\063\056\064\055\001\002\000\020\002\uffc1\003" +
    "\060\052\uffc1\060\045\061\051\063\056\064\055\001\002" +
    "\000\020\002\uffc1\003\060\052\uffc1\060\045\061\051\063" +
    "\056\064\055\001\002\000\006\002\uffc9\052\uffc9\001\002" +
    "\000\006\002\uffcd\052\uffcd\001\002\000\006\002\uffc2\052" +
    "\uffc2\001\002\000\006\002\uffc4\052\uffc4\001\002\000\006" +
    "\002\uffc5\052\uffc5\001\002\000\006\002\uffc0\052\uffc0\001" +
    "\002\000\136\004\105\005\127\006\117\007\114\010\126" +
    "\011\144\012\116\013\135\014\133\015\104\016\102\017" +
    "\151\020\147\021\077\023\141\024\150\025\106\026\115" +
    "\027\123\030\111\031\121\032\137\033\124\034\140\035" +
    "\130\036\146\037\131\040\076\041\152\042\110\043\134" +
    "\044\100\045\112\046\143\047\101\050\103\051\136\052" +
    "\125\053\113\054\132\055\145\056\122\057\120\060\142" +
    "\061\107\062\040\001\002\000\022\002\uff6a\003\uff6a\052" +
    "\uff6a\060\uff6a\061\uff6a\062\042\063\uff6a\064\uff6a\001\002" +
    "\000\136\004\uff1e\005\uff1e\006\uff1e\007\uff1e\010\uff1e\011" +
    "\uff1e\012\uff1e\013\uff1e\014\uff1e\015\uff1e\016\uff1e\017\uff1e" +
    "\020\uff1e\021\uff1e\023\uff1e\024\uff1e\025\uff1e\026\uff1e\027" +
    "\uff1e\030\uff1e\031\uff1e\032\uff1e\033\uff1e\034\uff1e\035\uff1e" +
    "\036\uff1e\037\uff1e\040\uff1e\041\uff1e\042\uff1e\043\uff1e\044" +
    "\uff1e\045\uff1e\046\uff1e\047\uff1e\050\uff1e\051\uff1e\052\uff1e" +
    "\053\uff1e\054\uff1e\055\uff1e\056\uff1e\057\uff1e\060\uff1e\061" +
    "\uff1e\062\uff1e\001\002\000\136\004\uff2c\005\uff2c\006\uff2c" +
    "\007\uff2c\010\uff2c\011\uff2c\012\uff2c\013\uff2c\014\uff2c\015" +
    "\uff2c\016\uff2c\017\uff2c\020\uff2c\021\uff2c\023\uff2c\024\uff2c" +
    "\025\uff2c\026\uff2c\027\uff2c\030\uff2c\031\uff2c\032\uff2c\033" +
    "\uff2c\034\uff2c\035\uff2c\036\uff2c\037\uff2c\040\uff2c\041\uff2c" +
    "\042\uff2c\043\uff2c\044\uff2c\045\uff2c\046\uff2c\047\uff2c\050" +
    "\uff2c\051\uff2c\052\uff2c\053\uff2c\054\uff2c\055\uff2c\056\uff2c" +
    "\057\uff2c\060\uff2c\061\uff2c\062\uff2c\001\002\000\136\004" +
    "\uff1a\005\uff1a\006\uff1a\007\uff1a\010\uff1a\011\uff1a\012\uff1a" +
    "\013\uff1a\014\uff1a\015\uff1a\016\uff1a\017\uff1a\020\uff1a\021" +
    "\uff1a\023\uff1a\024\uff1a\025\uff1a\026\uff1a\027\uff1a\030\uff1a" +
    "\031\uff1a\032\uff1a\033\uff1a\034\uff1a\035\uff1a\036\uff1a\037" +
    "\uff1a\040\uff1a\041\uff1a\042\uff1a\043\uff1a\044\uff1a\045\uff1a" +
    "\046\uff1a\047\uff1a\050\uff1a\051\uff1a\052\uff1a\053\uff1a\054" +
    "\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\061\uff1a\062\uff1a" +
    "\001\002\000\136\004\uff17\005\uff17\006\uff17\007\uff17\010" +
    "\uff17\011\uff17\012\uff17\013\uff17\014\uff17\015\uff17\016\uff17" +
    "\017\uff17\020\uff17\021\uff17\023\uff17\024\uff17\025\uff17\026" +
    "\uff17\027\uff17\030\uff17\031\uff17\032\uff17\033\uff17\034\uff17" +
    "\035\uff17\036\uff17\037\uff17\040\uff17\041\uff17\042\uff17\043" +
    "\uff17\044\uff17\045\uff17\046\uff17\047\uff17\050\uff17\051\uff17" +
    "\052\uff17\053\uff17\054\uff17\055\uff17\056\uff17\057\uff17\060" +
    "\uff17\061\uff17\062\uff17\001\002\000\136\004\uff2f\005\uff2f" +
    "\006\uff2f\007\uff2f\010\uff2f\011\uff2f\012\uff2f\013\uff2f\014" +
    "\uff2f\015\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f\023\uff2f" +
    "\024\uff2f\025\uff2f\026\uff2f\027\uff2f\030\uff2f\031\uff2f\032" +
    "\uff2f\033\uff2f\034\uff2f\035\uff2f\036\uff2f\037\uff2f\040\uff2f" +
    "\041\uff2f\042\uff2f\043\uff2f\044\uff2f\045\uff2f\046\uff2f\047" +
    "\uff2f\050\uff2f\051\uff2f\052\uff2f\053\uff2f\054\uff2f\055\uff2f" +
    "\056\uff2f\057\uff2f\060\uff2f\061\uff2f\062\uff2f\001\002\000" +
    "\136\004\uff16\005\uff16\006\uff16\007\uff16\010\uff16\011\uff16" +
    "\012\uff16\013\uff16\014\uff16\015\uff16\016\uff16\017\uff16\020" +
    "\uff16\021\uff16\023\uff16\024\uff16\025\uff16\026\uff16\027\uff16" +
    "\030\uff16\031\uff16\032\uff16\033\uff16\034\uff16\035\uff16\036" +
    "\uff16\037\uff16\040\uff16\041\uff16\042\uff16\043\uff16\044\uff16" +
    "\045\uff16\046\uff16\047\uff16\050\uff16\051\uff16\052\uff16\053" +
    "\uff16\054\uff16\055\uff16\056\uff16\057\uff16\060\uff16\061\uff16" +
    "\062\uff16\001\002\000\136\004\uff30\005\uff30\006\uff30\007" +
    "\uff30\010\uff30\011\uff30\012\uff30\013\uff30\014\uff30\015\uff30" +
    "\016\uff30\017\uff30\020\uff30\021\uff30\023\uff30\024\uff30\025" +
    "\uff30\026\uff30\027\uff30\030\uff30\031\uff30\032\uff30\033\uff30" +
    "\034\uff30\035\uff30\036\uff30\037\uff30\040\uff30\041\uff30\042" +
    "\uff30\043\uff30\044\uff30\045\uff30\046\uff30\047\uff30\050\uff30" +
    "\051\uff30\052\uff30\053\uff30\054\uff30\055\uff30\056\uff30\057" +
    "\uff30\060\uff30\061\uff30\062\uff30\001\002\000\136\004\uff39" +
    "\005\uff39\006\uff39\007\uff39\010\uff39\011\uff39\012\uff39\013" +
    "\uff39\014\uff39\015\uff39\016\uff39\017\uff39\020\uff39\021\uff39" +
    "\023\uff39\024\uff39\025\uff39\026\uff39\027\uff39\030\uff39\031" +
    "\uff39\032\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037\uff39" +
    "\040\uff39\041\uff39\042\uff39\043\uff39\044\uff39\045\uff39\046" +
    "\uff39\047\uff39\050\uff39\051\uff39\052\uff39\053\uff39\054\uff39" +
    "\055\uff39\056\uff39\057\uff39\060\uff39\061\uff39\062\uff39\001" +
    "\002\000\136\004\uff29\005\uff29\006\uff29\007\uff29\010\uff29" +
    "\011\uff29\012\uff29\013\uff29\014\uff29\015\uff29\016\uff29\017" +
    "\uff29\020\uff29\021\uff29\023\uff29\024\uff29\025\uff29\026\uff29" +
    "\027\uff29\030\uff29\031\uff29\032\uff29\033\uff29\034\uff29\035" +
    "\uff29\036\uff29\037\uff29\040\uff29\041\uff29\042\uff29\043\uff29" +
    "\044\uff29\045\uff29\046\uff29\047\uff29\050\uff29\051\uff29\052" +
    "\uff29\053\uff29\054\uff29\055\uff29\056\uff29\057\uff29\060\uff29" +
    "\061\uff29\062\uff29\001\002\000\136\004\uff12\005\uff12\006" +
    "\uff12\007\uff12\010\uff12\011\uff12\012\uff12\013\uff12\014\uff12" +
    "\015\uff12\016\uff12\017\uff12\020\uff12\021\uff12\023\uff12\024" +
    "\uff12\025\uff12\026\uff12\027\uff12\030\uff12\031\uff12\032\uff12" +
    "\033\uff12\034\uff12\035\uff12\036\uff12\037\uff12\040\uff12\041" +
    "\uff12\042\uff12\043\uff12\044\uff12\045\uff12\046\uff12\047\uff12" +
    "\050\uff12\051\uff12\052\uff12\053\uff12\054\uff12\055\uff12\056" +
    "\uff12\057\uff12\060\uff12\061\uff12\062\uff12\001\002\000\136" +
    "\004\uff1c\005\uff1c\006\uff1c\007\uff1c\010\uff1c\011\uff1c\012" +
    "\uff1c\013\uff1c\014\uff1c\015\uff1c\016\uff1c\017\uff1c\020\uff1c" +
    "\021\uff1c\023\uff1c\024\uff1c\025\uff1c\026\uff1c\027\uff1c\030" +
    "\uff1c\031\uff1c\032\uff1c\033\uff1c\034\uff1c\035\uff1c\036\uff1c" +
    "\037\uff1c\040\uff1c\041\uff1c\042\uff1c\043\uff1c\044\uff1c\045" +
    "\uff1c\046\uff1c\047\uff1c\050\uff1c\051\uff1c\052\uff1c\053\uff1c" +
    "\054\uff1c\055\uff1c\056\uff1c\057\uff1c\060\uff1c\061\uff1c\062" +
    "\uff1c\001\002\000\136\004\uff26\005\uff26\006\uff26\007\uff26" +
    "\010\uff26\011\uff26\012\uff26\013\uff26\014\uff26\015\uff26\016" +
    "\uff26\017\uff26\020\uff26\021\uff26\023\uff26\024\uff26\025\uff26" +
    "\026\uff26\027\uff26\030\uff26\031\uff26\032\uff26\033\uff26\034" +
    "\uff26\035\uff26\036\uff26\037\uff26\040\uff26\041\uff26\042\uff26" +
    "\043\uff26\044\uff26\045\uff26\046\uff26\047\uff26\050\uff26\051" +
    "\uff26\052\uff26\053\uff26\054\uff26\055\uff26\056\uff26\057\uff26" +
    "\060\uff26\061\uff26\062\uff26\001\002\000\136\004\uff19\005" +
    "\uff19\006\uff19\007\uff19\010\uff19\011\uff19\012\uff19\013\uff19" +
    "\014\uff19\015\uff19\016\uff19\017\uff19\020\uff19\021\uff19\023" +
    "\uff19\024\uff19\025\uff19\026\uff19\027\uff19\030\uff19\031\uff19" +
    "\032\uff19\033\uff19\034\uff19\035\uff19\036\uff19\037\uff19\040" +
    "\uff19\041\uff19\042\uff19\043\uff19\044\uff19\045\uff19\046\uff19" +
    "\047\uff19\050\uff19\051\uff19\052\uff19\053\uff19\054\uff19\055" +
    "\uff19\056\uff19\057\uff19\060\uff19\061\uff19\062\uff19\001\002" +
    "\000\136\004\uff0f\005\uff0f\006\uff0f\007\uff0f\010\uff0f\011" +
    "\uff0f\012\uff0f\013\uff0f\014\uff0f\015\uff0f\016\uff0f\017\uff0f" +
    "\020\uff0f\021\uff0f\023\uff0f\024\uff0f\025\uff0f\026\uff0f\027" +
    "\uff0f\030\uff0f\031\uff0f\032\uff0f\033\uff0f\034\uff0f\035\uff0f" +
    "\036\uff0f\037\uff0f\040\uff0f\041\uff0f\042\uff0f\043\uff0f\044" +
    "\uff0f\045\uff0f\046\uff0f\047\uff0f\050\uff0f\051\uff0f\052\uff0f" +
    "\053\uff0f\054\uff0f\055\uff0f\056\uff0f\057\uff0f\060\uff0f\061" +
    "\uff0f\062\uff0f\001\002\000\136\004\uff36\005\uff36\006\uff36" +
    "\007\uff36\010\uff36\011\uff36\012\uff36\013\uff36\014\uff36\015" +
    "\uff36\016\uff36\017\uff36\020\uff36\021\uff36\023\uff36\024\uff36" +
    "\025\uff36\026\uff36\027\uff36\030\uff36\031\uff36\032\uff36\033" +
    "\uff36\034\uff36\035\uff36\036\uff36\037\uff36\040\uff36\041\uff36" +
    "\042\uff36\043\uff36\044\uff36\045\uff36\046\uff36\047\uff36\050" +
    "\uff36\051\uff36\052\uff36\053\uff36\054\uff36\055\uff36\056\uff36" +
    "\057\uff36\060\uff36\061\uff36\062\uff36\001\002\000\136\004" +
    "\uff28\005\uff28\006\uff28\007\uff28\010\uff28\011\uff28\012\uff28" +
    "\013\uff28\014\uff28\015\uff28\016\uff28\017\uff28\020\uff28\021" +
    "\uff28\023\uff28\024\uff28\025\uff28\026\uff28\027\uff28\030\uff28" +
    "\031\uff28\032\uff28\033\uff28\034\uff28\035\uff28\036\uff28\037" +
    "\uff28\040\uff28\041\uff28\042\uff28\043\uff28\044\uff28\045\uff28" +
    "\046\uff28\047\uff28\050\uff28\051\uff28\052\uff28\053\uff28\054" +
    "\uff28\055\uff28\056\uff28\057\uff28\060\uff28\061\uff28\062\uff28" +
    "\001\002\000\136\004\uff33\005\uff33\006\uff33\007\uff33\010" +
    "\uff33\011\uff33\012\uff33\013\uff33\014\uff33\015\uff33\016\uff33" +
    "\017\uff33\020\uff33\021\uff33\023\uff33\024\uff33\025\uff33\026" +
    "\uff33\027\uff33\030\uff33\031\uff33\032\uff33\033\uff33\034\uff33" +
    "\035\uff33\036\uff33\037\uff33\040\uff33\041\uff33\042\uff33\043" +
    "\uff33\044\uff33\045\uff33\046\uff33\047\uff33\050\uff33\051\uff33" +
    "\052\uff33\053\uff33\054\uff33\055\uff33\056\uff33\057\uff33\060" +
    "\uff33\061\uff33\062\uff33\001\002\000\136\004\uff37\005\uff37" +
    "\006\uff37\007\uff37\010\uff37\011\uff37\012\uff37\013\uff37\014" +
    "\uff37\015\uff37\016\uff37\017\uff37\020\uff37\021\uff37\023\uff37" +
    "\024\uff37\025\uff37\026\uff37\027\uff37\030\uff37\031\uff37\032" +
    "\uff37\033\uff37\034\uff37\035\uff37\036\uff37\037\uff37\040\uff37" +
    "\041\uff37\042\uff37\043\uff37\044\uff37\045\uff37\046\uff37\047" +
    "\uff37\050\uff37\051\uff37\052\uff37\053\uff37\054\uff37\055\uff37" +
    "\056\uff37\057\uff37\060\uff37\061\uff37\062\uff37\001\002\000" +
    "\136\004\uff13\005\uff13\006\uff13\007\uff13\010\uff13\011\uff13" +
    "\012\uff13\013\uff13\014\uff13\015\uff13\016\uff13\017\uff13\020" +
    "\uff13\021\uff13\023\uff13\024\uff13\025\uff13\026\uff13\027\uff13" +
    "\030\uff13\031\uff13\032\uff13\033\uff13\034\uff13\035\uff13\036" +
    "\uff13\037\uff13\040\uff13\041\uff13\042\uff13\043\uff13\044\uff13" +
    "\045\uff13\046\uff13\047\uff13\050\uff13\051\uff13\052\uff13\053" +
    "\uff13\054\uff13\055\uff13\056\uff13\057\uff13\060\uff13\061\uff13" +
    "\062\uff13\001\002\000\136\004\uff25\005\uff25\006\uff25\007" +
    "\uff25\010\uff25\011\uff25\012\uff25\013\uff25\014\uff25\015\uff25" +
    "\016\uff25\017\uff25\020\uff25\021\uff25\023\uff25\024\uff25\025" +
    "\uff25\026\uff25\027\uff25\030\uff25\031\uff25\032\uff25\033\uff25" +
    "\034\uff25\035\uff25\036\uff25\037\uff25\040\uff25\041\uff25\042" +
    "\uff25\043\uff25\044\uff25\045\uff25\046\uff25\047\uff25\050\uff25" +
    "\051\uff25\052\uff25\053\uff25\054\uff25\055\uff25\056\uff25\057" +
    "\uff25\060\uff25\061\uff25\062\uff25\001\002\000\136\004\uff11" +
    "\005\uff11\006\uff11\007\uff11\010\uff11\011\uff11\012\uff11\013" +
    "\uff11\014\uff11\015\uff11\016\uff11\017\uff11\020\uff11\021\uff11" +
    "\023\uff11\024\uff11\025\uff11\026\uff11\027\uff11\030\uff11\031" +
    "\uff11\032\uff11\033\uff11\034\uff11\035\uff11\036\uff11\037\uff11" +
    "\040\uff11\041\uff11\042\uff11\043\uff11\044\uff11\045\uff11\046" +
    "\uff11\047\uff11\050\uff11\051\uff11\052\uff11\053\uff11\054\uff11" +
    "\055\uff11\056\uff11\057\uff11\060\uff11\061\uff11\062\uff11\001" +
    "\002\000\136\004\uff27\005\uff27\006\uff27\007\uff27\010\uff27" +
    "\011\uff27\012\uff27\013\uff27\014\uff27\015\uff27\016\uff27\017" +
    "\uff27\020\uff27\021\uff27\023\uff27\024\uff27\025\uff27\026\uff27" +
    "\027\uff27\030\uff27\031\uff27\032\uff27\033\uff27\034\uff27\035" +
    "\uff27\036\uff27\037\uff27\040\uff27\041\uff27\042\uff27\043\uff27" +
    "\044\uff27\045\uff27\046\uff27\047\uff27\050\uff27\051\uff27\052" +
    "\uff27\053\uff27\054\uff27\055\uff27\056\uff27\057\uff27\060\uff27" +
    "\061\uff27\062\uff27\001\002\000\136\004\uff23\005\uff23\006" +
    "\uff23\007\uff23\010\uff23\011\uff23\012\uff23\013\uff23\014\uff23" +
    "\015\uff23\016\uff23\017\uff23\020\uff23\021\uff23\023\uff23\024" +
    "\uff23\025\uff23\026\uff23\027\uff23\030\uff23\031\uff23\032\uff23" +
    "\033\uff23\034\uff23\035\uff23\036\uff23\037\uff23\040\uff23\041" +
    "\uff23\042\uff23\043\uff23\044\uff23\045\uff23\046\uff23\047\uff23" +
    "\050\uff23\051\uff23\052\uff23\053\uff23\054\uff23\055\uff23\056" +
    "\uff23\057\uff23\060\uff23\061\uff23\062\uff23\001\002\000\136" +
    "\004\uff14\005\uff14\006\uff14\007\uff14\010\uff14\011\uff14\012" +
    "\uff14\013\uff14\014\uff14\015\uff14\016\uff14\017\uff14\020\uff14" +
    "\021\uff14\023\uff14\024\uff14\025\uff14\026\uff14\027\uff14\030" +
    "\uff14\031\uff14\032\uff14\033\uff14\034\uff14\035\uff14\036\uff14" +
    "\037\uff14\040\uff14\041\uff14\042\uff14\043\uff14\044\uff14\045" +
    "\uff14\046\uff14\047\uff14\050\uff14\051\uff14\052\uff14\053\uff14" +
    "\054\uff14\055\uff14\056\uff14\057\uff14\060\uff14\061\uff14\062" +
    "\uff14\001\002\000\136\004\uff35\005\uff35\006\uff35\007\uff35" +
    "\010\uff35\011\uff35\012\uff35\013\uff35\014\uff35\015\uff35\016" +
    "\uff35\017\uff35\020\uff35\021\uff35\023\uff35\024\uff35\025\uff35" +
    "\026\uff35\027\uff35\030\uff35\031\uff35\032\uff35\033\uff35\034" +
    "\uff35\035\uff35\036\uff35\037\uff35\040\uff35\041\uff35\042\uff35" +
    "\043\uff35\044\uff35\045\uff35\046\uff35\047\uff35\050\uff35\051" +
    "\uff35\052\uff35\053\uff35\054\uff35\055\uff35\056\uff35\057\uff35" +
    "\060\uff35\061\uff35\062\uff35\001\002\000\136\004\uff38\005" +
    "\uff38\006\uff38\007\uff38\010\uff38\011\uff38\012\uff38\013\uff38" +
    "\014\uff38\015\uff38\016\uff38\017\uff38\020\uff38\021\uff38\023" +
    "\uff38\024\uff38\025\uff38\026\uff38\027\uff38\030\uff38\031\uff38" +
    "\032\uff38\033\uff38\034\uff38\035\uff38\036\uff38\037\uff38\040" +
    "\uff38\041\uff38\042\uff38\043\uff38\044\uff38\045\uff38\046\uff38" +
    "\047\uff38\050\uff38\051\uff38\052\uff38\053\uff38\054\uff38\055" +
    "\uff38\056\uff38\057\uff38\060\uff38\061\uff38\062\uff38\001\002" +
    "\000\136\004\uff21\005\uff21\006\uff21\007\uff21\010\uff21\011" +
    "\uff21\012\uff21\013\uff21\014\uff21\015\uff21\016\uff21\017\uff21" +
    "\020\uff21\021\uff21\023\uff21\024\uff21\025\uff21\026\uff21\027" +
    "\uff21\030\uff21\031\uff21\032\uff21\033\uff21\034\uff21\035\uff21" +
    "\036\uff21\037\uff21\040\uff21\041\uff21\042\uff21\043\uff21\044" +
    "\uff21\045\uff21\046\uff21\047\uff21\050\uff21\051\uff21\052\uff21" +
    "\053\uff21\054\uff21\055\uff21\056\uff21\057\uff21\060\uff21\061" +
    "\uff21\062\uff21\001\002\000\136\004\uff1f\005\uff1f\006\uff1f" +
    "\007\uff1f\010\uff1f\011\uff1f\012\uff1f\013\uff1f\014\uff1f\015" +
    "\uff1f\016\uff1f\017\uff1f\020\uff1f\021\uff1f\023\uff1f\024\uff1f" +
    "\025\uff1f\026\uff1f\027\uff1f\030\uff1f\031\uff1f\032\uff1f\033" +
    "\uff1f\034\uff1f\035\uff1f\036\uff1f\037\uff1f\040\uff1f\041\uff1f" +
    "\042\uff1f\043\uff1f\044\uff1f\045\uff1f\046\uff1f\047\uff1f\050" +
    "\uff1f\051\uff1f\052\uff1f\053\uff1f\054\uff1f\055\uff1f\056\uff1f" +
    "\057\uff1f\060\uff1f\061\uff1f\062\uff1f\001\002\000\136\004" +
    "\uff0e\005\uff0e\006\uff0e\007\uff0e\010\uff0e\011\uff0e\012\uff0e" +
    "\013\uff0e\014\uff0e\015\uff0e\016\uff0e\017\uff0e\020\uff0e\021" +
    "\uff0e\023\uff0e\024\uff0e\025\uff0e\026\uff0e\027\uff0e\030\uff0e" +
    "\031\uff0e\032\uff0e\033\uff0e\034\uff0e\035\uff0e\036\uff0e\037" +
    "\uff0e\040\uff0e\041\uff0e\042\uff0e\043\uff0e\044\uff0e\045\uff0e" +
    "\046\uff0e\047\uff0e\050\uff0e\051\uff0e\052\uff0e\053\uff0e\054" +
    "\uff0e\055\uff0e\056\uff0e\057\uff0e\060\uff0e\061\uff0e\062\uff0e" +
    "\001\002\000\136\004\uff31\005\uff31\006\uff31\007\uff31\010" +
    "\uff31\011\uff31\012\uff31\013\uff31\014\uff31\015\uff31\016\uff31" +
    "\017\uff31\020\uff31\021\uff31\023\uff31\024\uff31\025\uff31\026" +
    "\uff31\027\uff31\030\uff31\031\uff31\032\uff31\033\uff31\034\uff31" +
    "\035\uff31\036\uff31\037\uff31\040\uff31\041\uff31\042\uff31\043" +
    "\uff31\044\uff31\045\uff31\046\uff31\047\uff31\050\uff31\051\uff31" +
    "\052\uff31\053\uff31\054\uff31\055\uff31\056\uff31\057\uff31\060" +
    "\uff31\061\uff31\062\uff31\001\002\000\136\004\uff1b\005\uff1b" +
    "\006\uff1b\007\uff1b\010\uff1b\011\uff1b\012\uff1b\013\uff1b\014" +
    "\uff1b\015\uff1b\016\uff1b\017\uff1b\020\uff1b\021\uff1b\023\uff1b" +
    "\024\uff1b\025\uff1b\026\uff1b\027\uff1b\030\uff1b\031\uff1b\032" +
    "\uff1b\033\uff1b\034\uff1b\035\uff1b\036\uff1b\037\uff1b\040\uff1b" +
    "\041\uff1b\042\uff1b\043\uff1b\044\uff1b\045\uff1b\046\uff1b\047" +
    "\uff1b\050\uff1b\051\uff1b\052\uff1b\053\uff1b\054\uff1b\055\uff1b" +
    "\056\uff1b\057\uff1b\060\uff1b\061\uff1b\062\uff1b\001\002\000" +
    "\136\004\uff32\005\uff32\006\uff32\007\uff32\010\uff32\011\uff32" +
    "\012\uff32\013\uff32\014\uff32\015\uff32\016\uff32\017\uff32\020" +
    "\uff32\021\uff32\023\uff32\024\uff32\025\uff32\026\uff32\027\uff32" +
    "\030\uff32\031\uff32\032\uff32\033\uff32\034\uff32\035\uff32\036" +
    "\uff32\037\uff32\040\uff32\041\uff32\042\uff32\043\uff32\044\uff32" +
    "\045\uff32\046\uff32\047\uff32\050\uff32\051\uff32\052\uff32\053" +
    "\uff32\054\uff32\055\uff32\056\uff32\057\uff32\060\uff32\061\uff32" +
    "\062\uff32\001\002\000\136\004\uff15\005\uff15\006\uff15\007" +
    "\uff15\010\uff15\011\uff15\012\uff15\013\uff15\014\uff15\015\uff15" +
    "\016\uff15\017\uff15\020\uff15\021\uff15\023\uff15\024\uff15\025" +
    "\uff15\026\uff15\027\uff15\030\uff15\031\uff15\032\uff15\033\uff15" +
    "\034\uff15\035\uff15\036\uff15\037\uff15\040\uff15\041\uff15\042" +
    "\uff15\043\uff15\044\uff15\045\uff15\046\uff15\047\uff15\050\uff15" +
    "\051\uff15\052\uff15\053\uff15\054\uff15\055\uff15\056\uff15\057" +
    "\uff15\060\uff15\061\uff15\062\uff15\001\002\000\136\004\uff24" +
    "\005\uff24\006\uff24\007\uff24\010\uff24\011\uff24\012\uff24\013" +
    "\uff24\014\uff24\015\uff24\016\uff24\017\uff24\020\uff24\021\uff24" +
    "\023\uff24\024\uff24\025\uff24\026\uff24\027\uff24\030\uff24\031" +
    "\uff24\032\uff24\033\uff24\034\uff24\035\uff24\036\uff24\037\uff24" +
    "\040\uff24\041\uff24\042\uff24\043\uff24\044\uff24\045\uff24\046" +
    "\uff24\047\uff24\050\uff24\051\uff24\052\uff24\053\uff24\054\uff24" +
    "\055\uff24\056\uff24\057\uff24\060\uff24\061\uff24\062\uff24\001" +
    "\002\000\136\004\uff22\005\uff22\006\uff22\007\uff22\010\uff22" +
    "\011\uff22\012\uff22\013\uff22\014\uff22\015\uff22\016\uff22\017" +
    "\uff22\020\uff22\021\uff22\023\uff22\024\uff22\025\uff22\026\uff22" +
    "\027\uff22\030\uff22\031\uff22\032\uff22\033\uff22\034\uff22\035" +
    "\uff22\036\uff22\037\uff22\040\uff22\041\uff22\042\uff22\043\uff22" +
    "\044\uff22\045\uff22\046\uff22\047\uff22\050\uff22\051\uff22\052" +
    "\uff22\053\uff22\054\uff22\055\uff22\056\uff22\057\uff22\060\uff22" +
    "\061\uff22\062\uff22\001\002\000\136\004\uff2b\005\uff2b\006" +
    "\uff2b\007\uff2b\010\uff2b\011\uff2b\012\uff2b\013\uff2b\014\uff2b" +
    "\015\uff2b\016\uff2b\017\uff2b\020\uff2b\021\uff2b\023\uff2b\024" +
    "\uff2b\025\uff2b\026\uff2b\027\uff2b\030\uff2b\031\uff2b\032\uff2b" +
    "\033\uff2b\034\uff2b\035\uff2b\036\uff2b\037\uff2b\040\uff2b\041" +
    "\uff2b\042\uff2b\043\uff2b\044\uff2b\045\uff2b\046\uff2b\047\uff2b" +
    "\050\uff2b\051\uff2b\052\uff2b\053\uff2b\054\uff2b\055\uff2b\056" +
    "\uff2b\057\uff2b\060\uff2b\061\uff2b\062\uff2b\001\002\000\136" +
    "\004\uff10\005\uff10\006\uff10\007\uff10\010\uff10\011\uff10\012" +
    "\uff10\013\uff10\014\uff10\015\uff10\016\uff10\017\uff10\020\uff10" +
    "\021\uff10\023\uff10\024\uff10\025\uff10\026\uff10\027\uff10\030" +
    "\uff10\031\uff10\032\uff10\033\uff10\034\uff10\035\uff10\036\uff10" +
    "\037\uff10\040\uff10\041\uff10\042\uff10\043\uff10\044\uff10\045" +
    "\uff10\046\uff10\047\uff10\050\uff10\051\uff10\052\uff10\053\uff10" +
    "\054\uff10\055\uff10\056\uff10\057\uff10\060\uff10\061\uff10\062" +
    "\uff10\001\002\000\136\004\uff18\005\uff18\006\uff18\007\uff18" +
    "\010\uff18\011\uff18\012\uff18\013\uff18\014\uff18\015\uff18\016" +
    "\uff18\017\uff18\020\uff18\021\uff18\023\uff18\024\uff18\025\uff18" +
    "\026\uff18\027\uff18\030\uff18\031\uff18\032\uff18\033\uff18\034" +
    "\uff18\035\uff18\036\uff18\037\uff18\040\uff18\041\uff18\042\uff18" +
    "\043\uff18\044\uff18\045\uff18\046\uff18\047\uff18\050\uff18\051" +
    "\uff18\052\uff18\053\uff18\054\uff18\055\uff18\056\uff18\057\uff18" +
    "\060\uff18\061\uff18\062\uff18\001\002\000\136\004\uff34\005" +
    "\uff34\006\uff34\007\uff34\010\uff34\011\uff34\012\uff34\013\uff34" +
    "\014\uff34\015\uff34\016\uff34\017\uff34\020\uff34\021\uff34\023" +
    "\uff34\024\uff34\025\uff34\026\uff34\027\uff34\030\uff34\031\uff34" +
    "\032\uff34\033\uff34\034\uff34\035\uff34\036\uff34\037\uff34\040" +
    "\uff34\041\uff34\042\uff34\043\uff34\044\uff34\045\uff34\046\uff34" +
    "\047\uff34\050\uff34\051\uff34\052\uff34\053\uff34\054\uff34\055" +
    "\uff34\056\uff34\057\uff34\060\uff34\061\uff34\062\uff34\001\002" +
    "\000\136\004\uff0d\005\uff0d\006\uff0d\007\uff0d\010\uff0d\011" +
    "\uff0d\012\uff0d\013\uff0d\014\uff0d\015\uff0d\016\uff0d\017\uff0d" +
    "\020\uff0d\021\uff0d\023\uff0d\024\uff0d\025\uff0d\026\uff0d\027" +
    "\uff0d\030\uff0d\031\uff0d\032\uff0d\033\uff0d\034\uff0d\035\uff0d" +
    "\036\uff0d\037\uff0d\040\uff0d\041\uff0d\042\uff0d\043\uff0d\044" +
    "\uff0d\045\uff0d\046\uff0d\047\uff0d\050\uff0d\051\uff0d\052\uff0d" +
    "\053\uff0d\054\uff0d\055\uff0d\056\uff0d\057\uff0d\060\uff0d\061" +
    "\uff0d\062\uff0d\001\002\000\136\004\uff20\005\uff20\006\uff20" +
    "\007\uff20\010\uff20\011\uff20\012\uff20\013\uff20\014\uff20\015" +
    "\uff20\016\uff20\017\uff20\020\uff20\021\uff20\023\uff20\024\uff20" +
    "\025\uff20\026\uff20\027\uff20\030\uff20\031\uff20\032\uff20\033" +
    "\uff20\034\uff20\035\uff20\036\uff20\037\uff20\040\uff20\041\uff20" +
    "\042\uff20\043\uff20\044\uff20\045\uff20\046\uff20\047\uff20\050" +
    "\uff20\051\uff20\052\uff20\053\uff20\054\uff20\055\uff20\056\uff20" +
    "\057\uff20\060\uff20\061\uff20\062\uff20\001\002\000\136\004" +
    "\uff2d\005\uff2d\006\uff2d\007\uff2d\010\uff2d\011\uff2d\012\uff2d" +
    "\013\uff2d\014\uff2d\015\uff2d\016\uff2d\017\uff2d\020\uff2d\021" +
    "\uff2d\023\uff2d\024\uff2d\025\uff2d\026\uff2d\027\uff2d\030\uff2d" +
    "\031\uff2d\032\uff2d\033\uff2d\034\uff2d\035\uff2d\036\uff2d\037" +
    "\uff2d\040\uff2d\041\uff2d\042\uff2d\043\uff2d\044\uff2d\045\uff2d" +
    "\046\uff2d\047\uff2d\050\uff2d\051\uff2d\052\uff2d\053\uff2d\054" +
    "\uff2d\055\uff2d\056\uff2d\057\uff2d\060\uff2d\061\uff2d\062\uff2d" +
    "\001\002\000\136\004\uff2a\005\uff2a\006\uff2a\007\uff2a\010" +
    "\uff2a\011\uff2a\012\uff2a\013\uff2a\014\uff2a\015\uff2a\016\uff2a" +
    "\017\uff2a\020\uff2a\021\uff2a\023\uff2a\024\uff2a\025\uff2a\026" +
    "\uff2a\027\uff2a\030\uff2a\031\uff2a\032\uff2a\033\uff2a\034\uff2a" +
    "\035\uff2a\036\uff2a\037\uff2a\040\uff2a\041\uff2a\042\uff2a\043" +
    "\uff2a\044\uff2a\045\uff2a\046\uff2a\047\uff2a\050\uff2a\051\uff2a" +
    "\052\uff2a\053\uff2a\054\uff2a\055\uff2a\056\uff2a\057\uff2a\060" +
    "\uff2a\061\uff2a\062\uff2a\001\002\000\136\004\uff2e\005\uff2e" +
    "\006\uff2e\007\uff2e\010\uff2e\011\uff2e\012\uff2e\013\uff2e\014" +
    "\uff2e\015\uff2e\016\uff2e\017\uff2e\020\uff2e\021\uff2e\023\uff2e" +
    "\024\uff2e\025\uff2e\026\uff2e\027\uff2e\030\uff2e\031\uff2e\032" +
    "\uff2e\033\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e\040\uff2e" +
    "\041\uff2e\042\uff2e\043\uff2e\044\uff2e\045\uff2e\046\uff2e\047" +
    "\uff2e\050\uff2e\051\uff2e\052\uff2e\053\uff2e\054\uff2e\055\uff2e" +
    "\056\uff2e\057\uff2e\060\uff2e\061\uff2e\062\uff2e\001\002\000" +
    "\136\004\uff1d\005\uff1d\006\uff1d\007\uff1d\010\uff1d\011\uff1d" +
    "\012\uff1d\013\uff1d\014\uff1d\015\uff1d\016\uff1d\017\uff1d\020" +
    "\uff1d\021\uff1d\023\uff1d\024\uff1d\025\uff1d\026\uff1d\027\uff1d" +
    "\030\uff1d\031\uff1d\032\uff1d\033\uff1d\034\uff1d\035\uff1d\036" +
    "\uff1d\037\uff1d\040\uff1d\041\uff1d\042\uff1d\043\uff1d\044\uff1d" +
    "\045\uff1d\046\uff1d\047\uff1d\050\uff1d\051\uff1d\052\uff1d\053" +
    "\uff1d\054\uff1d\055\uff1d\056\uff1d\057\uff1d\060\uff1d\061\uff1d" +
    "\062\uff1d\001\002\000\140\004\161\005\206\006\176\007" +
    "\173\010\205\011\223\012\175\013\214\014\212\015\162" +
    "\016\160\017\231\020\230\021\155\023\220\024\227\025" +
    "\164\026\174\027\202\030\167\031\200\032\217\033\204" +
    "\034\216\035\207\036\224\037\210\040\154\041\232\042" +
    "\166\043\213\044\156\045\170\046\222\047\157\050\163" +
    "\051\215\052\203\053\171\054\211\055\226\056\201\057" +
    "\177\060\221\061\165\062\225\065\172\001\002\000\142" +
    "\004\uff4d\005\uff4d\006\uff4d\007\uff4d\010\uff4d\011\uff4d\012" +
    "\uff4d\013\uff4d\014\uff4d\015\uff4d\016\uff4d\017\uff4d\020\uff4d" +
    "\021\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d\026\uff4d\027" +
    "\uff4d\030\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035\uff4d" +
    "\036\uff4d\037\uff4d\040\uff4d\041\uff4d\042\uff4d\043\uff4d\044" +
    "\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d\052\uff4d" +
    "\053\uff4d\054\uff4d\055\uff4d\056\uff4d\057\uff4d\060\uff4d\061" +
    "\uff4d\062\uff4d\065\uff4d\001\002\000\142\004\uff5b\005\uff5b" +
    "\006\uff5b\007\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b\014" +
    "\uff5b\015\uff5b\016\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b" +
    "\023\uff5b\024\uff5b\025\uff5b\026\uff5b\027\uff5b\030\uff5b\031" +
    "\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b" +
    "\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046" +
    "\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b" +
    "\055\uff5b\056\uff5b\057\uff5b\060\uff5b\061\uff5b\062\uff5b\065" +
    "\uff5b\001\002\000\142\004\uff49\005\uff49\006\uff49\007\uff49" +
    "\010\uff49\011\uff49\012\uff49\013\uff49\014\uff49\015\uff49\016" +
    "\uff49\017\uff49\020\uff49\021\uff49\022\uff49\023\uff49\024\uff49" +
    "\025\uff49\026\uff49\027\uff49\030\uff49\031\uff49\032\uff49\033" +
    "\uff49\034\uff49\035\uff49\036\uff49\037\uff49\040\uff49\041\uff49" +
    "\042\uff49\043\uff49\044\uff49\045\uff49\046\uff49\047\uff49\050" +
    "\uff49\051\uff49\052\uff49\053\uff49\054\uff49\055\uff49\056\uff49" +
    "\057\uff49\060\uff49\061\uff49\062\uff49\065\uff49\001\002\000" +
    "\142\004\uff46\005\uff46\006\uff46\007\uff46\010\uff46\011\uff46" +
    "\012\uff46\013\uff46\014\uff46\015\uff46\016\uff46\017\uff46\020" +
    "\uff46\021\uff46\022\uff46\023\uff46\024\uff46\025\uff46\026\uff46" +
    "\027\uff46\030\uff46\031\uff46\032\uff46\033\uff46\034\uff46\035" +
    "\uff46\036\uff46\037\uff46\040\uff46\041\uff46\042\uff46\043\uff46" +
    "\044\uff46\045\uff46\046\uff46\047\uff46\050\uff46\051\uff46\052" +
    "\uff46\053\uff46\054\uff46\055\uff46\056\uff46\057\uff46\060\uff46" +
    "\061\uff46\062\uff46\065\uff46\001\002\000\142\004\uff5e\005" +
    "\uff5e\006\uff5e\007\uff5e\010\uff5e\011\uff5e\012\uff5e\013\uff5e" +
    "\014\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e\021\uff5e\022" +
    "\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e" +
    "\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\037" +
    "\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e" +
    "\046\uff5e\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054" +
    "\uff5e\055\uff5e\056\uff5e\057\uff5e\060\uff5e\061\uff5e\062\uff5e" +
    "\065\uff5e\001\002\000\142\004\uff68\005\uff68\006\uff68\007" +
    "\uff68\010\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015\uff68" +
    "\016\uff68\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68\024" +
    "\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032\uff68" +
    "\033\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041" +
    "\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046\uff68\047\uff68" +
    "\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68\055\uff68\056" +
    "\uff68\057\uff68\060\uff68\061\uff68\062\uff68\065\uff68\001\002" +
    "\000\142\004\uff5f\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011" +
    "\uff5f\012\uff5f\013\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f" +
    "\020\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026" +
    "\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f" +
    "\035\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043" +
    "\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051\uff5f" +
    "\052\uff5f\053\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f\060" +
    "\uff5f\061\uff5f\062\uff5f\065\uff5f\001\002\000\142\004\uff45" +
    "\005\uff45\006\uff45\007\uff45\010\uff45\011\uff45\012\uff45\013" +
    "\uff45\014\uff45\015\uff45\016\uff45\017\uff45\020\uff45\021\uff45" +
    "\022\uff45\023\uff45\024\uff45\025\uff45\026\uff45\027\uff45\030" +
    "\uff45\031\uff45\032\uff45\033\uff45\034\uff45\035\uff45\036\uff45" +
    "\037\uff45\040\uff45\041\uff45\042\uff45\043\uff45\044\uff45\045" +
    "\uff45\046\uff45\047\uff45\050\uff45\051\uff45\052\uff45\053\uff45" +
    "\054\uff45\055\uff45\056\uff45\057\uff45\060\uff45\061\uff45\062" +
    "\uff45\065\uff45\001\002\000\142\004\uff58\005\uff58\006\uff58" +
    "\007\uff58\010\uff58\011\uff58\012\uff58\013\uff58\014\uff58\015" +
    "\uff58\016\uff58\017\uff58\020\uff58\021\uff58\022\uff58\023\uff58" +
    "\024\uff58\025\uff58\026\uff58\027\uff58\030\uff58\031\uff58\032" +
    "\uff58\033\uff58\034\uff58\035\uff58\036\uff58\037\uff58\040\uff58" +
    "\041\uff58\042\uff58\043\uff58\044\uff58\045\uff58\046\uff58\047" +
    "\uff58\050\uff58\051\uff58\052\uff58\053\uff58\054\uff58\055\uff58" +
    "\056\uff58\057\uff58\060\uff58\061\uff58\062\uff58\065\uff58\001" +
    "\002\000\142\004\uff41\005\uff41\006\uff41\007\uff41\010\uff41" +
    "\011\uff41\012\uff41\013\uff41\014\uff41\015\uff41\016\uff41\017" +
    "\uff41\020\uff41\021\uff41\022\uff41\023\uff41\024\uff41\025\uff41" +
    "\026\uff41\027\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034" +
    "\uff41\035\uff41\036\uff41\037\uff41\040\uff41\041\uff41\042\uff41" +
    "\043\uff41\044\uff41\045\uff41\046\uff41\047\uff41\050\uff41\051" +
    "\uff41\052\uff41\053\uff41\054\uff41\055\uff41\056\uff41\057\uff41" +
    "\060\uff41\061\uff41\062\uff41\065\uff41\001\002\000\142\004" +
    "\uff4b\005\uff4b\006\uff4b\007\uff4b\010\uff4b\011\uff4b\012\uff4b" +
    "\013\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b\020\uff4b\021" +
    "\uff4b\022\uff4b\023\uff4b\024\uff4b\025\uff4b\026\uff4b\027\uff4b" +
    "\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036" +
    "\uff4b\037\uff4b\040\uff4b\041\uff4b\042\uff4b\043\uff4b\044\uff4b" +
    "\045\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b\053" +
    "\uff4b\054\uff4b\055\uff4b\056\uff4b\057\uff4b\060\uff4b\061\uff4b" +
    "\062\uff4b\065\uff4b\001\002\000\142\004\uff55\005\uff55\006" +
    "\uff55\007\uff55\010\uff55\011\uff55\012\uff55\013\uff55\014\uff55" +
    "\015\uff55\016\uff55\017\uff55\020\uff55\021\uff55\022\uff55\023" +
    "\uff55\024\uff55\025\uff55\026\uff55\027\uff55\030\uff55\031\uff55" +
    "\032\uff55\033\uff55\034\uff55\035\uff55\036\uff55\037\uff55\040" +
    "\uff55\041\uff55\042\uff55\043\uff55\044\uff55\045\uff55\046\uff55" +
    "\047\uff55\050\uff55\051\uff55\052\uff55\053\uff55\054\uff55\055" +
    "\uff55\056\uff55\057\uff55\060\uff55\061\uff55\062\uff55\065\uff55" +
    "\001\002\000\142\004\uff48\005\uff48\006\uff48\007\uff48\010" +
    "\uff48\011\uff48\012\uff48\013\uff48\014\uff48\015\uff48\016\uff48" +
    "\017\uff48\020\uff48\021\uff48\022\uff48\023\uff48\024\uff48\025" +
    "\uff48\026\uff48\027\uff48\030\uff48\031\uff48\032\uff48\033\uff48" +
    "\034\uff48\035\uff48\036\uff48\037\uff48\040\uff48\041\uff48\042" +
    "\uff48\043\uff48\044\uff48\045\uff48\046\uff48\047\uff48\050\uff48" +
    "\051\uff48\052\uff48\053\uff48\054\uff48\055\uff48\056\uff48\057" +
    "\uff48\060\uff48\061\uff48\062\uff48\065\uff48\001\002\000\142" +
    "\004\uff3d\005\uff3d\006\uff3d\007\uff3d\010\uff3d\011\uff3d\012" +
    "\uff3d\013\uff3d\014\uff3d\015\uff3d\016\uff3d\017\uff3d\020\uff3d" +
    "\021\uff3d\022\uff3d\023\uff3d\024\uff3d\025\uff3d\026\uff3d\027" +
    "\uff3d\030\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d" +
    "\036\uff3d\037\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\044" +
    "\uff3d\045\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d" +
    "\053\uff3d\054\uff3d\055\uff3d\056\uff3d\057\uff3d\060\uff3d\061" +
    "\uff3d\062\uff3d\065\uff3d\001\002\000\020\002\uff69\003\uff69" +
    "\052\uff69\060\uff69\061\uff69\063\uff69\064\uff69\001\002\000" +
    "\142\004\uff65\005\uff65\006\uff65\007\uff65\010\uff65\011\uff65" +
    "\012\uff65\013\uff65\014\uff65\015\uff65\016\uff65\017\uff65\020" +
    "\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026\uff65" +
    "\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034\uff65\035" +
    "\uff65\036\uff65\037\uff65\040\uff65\041\uff65\042\uff65\043\uff65" +
    "\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051\uff65\052" +
    "\uff65\053\uff65\054\uff65\055\uff65\056\uff65\057\uff65\060\uff65" +
    "\061\uff65\062\uff65\065\uff65\001\002\000\142\004\uff57\005" +
    "\uff57\006\uff57\007\uff57\010\uff57\011\uff57\012\uff57\013\uff57" +
    "\014\uff57\015\uff57\016\uff57\017\uff57\020\uff57\021\uff57\022" +
    "\uff57\023\uff57\024\uff57\025\uff57\026\uff57\027\uff57\030\uff57" +
    "\031\uff57\032\uff57\033\uff57\034\uff57\035\uff57\036\uff57\037" +
    "\uff57\040\uff57\041\uff57\042\uff57\043\uff57\044\uff57\045\uff57" +
    "\046\uff57\047\uff57\050\uff57\051\uff57\052\uff57\053\uff57\054" +
    "\uff57\055\uff57\056\uff57\057\uff57\060\uff57\061\uff57\062\uff57" +
    "\065\uff57\001\002\000\142\004\uff62\005\uff62\006\uff62\007" +
    "\uff62\010\uff62\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62" +
    "\016\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024" +
    "\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62\032\uff62" +
    "\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62\040\uff62\041" +
    "\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047\uff62" +
    "\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\055\uff62\056" +
    "\uff62\057\uff62\060\uff62\061\uff62\062\uff62\065\uff62\001\002" +
    "\000\142\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66\011" +
    "\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66\017\uff66" +
    "\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026" +
    "\uff66\027\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66" +
    "\035\uff66\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043" +
    "\uff66\044\uff66\045\uff66\046\uff66\047\uff66\050\uff66\051\uff66" +
    "\052\uff66\053\uff66\054\uff66\055\uff66\056\uff66\057\uff66\060" +
    "\uff66\061\uff66\062\uff66\065\uff66\001\002\000\142\004\uff42" +
    "\005\uff42\006\uff42\007\uff42\010\uff42\011\uff42\012\uff42\013" +
    "\uff42\014\uff42\015\uff42\016\uff42\017\uff42\020\uff42\021\uff42" +
    "\022\uff42\023\uff42\024\uff42\025\uff42\026\uff42\027\uff42\030" +
    "\uff42\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42\036\uff42" +
    "\037\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044\uff42\045" +
    "\uff42\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42\053\uff42" +
    "\054\uff42\055\uff42\056\uff42\057\uff42\060\uff42\061\uff42\062" +
    "\uff42\065\uff42\001\002\000\142\004\uff54\005\uff54\006\uff54" +
    "\007\uff54\010\uff54\011\uff54\012\uff54\013\uff54\014\uff54\015" +
    "\uff54\016\uff54\017\uff54\020\uff54\021\uff54\022\uff54\023\uff54" +
    "\024\uff54\025\uff54\026\uff54\027\uff54\030\uff54\031\uff54\032" +
    "\uff54\033\uff54\034\uff54\035\uff54\036\uff54\037\uff54\040\uff54" +
    "\041\uff54\042\uff54\043\uff54\044\uff54\045\uff54\046\uff54\047" +
    "\uff54\050\uff54\051\uff54\052\uff54\053\uff54\054\uff54\055\uff54" +
    "\056\uff54\057\uff54\060\uff54\061\uff54\062\uff54\065\uff54\001" +
    "\002\000\142\004\uff40\005\uff40\006\uff40\007\uff40\010\uff40" +
    "\011\uff40\012\uff40\013\uff40\014\uff40\015\uff40\016\uff40\017" +
    "\uff40\020\uff40\021\uff40\022\uff40\023\uff40\024\uff40\025\uff40" +
    "\026\uff40\027\uff40\030\uff40\031\uff40\032\uff40\033\uff40\034" +
    "\uff40\035\uff40\036\uff40\037\uff40\040\uff40\041\uff40\042\uff40" +
    "\043\uff40\044\uff40\045\uff40\046\uff40\047\uff40\050\uff40\051" +
    "\uff40\052\uff40\053\uff40\054\uff40\055\uff40\056\uff40\057\uff40" +
    "\060\uff40\061\uff40\062\uff40\065\uff40\001\002\000\142\004" +
    "\uff56\005\uff56\006\uff56\007\uff56\010\uff56\011\uff56\012\uff56" +
    "\013\uff56\014\uff56\015\uff56\016\uff56\017\uff56\020\uff56\021" +
    "\uff56\022\uff56\023\uff56\024\uff56\025\uff56\026\uff56\027\uff56" +
    "\030\uff56\031\uff56\032\uff56\033\uff56\034\uff56\035\uff56\036" +
    "\uff56\037\uff56\040\uff56\041\uff56\042\uff56\043\uff56\044\uff56" +
    "\045\uff56\046\uff56\047\uff56\050\uff56\051\uff56\052\uff56\053" +
    "\uff56\054\uff56\055\uff56\056\uff56\057\uff56\060\uff56\061\uff56" +
    "\062\uff56\065\uff56\001\002\000\142\004\uff43\005\uff43\006" +
    "\uff43\007\uff43\010\uff43\011\uff43\012\uff43\013\uff43\014\uff43" +
    "\015\uff43\016\uff43\017\uff43\020\uff43\021\uff43\022\uff43\023" +
    "\uff43\024\uff43\025\uff43\026\uff43\027\uff43\030\uff43\031\uff43" +
    "\032\uff43\033\uff43\034\uff43\035\uff43\036\uff43\037\uff43\040" +
    "\uff43\041\uff43\042\uff43\043\uff43\044\uff43\045\uff43\046\uff43" +
    "\047\uff43\050\uff43\051\uff43\052\uff43\053\uff43\054\uff43\055" +
    "\uff43\056\uff43\057\uff43\060\uff43\061\uff43\062\uff43\065\uff43" +
    "\001\002\000\142\004\uff52\005\uff52\006\uff52\007\uff52\010" +
    "\uff52\011\uff52\012\uff52\013\uff52\014\uff52\015\uff52\016\uff52" +
    "\017\uff52\020\uff52\021\uff52\022\uff52\023\uff52\024\uff52\025" +
    "\uff52\026\uff52\027\uff52\030\uff52\031\uff52\032\uff52\033\uff52" +
    "\034\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042" +
    "\uff52\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52" +
    "\051\uff52\052\uff52\053\uff52\054\uff52\055\uff52\056\uff52\057" +
    "\uff52\060\uff52\061\uff52\062\uff52\065\uff52\001\002\000\142" +
    "\004\uff64\005\uff64\006\uff64\007\uff64\010\uff64\011\uff64\012" +
    "\uff64\013\uff64\014\uff64\015\uff64\016\uff64\017\uff64\020\uff64" +
    "\021\uff64\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027" +
    "\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035\uff64" +
    "\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64\044" +
    "\uff64\045\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64" +
    "\053\uff64\054\uff64\055\uff64\056\uff64\057\uff64\060\uff64\061" +
    "\uff64\062\uff64\065\uff64\001\002\000\142\004\uff67\005\uff67" +
    "\006\uff67\007\uff67\010\uff67\011\uff67\012\uff67\013\uff67\014" +
    "\uff67\015\uff67\016\uff67\017\uff67\020\uff67\021\uff67\022\uff67" +
    "\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031" +
    "\uff67\032\uff67\033\uff67\034\uff67\035\uff67\036\uff67\037\uff67" +
    "\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046" +
    "\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053\uff67\054\uff67" +
    "\055\uff67\056\uff67\057\uff67\060\uff67\061\uff67\062\uff67\065" +
    "\uff67\001\002\000\142\004\uff50\005\uff50\006\uff50\007\uff50" +
    "\010\uff50\011\uff50\012\uff50\013\uff50\014\uff50\015\uff50\016" +
    "\uff50\017\uff50\020\uff50\021\uff50\022\uff50\023\uff50\024\uff50" +
    "\025\uff50\026\uff50\027\uff50\030\uff50\031\uff50\032\uff50\033" +
    "\uff50\034\uff50\035\uff50\036\uff50\037\uff50\040\uff50\041\uff50" +
    "\042\uff50\043\uff50\044\uff50\045\uff50\046\uff50\047\uff50\050" +
    "\uff50\051\uff50\052\uff50\053\uff50\054\uff50\055\uff50\056\uff50" +
    "\057\uff50\060\uff50\061\uff50\062\uff50\065\uff50\001\002\000" +
    "\142\004\uff4e\005\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e" +
    "\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e\017\uff4e\020" +
    "\uff4e\021\uff4e\022\uff4e\023\uff4e\024\uff4e\025\uff4e\026\uff4e" +
    "\027\uff4e\030\uff4e\031\uff4e\032\uff4e\033\uff4e\034\uff4e\035" +
    "\uff4e\036\uff4e\037\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e" +
    "\044\uff4e\045\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e\052" +
    "\uff4e\053\uff4e\054\uff4e\055\uff4e\056\uff4e\057\uff4e\060\uff4e" +
    "\061\uff4e\062\uff4e\065\uff4e\001\002\000\142\004\uff3c\005" +
    "\uff3c\006\uff3c\007\uff3c\010\uff3c\011\uff3c\012\uff3c\013\uff3c" +
    "\014\uff3c\015\uff3c\016\uff3c\017\uff3c\020\uff3c\021\uff3c\022" +
    "\uff3c\023\uff3c\024\uff3c\025\uff3c\026\uff3c\027\uff3c\030\uff3c" +
    "\031\uff3c\032\uff3c\033\uff3c\034\uff3c\035\uff3c\036\uff3c\037" +
    "\uff3c\040\uff3c\041\uff3c\042\uff3c\043\uff3c\044\uff3c\045\uff3c" +
    "\046\uff3c\047\uff3c\050\uff3c\051\uff3c\052\uff3c\053\uff3c\054" +
    "\uff3c\055\uff3c\056\uff3c\057\uff3c\060\uff3c\061\uff3c\062\uff3c" +
    "\065\uff3c\001\002\000\142\004\uff60\005\uff60\006\uff60\007" +
    "\uff60\010\uff60\011\uff60\012\uff60\013\uff60\014\uff60\015\uff60" +
    "\016\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024" +
    "\uff60\025\uff60\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60" +
    "\033\uff60\034\uff60\035\uff60\036\uff60\037\uff60\040\uff60\041" +
    "\uff60\042\uff60\043\uff60\044\uff60\045\uff60\046\uff60\047\uff60" +
    "\050\uff60\051\uff60\052\uff60\053\uff60\054\uff60\055\uff60\056" +
    "\uff60\057\uff60\060\uff60\061\uff60\062\uff60\065\uff60\001\002" +
    "\000\142\004\uff4a\005\uff4a\006\uff4a\007\uff4a\010\uff4a\011" +
    "\uff4a\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a" +
    "\020\uff4a\021\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\026" +
    "\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a" +
    "\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043" +
    "\uff4a\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051\uff4a" +
    "\052\uff4a\053\uff4a\054\uff4a\055\uff4a\056\uff4a\057\uff4a\060" +
    "\uff4a\061\uff4a\062\uff4a\065\uff4a\001\002\000\142\004\uff61" +
    "\005\uff61\006\uff61\007\uff61\010\uff61\011\uff61\012\uff61\013" +
    "\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020\uff61\021\uff61" +
    "\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027\uff61\030" +
    "\uff61\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61" +
    "\037\uff61\040\uff61\041\uff61\042\uff61\043\uff61\044\uff61\045" +
    "\uff61\046\uff61\047\uff61\050\uff61\051\uff61\052\uff61\053\uff61" +
    "\054\uff61\055\uff61\056\uff61\057\uff61\060\uff61\061\uff61\062" +
    "\uff61\065\uff61\001\002\000\142\004\uff44\005\uff44\006\uff44" +
    "\007\uff44\010\uff44\011\uff44\012\uff44\013\uff44\014\uff44\015" +
    "\uff44\016\uff44\017\uff44\020\uff44\021\uff44\022\uff44\023\uff44" +
    "\024\uff44\025\uff44\026\uff44\027\uff44\030\uff44\031\uff44\032" +
    "\uff44\033\uff44\034\uff44\035\uff44\036\uff44\037\uff44\040\uff44" +
    "\041\uff44\042\uff44\043\uff44\044\uff44\045\uff44\046\uff44\047" +
    "\uff44\050\uff44\051\uff44\052\uff44\053\uff44\054\uff44\055\uff44" +
    "\056\uff44\057\uff44\060\uff44\061\uff44\062\uff44\065\uff44\001" +
    "\002\000\142\004\uff51\005\uff51\006\uff51\007\uff51\010\uff51" +
    "\011\uff51\012\uff51\013\uff51\014\uff51\015\uff51\016\uff51\017" +
    "\uff51\020\uff51\021\uff51\022\uff51\023\uff51\024\uff51\025\uff51" +
    "\026\uff51\027\uff51\030\uff51\031\uff51\032\uff51\033\uff51\034" +
    "\uff51\035\uff51\036\uff51\037\uff51\040\uff51\041\uff51\042\uff51" +
    "\043\uff51\044\uff51\045\uff51\046\uff51\047\uff51\050\uff51\051" +
    "\uff51\052\uff51\053\uff51\054\uff51\055\uff51\056\uff51\057\uff51" +
    "\060\uff51\061\uff51\062\uff51\065\uff51\001\002\000\142\004" +
    "\uff53\005\uff53\006\uff53\007\uff53\010\uff53\011\uff53\012\uff53" +
    "\013\uff53\014\uff53\015\uff53\016\uff53\017\uff53\020\uff53\021" +
    "\uff53\022\uff53\023\uff53\024\uff53\025\uff53\026\uff53\027\uff53" +
    "\030\uff53\031\uff53\032\uff53\033\uff53\034\uff53\035\uff53\036" +
    "\uff53\037\uff53\040\uff53\041\uff53\042\uff53\043\uff53\044\uff53" +
    "\045\uff53\046\uff53\047\uff53\050\uff53\051\uff53\052\uff53\053" +
    "\uff53\054\uff53\055\uff53\056\uff53\057\uff53\060\uff53\061\uff53" +
    "\062\uff53\065\uff53\001\002\000\142\004\uff5a\005\uff5a\006" +
    "\uff5a\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a\014\uff5a" +
    "\015\uff5a\016\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a\023" +
    "\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\030\uff5a\031\uff5a" +
    "\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\037\uff5a\040" +
    "\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a" +
    "\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a\055" +
    "\uff5a\056\uff5a\057\uff5a\060\uff5a\061\uff5a\062\uff5a\065\uff5a" +
    "\001\002\000\142\004\uff3f\005\uff3f\006\uff3f\007\uff3f\010" +
    "\uff3f\011\uff3f\012\uff3f\013\uff3f\014\uff3f\015\uff3f\016\uff3f" +
    "\017\uff3f\020\uff3f\021\uff3f\022\uff3f\023\uff3f\024\uff3f\025" +
    "\uff3f\026\uff3f\027\uff3f\030\uff3f\031\uff3f\032\uff3f\033\uff3f" +
    "\034\uff3f\035\uff3f\036\uff3f\037\uff3f\040\uff3f\041\uff3f\042" +
    "\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f\047\uff3f\050\uff3f" +
    "\051\uff3f\052\uff3f\053\uff3f\054\uff3f\055\uff3f\056\uff3f\057" +
    "\uff3f\060\uff3f\061\uff3f\062\uff3f\065\uff3f\001\002\000\142" +
    "\004\uff47\005\uff47\006\uff47\007\uff47\010\uff47\011\uff47\012" +
    "\uff47\013\uff47\014\uff47\015\uff47\016\uff47\017\uff47\020\uff47" +
    "\021\uff47\022\uff47\023\uff47\024\uff47\025\uff47\026\uff47\027" +
    "\uff47\030\uff47\031\uff47\032\uff47\033\uff47\034\uff47\035\uff47" +
    "\036\uff47\037\uff47\040\uff47\041\uff47\042\uff47\043\uff47\044" +
    "\uff47\045\uff47\046\uff47\047\uff47\050\uff47\051\uff47\052\uff47" +
    "\053\uff47\054\uff47\055\uff47\056\uff47\057\uff47\060\uff47\061" +
    "\uff47\062\uff47\065\uff47\001\002\000\142\004\uff63\005\uff63" +
    "\006\uff63\007\uff63\010\uff63\011\uff63\012\uff63\013\uff63\014" +
    "\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021\uff63\022\uff63" +
    "\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030\uff63\031" +
    "\uff63\032\uff63\033\uff63\034\uff63\035\uff63\036\uff63\037\uff63" +
    "\040\uff63\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63\046" +
    "\uff63\047\uff63\050\uff63\051\uff63\052\uff63\053\uff63\054\uff63" +
    "\055\uff63\056\uff63\057\uff63\060\uff63\061\uff63\062\uff63\065" +
    "\uff63\001\002\000\142\004\uff4f\005\uff4f\006\uff4f\007\uff4f" +
    "\010\uff4f\011\uff4f\012\uff4f\013\uff4f\014\uff4f\015\uff4f\016" +
    "\uff4f\017\uff4f\020\uff4f\021\uff4f\022\uff4f\023\uff4f\024\uff4f" +
    "\025\uff4f\026\uff4f\027\uff4f\030\uff4f\031\uff4f\032\uff4f\033" +
    "\uff4f\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f\041\uff4f" +
    "\042\uff4f\043\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f\050" +
    "\uff4f\051\uff4f\052\uff4f\053\uff4f\054\uff4f\055\uff4f\056\uff4f" +
    "\057\uff4f\060\uff4f\061\uff4f\062\uff4f\065\uff4f\001\002\000" +
    "\142\004\uff3e\005\uff3e\006\uff3e\007\uff3e\010\uff3e\011\uff3e" +
    "\012\uff3e\013\uff3e\014\uff3e\015\uff3e\016\uff3e\017\uff3e\020" +
    "\uff3e\021\uff3e\022\uff3e\023\uff3e\024\uff3e\025\uff3e\026\uff3e" +
    "\027\uff3e\030\uff3e\031\uff3e\032\uff3e\033\uff3e\034\uff3e\035" +
    "\uff3e\036\uff3e\037\uff3e\040\uff3e\041\uff3e\042\uff3e\043\uff3e" +
    "\044\uff3e\045\uff3e\046\uff3e\047\uff3e\050\uff3e\051\uff3e\052" +
    "\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e\057\uff3e\060\uff3e" +
    "\061\uff3e\062\uff3e\065\uff3e\001\002\000\142\004\uff3b\005" +
    "\uff3b\006\uff3b\007\uff3b\010\uff3b\011\uff3b\012\uff3b\013\uff3b" +
    "\014\uff3b\015\uff3b\016\uff3b\017\uff3b\020\uff3b\021\uff3b\022" +
    "\uff3b\023\uff3b\024\uff3b\025\uff3b\026\uff3b\027\uff3b\030\uff3b" +
    "\031\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037" +
    "\uff3b\040\uff3b\041\uff3b\042\uff3b\043\uff3b\044\uff3b\045\uff3b" +
    "\046\uff3b\047\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b\054" +
    "\uff3b\055\uff3b\056\uff3b\057\uff3b\060\uff3b\061\uff3b\062\uff3b" +
    "\065\uff3b\001\002\000\142\004\uff59\005\uff59\006\uff59\007" +
    "\uff59\010\uff59\011\uff59\012\uff59\013\uff59\014\uff59\015\uff59" +
    "\016\uff59\017\uff59\020\uff59\021\uff59\022\uff59\023\uff59\024" +
    "\uff59\025\uff59\026\uff59\027\uff59\030\uff59\031\uff59\032\uff59" +
    "\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59\040\uff59\041" +
    "\uff59\042\uff59\043\uff59\044\uff59\045\uff59\046\uff59\047\uff59" +
    "\050\uff59\051\uff59\052\uff59\053\uff59\054\uff59\055\uff59\056" +
    "\uff59\057\uff59\060\uff59\061\uff59\062\uff59\065\uff59\001\002" +
    "\000\142\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c\011" +
    "\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c\017\uff5c" +
    "\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\026" +
    "\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c" +
    "\035\uff5c\036\uff5c\037\uff5c\040\uff5c\041\uff5c\042\uff5c\043" +
    "\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c" +
    "\052\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c\060" +
    "\uff5c\061\uff5c\062\uff5c\065\uff5c\001\002\000\142\004\uff5d" +
    "\005\uff5d\006\uff5d\007\uff5d\010\uff5d\011\uff5d\012\uff5d\013" +
    "\uff5d\014\uff5d\015\uff5d\016\uff5d\017\uff5d\020\uff5d\021\uff5d" +
    "\022\uff5d\023\uff5d\024\uff5d\025\uff5d\026\uff5d\027\uff5d\030" +
    "\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d\036\uff5d" +
    "\037\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045" +
    "\uff5d\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d\053\uff5d" +
    "\054\uff5d\055\uff5d\056\uff5d\057\uff5d\060\uff5d\061\uff5d\062" +
    "\uff5d\065\uff5d\001\002\000\142\004\uff4c\005\uff4c\006\uff4c" +
    "\007\uff4c\010\uff4c\011\uff4c\012\uff4c\013\uff4c\014\uff4c\015" +
    "\uff4c\016\uff4c\017\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c" +
    "\024\uff4c\025\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c\032" +
    "\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c\040\uff4c" +
    "\041\uff4c\042\uff4c\043\uff4c\044\uff4c\045\uff4c\046\uff4c\047" +
    "\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c\054\uff4c\055\uff4c" +
    "\056\uff4c\057\uff4c\060\uff4c\061\uff4c\062\uff4c\065\uff4c\001" +
    "\002\000\006\002\uffcb\052\uffcb\001\002\000\006\002\uffce" +
    "\052\uffce\001\002\000\006\002\uffc3\052\uffc3\001\002\000" +
    "\022\002\uffc1\003\060\052\uffc1\060\045\061\051\062\042" +
    "\063\056\064\055\001\002\000\006\002\uffc6\052\uffc6\001" +
    "\002\000\006\002\uffcc\052\uffcc\001\002\000\004\013\uff88" +
    "\001\002\000\004\040\u016c\001\002\000\004\054\u016a\001" +
    "\002\000\004\013\u0162\001\002\000\010\004\uffb6\013\u013d" +
    "\025\u013e\001\002\000\034\035\uff6c\037\uff6c\040\uff6c\041" +
    "\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c" +
    "\054\uff6c\057\uff6c\060\uff6c\001\002\000\004\013\uff87\001" +
    "\002\000\016\007\uffa4\013\uffa4\023\uffa4\034\uffa4\053\uffa4" +
    "\054\uffa4\001\002\000\004\013\u011c\001\002\000\004\013" +
    "\uff86\001\002\000\004\021\uff92\001\002\000\004\025\u010f" +
    "\001\002\000\004\054\uffae\001\002\000\016\007\uff90\013" +
    "\uff90\023\uff90\034\uff90\053\uff90\054\uff90\001\002\000\016" +
    "\007\uff95\013\uff95\023\uff95\034\uff95\053\uff95\054\uff95\001" +
    "\002\000\016\007\265\013\271\023\272\034\263\053\266" +
    "\054\261\001\002\000\046\004\uffde\006\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\332\014\uffde\021\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\062\uffde\001\002\000\044\004\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\014\uffdf\021\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\062\uffdf\001\002\000\014\007\265\013\361\023\272\053" +
    "\266\054\261\001\002\000\030\006\304\007\305\010\302" +
    "\011\306\012\303\024\353\025\355\026\351\027\354\030" +
    "\352\031\350\001\002\000\010\023\327\053\326\054\331" +
    "\001\002\000\046\004\uffdd\005\324\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\014\uffdd\021\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\062" +
    "\uffdd\001\002\000\044\004\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\014\uffdc\021\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\062\uffdc" +
    "\001\002\000\010\021\uff94\032\315\033\316\001\002\000" +
    "\014\007\265\013\271\023\272\053\266\054\261\001\002" +
    "\000\006\053\274\054\275\001\002\000\010\021\uff9f\032" +
    "\uff9f\033\uff9f\001\002\000\004\023\277\001\002\000\004" +
    "\023\276\001\002\000\044\004\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\014\uffd9\021\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\062" +
    "\uffd9\001\002\000\044\004\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\014\uffd8\021\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\062\uffd8" +
    "\001\002\000\016\006\304\007\305\010\302\011\306\012" +
    "\303\014\301\001\002\000\044\004\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\014\uffe5\021\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\062\uffe5\001\002\000\014\007\265\013\271\023\272\053" +
    "\266\054\261\001\002\000\014\007\265\013\271\023\272" +
    "\053\266\054\261\001\002\000\014\007\265\013\271\023" +
    "\272\053\266\054\261\001\002\000\014\007\265\013\271" +
    "\023\272\053\266\054\261\001\002\000\014\007\265\013" +
    "\271\023\272\053\266\054\261\001\002\000\044\004\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\014\uffe1\021" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\062\uffe1\001\002\000\044\004\uffe3\006" +
    "\uffe3\007\uffe3\010\302\011\306\012\303\014\uffe3\021\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\062\uffe3\001\002\000\044\004\uffe4\006\uffe4" +
    "\007\uffe4\010\302\011\306\012\303\014\uffe4\021\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\062\uffe4\001\002\000\044\004\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\021\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\062\uffe0\001\002\000\044\004\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\014\uffe2\021\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\062\uffe2\001\002\000\004\021\322\001\002\000\016\007" +
    "\265\013\271\023\272\034\263\053\266\054\261\001\002" +
    "\000\016\007\uffa1\013\uffa1\023\uffa1\034\uffa1\053\uffa1\054" +
    "\uffa1\001\002\000\016\007\265\013\271\023\272\034\263" +
    "\053\266\054\261\001\002\000\010\021\uffa0\032\315\033" +
    "\uffa0\001\002\000\010\021\uffa2\032\uffa2\033\uffa2\001\002" +
    "\000\004\062\040\001\002\000\022\002\uff93\003\uff93\052" +
    "\uff93\060\uff93\061\uff93\062\042\063\uff93\064\uff93\001\002" +
    "\000\004\053\325\001\002\000\044\004\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\014\uffda\021\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\062\uffda\001\002\000\046\004\uffd4\005\345\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\014\uffd4\021\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\062\uffd4\001\002\000\006\053\341\054\342\001" +
    "\002\000\044\004\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\014\uffdb\021\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\062\uffdb\001\002" +
    "\000\046\004\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\013\332\014\uffd5\021\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\062\uffd5\001" +
    "\002\000\016\007\ufff1\013\ufff1\014\ufff4\023\ufff1\053\ufff1" +
    "\054\ufff1\001\002\000\014\007\265\013\271\023\272\053" +
    "\266\054\261\001\002\000\004\014\336\001\002\000\004" +
    "\014\ufff5\001\002\000\044\004\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\014\ufff7\021\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\062" +
    "\ufff7\001\002\000\020\004\340\006\304\007\305\010\302" +
    "\011\306\012\303\014\ufff3\001\002\000\014\007\ufff2\013" +
    "\ufff2\023\ufff2\053\ufff2\054\ufff2\001\002\000\004\023\344" +
    "\001\002\000\004\023\343\001\002\000\044\004\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\014\uffd7\021\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\062\uffd7\001\002\000\044\004\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\014\uffd6\021\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\062\uffd6\001\002\000\004\053\346\001\002\000" +
    "\044\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\014\uffd3\021\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\062\uffd3\001\002\000\014" +
    "\007\265\013\271\023\272\053\266\054\261\001\002\000" +
    "\014\007\uff98\013\uff98\023\uff98\053\uff98\054\uff98\001\002" +
    "\000\014\007\uff99\013\uff99\023\uff99\053\uff99\054\uff99\001" +
    "\002\000\014\007\uff97\013\uff97\023\uff97\053\uff97\054\uff97" +
    "\001\002\000\004\025\357\001\002\000\014\007\uff9a\013" +
    "\uff9a\023\uff9a\053\uff9a\054\uff9a\001\002\000\004\025\356" +
    "\001\002\000\014\007\uff9b\013\uff9b\023\uff9b\053\uff9b\054" +
    "\uff9b\001\002\000\014\007\uff96\013\uff96\023\uff96\053\uff96" +
    "\054\uff96\001\002\000\024\006\304\007\305\010\302\011" +
    "\306\012\303\014\uff9c\021\uff9c\032\uff9c\033\uff9c\001\002" +
    "\000\014\007\265\013\271\023\272\053\266\054\261\001" +
    "\002\000\010\021\uff9d\032\uff9d\033\uff9d\001\002\000\032" +
    "\006\304\007\305\010\302\011\306\012\303\014\301\024" +
    "\353\025\355\026\351\027\354\030\352\031\350\001\002" +
    "\000\004\014\365\001\002\000\010\021\uff9e\032\uff9e\033" +
    "\uff9e\001\002\000\016\007\265\013\271\023\272\034\263" +
    "\053\266\054\261\001\002\000\010\021\uff8f\032\315\033" +
    "\316\001\002\000\004\021\371\001\002\000\004\062\040" +
    "\001\002\000\022\002\uff8e\003\uff8e\052\uff8e\060\uff8e\061" +
    "\uff8e\062\042\063\uff8e\064\uff8e\001\002\000\004\054\374" +
    "\001\002\000\004\042\uffad\001\002\000\004\042\376\001" +
    "\002\000\004\043\377\001\002\000\004\013\u0100\001\002" +
    "\000\014\007\265\013\271\023\272\053\266\054\261\001" +
    "\002\000\004\014\u010c\001\002\000\020\004\u0103\006\304" +
    "\007\305\010\302\011\306\012\303\014\uffab\001\002\000" +
    "\014\007\265\013\271\023\272\053\266\054\261\001\002" +
    "\000\020\004\u0105\006\304\007\305\010\302\011\306\012" +
    "\303\014\uffaa\001\002\000\010\007\u0108\053\u0106\054\u0109" +
    "\001\002\000\004\014\uffa6\001\002\000\004\014\uffa9\001" +
    "\002\000\006\053\u010a\054\u010b\001\002\000\004\014\uffa8" +
    "\001\002\000\004\014\uffa5\001\002\000\004\014\uffa7\001" +
    "\002\000\004\021\u010d\001\002\000\004\062\040\001\002" +
    "\000\022\002\uffac\003\uffac\052\uffac\060\uffac\061\uffac\062" +
    "\042\063\uffac\064\uffac\001\002\000\014\007\265\013\271" +
    "\023\272\053\266\054\261\001\002\000\016\004\u0112\006" +
    "\304\007\305\010\302\011\306\012\303\001\002\000\020" +
    "\002\uffbc\003\uffbc\052\uffbc\060\uffbc\061\uffbc\063\uffbc\064" +
    "\uffbc\001\002\000\014\007\265\013\271\023\272\053\266" +
    "\054\261\001\002\000\020\004\u0114\006\304\007\305\010" +
    "\302\011\306\012\303\062\040\001\002\000\014\007\265" +
    "\013\271\023\272\053\266\054\261\001\002\000\020\002" +
    "\uffb1\003\uffb1\052\uffb1\060\uffb1\061\uffb1\063\uffb1\064\uffb1" +
    "\001\002\000\022\002\uffaf\003\uffaf\052\uffaf\060\uffaf\061" +
    "\uffaf\062\042\063\uffaf\064\uffaf\001\002\000\020\004\u0114" +
    "\006\304\007\305\010\302\011\306\012\303\062\040\001" +
    "\002\000\020\002\uffb0\003\uffb0\052\uffb0\060\uffb0\061\uffb0" +
    "\063\uffb0\064\uffb0\001\002\000\004\021\u011a\001\002\000" +
    "\004\062\040\001\002\000\022\002\uff91\003\uff91\052\uff91" +
    "\060\uff91\061\uff91\062\042\063\uff91\064\uff91\001\002\000" +
    "\014\007\uff85\014\uff83\022\uff85\053\uff85\054\uff85\001\002" +
    "\000\012\007\u0124\022\u0125\053\u0122\054\u0126\001\002\000" +
    "\004\014\u011f\001\002\000\004\062\040\001\002\000\022" +
    "\002\uff82\003\uff82\052\uff82\060\uff82\061\uff82\062\042\063" +
    "\uff82\064\uff82\001\002\000\004\014\u0137\001\002\000\012" +
    "\004\uff76\005\u0135\006\uff76\014\uff76\001\002\000\010\004" +
    "\uff7f\006\uff7f\014\uff7f\001\002\000\006\053\u012f\054\u0130" +
    "\001\002\000\140\004\uff3a\005\uff3a\006\uff3a\007\uff3a\010" +
    "\uff3a\011\uff3a\012\uff3a\013\uff3a\014\uff3a\015\uff3a\016\uff3a" +
    "\017\uff3a\020\uff3a\021\uff3a\022\uff3a\023\uff3a\024\uff3a\025" +
    "\uff3a\026\uff3a\027\uff3a\030\uff3a\031\uff3a\032\uff3a\033\uff3a" +
    "\034\uff3a\035\uff3a\036\uff3a\037\uff3a\040\uff3a\041\uff3a\042" +
    "\uff3a\043\uff3a\044\uff3a\045\uff3a\046\uff3a\047\uff3a\050\uff3a" +
    "\051\uff3a\052\uff3a\053\uff3a\054\uff3a\055\uff3a\056\uff3a\057" +
    "\uff3a\060\uff3a\061\uff3a\062\uff3a\001\002\000\010\004\uff77" +
    "\006\uff77\014\uff77\001\002\000\140\004\161\005\206\006" +
    "\176\007\173\010\205\011\223\012\175\013\214\014\212" +
    "\015\162\016\160\017\231\020\230\021\155\022\u0128\023" +
    "\220\024\227\025\164\026\174\027\202\030\167\031\200" +
    "\032\217\033\204\034\216\035\207\036\224\037\210\040" +
    "\154\041\232\042\166\043\213\044\156\045\170\046\222" +
    "\047\157\050\163\051\215\052\203\053\171\054\211\055" +
    "\226\056\201\057\177\060\221\061\165\062\225\001\002" +
    "\000\010\004\uff7d\006\uff7d\014\uff7d\001\002\000\010\004" +
    "\u012d\006\u012c\014\uff7a\001\002\000\012\007\u0124\022\u0125" +
    "\053\u0122\054\u0126\001\002\000\004\014\uff7c\001\002\000" +
    "\012\007\uff80\022\uff80\053\uff80\054\uff80\001\002\000\012" +
    "\007\uff81\022\uff81\053\uff81\054\uff81\001\002\000\004\014" +
    "\uff7b\001\002\000\012\004\uff73\005\u0131\006\uff73\014\uff73" +
    "\001\002\000\010\004\uff74\006\uff74\014\uff74\001\002\000" +
    "\004\053\u0132\001\002\000\010\004\uff72\006\uff72\014\uff72" +
    "\001\002\000\010\004\u012d\006\u012c\014\uff7a\001\002\000" +
    "\004\014\uff7e\001\002\000\004\053\u0136\001\002\000\010" +
    "\004\uff75\006\uff75\014\uff75\001\002\000\004\062\040\001" +
    "\002\000\022\002\uff84\003\uff84\052\uff84\060\uff84\061\uff84" +
    "\062\042\063\uff84\064\uff84\001\002\000\016\007\265\013" +
    "\271\023\272\034\263\053\266\054\261\001\002\000\010" +
    "\021\u013b\032\315\033\316\001\002\000\004\062\040\001" +
    "\002\000\022\002\uffa3\003\uffa3\052\uffa3\060\uffa3\061\uffa3" +
    "\062\042\063\uffa3\064\uffa3\001\002\000\016\007\ufff1\013" +
    "\ufff1\014\ufff4\023\ufff1\053\ufff1\054\ufff1\001\002\000\022" +
    "\007\uffbf\013\uffbf\023\uffbf\047\241\050\247\051\252\053" +
    "\uffbf\054\uffbf\001\002\000\004\004\u0140\001\002\000\004" +
    "\054\u0141\001\002\000\006\004\uffb5\025\uffb5\001\002\000" +
    "\006\004\u0143\025\uffb2\001\002\000\004\054\u0145\001\002" +
    "\000\004\025\uffb4\001\002\000\006\004\u0143\025\uffb2\001" +
    "\002\000\004\025\uffb3\001\002\000\014\007\265\013\271" +
    "\023\272\053\266\054\261\001\002\000\004\013\u0149\001" +
    "\002\000\006\014\u014a\022\u014b\001\002\000\004\062\040" +
    "\001\002\000\140\004\uff3a\005\uff3a\006\uff3a\007\uff3a\010" +
    "\uff3a\011\uff3a\012\uff3a\013\uff3a\014\uff3a\015\uff3a\016\uff3a" +
    "\017\uff3a\020\uff3a\021\uff3a\022\uff3a\023\uff3a\024\uff3a\025" +
    "\uff3a\026\uff3a\027\uff3a\030\uff3a\031\uff3a\032\uff3a\033\uff3a" +
    "\034\uff3a\035\uff3a\036\uff3a\037\uff3a\040\uff3a\041\uff3a\042" +
    "\uff3a\043\uff3a\044\uff3a\045\uff3a\046\uff3a\047\uff3a\050\uff3a" +
    "\051\uff3a\052\uff3a\053\uff3a\054\uff3a\055\uff3a\056\uff3a\057" +
    "\uff3a\060\uff3a\061\uff3a\062\uff3a\001\002\000\140\004\161" +
    "\005\206\006\176\007\173\010\205\011\223\012\175\013" +
    "\214\014\212\015\162\016\160\017\231\020\230\021\155" +
    "\022\u014d\023\220\024\227\025\164\026\174\027\202\030" +
    "\167\031\200\032\217\033\204\034\216\035\207\036\224" +
    "\037\210\040\154\041\232\042\166\043\213\044\156\045" +
    "\170\046\222\047\157\050\163\051\215\052\203\053\171" +
    "\054\211\055\226\056\201\057\177\060\221\061\165\062" +
    "\225\001\002\000\004\014\u014e\001\002\000\004\062\040" +
    "\001\002\000\022\002\uff8c\003\uff8c\052\uff8c\060\uff8c\061" +
    "\uff8c\062\042\063\uff8c\064\uff8c\001\002\000\022\002\uff8b" +
    "\003\uff8b\052\uff8b\060\uff8b\061\uff8b\062\042\063\uff8b\064" +
    "\uff8b\001\002\000\022\004\uffbe\006\304\007\305\010\302" +
    "\011\306\012\303\025\uffbe\062\uffbe\001\002\000\010\004" +
    "\u0155\025\u0154\062\040\001\002\000\020\002\uffbd\003\uffbd" +
    "\052\uffbd\060\uffbd\061\uffbd\063\uffbd\064\uffbd\001\002\000" +
    "\014\007\265\013\271\023\272\053\266\054\261\001\002" +
    "\000\004\054\u0157\001\002\000\022\002\uffb7\003\uffb7\052" +
    "\uffb7\060\uffb7\061\uffb7\062\042\063\uffb7\064\uffb7\001\002" +
    "\000\004\025\u0158\001\002\000\014\007\uffbb\013\uffbb\023" +
    "\uffbb\053\uffbb\054\uffbb\001\002\000\014\007\265\013\271" +
    "\023\272\053\266\054\261\001\002\000\022\004\uffba\006" +
    "\304\007\305\010\302\011\306\012\303\025\uffba\062\uffba" +
    "\001\002\000\010\004\u0155\025\u0154\062\040\001\002\000" +
    "\020\002\uffb9\003\uffb9\052\uffb9\060\uffb9\061\uffb9\063\uffb9" +
    "\064\uffb9\001\002\000\022\004\u0155\006\304\007\305\010" +
    "\302\011\306\012\303\025\u0154\062\040\001\002\000\020" +
    "\002\uffb8\003\uffb8\052\uffb8\060\uffb8\061\uffb8\063\uffb8\064" +
    "\uffb8\001\002\000\004\014\u0160\001\002\000\004\062\040" +
    "\001\002\000\022\002\ufff6\003\ufff6\052\ufff6\060\ufff6\061" +
    "\ufff6\062\042\063\ufff6\064\ufff6\001\002\000\006\014\u0163" +
    "\022\u0164\001\002\000\004\062\040\001\002\000\140\004" +
    "\uff3a\005\uff3a\006\uff3a\007\uff3a\010\uff3a\011\uff3a\012\uff3a" +
    "\013\uff3a\014\uff3a\015\uff3a\016\uff3a\017\uff3a\020\uff3a\021" +
    "\uff3a\022\uff3a\023\uff3a\024\uff3a\025\uff3a\026\uff3a\027\uff3a" +
    "\030\uff3a\031\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036" +
    "\uff3a\037\uff3a\040\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a" +
    "\045\uff3a\046\uff3a\047\uff3a\050\uff3a\051\uff3a\052\uff3a\053" +
    "\uff3a\054\uff3a\055\uff3a\056\uff3a\057\uff3a\060\uff3a\061\uff3a" +
    "\062\uff3a\001\002\000\140\004\161\005\206\006\176\007" +
    "\173\010\205\011\223\012\175\013\214\014\212\015\162" +
    "\016\160\017\231\020\230\021\155\022\u0166\023\220\024" +
    "\227\025\164\026\174\027\202\030\167\031\200\032\217" +
    "\033\204\034\216\035\207\036\224\037\210\040\154\041" +
    "\232\042\166\043\213\044\156\045\170\046\222\047\157" +
    "\050\163\051\215\052\203\053\171\054\211\055\226\056" +
    "\201\057\177\060\221\061\165\062\225\001\002\000\004" +
    "\014\u0167\001\002\000\004\062\040\001\002\000\022\002" +
    "\uff8a\003\uff8a\052\uff8a\060\uff8a\061\uff8a\062\042\063\uff8a" +
    "\064\uff8a\001\002\000\022\002\uff89\003\uff89\052\uff89\060" +
    "\uff89\061\uff89\062\042\063\uff89\064\uff89\001\002\000\004" +
    "\062\040\001\002\000\022\002\uff8d\003\uff8d\052\uff8d\060" +
    "\uff8d\061\uff8d\062\042\063\uff8d\064\uff8d\001\002\000\014" +
    "\007\265\013\271\023\272\053\266\054\261\001\002\000" +
    "\016\006\304\007\305\010\302\011\306\012\303\062\uffe6" +
    "\001\002\000\004\062\040\001\002\000\022\002\uffe7\003" +
    "\uffe7\052\uffe7\060\uffe7\061\uffe7\062\042\063\uffe7\064\uffe7" +
    "\001\002\000\006\002\uffca\052\uffca\001\002\000\006\002" +
    "\uffc7\052\uffc7\001\002\000\006\002\uffc8\052\uffc8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0170\000\010\011\003\031\005\035\004\001\001\000" +
    "\004\002\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\014\001\001\000\004\067\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\017\001\001\000\002\001\001\000\004\051\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\024\001" +
    "\001\000\004\052\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\031\001\001\000" +
    "\004\052\032\001\001\000\002\001\001\000\004\071\034" +
    "\001\001\000\002\001\001\000\004\031\036\001\001\000" +
    "\004\072\040\001\001\000\002\001\001\000\036\004\051" +
    "\005\062\006\056\015\063\016\047\017\053\021\043\022" +
    "\045\023\064\030\042\032\052\033\061\034\060\053\046" +
    "\001\001\000\002\001\001\000\036\004\051\005\062\006" +
    "\u0171\015\063\016\047\017\053\021\043\022\045\023\064" +
    "\030\042\032\052\033\061\034\060\053\046\001\001\000" +
    "\036\004\051\005\062\006\u0170\015\063\016\047\017\053" +
    "\021\043\022\045\023\064\030\042\032\052\033\061\034" +
    "\060\053\046\001\001\000\002\001\001\000\036\004\051" +
    "\005\062\006\u016f\015\063\016\047\017\053\021\043\022" +
    "\045\023\064\030\042\032\052\033\061\034\060\053\046" +
    "\001\001\000\010\040\243\047\253\075\241\001\001\000" +
    "\036\004\051\005\062\006\237\015\063\016\047\017\053" +
    "\021\043\022\045\023\064\030\042\032\052\033\061\034" +
    "\060\053\046\001\001\000\004\031\235\001\001\000\036" +
    "\004\051\005\062\006\234\015\063\016\047\017\053\021" +
    "\043\022\045\023\064\030\042\032\052\033\061\034\060" +
    "\053\046\001\001\000\036\004\051\005\062\006\233\015" +
    "\063\016\047\017\053\021\043\022\045\023\064\030\042" +
    "\032\052\033\061\034\060\053\046\001\001\000\036\004" +
    "\051\005\062\006\232\015\063\016\047\017\053\021\043" +
    "\022\045\023\064\030\042\032\052\033\061\034\060\053" +
    "\046\001\001\000\004\036\152\001\001\000\004\041\073" +
    "\001\001\000\002\001\001\000\036\004\051\005\062\006" +
    "\072\015\063\016\047\017\053\021\043\022\045\023\064" +
    "\030\042\032\052\033\061\034\060\053\046\001\001\000" +
    "\036\004\051\005\062\006\071\015\063\016\047\017\053" +
    "\021\043\022\045\023\064\030\042\032\052\033\061\034" +
    "\060\053\046\001\001\000\036\004\051\005\062\006\070" +
    "\015\063\016\047\017\053\021\043\022\045\023\064\030" +
    "\042\032\052\033\061\034\060\053\046\001\001\000\036" +
    "\004\051\005\062\006\067\015\063\016\047\017\053\021" +
    "\043\022\045\023\064\030\042\032\052\033\061\034\060" +
    "\053\046\001\001\000\036\004\051\005\062\006\066\015" +
    "\063\016\047\017\053\021\043\022\045\023\064\030\042" +
    "\032\052\033\061\034\060\053\046\001\001\000\036\004" +
    "\051\005\062\006\065\015\063\016\047\017\053\021\043" +
    "\022\045\023\064\030\042\032\052\033\061\034\060\053" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\051\005\062\006\236" +
    "\015\063\016\047\017\053\021\043\022\045\023\064\030" +
    "\042\032\052\033\061\034\060\053\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\102\u013e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\112\u0118\001\001\000\002\001\001\000\004\104\372\001" +
    "\001\000\004\113\365\001\001\000\004\110\257\001\001" +
    "\000\014\043\272\044\267\060\263\061\261\063\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\043\361" +
    "\060\263\061\261\063\266\001\001\000\004\042\346\001" +
    "\001\000\004\063\327\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\313\001\001\000\010\060\277\061" +
    "\261\063\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\060\312\061\261\063\266\001\001\000\010\060\311\061" +
    "\261\063\266\001\001\000\010\060\310\061\261\063\266" +
    "\001\001\000\010\060\307\061\261\063\266\001\001\000" +
    "\010\060\306\061\261\063\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\043\272\044\320" +
    "\060\263\061\261\063\266\001\001\000\004\107\316\001" +
    "\001\000\014\043\272\044\317\060\263\061\261\063\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\064\333\065\334\066\332" +
    "\001\001\000\010\060\336\061\261\063\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\060\357\061\261\063\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\043\363\060\362\061\261\063\266\001\001\000\002\001" +
    "\001\000\004\042\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\043\272\044\366\060\263\061\261\063" +
    "\266\001\001\000\004\114\367\001\001\000\002\001\001" +
    "\000\004\031\371\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\105\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\054\u0100\060\u0101\061" +
    "\261\063\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\060\u0103\061\261\063\266\001\001\000\002\001" +
    "\001\000\004\010\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u010d" +
    "\001\001\000\002\001\001\000\012\046\u0110\060\u010f\061" +
    "\261\063\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\060\u0112\061\261\063\266\001\001\000\006\031" +
    "\u0115\045\u0114\001\001\000\010\060\u0116\061\261\063\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\u0115\045\u0117\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u011a\001\001\000\002\001\001\000\006\115" +
    "\u011c\116\u011d\001\001\000\006\055\u0120\057\u0122\001\001" +
    "\000\002\001\001\000\004\031\u011f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\117\u0132" +
    "\001\001\000\002\001\001\000\004\036\u0126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\120\u0128\001\001" +
    "\000\006\024\u0129\056\u012a\001\001\000\006\055\u012d\057" +
    "\u0122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\u0129" +
    "\056\u0133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u0137\001\001\000\002\001\001" +
    "\000\014\043\272\044\u0139\060\263\061\261\063\266\001" +
    "\001\000\002\001\001\000\004\031\u013b\001\001\000\002" +
    "\001\001\000\010\064\u015e\065\334\066\332\001\001\000" +
    "\006\040\u0147\076\u0146\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\103\u0141\001\001\000\004\050\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u0145" +
    "\001\001\000\002\001\001\000\010\060\u0150\061\261\063" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u014f\001\001\000\004\036\u014b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u014e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\u0151\001\001\000" +
    "\006\012\u0152\031\u0155\001\001\000\002\001\001\000\010" +
    "\060\u015c\061\261\063\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\u0158\001\001" +
    "\000\010\060\u0159\061\261\063\266\001\001\000\004\101" +
    "\u015a\001\001\000\006\012\u015b\031\u0155\001\001\000\002" +
    "\001\001\000\006\012\u015d\031\u0155\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u0160\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u0168\001\001\000" +
    "\004\036\u0164\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u0167\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u016a\001\001\000\002\001\001\000\012" +
    "\060\u016c\061\261\062\u016d\063\266\001\001\000\002\001" +
    "\001\000\004\031\u016e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxPYTHON$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxPYTHON$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxPYTHON$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public TablaSimbolos tabla;

    //tabs de guia para las lines de instrucciones
    public ArrayList<Integer> instrucciones = new ArrayList<>();
    //tabs de guia que agarran el valor en la primer linea luego de una instruccion
    public ArrayList<Integer> lineasGuias = new ArrayList<>();
    public ArrayList<String> tipoInstruccion = new ArrayList<>();
    public static int jerarquia = 0;
    public static Boolean primerLinea = null;
    public OperacionesPY op = new OperacionesPY();
    public VerifPY verif = new VerifPY();

    /*MANEJO CUARTETOS*/
    public ArrayList<Boolean> usoPila = new ArrayList<>();
    public String idFor = "";
    public ArrayList<ArrayList<Nodo>> pilaFor = new ArrayList<>();
    public ManejoPython manejoPY = new ManejoPython();
    public static String aux2 = "", aux3 = "", etInst = "";
    public static boolean inst = false;
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();

    /*---------------------------------------CODIGO EJECUTABLE--------------------------------------------*/

    public ExePython exe = new ExePython();
    public String metodo = "";

    public SintaxPYTHON(AnalizadorLexico2 lex, TablaSimbolos tabla){
        super(lex);
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
       // setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,""); 
       int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" Token no reconocido: "+s.toString()+"\n";
        
    }
    
   /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna: "+s.right+" ";
    }*/



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxPYTHON$actions {
  private final SintaxPYTHON parser;

  /** Constructor */
  CUP$SintaxPYTHON$actions(SintaxPYTHON parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxPYTHON$do_action(
    int                        CUP$SintaxPYTHON$act_num,
    java_cup.runtime.lr_parser CUP$SintaxPYTHON$parser,
    java.util.Stack            CUP$SintaxPYTHON$stack,
    int                        CUP$SintaxPYTHON$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxPYTHON$result;

      /* select the action based on the action number */
      switch (CUP$SintaxPYTHON$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TEXTO3 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TEXTO3 ::= TEXTO3 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TEXTO3 ::= TEXTO3 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TEXTO3 ::= TEXTO3 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TEXTO3 ::= TEXTO3 tab 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a + "\t"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TEXTO3 ::= TEXTO3 condEnd 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TEXTO3 ::= TEXTO3 condPass 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TEXTO3 ::= TEXTO3 condDel 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TEXTO3 ::= TEXTO3 condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TEXTO3 ::= TEXTO3 floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TEXTO3 ::= TEXTO3 charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TEXTO3 ::= TEXTO3 intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TEXTO3 ::= TEXTO3 condElif 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TEXTO3 ::= TEXTO3 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TEXTO3 ::= TEXTO3 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // TEXTO3 ::= TEXTO3 condRange 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TEXTO3 ::= TEXTO3 condIn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TEXTO3 ::= TEXTO3 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // TEXTO3 ::= TEXTO3 condReturn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // TEXTO3 ::= TEXTO3 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // TEXTO3 ::= TEXTO3 f 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // TEXTO3 ::= TEXTO3 mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // TEXTO3 ::= TEXTO3 not 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // TEXTO3 ::= TEXTO3 or 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // TEXTO3 ::= TEXTO3 and 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TEXTO3 ::= TEXTO3 mayorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TEXTO3 ::= TEXTO3 menorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TEXTO3 ::= TEXTO3 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // TEXTO3 ::= TEXTO3 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // TEXTO3 ::= TEXTO3 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TEXTO3 ::= TEXTO3 admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TEXTO3 ::= TEXTO3 comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TEXTO3 ::= TEXTO3 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TEXTO3 ::= TEXTO3 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TEXTO3 ::= TEXTO3 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TEXTO3 ::= TEXTO3 llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TEXTO3 ::= TEXTO3 llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TEXTO3 ::= TEXTO3 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TEXTO3 ::= TEXTO3 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TEXTO3 ::= TEXTO3 porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TEXTO3 ::= TEXTO3 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TEXTO3 ::= TEXTO3 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TEXTO3 ::= TEXTO3 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TEXTO3 ::= TEXTO3 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TEXTO3 ::= TEXTO3 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TEXTO3 ::= TEXTO3 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO3",31, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TEXTO2 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TEXTO2 ::= TEXTO2 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TEXTO2 ::= TEXTO2 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TEXTO2 ::= TEXTO2 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TEXTO2 ::= TEXTO2 enter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a + "\n"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TEXTO2 ::= TEXTO2 tab 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a + "\t"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TEXTO2 ::= TEXTO2 condEnd 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TEXTO2 ::= TEXTO2 condPass 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TEXTO2 ::= TEXTO2 condDel 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // TEXTO2 ::= TEXTO2 condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // TEXTO2 ::= TEXTO2 floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // TEXTO2 ::= TEXTO2 charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // TEXTO2 ::= TEXTO2 intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TEXTO2 ::= TEXTO2 condElif 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TEXTO2 ::= TEXTO2 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TEXTO2 ::= TEXTO2 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TEXTO2 ::= TEXTO2 condRange 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TEXTO2 ::= TEXTO2 condIn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TEXTO2 ::= TEXTO2 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TEXTO2 ::= TEXTO2 condReturn 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TEXTO2 ::= TEXTO2 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TEXTO2 ::= TEXTO2 f 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TEXTO2 ::= TEXTO2 mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TEXTO2 ::= TEXTO2 not 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TEXTO2 ::= TEXTO2 or 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TEXTO2 ::= TEXTO2 and 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TEXTO2 ::= TEXTO2 mayorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TEXTO2 ::= TEXTO2 menorIgual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TEXTO2 ::= TEXTO2 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TEXTO2 ::= TEXTO2 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TEXTO2 ::= TEXTO2 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TEXTO2 ::= TEXTO2 admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TEXTO2 ::= TEXTO2 comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TEXTO2 ::= TEXTO2 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TEXTO2 ::= TEXTO2 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TEXTO2 ::= TEXTO2 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TEXTO2 ::= TEXTO2 llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TEXTO2 ::= TEXTO2 llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TEXTO2 ::= TEXTO2 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TEXTO2 ::= TEXTO2 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TEXTO2 ::= TEXTO2 porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TEXTO2 ::= TEXTO2 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TEXTO2 ::= TEXTO2 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TEXTO2 ::= TEXTO2 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TEXTO2 ::= TEXTO2 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TEXTO2 ::= TEXTO2 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TEXTO2 ::= TEXTO2 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO2",28, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // COMENTARIO_B ::= comentario_b TEXTO2 comentario_c 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",26, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // COMENTARIO_A ::= comentario_a TEXTO3 ENTER 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("COMENTARIO_A",25, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TAB ::= tab 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TAB",41, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TAB ::= TAB tab 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = a+1; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TAB",41, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ENTER2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER2",7, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ENTER2 ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER2",7, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ENTER2 ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER2",7, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ENTER ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER",23, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ENTER ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ENTER",23, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VAR_MENSAJE ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",45, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VAR_MENSAJE ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = a.toString() + b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",45, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VAR_MENSAJE ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.verif.verifVarMensaje(parser.tabla.getObPython(), b.toString(), parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright);    
                                                            RESULT = parser.manejoPY.retornarEtiquetaId(parser.tabla, b.toString(), parser.metodo);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",45, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VAR_MENSAJE ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",45, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VAR_MENSAJE ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT= a.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",45, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VAR_MENSAJE ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.verif.verifVarMensaje(parser.tabla.getObPython(), a.toString(), parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); 
                                                            RESULT = parser.manejoPY.retornarEtiquetaId(parser.tabla, a.toString(), parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VAR_MENSAJE",45, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ID ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ID ::= coma id ID 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // RESTO_MENSAJE ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // RESTO_MENSAJE ::= CONC TEXTO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",44, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TEXTO ::= comilla TEXTO2 comilla NT$25 RESTO_MENSAJE 
            {
              String RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$25 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  String et = a.toString() + b + c.toString();
                                                    parser.manejoPY.mostrarMensaje(parser.tabla.getObPython(), et, null); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$25",78, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TEXTO ::= VAR_MENSAJE NT$24 RESTO_MENSAJE 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TEXTO",43, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$24 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 parser.manejoPY.mostrarMensaje(parser.tabla.getObPython(), a, "%f"); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$24",77, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONC ::= mas 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CONC",18, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONC ::= coma 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CONC",18, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MENSAJES ::= TAB mensaje parentesis_a NT$23 parentesis_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		 parser.manejoPY.mostrarQuiebre(parser.tabla); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("MENSAJES",17, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$23 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
 parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$23",76, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // MENSAJES ::= TAB mensaje parentesis_a NT$22 TEXTO parentesis_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		 parser.manejoPY.mostrarQuiebre(parser.tabla);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("MENSAJES",17, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$22 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
 parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$22",75, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TIPO_INPUT ::= floatInput 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TIPO_INPUT ::= charInput 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TIPO_INPUT ::= intInput 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",30, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LECTURA_DATOS ::= TAB TIPO_INPUT parentesis_a parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  
                                                                                                                parser.manejoPY.crearScanf(parser.tabla, "", c, parser.metodo);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",22, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LECTURA_DATOS ::= TAB TIPO_INPUT parentesis_a comilla TEXTO2 comilla parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  
                                                                                                                parser.manejoPY.crearScanf(parser.tabla, "", c, parser.metodo);   
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",22, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LECTURA_DATOS ::= TAB id igual TIPO_INPUT parentesis_a parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);    
                                                                                                                parser.manejoPY.crearScanf(parser.tabla, b.toString(), c, parser.metodo);     
                                                                                                                parser.op.valorVariableInput(parser.tabla.getObPython(), b.toString(), parser.jerarquia, c); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",22, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LECTURA_DATOS ::= TAB id igual TIPO_INPUT parentesis_a comilla TEXTO2 comilla parentesis_b ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		   parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);
                                                                                                                parser.manejoPY.crearScanf(parser.tabla, b.toString(), c, parser.metodo);     
                                                                                                                parser.op.valorVariableInput(parser.tabla.getObPython(), b.toString(), parser.jerarquia, c);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",22, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BORRAR ::= TAB condDel id ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);  parser.op.borrarVariable(parser.tabla.getObPython(), b.toString(), parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("BORRAR",16, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ELSE ::= TAB condElif NT$20 EXT NT$21 dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 parser.manejoPY.primerChequeoIf(parser.tabla.getObPython(), h); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$21",74, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$20 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); parser.usoPila.add(false); parser.tipoInstruccion.add("ELSEIF");    parser.pilaFalsas.add(new ArrayList<>());  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$20",73, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELSE ::= TAB condElse NT$19 dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$19 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
 parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion);    parser.tipoInstruccion.add("ELSE");   
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$19",72, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IF ::= TAB condIf NT$17 EXT NT$18 dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 parser.manejoPY.primerChequeoIf(parser.tabla.getObPython(), h); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$18",71, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$17 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); parser.usoPila.add(false); parser.tipoInstruccion.add("IF");   parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$17",70, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP ::= admiracion igual 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP ::= menorIgual 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP ::= mayorIgual 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP ::= menor 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP ::= mayor 
            {
              String RESULT =null;
		 RESULT=">"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP ::= igual igual 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP",32, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONDICION ::= OPERACION OP OPERACION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.agregarBooleans(parser.tabla.getObPython(), parser.pilaFalsas, a, b, c, aleft+PanelPrincipal.totalLineas, aright);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CONDICION",33, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXT ::= not CONDICION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.cambiarGotos(a); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",34, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXT ::= not parentesis_a CONDICION parentesis_b 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT = parser.manejoPY.cambiarGotos(a); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",34, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXT ::= CONDICION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",34, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXT ::= EXT or NT$16 EXT 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 parser.manejoPY.manejoOr(parser.tabla.getObPython(), parser.usoPila, parser.pilaCuarpeta, a, b); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",34, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$16 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
 parser.aux3 = parser.aux2; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$16",69, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXT ::= EXT and EXT 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.manejoAnd(a, b);   
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("EXT",34, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // WHILE ::= TAB condWhile NT$15 EXT dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		  parser.manejoPY.agregarWhile(parser.tabla.getObPython(), h);  
                                                                    parser.usoPila.add(false); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$15 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas,  parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); 
                                                                    parser.tipoInstruccion.add("WHILE"); 
                                                                    parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$15",68, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP_FOR ::= menos numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 parser.manejoPY.agregarAuxPilaFor(parser.tabla, parser.pilaFor, b.toString(), parser.idFor, true, parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP_FOR",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP_FOR ::= numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.manejoPY.agregarAuxPilaFor(parser.tabla, parser.pilaFor, a.toString(), parser.idFor, true, parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP_FOR",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP_FOR ::= menos id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.op.buscarVariable(parser.tabla.getObPython(), b.toString(), parser.jerarquia); 
                                                parser.manejoPY.agregarAuxPilaFor(parser.tabla, parser.pilaFor, a.toString(), parser.idFor, false, parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP_FOR",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP_FOR ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia); 
                                                parser.manejoPY.agregarAuxPilaFor(parser.tabla, parser.pilaFor, a.toString(), parser.idFor, false, parser.metodo);   
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OP_FOR",6, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RANGE ::= OPERACION coma OPERACION coma OP_FOR 
            {
              NodoFor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		  if(a.getTipo().equals("Integer") && b.getTipo().equals("Integer")){ 
                                                                    RESULT=new NodoFor(a.getId(), b.getId(), true); 
                                                                } else { 
                                                                    RESULT=new NodoFor(a.getId(), b.getId(), false); 
                                                                } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RANGE",42, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RANGE ::= OPERACION coma OPERACION 
            {
              NodoFor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  if(a.getTipo().equals("Integer") && b.getTipo().equals("Integer")){ 
                                                                    RESULT=new NodoFor(a.getId(), b.getId(), true); 
                                                                } else { 
                                                                    RESULT=new NodoFor(a.getId(), b.getId(), false); 
                                                                } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RANGE",42, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RANGE ::= OPERACION 
            {
              NodoFor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  if(a.getTipo().equals("Integer")){ 
                                                                    RESULT=new NodoFor(null, a.getId(), true); 
                                                                } else {    
                                                                    RESULT=new NodoFor(null, a.getId(), false); 
                                                                } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RANGE",42, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FOR ::= TAB condFor NT$13 id NT$14 condIn condRange parentesis_a RANGE parentesis_b dosPuntos ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-11)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		NodoFor c = (NodoFor)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		  parser.manejoPY.agregarFor(parser.tabla, parser.pilaFalsas, b.toString(), c.getIdInicio(), c.getIdFin(), parser.metodo);  
                                                                                    parser.verif.comprobacionFor(parser.tabla.getObPython(), b.toString(), "", c.getValor(), "tipo2", parser.op, parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright, cleft+PanelPrincipal.totalLineas, cright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("FOR",11, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.exe.agregarVariable(parser.tabla, b.toString(), parser.metodo, null);
                                                                                    parser.idFor = b.toString(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$14",67, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, true, parser.tipoInstruccion); 
                                                                                    parser.tipoInstruccion.add("FOR"); 
                                                                                    parser.usoPila.add(false); 
                                                                                    parser.pilaFalsas.add(new ArrayList<>()); 
                                                                                    parser.pilaFor.add(new ArrayList<>()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$13",66, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARS4 ::= ENTER 
            {
              ArrayList<NodoBoolean> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS4",35, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARS4 ::= coma OPERACION VARS4 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 if(b!=null){ if(!a.getTipo().equals("")){ b.add(a); RESULT=b; } else { RESULT=null; } } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS4",35, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LADO2 ::= OPERACION coma OPERACION VARS4 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		   if(c!=null){ 
                                                            if(!a.getTipo().equals("") && !b.getTipo().equals("")){ 
                                                                c.add(a); 
                                                                c.add(b); 
                                                                RESULT=c; 
                                                            } else { 
                                                                RESULT=null; 
                                                            } 
                                                        } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LADO2",36, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VARS2 ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS2",38, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARS2 ::= coma id VARS2 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 b.add(a.toString()); RESULT=b; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARS2",38, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LADO1 ::= id NT$11 coma id NT$12 VARS2 
            {
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 c.add(a.toString()); c.add(b.toString()); RESULT=c; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("LADO1",37, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$12 ::= 
            {
              ArrayList<String> RESULT =(ArrayList<String>) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$12",65, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$11 ::= 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$11",64, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VARIABLES2 ::= ENTER 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES2",8, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARIABLES2 ::= igual OPERACION VARIABLES2 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES2",8, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VARIABLES2 ::= coma id igual NT$9 OPERACION NT$10 VARIABLES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES2",8, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.manejoPY.agregarVariable(parser.tabla, parser.metodo, a.toString(), b, aleft+PanelPrincipal.totalLineas, aright);  
                                                        parser.exe.cambiarTipoVar(parser.tabla, a.toString(), parser.metodo, b.getTipo());    
                                                        parser.op.asignarVariables(parser.tabla.getObPython(), a.toString(), b.getTipo(), aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$10",63, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodo, null); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$9",62, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VARIABLES3 ::= TAB LADO1 igual LADO2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion);    
                                                        parser.manejoPY.asignacionesMultiples(parser.tabla.getObPython(), b, c, bleft+PanelPrincipal.totalLineas, bright);    
                                                        parser.op.asignacionesMultiples(parser.tabla.getObPython(), b, c, parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright); 
                                                        parser.exe.agregacionesMultiples(parser.tabla, b, c, parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES3",24, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VARIABLES3 ::= TAB id igual NT$7 OPERACION NT$8 VARIABLES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean c = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		  parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, a, false, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("VARIABLES3",24, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean c = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.manejoPY.agregarVariable(parser.tabla, parser.metodo, b.toString(), c, bleft+PanelPrincipal.totalLineas, bright);  
                                                        parser.exe.cambiarTipoVar(parser.tabla, b.toString(), parser.metodo, c.getTipo());
                                                        parser.op.asignarVariables(parser.tabla.getObPython(), b.toString(), c.getTipo(), bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$8",61, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.exe.agregarVariable(parser.tabla, b.toString(), parser.metodo, null); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$7",60, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUERPO_METODO ::= error CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUERPO_METODO ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CUERPO_METODO ::= METODO_VOID CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CUERPO_METODO ::= RETURN CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CUERPO_METODO ::= COMENTARIO_A CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CUERPO_METODO ::= COMENTARIO_B CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CUERPO_METODO ::= condPass ENTER CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUERPO_METODO ::= ELSE CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUERPO_METODO ::= LECTURA_DATOS CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUERPO_METODO ::= MENSAJES CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUERPO_METODO ::= BORRAR CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPO_METODO ::= IF CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUERPO_METODO ::= WHILE CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPO_METODO ::= FOR CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPO_METODO ::= VARIABLES3 CUERPO_METODO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",4, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_VAL2 ::= numero punto numero 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_VAL2 ::= numero 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_VAL2 ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_VAL2 ::= comilla id comilla 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL2",29, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_VAL ::= menos numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_VAL ::= menos numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_VAL ::= menos id 
            {
              NodoBoolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  String tip=parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia);   
                                                                            if(tip.equals("")){ 
                                                                                int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: La variable "+a.toString()+" no existe dentro del archivo PYTHON.\n"; 
                                                                            }     
                                                                            RESULT = parser.manejoPY.devEtiquetaId(parser.tabla, a.toString(), parser.metodo, tip, true);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_VAL ::= menos comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_VAL ::= menos comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_VAL ::= comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_VAL ::= comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_VAL ::= numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_VAL ::= menos METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  String et = "-"+a.getId();
                                                                            RESULT = new NodoBoolean(a.getTipo(), et);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_VAL ::= METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_VAL ::= numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_VAL ::= id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  String tip = parser.op.buscarVariable(parser.tabla.getObPython(), a.toString(), parser.jerarquia); if(tip.equals("")){ 
                                                                                int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: La variable "+a.toString()+" no existe dentro del archivo PYTHON.\n"; 
                                                                            }
                                                                            RESULT = parser.manejoPY.devEtiquetaId(parser.tabla, a.toString(), parser.metodo, tip, false); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",47, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= TIPO_VAL 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION ::= OPERACION porcentaje OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "modulo",aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION ::= OPERACION div OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "div", aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION ::= OPERACION por OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "mult", aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION ::= OPERACION menos OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "resta",aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION ::= OPERACION mas OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = parser.manejoPY.concatenarOperacion(parser.tabla.getObPython(), a, b, "suma",aleft+PanelPrincipal.totalLineas, aright);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		 RESULT=a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("OPERACION",46, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETORNO ::= OPERACION 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RETORNO",48, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RETURN ::= TAB NT$6 condReturn RETORNO ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		  parser.exe.agregarReturn(parser.tabla, parser.metodo, a.getTipo());
                                                parser.manejoPY.agregarReturn(parser.tabla, a.getId(), parser.metodo); 
                                                parser.op.agregarRetornoMetodo(parser.tabla.getObPython(), a.getId()); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("RETURN",2, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$6 ::= 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.op.verificarTabs(hright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, h, true, parser.tipoInstruccion); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$6",59, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETROS2 ::= error 
            {
              ArrayList<String> RESULT =null;
		  PanelPrincipal.errores += " Error tipo: SINTACTICO, Posible error debido a una mal definicion dentro de los parametros.\n";  
                                                                RESULT=new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",40, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS2 ::= 
            {
              ArrayList<String> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",40, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS2 ::= coma id NT$5 PARAMETROS2 
            {
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  b.add(a.toString()); RESULT=b; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",40, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.exe.agregarParametro(parser.tabla, a.toString(), parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$5",58, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS ::= error 
            {
              ArrayList<String> RESULT =null;
		  PanelPrincipal.errores += " Error tipo: SINTACTICO, Posible error debido a una mal definicion dentro de los parametros.\n";  
                                                                RESULT=new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS",39, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROS ::= 
            {
              ArrayList<String> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS",39, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROS ::= id NT$4 PARAMETROS2 
            {
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  if(b!=null){ 
                                                                    b.add(a.toString()); 
                                                                    RESULT=b; 
                                                                } else {    
                                                                    RESULT = new ArrayList<>(); 
                                                                } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAMETROS",39, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.exe.agregarParametro(parser.tabla, a.toString(), parser.metodo); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$4",57, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAM2 ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM2",52, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAM2 ::= PARAM2 OPERACION coma 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		  if(a != null){
                                                                            if(!b.getTipo().equals("")){
                                                                                a.add(b);
                                                                                RESULT = a;
                                                                            } else {
                                                                                RESULT = null;
                                                                            }
                                                                        } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM2",52, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAM ::= PARAM2 OPERACION 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		  if(a != null){
                                                                            if(!b.getTipo().equals("")){
                                                                                a.add(b);
                                                                                RESULT = a;
                                                                            } else {
                                                                                RESULT = null;
                                                                            }
                                                                        } 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM",51, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAM_METODOS ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",50, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAM_METODOS ::= PARAM 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",50, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // METODO_VOID ::= TAB id parentesis_a PARAM_METODOS parentesis_b ENTER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		   parser.op.verificarTabs(aright, parser.tabla.getObPython(), parser.pilaFor, parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.instrucciones, parser.lineasGuias, c, true, parser.tipoInstruccion);
                                                                                        parser.verif.verificarMetodo(parser.tabla, a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                                        parser.manejoPY.invocarMetodo(parser.tabla, a.toString(), b, aleft+PanelPrincipal.totalLineas); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("METODO_VOID",3, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // METODO_COND ::= id parentesis_a PARAM_METODOS parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		  boolean existe = parser.verif.verificarMetodo(parser.tabla, a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                            String et = parser.manejoPY.devolverEtiquetaMetodo(parser.tabla, a.toString(), b, aleft+PanelPrincipal.totalLineas);
                                                                            String tip = "";
                                                                            if(existe){
                                                                                tip = "Metodo";
                                                                            }  
                                                                            RESULT = new NodoBoolean(tip, et);  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("METODO_COND",49, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // METODOS ::= condDef NT$0 id NT$1 parentesis_a PARAMETROS parentesis_b NT$2 dosPuntos ENTER NT$3 CUERPO_METODO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-6)).value;
		  parser.manejoPY.finMetodo(parser.tabla.getObPython());  
                                                                    parser.jerarquia--; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("METODOS",1, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
  parser.op.agregarMetodo(parser.tabla.getObPython(), a.toString(), b, parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); 
                                                                    parser.primerLinea=false;  
                                                                    parser.instrucciones.add(0); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$3",56, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
  parser.manejoPY.crearMetodo(parser.tabla.getObPython(), a.toString(), b, "void"); 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$2",55, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.peek()).value;
  parser.exe.agregarMetodo(parser.tabla, a.toString()); 
                                                                    parser.metodo = a.toString();  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$1",54, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error 
            {
              Object RESULT =null;
		 PanelPrincipal.errores += " Error tipo: SINTACTICO, Posible error debido a una mal definicion en un metodo.\n";  
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO METODOS 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO1 ::= ENTER2 INICIO 
            {
              Object RESULT =null;

              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("INICIO1",27, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          return CUP$SintaxPYTHON$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO1 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)).value;
		RESULT = start_val;
              CUP$SintaxPYTHON$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.elementAt(CUP$SintaxPYTHON$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxPYTHON$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxPYTHON$parser.done_parsing();
          return CUP$SintaxPYTHON$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

