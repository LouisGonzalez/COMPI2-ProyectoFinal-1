
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 07 22:39:12 CST 2020
//----------------------------------------------------

package gramaticaC;

import java_cup.runtime.*;
import Operaciones.*;
import Tablas.*;
import verificaciones.VerifC;
import objetos.*;
import ObjetosC.*;
import java.util.*;
import manejoCuartetos.*;
import objetosApoyo.*;
import cuartetos.*;
import interfaz.*;
import manejoExe.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 07 22:39:12 CST 2020
  */
public class SintaxC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxC() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\002\002\004\000\002\112\002\000\002\002" +
    "\007\000\002\113\002\000\002\003\012\000\002\114\002" +
    "\000\002\003\012\000\002\115\002\000\002\003\014\000" +
    "\002\003\011\000\002\003\013\000\002\003\002\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\002\000" +
    "\002\116\002\000\002\117\002\000\002\005\013\000\002" +
    "\071\004\000\002\071\002\000\002\071\004\000\002\120" +
    "\002\000\002\121\002\000\002\006\011\000\002\122\002" +
    "\000\002\006\010\000\002\123\002\000\002\006\010\000" +
    "\002\124\002\000\002\006\010\000\002\125\002\000\002" +
    "\126\002\000\002\007\012\000\002\127\002\000\002\130" +
    "\002\000\002\007\012\000\002\131\002\000\002\041\007" +
    "\000\002\132\002\000\002\041\006\000\002\041\002\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\067\005\000\002\067\005\000\002\067" +
    "\005\000\002\067\005\000\002\067\005\000\002\067\005" +
    "\000\002\067\003\000\002\070\005\000\002\070\005\000" +
    "\002\070\003\000\002\070\005\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\004\000\002\070" +
    "\006\000\002\070\004\000\002\070\004\000\002\070\004" +
    "\000\002\070\006\000\002\070\006\000\002\133\002\000" +
    "\002\073\005\000\002\134\002\000\002\072\005\000\002" +
    "\135\002\000\002\102\005\000\002\065\006\000\002\065" +
    "\006\000\002\066\006\000\002\066\002\000\002\066\006" +
    "\000\002\063\006\000\002\063\006\000\002\064\006\000" +
    "\002\064\002\000\002\064\006\000\002\105\003\000\002" +
    "\105\003\000\002\136\002\000\002\137\002\000\002\011" +
    "\016\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\002\000\002\012\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\140\002\000" +
    "\002\047\011\000\002\141\002\000\002\047\011\000\002" +
    "\142\002\000\002\047\013\000\002\143\002\000\002\144" +
    "\002\000\002\061\014\000\002\145\002\000\002\146\002" +
    "\000\002\061\014\000\002\147\002\000\002\150\002\000" +
    "\002\061\016\000\002\110\003\000\002\110\002\000\002" +
    "\151\002\000\002\152\002\000\002\014\014\000\002\153" +
    "\002\000\002\014\012\000\002\154\002\000\002\016\007" +
    "\000\002\155\002\000\002\016\006\000\002\016\002\000" +
    "\002\111\005\000\002\111\004\000\002\106\004\000\002" +
    "\106\003\000\002\107\005\000\002\107\002\000\002\107" +
    "\003\000\002\156\002\000\002\157\002\000\002\160\002" +
    "\000\002\017\020\000\002\161\002\000\002\162\002\000" +
    "\002\163\002\000\002\020\021\000\002\164\002\000\002" +
    "\165\002\000\002\020\013\000\002\020\002\000\002\056" +
    "\003\000\002\056\003\000\002\056\004\000\002\056\004" +
    "\000\002\056\004\000\002\056\004\000\002\056\003\000" +
    "\002\076\005\000\002\166\002\000\002\076\006\000\002" +
    "\076\003\000\002\076\006\000\002\076\004\000\002\076" +
    "\003\000\002\075\005\000\002\075\003\000\002\075\003" +
    "\000\002\077\005\000\002\077\005\000\002\077\005\000" +
    "\002\077\005\000\002\077\005\000\002\077\005\000\002" +
    "\077\003\000\002\100\005\000\002\100\005\000\002\100" +
    "\006\000\002\100\006\000\002\100\003\000\002\100\005" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\004\000\002\100\006\000\002\100\004\000\002" +
    "\100\004\000\002\100\004\000\002\167\002\000\002\101" +
    "\011\000\002\170\002\000\002\101\011\000\002\171\002" +
    "\000\002\101\013\000\002\172\002\000\002\173\002\000" +
    "\002\174\002\000\002\175\002\000\002\176\002\000\002" +
    "\021\034\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\002\000\002\055\003\000\002\074\003" +
    "\000\002\074\004\000\002\074\003\000\002\074\004\000" +
    "\002\177\002\000\002\200\002\000\002\201\002\000\002" +
    "\022\017\000\002\202\002\000\002\203\002\000\002\023" +
    "\021\000\002\204\002\000\002\205\002\000\002\206\002" +
    "\000\002\024\017\000\002\207\002\000\002\210\002\000" +
    "\002\025\013\000\002\211\002\000\002\025\010\000\002" +
    "\025\002\000\002\010\005\000\002\010\002\000\002\104" +
    "\003\000\002\104\005\000\002\104\003\000\002\104\004" +
    "\000\002\104\004\000\002\104\003\000\002\212\002\000" +
    "\002\213\002\000\002\027\020\000\002\062\003\000\002" +
    "\062\002\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\005\000\002\103\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\005\000\002\057\003\000\002" +
    "\214\002\000\002\031\011\000\002\215\002\000\002\026" +
    "\005\000\002\216\002\000\002\026\007\000\002\026\003" +
    "\000\002\032\004\000\002\032\002\000\002\217\002\000" +
    "\002\033\010\000\002\220\002\000\002\034\012\000\002" +
    "\221\002\000\002\034\012\000\002\222\002\000\002\034" +
    "\010\000\002\060\003\000\002\060\004\000\002\060\003" +
    "\000\002\060\004\000\002\060\003\000\002\060\003\000" +
    "\002\060\005\000\002\042\005\000\002\045\006\000\002" +
    "\043\004\000\002\043\003\000\002\044\004\000\002\044" +
    "\003\000\002\044\002\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\002\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02ba\000\030\022\ufee0\033\ufee0\034\ufee0\035\ufee0\036" +
    "\ufee0\037\ufee0\067\ufee0\071\ufee0\074\ufee0\075\007\076\ufee0" +
    "\001\002\000\026\022\ufff6\033\ufff6\034\ufff6\035\ufff6\036" +
    "\ufff6\037\ufff6\067\ufff6\071\ufff6\074\ufff6\076\ufff6\001\002" +
    "\000\004\002\011\001\002\000\004\075\010\001\002\000" +
    "\076\002\ufee1\003\ufee1\010\ufee1\011\ufee1\016\ufee1\020\ufee1" +
    "\021\ufee1\022\ufee1\033\ufee1\034\ufee1\035\ufee1\036\ufee1\037" +
    "\ufee1\047\ufee1\050\ufee1\051\ufee1\052\ufee1\053\ufee1\054\ufee1" +
    "\055\ufee1\056\ufee1\057\ufee1\060\ufee1\064\ufee1\065\ufee1\067" +
    "\ufee1\071\ufee1\074\ufee1\075\ufee3\076\ufee1\001\002\000\076" +
    "\002\ufee2\003\ufee2\010\ufee2\011\ufee2\016\ufee2\020\ufee2\021" +
    "\ufee2\022\ufee2\033\ufee2\034\ufee2\035\ufee2\036\ufee2\037\ufee2" +
    "\047\ufee2\050\ufee2\051\ufee2\052\ufee2\053\ufee2\054\ufee2\055" +
    "\ufee2\056\ufee2\057\ufee2\060\ufee2\064\ufee2\065\ufee2\067\ufee2" +
    "\071\ufee2\074\ufee2\075\ufee4\076\ufee2\001\002\000\004\002" +
    "\001\001\002\000\026\022\000\033\000\034\000\035\000" +
    "\036\000\037\000\067\000\071\013\074\000\076\000\001" +
    "\002\000\004\017\u02a2\001\002\000\024\022\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\067\uffec\074\uffec\076" +
    "\uffec\001\002\000\024\022\026\033\017\034\023\035\036" +
    "\036\020\037\025\067\031\074\022\076\021\001\002\000" +
    "\024\022\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\067\ufff2\074\ufff2\076\ufff2\001\002\000\004\040\u016d\001" +
    "\002\000\004\067\uffcf\001\002\000\162\003\ufe78\004\ufe78" +
    "\005\ufe78\006\ufe78\007\ufe78\010\ufe78\011\ufe78\012\ufe78\013" +
    "\ufe78\014\ufe78\015\ufe78\016\ufe78\017\ufe78\020\ufe78\021\ufe78" +
    "\022\ufe78\023\ufe78\025\ufe78\026\ufe78\027\ufe78\030\ufe78\031" +
    "\ufe78\033\ufe78\034\ufe78\035\ufe78\037\ufe78\040\ufe78\041\ufe78" +
    "\042\ufe78\043\ufe78\044\ufe78\045\ufe78\046\ufe78\047\ufe78\050" +
    "\ufe78\051\ufe78\052\ufe78\053\ufe78\054\ufe78\055\ufe78\056\ufe78" +
    "\057\ufe78\060\ufe78\061\ufe78\062\ufe78\063\ufe78\064\ufe78\065" +
    "\ufe78\066\ufe78\067\ufe78\070\ufe78\071\ufe78\072\ufe78\073\ufe78" +
    "\075\ufe78\077\ufe78\001\002\000\150\004\ufead\005\ufead\006" +
    "\ufead\007\ufead\010\ufead\011\ufead\012\ufead\013\ufead\014\ufead" +
    "\015\ufead\016\ufead\017\ufead\020\ufead\021\ufead\022\ufead\023" +
    "\ufead\025\ufead\026\ufead\027\ufead\030\ufead\031\ufead\033\ufead" +
    "\034\ufead\035\ufead\037\ufead\040\ufead\041\ufead\042\ufead\043" +
    "\ufead\044\ufead\045\ufead\046\ufead\047\ufead\050\ufead\051\ufead" +
    "\052\ufead\053\ufead\054\ufead\055\ufead\056\ufead\057\ufead\060" +
    "\ufead\064\ufead\065\ufead\066\ufead\067\ufead\070\ufead\071\ufead" +
    "\072\ufead\073\ufead\075\ufead\001\002\000\004\067\uffd0\001" +
    "\002\000\024\022\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\067\ufff1\074\ufff1\076\ufff1\001\002\000\012\034" +
    "\023\035\036\036\020\067\363\001\002\000\004\005\333" +
    "\001\002\000\004\043\322\001\002\000\004\002\uffff\001" +
    "\002\000\010\014\uffb8\043\307\067\uffce\001\002\000\024" +
    "\022\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\067" +
    "\uffed\074\uffed\076\uffed\001\002\000\004\067\040\001\002" +
    "\000\024\022\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\067\uffee\074\uffee\076\uffee\001\002\000\024\022\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\067\uffef\074" +
    "\uffef\076\uffef\001\002\000\004\067\uffd1\001\002\000\024" +
    "\022\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\067" +
    "\ufff0\074\ufff0\076\ufff0\001\002\000\012\004\uffdc\006\uffdc" +
    "\014\uffd9\043\uffdc\001\002\000\004\014\uffaa\001\002\000" +
    "\010\004\uffe7\006\uffe7\043\044\001\002\000\006\004\uffdb" +
    "\006\uffdb\001\002\000\024\003\056\012\057\020\045\021" +
    "\060\022\047\025\061\027\052\066\055\067\046\001\002" +
    "\000\004\005\250\001\002\000\026\004\uffc0\006\uffc0\013" +
    "\uffc0\014\uffb6\015\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\001\002\000\004\005\240\001\002\000\024\004" +
    "\uffc2\006\uffc2\013\uffc2\015\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\001\002\000\020\004\uffe8\006\uffe8\026" +
    "\162\027\164\030\160\031\165\032\163\001\002\000\016" +
    "\020\045\021\060\022\047\025\225\066\223\067\227\001" +
    "\002\000\024\004\uffc7\006\uffc7\013\uffc7\015\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\001\002\000\024\004" +
    "\uffc1\006\uffc1\013\uffc1\015\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\001\002\000\026\004\uffc4\005\221\006" +
    "\uffc4\013\uffc4\015\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\001\002\000\006\004\uffe6\006\uffe6\001\002\000" +
    "\022\012\057\020\045\021\060\022\047\025\061\027\052" +
    "\066\055\067\046\001\002\000\004\005\066\001\002\000" +
    "\006\066\062\067\063\001\002\000\004\025\065\001\002" +
    "\000\004\025\064\001\002\000\024\004\uffc6\006\uffc6\013" +
    "\uffc6\015\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\001\002\000\024\004\uffc5\006\uffc5\013\uffc5\015\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\001\002\000\004" +
    "\067\067\001\002\000\004\012\070\001\002\000\026\003" +
    "\uff91\012\uff91\013\uff91\020\uff91\021\uff91\022\uff91\025\uff91" +
    "\027\uff91\066\uff91\067\uff91\001\002\000\026\003\072\012" +
    "\uff71\013\uff81\020\uff71\021\uff71\022\uff71\025\uff71\027\uff71" +
    "\066\uff71\067\uff71\001\002\000\024\012\uff70\013\uff73\020" +
    "\uff70\021\uff70\022\uff70\025\uff70\027\uff70\066\uff70\067\uff70" +
    "\001\002\000\022\012\110\020\077\021\111\022\102\025" +
    "\112\027\104\066\105\067\101\001\002\000\004\013\076" +
    "\001\002\000\004\013\uff82\001\002\000\024\004\uff90\006" +
    "\uff90\013\uff90\015\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\032\uff90\001\002\000\004\005\211\001\002\000\040\003" +
    "\uff45\004\uff45\006\uff45\013\uff45\026\uff45\027\uff45\030\uff45" +
    "\031\uff45\032\uff45\041\uff45\042\uff45\043\uff45\044\uff45\100" +
    "\uff45\101\uff45\001\002\000\042\003\uff43\004\uff43\006\uff43" +
    "\013\uff43\014\uffb4\026\uff43\027\uff43\030\uff43\031\uff43\032" +
    "\uff43\041\uff43\042\uff43\043\uff43\044\uff43\100\uff43\101\uff43" +
    "\001\002\000\004\005\201\001\002\000\040\003\uff4c\004" +
    "\uff4c\006\uff4c\013\uff4c\026\uff4c\027\uff4c\030\uff4c\031\uff4c" +
    "\032\uff4c\041\uff4c\042\uff4c\043\uff4c\044\uff4c\100\uff4c\101" +
    "\uff4c\001\002\000\016\020\077\021\111\022\102\025\145" +
    "\066\144\067\150\001\002\000\042\003\uff47\004\uff47\005" +
    "\142\006\uff47\013\uff47\026\uff47\027\uff47\030\uff47\031\uff47" +
    "\032\uff47\041\uff47\042\uff47\043\uff47\044\uff47\100\uff47\101" +
    "\uff47\001\002\000\020\004\141\013\uff74\026\130\027\132" +
    "\030\127\031\133\032\131\001\002\000\040\003\uff44\004" +
    "\uff44\006\uff44\013\uff44\026\uff44\027\uff44\030\uff44\031\uff44" +
    "\032\uff44\041\uff44\042\uff44\043\uff44\044\uff44\100\uff44\101" +
    "\uff44\001\002\000\022\012\110\020\077\021\111\022\102" +
    "\025\112\027\104\066\105\067\101\001\002\000\004\005" +
    "\117\001\002\000\006\066\113\067\114\001\002\000\004" +
    "\025\116\001\002\000\004\025\115\001\002\000\040\003" +
    "\uff4b\004\uff4b\006\uff4b\013\uff4b\026\uff4b\027\uff4b\030\uff4b" +
    "\031\uff4b\032\uff4b\041\uff4b\042\uff4b\043\uff4b\044\uff4b\100" +
    "\uff4b\101\uff4b\001\002\000\040\003\uff4a\004\uff4a\006\uff4a" +
    "\013\uff4a\026\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a\041" +
    "\uff4a\042\uff4a\043\uff4a\044\uff4a\100\uff4a\101\uff4a\001\002" +
    "\000\004\067\120\001\002\000\004\012\121\001\002\000" +
    "\026\003\uff3d\012\uff3d\013\uff3d\020\uff3d\021\uff3d\022\uff3d" +
    "\025\uff3d\027\uff3d\066\uff3d\067\uff3d\001\002\000\026\003" +
    "\072\012\uff71\013\uff81\020\uff71\021\uff71\022\uff71\025\uff71" +
    "\027\uff71\066\uff71\067\uff71\001\002\000\004\013\124\001" +
    "\002\000\040\003\uff3c\004\uff3c\006\uff3c\013\uff3c\026\uff3c" +
    "\027\uff3c\030\uff3c\031\uff3c\032\uff3c\041\uff3c\042\uff3c\043" +
    "\uff3c\044\uff3c\100\uff3c\101\uff3c\001\002\000\016\013\126" +
    "\026\130\027\132\030\127\031\133\032\131\001\002\000" +
    "\040\003\uff52\004\uff52\006\uff52\013\uff52\026\uff52\027\uff52" +
    "\030\uff52\031\uff52\032\uff52\041\uff52\042\uff52\043\uff52\044" +
    "\uff52\100\uff52\101\uff52\001\002\000\022\012\110\020\077" +
    "\021\111\022\102\025\112\027\104\066\105\067\101\001" +
    "\002\000\022\012\110\020\077\021\111\022\102\025\112" +
    "\027\104\066\105\067\101\001\002\000\022\012\110\020" +
    "\077\021\111\022\102\025\112\027\104\066\105\067\101" +
    "\001\002\000\022\012\110\020\077\021\111\022\102\025" +
    "\112\027\104\066\105\067\101\001\002\000\022\012\110" +
    "\020\077\021\111\022\102\025\112\027\104\066\105\067" +
    "\101\001\002\000\040\003\uff4e\004\uff4e\006\uff4e\013\uff4e" +
    "\026\uff4e\027\uff4e\030\uff4e\031\uff4e\032\uff4e\041\uff4e\042" +
    "\uff4e\043\uff4e\044\uff4e\100\uff4e\101\uff4e\001\002\000\040" +
    "\003\uff50\004\uff50\006\uff50\013\uff50\026\uff50\027\uff50\030" +
    "\127\031\133\032\131\041\uff50\042\uff50\043\uff50\044\uff50" +
    "\100\uff50\101\uff50\001\002\000\040\003\uff4d\004\uff4d\006" +
    "\uff4d\013\uff4d\026\uff4d\027\uff4d\030\uff4d\031\uff4d\032\uff4d" +
    "\041\uff4d\042\uff4d\043\uff4d\044\uff4d\100\uff4d\101\uff4d\001" +
    "\002\000\040\003\uff51\004\uff51\006\uff51\013\uff51\026\uff51" +
    "\027\uff51\030\127\031\133\032\131\041\uff51\042\uff51\043" +
    "\uff51\044\uff51\100\uff51\101\uff51\001\002\000\040\003\uff4f" +
    "\004\uff4f\006\uff4f\013\uff4f\026\uff4f\027\uff4f\030\uff4f\031" +
    "\uff4f\032\uff4f\041\uff4f\042\uff4f\043\uff4f\044\uff4f\100\uff4f" +
    "\101\uff4f\001\002\000\022\012\uff72\020\uff72\021\uff72\022" +
    "\uff72\025\uff72\027\uff72\066\uff72\067\uff72\001\002\000\004" +
    "\066\143\001\002\000\040\003\uff46\004\uff46\006\uff46\013" +
    "\uff46\026\uff46\027\uff46\030\uff46\031\uff46\032\uff46\041\uff46" +
    "\042\uff46\043\uff46\044\uff46\100\uff46\101\uff46\001\002\000" +
    "\042\003\uff42\004\uff42\005\177\006\uff42\013\uff42\026\uff42" +
    "\027\uff42\030\uff42\031\uff42\032\uff42\041\uff42\042\uff42\043" +
    "\uff42\044\uff42\100\uff42\101\uff42\001\002\000\006\066\173" +
    "\067\174\001\002\000\040\003\uff3f\004\uff3f\006\uff3f\013" +
    "\uff3f\026\uff3f\027\uff3f\030\uff3f\031\uff3f\032\uff3f\041\uff3f" +
    "\042\uff3f\043\uff3f\044\uff3f\100\uff3f\101\uff3f\001\002\000" +
    "\040\003\uff40\004\uff40\006\uff40\013\uff40\026\uff40\027\uff40" +
    "\030\uff40\031\uff40\032\uff40\041\uff40\042\uff40\043\uff40\044" +
    "\uff40\100\uff40\101\uff40\001\002\000\042\003\uff3e\004\uff3e" +
    "\006\uff3e\013\uff3e\014\uffb4\026\uff3e\027\uff3e\030\uff3e\031" +
    "\uff3e\032\uff3e\041\uff3e\042\uff3e\043\uff3e\044\uff3e\100\uff3e" +
    "\101\uff3e\001\002\000\004\014\uffaf\001\002\000\004\014" +
    "\154\001\002\000\040\003\uffb3\004\uffb3\006\uffb3\013\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\100\uffb3\101\uffb3\001\002\000\024" +
    "\003\156\012\057\020\045\021\060\022\047\025\061\027" +
    "\052\066\055\067\046\001\002\000\016\015\161\026\162" +
    "\027\164\030\160\031\165\032\163\001\002\000\004\015" +
    "\157\001\002\000\044\003\uffb1\004\uffb1\006\uffb1\013\uffb1" +
    "\014\uffae\015\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\100\uffb1\101\uffb1" +
    "\001\002\000\022\012\057\020\045\021\060\022\047\025" +
    "\061\027\052\066\055\067\046\001\002\000\044\003\uffb2" +
    "\004\uffb2\006\uffb2\013\uffb2\014\uffb0\015\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\041\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\100\uffb2\101\uffb2\001\002\000\022\012\057\020" +
    "\045\021\060\022\047\025\061\027\052\066\055\067\046" +
    "\001\002\000\022\012\057\020\045\021\060\022\047\025" +
    "\061\027\052\066\055\067\046\001\002\000\022\012\057" +
    "\020\045\021\060\022\047\025\061\027\052\066\055\067" +
    "\046\001\002\000\022\012\057\020\045\021\060\022\047" +
    "\025\061\027\052\066\055\067\046\001\002\000\024\004" +
    "\uffc9\006\uffc9\013\uffc9\015\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\001\002\000\024\004\uffcb\006\uffcb\013" +
    "\uffcb\015\uffcb\026\uffcb\027\uffcb\030\160\031\165\032\163" +
    "\001\002\000\024\004\uffc8\006\uffc8\013\uffc8\015\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\001\002\000\024" +
    "\004\uffcc\006\uffcc\013\uffcc\015\uffcc\026\uffcc\027\uffcc\030" +
    "\160\031\165\032\163\001\002\000\024\004\uffca\006\uffca" +
    "\013\uffca\015\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\001\002\000\004\025\176\001\002\000\004\025\175" +
    "\001\002\000\040\003\uff49\004\uff49\006\uff49\013\uff49\026" +
    "\uff49\027\uff49\030\uff49\031\uff49\032\uff49\041\uff49\042\uff49" +
    "\043\uff49\044\uff49\100\uff49\101\uff49\001\002\000\040\003" +
    "\uff48\004\uff48\006\uff48\013\uff48\026\uff48\027\uff48\030\uff48" +
    "\031\uff48\032\uff48\041\uff48\042\uff48\043\uff48\044\uff48\100" +
    "\uff48\101\uff48\001\002\000\004\066\200\001\002\000\040" +
    "\003\uff41\004\uff41\006\uff41\013\uff41\026\uff41\027\uff41\030" +
    "\uff41\031\uff41\032\uff41\041\uff41\042\uff41\043\uff41\044\uff41" +
    "\100\uff41\101\uff41\001\002\000\004\067\202\001\002\000" +
    "\004\005\203\001\002\000\004\067\204\001\002\000\004" +
    "\012\205\001\002\000\026\003\uff39\012\uff39\013\uff39\020" +
    "\uff39\021\uff39\022\uff39\025\uff39\027\uff39\066\uff39\067\uff39" +
    "\001\002\000\026\003\072\012\uff71\013\uff81\020\uff71\021" +
    "\uff71\022\uff71\025\uff71\027\uff71\066\uff71\067\uff71\001\002" +
    "\000\004\013\210\001\002\000\040\003\uff38\004\uff38\006" +
    "\uff38\013\uff38\026\uff38\027\uff38\030\uff38\031\uff38\032\uff38" +
    "\041\uff38\042\uff38\043\uff38\044\uff38\100\uff38\101\uff38\001" +
    "\002\000\004\067\212\001\002\000\004\012\213\001\002" +
    "\000\026\003\uff3b\012\uff3b\013\uff3b\020\uff3b\021\uff3b\022" +
    "\uff3b\025\uff3b\027\uff3b\066\uff3b\067\uff3b\001\002\000\026" +
    "\003\072\012\uff71\013\uff81\020\uff71\021\uff71\022\uff71\025" +
    "\uff71\027\uff71\066\uff71\067\uff71\001\002\000\004\013\216" +
    "\001\002\000\040\003\uff3a\004\uff3a\006\uff3a\013\uff3a\026" +
    "\uff3a\027\uff3a\030\uff3a\031\uff3a\032\uff3a\041\uff3a\042\uff3a" +
    "\043\uff3a\044\uff3a\100\uff3a\101\uff3a\001\002\000\016\013" +
    "\220\026\162\027\164\030\160\031\165\032\163\001\002" +
    "\000\024\004\uffcd\006\uffcd\013\uffcd\015\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\001\002\000\004\066\222" +
    "\001\002\000\024\004\uffc3\006\uffc3\013\uffc3\015\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\001\002\000\026" +
    "\004\uffbf\005\236\006\uffbf\013\uffbf\015\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\001\002\000\024\004\uffbd" +
    "\006\uffbd\013\uffbd\015\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\001\002\000\006\066\232\067\233\001\002" +
    "\000\024\004\uffbc\006\uffbc\013\uffbc\015\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\001\002\000\026\004\uffbb" +
    "\006\uffbb\013\uffbb\014\uffb6\015\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\001\002\000\004\014\uffaf\001\002" +
    "\000\024\004\uffb5\006\uffb5\013\uffb5\015\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\001\002\000\004\025\235" +
    "\001\002\000\004\025\234\001\002\000\024\004\uffba\006" +
    "\uffba\013\uffba\015\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\001\002\000\024\004\uffb9\006\uffb9\013\uffb9\015" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\001\002" +
    "\000\004\066\237\001\002\000\024\004\uffbe\006\uffbe\013" +
    "\uffbe\015\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\001\002\000\004\067\241\001\002\000\004\005\242\001" +
    "\002\000\004\067\243\001\002\000\004\012\244\001\002" +
    "\000\026\003\uff8d\012\uff8d\013\uff8d\020\uff8d\021\uff8d\022" +
    "\uff8d\025\uff8d\027\uff8d\066\uff8d\067\uff8d\001\002\000\026" +
    "\003\072\012\uff71\013\uff81\020\uff71\021\uff71\022\uff71\025" +
    "\uff71\027\uff71\066\uff71\067\uff71\001\002\000\004\013\247" +
    "\001\002\000\024\004\uff8c\006\uff8c\013\uff8c\015\uff8c\026" +
    "\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\001\002\000\004" +
    "\067\251\001\002\000\004\012\252\001\002\000\026\003" +
    "\uff8f\012\uff8f\013\uff8f\020\uff8f\021\uff8f\022\uff8f\025\uff8f" +
    "\027\uff8f\066\uff8f\067\uff8f\001\002\000\026\003\072\012" +
    "\uff71\013\uff81\020\uff71\021\uff71\022\uff71\025\uff71\027\uff71" +
    "\066\uff71\067\uff71\001\002\000\004\013\255\001\002\000" +
    "\024\004\uff8e\006\uff8e\013\uff8e\015\uff8e\026\uff8e\027\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\001\002\000\006\004\257\006" +
    "\uffd2\001\002\000\004\067\263\001\002\000\004\006\261" +
    "\001\002\000\066\003\ufee0\011\ufee0\016\ufee0\020\ufee0\021" +
    "\ufee0\022\ufee0\033\ufee0\034\ufee0\035\ufee0\036\ufee0\037\ufee0" +
    "\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0\056" +
    "\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0" +
    "\075\007\076\ufee0\001\002\000\064\003\uffda\011\uffda\016" +
    "\uffda\020\uffda\021\uffda\022\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\047\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\064\uffda\065\uffda" +
    "\067\uffda\074\uffda\076\uffda\001\002\000\012\004\uffe7\006" +
    "\uffe7\014\uffd4\043\044\001\002\000\006\004\uffd6\006\uffd6" +
    "\001\002\000\004\014\uffaa\001\002\000\004\006\uffd3\001" +
    "\002\000\004\014\270\001\002\000\010\003\272\066\271" +
    "\067\273\001\002\000\004\015\uffa7\001\002\000\004\015" +
    "\276\001\002\000\004\015\uffa8\001\002\000\004\015\275" +
    "\001\002\000\010\004\uffad\006\uffad\014\uffab\001\002\000" +
    "\010\004\uffac\006\uffac\014\uffa9\001\002\000\006\004\257" +
    "\006\uffd2\001\002\000\004\006\uffd5\001\002\000\006\004" +
    "\uffd8\006\uffd8\001\002\000\006\004\257\006\uffd2\001\002" +
    "\000\004\006\304\001\002\000\066\003\ufee0\011\ufee0\016" +
    "\ufee0\020\ufee0\021\ufee0\022\ufee0\033\ufee0\034\ufee0\035\ufee0" +
    "\036\ufee0\037\ufee0\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054" +
    "\ufee0\055\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0" +
    "\067\ufee0\074\ufee0\075\007\076\ufee0\001\002\000\064\003" +
    "\uffd7\011\uffd7\016\uffd7\020\uffd7\021\uffd7\022\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\047\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\064\uffd7\065\uffd7\067\uffd7\074\uffd7\076\uffd7\001\002\000" +
    "\004\014\uffaf\001\002\000\024\003\310\012\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\025\uffe5\027\uffe5\066\uffe5\067\uffe5\001" +
    "\002\000\004\006\316\001\002\000\022\012\057\020\045" +
    "\021\060\022\047\025\061\027\052\066\055\067\046\001" +
    "\002\000\016\006\313\026\162\027\164\030\160\031\165" +
    "\032\163\001\002\000\066\003\uffe4\011\uffe4\016\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\064\uffe4\065\uffe4\067\uffe4" +
    "\074\uffe4\075\uffe4\076\uffe4\001\002\000\066\003\ufee0\011" +
    "\ufee0\016\ufee0\020\ufee0\021\ufee0\022\ufee0\033\ufee0\034\ufee0" +
    "\035\ufee0\036\ufee0\037\ufee0\047\ufee0\051\ufee0\052\ufee0\053" +
    "\ufee0\054\ufee0\055\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0" +
    "\065\ufee0\067\ufee0\074\ufee0\075\007\076\ufee0\001\002\000" +
    "\064\003\uffe3\011\uffe3\016\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\047\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\064\uffe3\065\uffe3\067\uffe3\074\uffe3\076\uffe3\001" +
    "\002\000\066\003\uffe0\011\uffe0\016\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\047" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\064\uffe0\065\uffe0\067\uffe0\074\uffe0\075" +
    "\uffe0\076\uffe0\001\002\000\066\003\ufee0\011\ufee0\016\ufee0" +
    "\020\ufee0\021\ufee0\022\ufee0\033\ufee0\034\ufee0\035\ufee0\036" +
    "\ufee0\037\ufee0\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0" +
    "\055\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067" +
    "\ufee0\074\ufee0\075\007\076\ufee0\001\002\000\064\003\uffdf" +
    "\011\uffdf\016\uffdf\020\uffdf\021\uffdf\022\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\047\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\064" +
    "\uffdf\065\uffdf\067\uffdf\074\uffdf\076\uffdf\001\002\000\010" +
    "\004\uffb7\013\uffb7\043\uffb7\001\002\000\024\003\324\012" +
    "\057\020\045\021\060\022\047\025\061\027\052\066\055" +
    "\067\046\001\002\000\016\006\330\026\162\027\164\030" +
    "\160\031\165\032\163\001\002\000\004\006\325\001\002" +
    "\000\066\003\uffde\011\uffde\016\uffde\020\uffde\021\uffde\022" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\047\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057" +
    "\uffde\060\uffde\064\uffde\065\uffde\067\uffde\074\uffde\075\uffde" +
    "\076\uffde\001\002\000\066\003\ufee0\011\ufee0\016\ufee0\020" +
    "\ufee0\021\ufee0\022\ufee0\033\ufee0\034\ufee0\035\ufee0\036\ufee0" +
    "\037\ufee0\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055" +
    "\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0" +
    "\074\ufee0\075\007\076\ufee0\001\002\000\064\003\uffdd\011" +
    "\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\047\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\064\uffdd" +
    "\065\uffdd\067\uffdd\074\uffdd\076\uffdd\001\002\000\066\003" +
    "\uffe2\011\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\047\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2" +
    "\064\uffe2\065\uffe2\067\uffe2\074\uffe2\075\uffe2\076\uffe2\001" +
    "\002\000\066\003\ufee0\011\ufee0\016\ufee0\020\ufee0\021\ufee0" +
    "\022\ufee0\033\ufee0\034\ufee0\035\ufee0\036\ufee0\037\ufee0\047" +
    "\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0\056\ufee0" +
    "\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0\075" +
    "\007\076\ufee0\001\002\000\064\003\uffe1\011\uffe1\016\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\047\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\064\uffe1\065\uffe1\067" +
    "\uffe1\074\uffe1\076\uffe1\001\002\000\004\067\334\001\002" +
    "\000\004\067\335\001\002\000\010\004\uff7d\006\uff7d\012" +
    "\uff80\001\002\000\006\004\347\006\uff77\001\002\000\004" +
    "\012\341\001\002\000\006\004\uff7f\006\uff7f\001\002\000" +
    "\026\003\072\012\uff71\013\342\020\uff71\021\uff71\022\uff71" +
    "\025\uff71\027\uff71\066\uff71\067\uff71\001\002\000\006\004" +
    "\uff75\006\uff75\001\002\000\004\013\344\001\002\000\006" +
    "\004\uff76\006\uff76\001\002\000\006\004\347\006\uff77\001" +
    "\002\000\004\006\356\001\002\000\004\067\350\001\002" +
    "\000\010\004\uff79\006\uff79\012\341\001\002\000\006\004" +
    "\uff7b\006\uff7b\001\002\000\006\004\347\006\uff77\001\002" +
    "\000\004\006\uff78\001\002\000\006\004\347\006\uff77\001" +
    "\002\000\004\006\uff7a\001\002\000\066\003\ufee0\011\ufee0" +
    "\016\ufee0\020\ufee0\021\ufee0\022\ufee0\033\ufee0\034\ufee0\035" +
    "\ufee0\036\ufee0\037\ufee0\047\ufee0\051\ufee0\052\ufee0\053\ufee0" +
    "\054\ufee0\055\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065" +
    "\ufee0\067\ufee0\074\ufee0\075\007\076\ufee0\001\002\000\064" +
    "\003\uff7e\011\uff7e\016\uff7e\020\uff7e\021\uff7e\022\uff7e\033" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\047\uff7e\051\uff7e" +
    "\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060" +
    "\uff7e\064\uff7e\065\uff7e\067\uff7e\074\uff7e\076\uff7e\001\002" +
    "\000\004\006\361\001\002\000\066\003\ufee0\011\ufee0\016" +
    "\ufee0\020\ufee0\021\ufee0\022\ufee0\033\ufee0\034\ufee0\035\ufee0" +
    "\036\ufee0\037\ufee0\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054" +
    "\ufee0\055\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0" +
    "\067\ufee0\074\ufee0\075\007\076\ufee0\001\002\000\064\003" +
    "\uff7c\011\uff7c\016\uff7c\020\uff7c\021\uff7c\022\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\047\uff7c\051\uff7c\052" +
    "\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c" +
    "\064\uff7c\065\uff7c\067\uff7c\074\uff7c\076\uff7c\001\002\000" +
    "\004\067\uffce\001\002\000\004\067\uffeb\001\002\000\004" +
    "\067\366\001\002\000\004\043\367\001\002\000\020\020" +
    "\045\021\060\022\047\025\061\027\052\066\055\067\046" +
    "\001\002\000\004\006\371\001\002\000\026\022\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\067\uffea\074\uffea" +
    "\075\uffea\076\uffea\001\002\000\026\022\ufee0\033\ufee0\034" +
    "\ufee0\035\ufee0\036\ufee0\037\ufee0\067\ufee0\074\ufee0\075\007" +
    "\076\ufee0\001\002\000\024\022\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\067\uffe9\074\uffe9\076\uffe9\001\002" +
    "\000\150\004\u0108\005\u0119\006\u011d\007\u0104\010\u0107\011" +
    "\u0106\012\u0120\013\u011f\014\u012d\015\u012b\016\375\017\u0128" +
    "\020\376\021\u0122\022\u0121\023\u0129\025\u0123\026\u0114\027" +
    "\u0112\030\u0118\031\u0125\033\u0124\034\u010c\035\u0110\037\u012f" +
    "\040\u0101\041\u0116\042\u0113\043\u0109\044\u012a\045\u0102\046" +
    "\u011b\047\u010d\050\u011a\051\u010a\052\u0103\053\u0117\054\u012e" +
    "\055\u0105\056\u012c\057\u0100\060\u0130\064\u010e\065\u0111\066" +
    "\u010f\067\u011c\070\u0126\071\u010b\072\u0115\073\u011e\075\u0127" +
    "\001\002\000\160\003\ufed4\004\ufed4\005\ufed4\006\ufed4\007" +
    "\ufed4\010\ufed4\011\ufed4\012\ufed4\013\ufed4\014\ufed4\015\ufed4" +
    "\016\ufed4\017\ufed4\020\ufed4\021\ufed4\022\ufed4\023\ufed4\025" +
    "\ufed4\026\ufed4\027\ufed4\030\ufed4\031\ufed4\033\ufed4\034\ufed4" +
    "\035\ufed4\037\ufed4\040\ufed4\041\ufed4\042\ufed4\043\ufed4\044" +
    "\ufed4\045\ufed4\046\ufed4\047\ufed4\050\ufed4\051\ufed4\052\ufed4" +
    "\053\ufed4\054\ufed4\055\ufed4\056\ufed4\057\ufed4\060\ufed4\061" +
    "\ufed4\062\ufed4\063\ufed4\064\ufed4\065\ufed4\066\ufed4\067\ufed4" +
    "\070\ufed4\071\ufed4\072\ufed4\073\ufed4\075\ufed4\001\002\000" +
    "\160\003\ufed2\004\ufed2\005\ufed2\006\ufed2\007\ufed2\010\ufed2" +
    "\011\ufed2\012\ufed2\013\ufed2\014\ufed2\015\ufed2\016\ufed2\017" +
    "\ufed2\020\ufed2\021\ufed2\022\ufed2\023\ufed2\025\ufed2\026\ufed2" +
    "\027\ufed2\030\ufed2\031\ufed2\033\ufed2\034\ufed2\035\ufed2\037" +
    "\ufed2\040\ufed2\041\ufed2\042\ufed2\043\ufed2\044\ufed2\045\ufed2" +
    "\046\ufed2\047\ufed2\050\ufed2\051\ufed2\052\ufed2\053\ufed2\054" +
    "\ufed2\055\ufed2\056\ufed2\057\ufed2\060\ufed2\061\ufed2\062\ufed2" +
    "\063\ufed2\064\ufed2\065\ufed2\066\ufed2\067\ufed2\070\ufed2\071" +
    "\ufed2\072\ufed2\073\ufed2\075\ufed2\001\002\000\066\003\ufee6" +
    "\011\ufee6\016\ufee6\020\ufee6\021\ufee6\022\ufee6\033\ufee6\034" +
    "\ufee6\035\ufee6\036\ufee6\037\ufee6\047\ufee6\051\ufee6\052\ufee6" +
    "\053\ufee6\054\ufee6\055\ufee6\056\ufee6\057\ufee6\060\ufee6\064" +
    "\ufee6\065\ufee6\067\ufee6\074\ufee6\075\u0131\076\ufee6\001\002" +
    "\000\160\003\ufeb4\004\ufeb4\005\ufeb4\006\ufeb4\007\ufeb4\010" +
    "\ufeb4\011\ufeb4\012\ufeb4\013\ufeb4\014\ufeb4\015\ufeb4\016\ufeb4" +
    "\017\ufeb4\020\ufeb4\021\ufeb4\022\ufeb4\023\ufeb4\025\ufeb4\026" +
    "\ufeb4\027\ufeb4\030\ufeb4\031\ufeb4\033\ufeb4\034\ufeb4\035\ufeb4" +
    "\037\ufeb4\040\ufeb4\041\ufeb4\042\ufeb4\043\ufeb4\044\ufeb4\045" +
    "\ufeb4\046\ufeb4\047\ufeb4\050\ufeb4\051\ufeb4\052\ufeb4\053\ufeb4" +
    "\054\ufeb4\055\ufeb4\056\ufeb4\057\ufeb4\060\ufeb4\061\ufeb4\062" +
    "\ufeb4\063\ufeb4\064\ufeb4\065\ufeb4\066\ufeb4\067\ufeb4\070\ufeb4" +
    "\071\ufeb4\072\ufeb4\073\ufeb4\075\ufeb4\001\002\000\160\003" +
    "\ufec3\004\ufec3\005\ufec3\006\ufec3\007\ufec3\010\ufec3\011\ufec3" +
    "\012\ufec3\013\ufec3\014\ufec3\015\ufec3\016\ufec3\017\ufec3\020" +
    "\ufec3\021\ufec3\022\ufec3\023\ufec3\025\ufec3\026\ufec3\027\ufec3" +
    "\030\ufec3\031\ufec3\033\ufec3\034\ufec3\035\ufec3\037\ufec3\040" +
    "\ufec3\041\ufec3\042\ufec3\043\ufec3\044\ufec3\045\ufec3\046\ufec3" +
    "\047\ufec3\050\ufec3\051\ufec3\052\ufec3\053\ufec3\054\ufec3\055" +
    "\ufec3\056\ufec3\057\ufec3\060\ufec3\061\ufec3\062\ufec3\063\ufec3" +
    "\064\ufec3\065\ufec3\066\ufec3\067\ufec3\070\ufec3\071\ufec3\072" +
    "\ufec3\073\ufec3\075\ufec3\001\002\000\160\003\ufebe\004\ufebe" +
    "\005\ufebe\006\ufebe\007\ufebe\010\ufebe\011\ufebe\012\ufebe\013" +
    "\ufebe\014\ufebe\015\ufebe\016\ufebe\017\ufebe\020\ufebe\021\ufebe" +
    "\022\ufebe\023\ufebe\025\ufebe\026\ufebe\027\ufebe\030\ufebe\031" +
    "\ufebe\033\ufebe\034\ufebe\035\ufebe\037\ufebe\040\ufebe\041\ufebe" +
    "\042\ufebe\043\ufebe\044\ufebe\045\ufebe\046\ufebe\047\ufebe\050" +
    "\ufebe\051\ufebe\052\ufebe\053\ufebe\054\ufebe\055\ufebe\056\ufebe" +
    "\057\ufebe\060\ufebe\061\ufebe\062\ufebe\063\ufebe\064\ufebe\065" +
    "\ufebe\066\ufebe\067\ufebe\070\ufebe\071\ufebe\072\ufebe\073\ufebe" +
    "\075\ufebe\001\002\000\160\003\ufeb9\004\ufeb9\005\ufeb9\006" +
    "\ufeb9\007\ufeb9\010\ufeb9\011\ufeb9\012\ufeb9\013\ufeb9\014\ufeb9" +
    "\015\ufeb9\016\ufeb9\017\ufeb9\020\ufeb9\021\ufeb9\022\ufeb9\023" +
    "\ufeb9\025\ufeb9\026\ufeb9\027\ufeb9\030\ufeb9\031\ufeb9\033\ufeb9" +
    "\034\ufeb9\035\ufeb9\037\ufeb9\040\ufeb9\041\ufeb9\042\ufeb9\043" +
    "\ufeb9\044\ufeb9\045\ufeb9\046\ufeb9\047\ufeb9\050\ufeb9\051\ufeb9" +
    "\052\ufeb9\053\ufeb9\054\ufeb9\055\ufeb9\056\ufeb9\057\ufeb9\060" +
    "\ufeb9\061\ufeb9\062\ufeb9\063\ufeb9\064\ufeb9\065\ufeb9\066\ufeb9" +
    "\067\ufeb9\070\ufeb9\071\ufeb9\072\ufeb9\073\ufeb9\075\ufeb9\001" +
    "\002\000\160\003\ufedc\004\ufedc\005\ufedc\006\ufedc\007\ufedc" +
    "\010\ufedc\011\ufedc\012\ufedc\013\ufedc\014\ufedc\015\ufedc\016" +
    "\ufedc\017\ufedc\020\ufedc\021\ufedc\022\ufedc\023\ufedc\025\ufedc" +
    "\026\ufedc\027\ufedc\030\ufedc\031\ufedc\033\ufedc\034\ufedc\035" +
    "\ufedc\037\ufedc\040\ufedc\041\ufedc\042\ufedc\043\ufedc\044\ufedc" +
    "\045\ufedc\046\ufedc\047\ufedc\050\ufedc\051\ufedc\052\ufedc\053" +
    "\ufedc\054\ufedc\055\ufedc\056\ufedc\057\ufedc\060\ufedc\061\ufedc" +
    "\062\ufedc\063\ufedc\064\ufedc\065\ufedc\066\ufedc\067\ufedc\070" +
    "\ufedc\071\ufedc\072\ufedc\073\ufedc\075\ufedc\001\002\000\160" +
    "\003\ufeb6\004\ufeb6\005\ufeb6\006\ufeb6\007\ufeb6\010\ufeb6\011" +
    "\ufeb6\012\ufeb6\013\ufeb6\014\ufeb6\015\ufeb6\016\ufeb6\017\ufeb6" +
    "\020\ufeb6\021\ufeb6\022\ufeb6\023\ufeb6\025\ufeb6\026\ufeb6\027" +
    "\ufeb6\030\ufeb6\031\ufeb6\033\ufeb6\034\ufeb6\035\ufeb6\037\ufeb6" +
    "\040\ufeb6\041\ufeb6\042\ufeb6\043\ufeb6\044\ufeb6\045\ufeb6\046" +
    "\ufeb6\047\ufeb6\050\ufeb6\051\ufeb6\052\ufeb6\053\ufeb6\054\ufeb6" +
    "\055\ufeb6\056\ufeb6\057\ufeb6\060\ufeb6\061\ufeb6\062\ufeb6\063" +
    "\ufeb6\064\ufeb6\065\ufeb6\066\ufeb6\067\ufeb6\070\ufeb6\071\ufeb6" +
    "\072\ufeb6\073\ufeb6\075\ufeb6\001\002\000\160\003\ufeda\004" +
    "\ufeda\005\ufeda\006\ufeda\007\ufeda\010\ufeda\011\ufeda\012\ufeda" +
    "\013\ufeda\014\ufeda\015\ufeda\016\ufeda\017\ufeda\020\ufeda\021" +
    "\ufeda\022\ufeda\023\ufeda\025\ufeda\026\ufeda\027\ufeda\030\ufeda" +
    "\031\ufeda\033\ufeda\034\ufeda\035\ufeda\037\ufeda\040\ufeda\041" +
    "\ufeda\042\ufeda\043\ufeda\044\ufeda\045\ufeda\046\ufeda\047\ufeda" +
    "\050\ufeda\051\ufeda\052\ufeda\053\ufeda\054\ufeda\055\ufeda\056" +
    "\ufeda\057\ufeda\060\ufeda\061\ufeda\062\ufeda\063\ufeda\064\ufeda" +
    "\065\ufeda\066\ufeda\067\ufeda\070\ufeda\071\ufeda\072\ufeda\073" +
    "\ufeda\075\ufeda\001\002\000\160\003\ufedb\004\ufedb\005\ufedb" +
    "\006\ufedb\007\ufedb\010\ufedb\011\ufedb\012\ufedb\013\ufedb\014" +
    "\ufedb\015\ufedb\016\ufedb\017\ufedb\020\ufedb\021\ufedb\022\ufedb" +
    "\023\ufedb\025\ufedb\026\ufedb\027\ufedb\030\ufedb\031\ufedb\033" +
    "\ufedb\034\ufedb\035\ufedb\037\ufedb\040\ufedb\041\ufedb\042\ufedb" +
    "\043\ufedb\044\ufedb\045\ufedb\046\ufedb\047\ufedb\050\ufedb\051" +
    "\ufedb\052\ufedb\053\ufedb\054\ufedb\055\ufedb\056\ufedb\057\ufedb" +
    "\060\ufedb\061\ufedb\062\ufedb\063\ufedb\064\ufedb\065\ufedb\066" +
    "\ufedb\067\ufedb\070\ufedb\071\ufedb\072\ufedb\073\ufedb\075\ufedb" +
    "\001\002\000\160\003\ufedf\004\ufedf\005\ufedf\006\ufedf\007" +
    "\ufedf\010\ufedf\011\ufedf\012\ufedf\013\ufedf\014\ufedf\015\ufedf" +
    "\016\ufedf\017\ufedf\020\ufedf\021\ufedf\022\ufedf\023\ufedf\025" +
    "\ufedf\026\ufedf\027\ufedf\030\ufedf\031\ufedf\033\ufedf\034\ufedf" +
    "\035\ufedf\037\ufedf\040\ufedf\041\ufedf\042\ufedf\043\ufedf\044" +
    "\ufedf\045\ufedf\046\ufedf\047\ufedf\050\ufedf\051\ufedf\052\ufedf" +
    "\053\ufedf\054\ufedf\055\ufedf\056\ufedf\057\ufedf\060\ufedf\061" +
    "\ufedf\062\ufedf\063\ufedf\064\ufedf\065\ufedf\066\ufedf\067\ufedf" +
    "\070\ufedf\071\ufedf\072\ufedf\073\ufedf\075\ufedf\001\002\000" +
    "\160\003\ufec0\004\ufec0\005\ufec0\006\ufec0\007\ufec0\010\ufec0" +
    "\011\ufec0\012\ufec0\013\ufec0\014\ufec0\015\ufec0\016\ufec0\017" +
    "\ufec0\020\ufec0\021\ufec0\022\ufec0\023\ufec0\025\ufec0\026\ufec0" +
    "\027\ufec0\030\ufec0\031\ufec0\033\ufec0\034\ufec0\035\ufec0\037" +
    "\ufec0\040\ufec0\041\ufec0\042\ufec0\043\ufec0\044\ufec0\045\ufec0" +
    "\046\ufec0\047\ufec0\050\ufec0\051\ufec0\052\ufec0\053\ufec0\054" +
    "\ufec0\055\ufec0\056\ufec0\057\ufec0\060\ufec0\061\ufec0\062\ufec0" +
    "\063\ufec0\064\ufec0\065\ufec0\066\ufec0\067\ufec0\070\ufec0\071" +
    "\ufec0\072\ufec0\073\ufec0\075\ufec0\001\002\000\160\003\ufeba" +
    "\004\ufeba\005\ufeba\006\ufeba\007\ufeba\010\ufeba\011\ufeba\012" +
    "\ufeba\013\ufeba\014\ufeba\015\ufeba\016\ufeba\017\ufeba\020\ufeba" +
    "\021\ufeba\022\ufeba\023\ufeba\025\ufeba\026\ufeba\027\ufeba\030" +
    "\ufeba\031\ufeba\033\ufeba\034\ufeba\035\ufeba\037\ufeba\040\ufeba" +
    "\041\ufeba\042\ufeba\043\ufeba\044\ufeba\045\ufeba\046\ufeba\047" +
    "\ufeba\050\ufeba\051\ufeba\052\ufeba\053\ufeba\054\ufeba\055\ufeba" +
    "\056\ufeba\057\ufeba\060\ufeba\061\ufeba\062\ufeba\063\ufeba\064" +
    "\ufeba\065\ufeba\066\ufeba\067\ufeba\070\ufeba\071\ufeba\072\ufeba" +
    "\073\ufeba\075\ufeba\001\002\000\160\003\ufeca\004\ufeca\005" +
    "\ufeca\006\ufeca\007\ufeca\010\ufeca\011\ufeca\012\ufeca\013\ufeca" +
    "\014\ufeca\015\ufeca\016\ufeca\017\ufeca\020\ufeca\021\ufeca\022" +
    "\ufeca\023\ufeca\025\ufeca\026\ufeca\027\ufeca\030\ufeca\031\ufeca" +
    "\033\ufeca\034\ufeca\035\ufeca\037\ufeca\040\ufeca\041\ufeca\042" +
    "\ufeca\043\ufeca\044\ufeca\045\ufeca\046\ufeca\047\ufeca\050\ufeca" +
    "\051\ufeca\052\ufeca\053\ufeca\054\ufeca\055\ufeca\056\ufeca\057" +
    "\ufeca\060\ufeca\061\ufeca\062\ufeca\063\ufeca\064\ufeca\065\ufeca" +
    "\066\ufeca\067\ufeca\070\ufeca\071\ufeca\072\ufeca\073\ufeca\075" +
    "\ufeca\001\002\000\160\003\ufec7\004\ufec7\005\ufec7\006\ufec7" +
    "\007\ufec7\010\ufec7\011\ufec7\012\ufec7\013\ufec7\014\ufec7\015" +
    "\ufec7\016\ufec7\017\ufec7\020\ufec7\021\ufec7\022\ufec7\023\ufec7" +
    "\025\ufec7\026\ufec7\027\ufec7\030\ufec7\031\ufec7\033\ufec7\034" +
    "\ufec7\035\ufec7\037\ufec7\040\ufec7\041\ufec7\042\ufec7\043\ufec7" +
    "\044\ufec7\045\ufec7\046\ufec7\047\ufec7\050\ufec7\051\ufec7\052" +
    "\ufec7\053\ufec7\054\ufec7\055\ufec7\056\ufec7\057\ufec7\060\ufec7" +
    "\061\ufec7\062\ufec7\063\ufec7\064\ufec7\065\ufec7\066\ufec7\067" +
    "\ufec7\070\ufec7\071\ufec7\072\ufec7\073\ufec7\075\ufec7\001\002" +
    "\000\160\003\ufebc\004\ufebc\005\ufebc\006\ufebc\007\ufebc\010" +
    "\ufebc\011\ufebc\012\ufebc\013\ufebc\014\ufebc\015\ufebc\016\ufebc" +
    "\017\ufebc\020\ufebc\021\ufebc\022\ufebc\023\ufebc\025\ufebc\026" +
    "\ufebc\027\ufebc\030\ufebc\031\ufebc\033\ufebc\034\ufebc\035\ufebc" +
    "\037\ufebc\040\ufebc\041\ufebc\042\ufebc\043\ufebc\044\ufebc\045" +
    "\ufebc\046\ufebc\047\ufebc\050\ufebc\051\ufebc\052\ufebc\053\ufebc" +
    "\054\ufebc\055\ufebc\056\ufebc\057\ufebc\060\ufebc\061\ufebc\062" +
    "\ufebc\063\ufebc\064\ufebc\065\ufebc\066\ufebc\067\ufebc\070\ufebc" +
    "\071\ufebc\072\ufebc\073\ufebc\075\ufebc\001\002\000\160\003" +
    "\ufeb2\004\ufeb2\005\ufeb2\006\ufeb2\007\ufeb2\010\ufeb2\011\ufeb2" +
    "\012\ufeb2\013\ufeb2\014\ufeb2\015\ufeb2\016\ufeb2\017\ufeb2\020" +
    "\ufeb2\021\ufeb2\022\ufeb2\023\ufeb2\025\ufeb2\026\ufeb2\027\ufeb2" +
    "\030\ufeb2\031\ufeb2\033\ufeb2\034\ufeb2\035\ufeb2\037\ufeb2\040" +
    "\ufeb2\041\ufeb2\042\ufeb2\043\ufeb2\044\ufeb2\045\ufeb2\046\ufeb2" +
    "\047\ufeb2\050\ufeb2\051\ufeb2\052\ufeb2\053\ufeb2\054\ufeb2\055" +
    "\ufeb2\056\ufeb2\057\ufeb2\060\ufeb2\061\ufeb2\062\ufeb2\063\ufeb2" +
    "\064\ufeb2\065\ufeb2\066\ufeb2\067\ufeb2\070\ufeb2\071\ufeb2\072" +
    "\ufeb2\073\ufeb2\075\ufeb2\001\002\000\160\003\ufeb0\004\ufeb0" +
    "\005\ufeb0\006\ufeb0\007\ufeb0\010\ufeb0\011\ufeb0\012\ufeb0\013" +
    "\ufeb0\014\ufeb0\015\ufeb0\016\ufeb0\017\ufeb0\020\ufeb0\021\ufeb0" +
    "\022\ufeb0\023\ufeb0\025\ufeb0\026\ufeb0\027\ufeb0\030\ufeb0\031" +
    "\ufeb0\033\ufeb0\034\ufeb0\035\ufeb0\037\ufeb0\040\ufeb0\041\ufeb0" +
    "\042\ufeb0\043\ufeb0\044\ufeb0\045\ufeb0\046\ufeb0\047\ufeb0\050" +
    "\ufeb0\051\ufeb0\052\ufeb0\053\ufeb0\054\ufeb0\055\ufeb0\056\ufeb0" +
    "\057\ufeb0\060\ufeb0\061\ufeb0\062\ufeb0\063\ufeb0\064\ufeb0\065" +
    "\ufeb0\066\ufeb0\067\ufeb0\070\ufeb0\071\ufeb0\072\ufeb0\073\ufeb0" +
    "\075\ufeb0\001\002\000\160\003\ufec8\004\ufec8\005\ufec8\006" +
    "\ufec8\007\ufec8\010\ufec8\011\ufec8\012\ufec8\013\ufec8\014\ufec8" +
    "\015\ufec8\016\ufec8\017\ufec8\020\ufec8\021\ufec8\022\ufec8\023" +
    "\ufec8\025\ufec8\026\ufec8\027\ufec8\030\ufec8\031\ufec8\033\ufec8" +
    "\034\ufec8\035\ufec8\037\ufec8\040\ufec8\041\ufec8\042\ufec8\043" +
    "\ufec8\044\ufec8\045\ufec8\046\ufec8\047\ufec8\050\ufec8\051\ufec8" +
    "\052\ufec8\053\ufec8\054\ufec8\055\ufec8\056\ufec8\057\ufec8\060" +
    "\ufec8\061\ufec8\062\ufec8\063\ufec8\064\ufec8\065\ufec8\066\ufec8" +
    "\067\ufec8\070\ufec8\071\ufec8\072\ufec8\073\ufec8\075\ufec8\001" +
    "\002\000\160\003\ufeb1\004\ufeb1\005\ufeb1\006\ufeb1\007\ufeb1" +
    "\010\ufeb1\011\ufeb1\012\ufeb1\013\ufeb1\014\ufeb1\015\ufeb1\016" +
    "\ufeb1\017\ufeb1\020\ufeb1\021\ufeb1\022\ufeb1\023\ufeb1\025\ufeb1" +
    "\026\ufeb1\027\ufeb1\030\ufeb1\031\ufeb1\033\ufeb1\034\ufeb1\035" +
    "\ufeb1\037\ufeb1\040\ufeb1\041\ufeb1\042\ufeb1\043\ufeb1\044\ufeb1" +
    "\045\ufeb1\046\ufeb1\047\ufeb1\050\ufeb1\051\ufeb1\052\ufeb1\053" +
    "\ufeb1\054\ufeb1\055\ufeb1\056\ufeb1\057\ufeb1\060\ufeb1\061\ufeb1" +
    "\062\ufeb1\063\ufeb1\064\ufeb1\065\ufeb1\066\ufeb1\067\ufeb1\070" +
    "\ufeb1\071\ufeb1\072\ufeb1\073\ufeb1\075\ufeb1\001\002\000\160" +
    "\003\ufecd\004\ufecd\005\ufecd\006\ufecd\007\ufecd\010\ufecd\011" +
    "\ufecd\012\ufecd\013\ufecd\014\ufecd\015\ufecd\016\ufecd\017\ufecd" +
    "\020\ufecd\021\ufecd\022\ufecd\023\ufecd\025\ufecd\026\ufecd\027" +
    "\ufecd\030\ufecd\031\ufecd\033\ufecd\034\ufecd\035\ufecd\037\ufecd" +
    "\040\ufecd\041\ufecd\042\ufecd\043\ufecd\044\ufecd\045\ufecd\046" +
    "\ufecd\047\ufecd\050\ufecd\051\ufecd\052\ufecd\053\ufecd\054\ufecd" +
    "\055\ufecd\056\ufecd\057\ufecd\060\ufecd\061\ufecd\062\ufecd\063" +
    "\ufecd\064\ufecd\065\ufecd\066\ufecd\067\ufecd\070\ufecd\071\ufecd" +
    "\072\ufecd\073\ufecd\075\ufecd\001\002\000\160\003\ufec1\004" +
    "\ufec1\005\ufec1\006\ufec1\007\ufec1\010\ufec1\011\ufec1\012\ufec1" +
    "\013\ufec1\014\ufec1\015\ufec1\016\ufec1\017\ufec1\020\ufec1\021" +
    "\ufec1\022\ufec1\023\ufec1\025\ufec1\026\ufec1\027\ufec1\030\ufec1" +
    "\031\ufec1\033\ufec1\034\ufec1\035\ufec1\037\ufec1\040\ufec1\041" +
    "\ufec1\042\ufec1\043\ufec1\044\ufec1\045\ufec1\046\ufec1\047\ufec1" +
    "\050\ufec1\051\ufec1\052\ufec1\053\ufec1\054\ufec1\055\ufec1\056" +
    "\ufec1\057\ufec1\060\ufec1\061\ufec1\062\ufec1\063\ufec1\064\ufec1" +
    "\065\ufec1\066\ufec1\067\ufec1\070\ufec1\071\ufec1\072\ufec1\073" +
    "\ufec1\075\ufec1\001\002\000\160\003\ufece\004\ufece\005\ufece" +
    "\006\ufece\007\ufece\010\ufece\011\ufece\012\ufece\013\ufece\014" +
    "\ufece\015\ufece\016\ufece\017\ufece\020\ufece\021\ufece\022\ufece" +
    "\023\ufece\025\ufece\026\ufece\027\ufece\030\ufece\031\ufece\033" +
    "\ufece\034\ufece\035\ufece\037\ufece\040\ufece\041\ufece\042\ufece" +
    "\043\ufece\044\ufece\045\ufece\046\ufece\047\ufece\050\ufece\051" +
    "\ufece\052\ufece\053\ufece\054\ufece\055\ufece\056\ufece\057\ufece" +
    "\060\ufece\061\ufece\062\ufece\063\ufece\064\ufece\065\ufece\066" +
    "\ufece\067\ufece\070\ufece\071\ufece\072\ufece\073\ufece\075\ufece" +
    "\001\002\000\160\003\ufec5\004\ufec5\005\ufec5\006\ufec5\007" +
    "\ufec5\010\ufec5\011\ufec5\012\ufec5\013\ufec5\014\ufec5\015\ufec5" +
    "\016\ufec5\017\ufec5\020\ufec5\021\ufec5\022\ufec5\023\ufec5\025" +
    "\ufec5\026\ufec5\027\ufec5\030\ufec5\031\ufec5\033\ufec5\034\ufec5" +
    "\035\ufec5\037\ufec5\040\ufec5\041\ufec5\042\ufec5\043\ufec5\044" +
    "\ufec5\045\ufec5\046\ufec5\047\ufec5\050\ufec5\051\ufec5\052\ufec5" +
    "\053\ufec5\054\ufec5\055\ufec5\056\ufec5\057\ufec5\060\ufec5\061" +
    "\ufec5\062\ufec5\063\ufec5\064\ufec5\065\ufec5\066\ufec5\067\ufec5" +
    "\070\ufec5\071\ufec5\072\ufec5\073\ufec5\075\ufec5\001\002\000" +
    "\160\003\ufec2\004\ufec2\005\ufec2\006\ufec2\007\ufec2\010\ufec2" +
    "\011\ufec2\012\ufec2\013\ufec2\014\ufec2\015\ufec2\016\ufec2\017" +
    "\ufec2\020\ufec2\021\ufec2\022\ufec2\023\ufec2\025\ufec2\026\ufec2" +
    "\027\ufec2\030\ufec2\031\ufec2\033\ufec2\034\ufec2\035\ufec2\037" +
    "\ufec2\040\ufec2\041\ufec2\042\ufec2\043\ufec2\044\ufec2\045\ufec2" +
    "\046\ufec2\047\ufec2\050\ufec2\051\ufec2\052\ufec2\053\ufec2\054" +
    "\ufec2\055\ufec2\056\ufec2\057\ufec2\060\ufec2\061\ufec2\062\ufec2" +
    "\063\ufec2\064\ufec2\065\ufec2\066\ufec2\067\ufec2\070\ufec2\071" +
    "\ufec2\072\ufec2\073\ufec2\075\ufec2\001\002\000\160\003\ufeb8" +
    "\004\ufeb8\005\ufeb8\006\ufeb8\007\ufeb8\010\ufeb8\011\ufeb8\012" +
    "\ufeb8\013\ufeb8\014\ufeb8\015\ufeb8\016\ufeb8\017\ufeb8\020\ufeb8" +
    "\021\ufeb8\022\ufeb8\023\ufeb8\025\ufeb8\026\ufeb8\027\ufeb8\030" +
    "\ufeb8\031\ufeb8\033\ufeb8\034\ufeb8\035\ufeb8\037\ufeb8\040\ufeb8" +
    "\041\ufeb8\042\ufeb8\043\ufeb8\044\ufeb8\045\ufeb8\046\ufeb8\047" +
    "\ufeb8\050\ufeb8\051\ufeb8\052\ufeb8\053\ufeb8\054\ufeb8\055\ufeb8" +
    "\056\ufeb8\057\ufeb8\060\ufeb8\061\ufeb8\062\ufeb8\063\ufeb8\064" +
    "\ufeb8\065\ufeb8\066\ufeb8\067\ufeb8\070\ufeb8\071\ufeb8\072\ufeb8" +
    "\073\ufeb8\075\ufeb8\001\002\000\160\003\ufecc\004\ufecc\005" +
    "\ufecc\006\ufecc\007\ufecc\010\ufecc\011\ufecc\012\ufecc\013\ufecc" +
    "\014\ufecc\015\ufecc\016\ufecc\017\ufecc\020\ufecc\021\ufecc\022" +
    "\ufecc\023\ufecc\025\ufecc\026\ufecc\027\ufecc\030\ufecc\031\ufecc" +
    "\033\ufecc\034\ufecc\035\ufecc\037\ufecc\040\ufecc\041\ufecc\042" +
    "\ufecc\043\ufecc\044\ufecc\045\ufecc\046\ufecc\047\ufecc\050\ufecc" +
    "\051\ufecc\052\ufecc\053\ufecc\054\ufecc\055\ufecc\056\ufecc\057" +
    "\ufecc\060\ufecc\061\ufecc\062\ufecc\063\ufecc\064\ufecc\065\ufecc" +
    "\066\ufecc\067\ufecc\070\ufecc\071\ufecc\072\ufecc\073\ufecc\075" +
    "\ufecc\001\002\000\160\003\ufede\004\ufede\005\ufede\006\ufede" +
    "\007\ufede\010\ufede\011\ufede\012\ufede\013\ufede\014\ufede\015" +
    "\ufede\016\ufede\017\ufede\020\ufede\021\ufede\022\ufede\023\ufede" +
    "\025\ufede\026\ufede\027\ufede\030\ufede\031\ufede\033\ufede\034" +
    "\ufede\035\ufede\037\ufede\040\ufede\041\ufede\042\ufede\043\ufede" +
    "\044\ufede\045\ufede\046\ufede\047\ufede\050\ufede\051\ufede\052" +
    "\ufede\053\ufede\054\ufede\055\ufede\056\ufede\057\ufede\060\ufede" +
    "\061\ufede\062\ufede\063\ufede\064\ufede\065\ufede\066\ufede\067" +
    "\ufede\070\ufede\071\ufede\072\ufede\073\ufede\075\ufede\001\002" +
    "\000\160\003\ufebb\004\ufebb\005\ufebb\006\ufebb\007\ufebb\010" +
    "\ufebb\011\ufebb\012\ufebb\013\ufebb\014\ufebb\015\ufebb\016\ufebb" +
    "\017\ufebb\020\ufebb\021\ufebb\022\ufebb\023\ufebb\025\ufebb\026" +
    "\ufebb\027\ufebb\030\ufebb\031\ufebb\033\ufebb\034\ufebb\035\ufebb" +
    "\037\ufebb\040\ufebb\041\ufebb\042\ufebb\043\ufebb\044\ufebb\045" +
    "\ufebb\046\ufebb\047\ufebb\050\ufebb\051\ufebb\052\ufebb\053\ufebb" +
    "\054\ufebb\055\ufebb\056\ufebb\057\ufebb\060\ufebb\061\ufebb\062" +
    "\ufebb\063\ufebb\064\ufebb\065\ufebb\066\ufebb\067\ufebb\070\ufebb" +
    "\071\ufebb\072\ufebb\073\ufebb\075\ufebb\001\002\000\160\003" +
    "\ufebd\004\ufebd\005\ufebd\006\ufebd\007\ufebd\010\ufebd\011\ufebd" +
    "\012\ufebd\013\ufebd\014\ufebd\015\ufebd\016\ufebd\017\ufebd\020" +
    "\ufebd\021\ufebd\022\ufebd\023\ufebd\025\ufebd\026\ufebd\027\ufebd" +
    "\030\ufebd\031\ufebd\033\ufebd\034\ufebd\035\ufebd\037\ufebd\040" +
    "\ufebd\041\ufebd\042\ufebd\043\ufebd\044\ufebd\045\ufebd\046\ufebd" +
    "\047\ufebd\050\ufebd\051\ufebd\052\ufebd\053\ufebd\054\ufebd\055" +
    "\ufebd\056\ufebd\057\ufebd\060\ufebd\061\ufebd\062\ufebd\063\ufebd" +
    "\064\ufebd\065\ufebd\066\ufebd\067\ufebd\070\ufebd\071\ufebd\072" +
    "\ufebd\073\ufebd\075\ufebd\001\002\000\160\003\ufeaf\004\ufeaf" +
    "\005\ufeaf\006\ufeaf\007\ufeaf\010\ufeaf\011\ufeaf\012\ufeaf\013" +
    "\ufeaf\014\ufeaf\015\ufeaf\016\ufeaf\017\ufeaf\020\ufeaf\021\ufeaf" +
    "\022\ufeaf\023\ufeaf\025\ufeaf\026\ufeaf\027\ufeaf\030\ufeaf\031" +
    "\ufeaf\033\ufeaf\034\ufeaf\035\ufeaf\037\ufeaf\040\ufeaf\041\ufeaf" +
    "\042\ufeaf\043\ufeaf\044\ufeaf\045\ufeaf\046\ufeaf\047\ufeaf\050" +
    "\ufeaf\051\ufeaf\052\ufeaf\053\ufeaf\054\ufeaf\055\ufeaf\056\ufeaf" +
    "\057\ufeaf\060\ufeaf\061\ufeaf\062\ufeaf\063\ufeaf\064\ufeaf\065" +
    "\ufeaf\066\ufeaf\067\ufeaf\070\ufeaf\071\ufeaf\072\ufeaf\073\ufeaf" +
    "\075\ufeaf\001\002\000\160\003\ufedd\004\ufedd\005\ufedd\006" +
    "\ufedd\007\ufedd\010\ufedd\011\ufedd\012\ufedd\013\ufedd\014\ufedd" +
    "\015\ufedd\016\ufedd\017\ufedd\020\ufedd\021\ufedd\022\ufedd\023" +
    "\ufedd\025\ufedd\026\ufedd\027\ufedd\030\ufedd\031\ufedd\033\ufedd" +
    "\034\ufedd\035\ufedd\037\ufedd\040\ufedd\041\ufedd\042\ufedd\043" +
    "\ufedd\044\ufedd\045\ufedd\046\ufedd\047\ufedd\050\ufedd\051\ufedd" +
    "\052\ufedd\053\ufedd\054\ufedd\055\ufedd\056\ufedd\057\ufedd\060" +
    "\ufedd\061\ufedd\062\ufedd\063\ufedd\064\ufedd\065\ufedd\066\ufedd" +
    "\067\ufedd\070\ufedd\071\ufedd\072\ufedd\073\ufedd\075\ufedd\001" +
    "\002\000\160\003\ufec4\004\ufec4\005\ufec4\006\ufec4\007\ufec4" +
    "\010\ufec4\011\ufec4\012\ufec4\013\ufec4\014\ufec4\015\ufec4\016" +
    "\ufec4\017\ufec4\020\ufec4\021\ufec4\022\ufec4\023\ufec4\025\ufec4" +
    "\026\ufec4\027\ufec4\030\ufec4\031\ufec4\033\ufec4\034\ufec4\035" +
    "\ufec4\037\ufec4\040\ufec4\041\ufec4\042\ufec4\043\ufec4\044\ufec4" +
    "\045\ufec4\046\ufec4\047\ufec4\050\ufec4\051\ufec4\052\ufec4\053" +
    "\ufec4\054\ufec4\055\ufec4\056\ufec4\057\ufec4\060\ufec4\061\ufec4" +
    "\062\ufec4\063\ufec4\064\ufec4\065\ufec4\066\ufec4\067\ufec4\070" +
    "\ufec4\071\ufec4\072\ufec4\073\ufec4\075\ufec4\001\002\000\160" +
    "\003\ufed8\004\ufed8\005\ufed8\006\ufed8\007\ufed8\010\ufed8\011" +
    "\ufed8\012\ufed8\013\ufed8\014\ufed8\015\ufed8\016\ufed8\017\ufed8" +
    "\020\ufed8\021\ufed8\022\ufed8\023\ufed8\025\ufed8\026\ufed8\027" +
    "\ufed8\030\ufed8\031\ufed8\033\ufed8\034\ufed8\035\ufed8\037\ufed8" +
    "\040\ufed8\041\ufed8\042\ufed8\043\ufed8\044\ufed8\045\ufed8\046" +
    "\ufed8\047\ufed8\050\ufed8\051\ufed8\052\ufed8\053\ufed8\054\ufed8" +
    "\055\ufed8\056\ufed8\057\ufed8\060\ufed8\061\ufed8\062\ufed8\063" +
    "\ufed8\064\ufed8\065\ufed8\066\ufed8\067\ufed8\070\ufed8\071\ufed8" +
    "\072\ufed8\073\ufed8\075\ufed8\001\002\000\160\003\ufed9\004" +
    "\ufed9\005\ufed9\006\ufed9\007\ufed9\010\ufed9\011\ufed9\012\ufed9" +
    "\013\ufed9\014\ufed9\015\ufed9\016\ufed9\017\ufed9\020\ufed9\021" +
    "\ufed9\022\ufed9\023\ufed9\025\ufed9\026\ufed9\027\ufed9\030\ufed9" +
    "\031\ufed9\033\ufed9\034\ufed9\035\ufed9\037\ufed9\040\ufed9\041" +
    "\ufed9\042\ufed9\043\ufed9\044\ufed9\045\ufed9\046\ufed9\047\ufed9" +
    "\050\ufed9\051\ufed9\052\ufed9\053\ufed9\054\ufed9\055\ufed9\056" +
    "\ufed9\057\ufed9\060\ufed9\061\ufed9\062\ufed9\063\ufed9\064\ufed9" +
    "\065\ufed9\066\ufed9\067\ufed9\070\ufed9\071\ufed9\072\ufed9\073" +
    "\ufed9\075\ufed9\001\002\000\160\003\ufed0\004\ufed0\005\ufed0" +
    "\006\ufed0\007\ufed0\010\ufed0\011\ufed0\012\ufed0\013\ufed0\014" +
    "\ufed0\015\ufed0\016\ufed0\017\ufed0\020\ufed0\021\ufed0\022\ufed0" +
    "\023\ufed0\025\ufed0\026\ufed0\027\ufed0\030\ufed0\031\ufed0\033" +
    "\ufed0\034\ufed0\035\ufed0\037\ufed0\040\ufed0\041\ufed0\042\ufed0" +
    "\043\ufed0\044\ufed0\045\ufed0\046\ufed0\047\ufed0\050\ufed0\051" +
    "\ufed0\052\ufed0\053\ufed0\054\ufed0\055\ufed0\056\ufed0\057\ufed0" +
    "\060\ufed0\061\ufed0\062\ufed0\063\ufed0\064\ufed0\065\ufed0\066" +
    "\ufed0\067\ufed0\070\ufed0\071\ufed0\072\ufed0\073\ufed0\075\ufed0" +
    "\001\002\000\160\003\ufed1\004\ufed1\005\ufed1\006\ufed1\007" +
    "\ufed1\010\ufed1\011\ufed1\012\ufed1\013\ufed1\014\ufed1\015\ufed1" +
    "\016\ufed1\017\ufed1\020\ufed1\021\ufed1\022\ufed1\023\ufed1\025" +
    "\ufed1\026\ufed1\027\ufed1\030\ufed1\031\ufed1\033\ufed1\034\ufed1" +
    "\035\ufed1\037\ufed1\040\ufed1\041\ufed1\042\ufed1\043\ufed1\044" +
    "\ufed1\045\ufed1\046\ufed1\047\ufed1\050\ufed1\051\ufed1\052\ufed1" +
    "\053\ufed1\054\ufed1\055\ufed1\056\ufed1\057\ufed1\060\ufed1\061" +
    "\ufed1\062\ufed1\063\ufed1\064\ufed1\065\ufed1\066\ufed1\067\ufed1" +
    "\070\ufed1\071\ufed1\072\ufed1\073\ufed1\075\ufed1\001\002\000" +
    "\160\003\ufed5\004\ufed5\005\ufed5\006\ufed5\007\ufed5\010\ufed5" +
    "\011\ufed5\012\ufed5\013\ufed5\014\ufed5\015\ufed5\016\ufed5\017" +
    "\ufed5\020\ufed5\021\ufed5\022\ufed5\023\ufed5\025\ufed5\026\ufed5" +
    "\027\ufed5\030\ufed5\031\ufed5\033\ufed5\034\ufed5\035\ufed5\037" +
    "\ufed5\040\ufed5\041\ufed5\042\ufed5\043\ufed5\044\ufed5\045\ufed5" +
    "\046\ufed5\047\ufed5\050\ufed5\051\ufed5\052\ufed5\053\ufed5\054" +
    "\ufed5\055\ufed5\056\ufed5\057\ufed5\060\ufed5\061\ufed5\062\ufed5" +
    "\063\ufed5\064\ufed5\065\ufed5\066\ufed5\067\ufed5\070\ufed5\071" +
    "\ufed5\072\ufed5\073\ufed5\075\ufed5\001\002\000\160\003\ufec9" +
    "\004\ufec9\005\ufec9\006\ufec9\007\ufec9\010\ufec9\011\ufec9\012" +
    "\ufec9\013\ufec9\014\ufec9\015\ufec9\016\ufec9\017\ufec9\020\ufec9" +
    "\021\ufec9\022\ufec9\023\ufec9\025\ufec9\026\ufec9\027\ufec9\030" +
    "\ufec9\031\ufec9\033\ufec9\034\ufec9\035\ufec9\037\ufec9\040\ufec9" +
    "\041\ufec9\042\ufec9\043\ufec9\044\ufec9\045\ufec9\046\ufec9\047" +
    "\ufec9\050\ufec9\051\ufec9\052\ufec9\053\ufec9\054\ufec9\055\ufec9" +
    "\056\ufec9\057\ufec9\060\ufec9\061\ufec9\062\ufec9\063\ufec9\064" +
    "\ufec9\065\ufec9\066\ufec9\067\ufec9\070\ufec9\071\ufec9\072\ufec9" +
    "\073\ufec9\075\ufec9\001\002\000\160\003\ufecb\004\ufecb\005" +
    "\ufecb\006\ufecb\007\ufecb\010\ufecb\011\ufecb\012\ufecb\013\ufecb" +
    "\014\ufecb\015\ufecb\016\ufecb\017\ufecb\020\ufecb\021\ufecb\022" +
    "\ufecb\023\ufecb\025\ufecb\026\ufecb\027\ufecb\030\ufecb\031\ufecb" +
    "\033\ufecb\034\ufecb\035\ufecb\037\ufecb\040\ufecb\041\ufecb\042" +
    "\ufecb\043\ufecb\044\ufecb\045\ufecb\046\ufecb\047\ufecb\050\ufecb" +
    "\051\ufecb\052\ufecb\053\ufecb\054\ufecb\055\ufecb\056\ufecb\057" +
    "\ufecb\060\ufecb\061\ufecb\062\ufecb\063\ufecb\064\ufecb\065\ufecb" +
    "\066\ufecb\067\ufecb\070\ufecb\071\ufecb\072\ufecb\073\ufecb\075" +
    "\ufecb\001\002\000\160\003\ufeae\004\ufeae\005\ufeae\006\ufeae" +
    "\007\ufeae\010\ufeae\011\ufeae\012\ufeae\013\ufeae\014\ufeae\015" +
    "\ufeae\016\ufeae\017\ufeae\020\ufeae\021\ufeae\022\ufeae\023\ufeae" +
    "\025\ufeae\026\ufeae\027\ufeae\030\ufeae\031\ufeae\033\ufeae\034" +
    "\ufeae\035\ufeae\037\ufeae\040\ufeae\041\ufeae\042\ufeae\043\ufeae" +
    "\044\ufeae\045\ufeae\046\ufeae\047\ufeae\050\ufeae\051\ufeae\052" +
    "\ufeae\053\ufeae\054\ufeae\055\ufeae\056\ufeae\057\ufeae\060\ufeae" +
    "\061\ufeae\062\ufeae\063\ufeae\064\ufeae\065\ufeae\066\ufeae\067" +
    "\ufeae\070\ufeae\071\ufeae\072\ufeae\073\ufeae\075\ufeae\001\002" +
    "\000\066\003\ufee3\011\ufee3\016\ufee3\020\ufee3\021\ufee3\022" +
    "\ufee3\033\ufee3\034\ufee3\035\ufee3\036\ufee3\037\ufee3\047\ufee3" +
    "\051\ufee3\052\ufee3\053\ufee3\054\ufee3\055\ufee3\056\ufee3\057" +
    "\ufee3\060\ufee3\064\ufee3\065\ufee3\067\ufee3\074\ufee3\075\ufee3" +
    "\076\ufee3\001\002\000\160\003\ufed3\004\ufed3\005\ufed3\006" +
    "\ufed3\007\ufed3\010\ufed3\011\ufed3\012\ufed3\013\ufed3\014\ufed3" +
    "\015\ufed3\016\ufed3\017\ufed3\020\ufed3\021\ufed3\022\ufed3\023" +
    "\ufed3\025\ufed3\026\ufed3\027\ufed3\030\ufed3\031\ufed3\033\ufed3" +
    "\034\ufed3\035\ufed3\037\ufed3\040\ufed3\041\ufed3\042\ufed3\043" +
    "\ufed3\044\ufed3\045\ufed3\046\ufed3\047\ufed3\050\ufed3\051\ufed3" +
    "\052\ufed3\053\ufed3\054\ufed3\055\ufed3\056\ufed3\057\ufed3\060" +
    "\ufed3\061\ufed3\062\ufed3\063\ufed3\064\ufed3\065\ufed3\066\ufed3" +
    "\067\ufed3\070\ufed3\071\ufed3\072\ufed3\073\ufed3\075\ufed3\001" +
    "\002\000\160\003\ufecf\004\ufecf\005\ufecf\006\ufecf\007\ufecf" +
    "\010\ufecf\011\ufecf\012\ufecf\013\ufecf\014\ufecf\015\ufecf\016" +
    "\ufecf\017\ufecf\020\ufecf\021\ufecf\022\ufecf\023\ufecf\025\ufecf" +
    "\026\ufecf\027\ufecf\030\ufecf\031\ufecf\033\ufecf\034\ufecf\035" +
    "\ufecf\037\ufecf\040\ufecf\041\ufecf\042\ufecf\043\ufecf\044\ufecf" +
    "\045\ufecf\046\ufecf\047\ufecf\050\ufecf\051\ufecf\052\ufecf\053" +
    "\ufecf\054\ufecf\055\ufecf\056\ufecf\057\ufecf\060\ufecf\061\ufecf" +
    "\062\ufecf\063\ufecf\064\ufecf\065\ufecf\066\ufecf\067\ufecf\070" +
    "\ufecf\071\ufecf\072\ufecf\073\ufecf\075\ufecf\001\002\000\160" +
    "\003\ufebf\004\ufebf\005\ufebf\006\ufebf\007\ufebf\010\ufebf\011" +
    "\ufebf\012\ufebf\013\ufebf\014\ufebf\015\ufebf\016\ufebf\017\ufebf" +
    "\020\ufebf\021\ufebf\022\ufebf\023\ufebf\025\ufebf\026\ufebf\027" +
    "\ufebf\030\ufebf\031\ufebf\033\ufebf\034\ufebf\035\ufebf\037\ufebf" +
    "\040\ufebf\041\ufebf\042\ufebf\043\ufebf\044\ufebf\045\ufebf\046" +
    "\ufebf\047\ufebf\050\ufebf\051\ufebf\052\ufebf\053\ufebf\054\ufebf" +
    "\055\ufebf\056\ufebf\057\ufebf\060\ufebf\061\ufebf\062\ufebf\063" +
    "\ufebf\064\ufebf\065\ufebf\066\ufebf\067\ufebf\070\ufebf\071\ufebf" +
    "\072\ufebf\073\ufebf\075\ufebf\001\002\000\160\003\ufed6\004" +
    "\ufed6\005\ufed6\006\ufed6\007\ufed6\010\ufed6\011\ufed6\012\ufed6" +
    "\013\ufed6\014\ufed6\015\ufed6\016\ufed6\017\ufed6\020\ufed6\021" +
    "\ufed6\022\ufed6\023\ufed6\025\ufed6\026\ufed6\027\ufed6\030\ufed6" +
    "\031\ufed6\033\ufed6\034\ufed6\035\ufed6\037\ufed6\040\ufed6\041" +
    "\ufed6\042\ufed6\043\ufed6\044\ufed6\045\ufed6\046\ufed6\047\ufed6" +
    "\050\ufed6\051\ufed6\052\ufed6\053\ufed6\054\ufed6\055\ufed6\056" +
    "\ufed6\057\ufed6\060\ufed6\061\ufed6\062\ufed6\063\ufed6\064\ufed6" +
    "\065\ufed6\066\ufed6\067\ufed6\070\ufed6\071\ufed6\072\ufed6\073" +
    "\ufed6\075\ufed6\001\002\000\160\003\ufeb5\004\ufeb5\005\ufeb5" +
    "\006\ufeb5\007\ufeb5\010\ufeb5\011\ufeb5\012\ufeb5\013\ufeb5\014" +
    "\ufeb5\015\ufeb5\016\ufeb5\017\ufeb5\020\ufeb5\021\ufeb5\022\ufeb5" +
    "\023\ufeb5\025\ufeb5\026\ufeb5\027\ufeb5\030\ufeb5\031\ufeb5\033" +
    "\ufeb5\034\ufeb5\035\ufeb5\037\ufeb5\040\ufeb5\041\ufeb5\042\ufeb5" +
    "\043\ufeb5\044\ufeb5\045\ufeb5\046\ufeb5\047\ufeb5\050\ufeb5\051" +
    "\ufeb5\052\ufeb5\053\ufeb5\054\ufeb5\055\ufeb5\056\ufeb5\057\ufeb5" +
    "\060\ufeb5\061\ufeb5\062\ufeb5\063\ufeb5\064\ufeb5\065\ufeb5\066" +
    "\ufeb5\067\ufeb5\070\ufeb5\071\ufeb5\072\ufeb5\073\ufeb5\075\ufeb5" +
    "\001\002\000\160\003\ufed7\004\ufed7\005\ufed7\006\ufed7\007" +
    "\ufed7\010\ufed7\011\ufed7\012\ufed7\013\ufed7\014\ufed7\015\ufed7" +
    "\016\ufed7\017\ufed7\020\ufed7\021\ufed7\022\ufed7\023\ufed7\025" +
    "\ufed7\026\ufed7\027\ufed7\030\ufed7\031\ufed7\033\ufed7\034\ufed7" +
    "\035\ufed7\037\ufed7\040\ufed7\041\ufed7\042\ufed7\043\ufed7\044" +
    "\ufed7\045\ufed7\046\ufed7\047\ufed7\050\ufed7\051\ufed7\052\ufed7" +
    "\053\ufed7\054\ufed7\055\ufed7\056\ufed7\057\ufed7\060\ufed7\061" +
    "\ufed7\062\ufed7\063\ufed7\064\ufed7\065\ufed7\066\ufed7\067\ufed7" +
    "\070\ufed7\071\ufed7\072\ufed7\073\ufed7\075\ufed7\001\002\000" +
    "\160\003\ufeb7\004\ufeb7\005\ufeb7\006\ufeb7\007\ufeb7\010\ufeb7" +
    "\011\ufeb7\012\ufeb7\013\ufeb7\014\ufeb7\015\ufeb7\016\ufeb7\017" +
    "\ufeb7\020\ufeb7\021\ufeb7\022\ufeb7\023\ufeb7\025\ufeb7\026\ufeb7" +
    "\027\ufeb7\030\ufeb7\031\ufeb7\033\ufeb7\034\ufeb7\035\ufeb7\037" +
    "\ufeb7\040\ufeb7\041\ufeb7\042\ufeb7\043\ufeb7\044\ufeb7\045\ufeb7" +
    "\046\ufeb7\047\ufeb7\050\ufeb7\051\ufeb7\052\ufeb7\053\ufeb7\054" +
    "\ufeb7\055\ufeb7\056\ufeb7\057\ufeb7\060\ufeb7\061\ufeb7\062\ufeb7" +
    "\063\ufeb7\064\ufeb7\065\ufeb7\066\ufeb7\067\ufeb7\070\ufeb7\071" +
    "\ufeb7\072\ufeb7\073\ufeb7\075\ufeb7\001\002\000\160\003\ufec6" +
    "\004\ufec6\005\ufec6\006\ufec6\007\ufec6\010\ufec6\011\ufec6\012" +
    "\ufec6\013\ufec6\014\ufec6\015\ufec6\016\ufec6\017\ufec6\020\ufec6" +
    "\021\ufec6\022\ufec6\023\ufec6\025\ufec6\026\ufec6\027\ufec6\030" +
    "\ufec6\031\ufec6\033\ufec6\034\ufec6\035\ufec6\037\ufec6\040\ufec6" +
    "\041\ufec6\042\ufec6\043\ufec6\044\ufec6\045\ufec6\046\ufec6\047" +
    "\ufec6\050\ufec6\051\ufec6\052\ufec6\053\ufec6\054\ufec6\055\ufec6" +
    "\056\ufec6\057\ufec6\060\ufec6\061\ufec6\062\ufec6\063\ufec6\064" +
    "\ufec6\065\ufec6\066\ufec6\067\ufec6\070\ufec6\071\ufec6\072\ufec6" +
    "\073\ufec6\075\ufec6\001\002\000\160\003\ufeb3\004\ufeb3\005" +
    "\ufeb3\006\ufeb3\007\ufeb3\010\ufeb3\011\ufeb3\012\ufeb3\013\ufeb3" +
    "\014\ufeb3\015\ufeb3\016\ufeb3\017\ufeb3\020\ufeb3\021\ufeb3\022" +
    "\ufeb3\023\ufeb3\025\ufeb3\026\ufeb3\027\ufeb3\030\ufeb3\031\ufeb3" +
    "\033\ufeb3\034\ufeb3\035\ufeb3\037\ufeb3\040\ufeb3\041\ufeb3\042" +
    "\ufeb3\043\ufeb3\044\ufeb3\045\ufeb3\046\ufeb3\047\ufeb3\050\ufeb3" +
    "\051\ufeb3\052\ufeb3\053\ufeb3\054\ufeb3\055\ufeb3\056\ufeb3\057" +
    "\ufeb3\060\ufeb3\061\ufeb3\062\ufeb3\063\ufeb3\064\ufeb3\065\ufeb3" +
    "\066\ufeb3\067\ufeb3\070\ufeb3\071\ufeb3\072\ufeb3\073\ufeb3\075" +
    "\ufeb3\001\002\000\066\003\ufee4\011\ufee4\016\ufee4\020\ufee4" +
    "\021\ufee4\022\ufee4\033\ufee4\034\ufee4\035\ufee4\036\ufee4\037" +
    "\ufee4\047\ufee4\051\ufee4\052\ufee4\053\ufee4\054\ufee4\055\ufee4" +
    "\056\ufee4\057\ufee4\060\ufee4\064\ufee4\065\ufee4\067\ufee4\074" +
    "\ufee4\075\ufee4\076\ufee4\001\002\000\162\003\u014f\004\u013e" +
    "\005\u0153\006\u0157\007\u013a\010\u013d\011\u013c\012\u015a\013" +
    "\u0158\014\u0168\015\u0167\016\u0134\017\u0166\020\u0135\021\u015d" +
    "\022\u015b\023\u0163\025\u015e\026\u014d\027\u014a\030\u0152\031" +
    "\u015f\033\u0160\034\u0142\035\u0147\037\u0169\040\u0138\041\u0150" +
    "\042\u014b\043\u013f\044\u0165\045\u0137\046\u0155\047\u0143\050" +
    "\u0154\051\u0140\052\u0139\053\u0151\054\u016a\055\u013b\056\u0164" +
    "\057\u0136\060\u016b\061\u014c\062\u0133\063\u0149\064\u0144\065" +
    "\u0148\066\u0145\067\u0156\070\u0161\071\u0141\072\u014e\073\u0159" +
    "\075\u0162\077\u0146\001\002\000\164\003\uff09\004\uff09\005" +
    "\uff09\006\uff09\007\uff09\010\uff09\011\uff09\012\uff09\013\uff09" +
    "\014\uff09\015\uff09\016\uff09\017\uff09\020\uff09\021\uff09\022" +
    "\uff09\023\uff09\024\uff09\025\uff09\026\uff09\027\uff09\030\uff09" +
    "\031\uff09\033\uff09\034\uff09\035\uff09\037\uff09\040\uff09\041" +
    "\uff09\042\uff09\043\uff09\044\uff09\045\uff09\046\uff09\047\uff09" +
    "\050\uff09\051\uff09\052\uff09\053\uff09\054\uff09\055\uff09\056" +
    "\uff09\057\uff09\060\uff09\061\uff09\062\uff09\063\uff09\064\uff09" +
    "\065\uff09\066\uff09\067\uff09\070\uff09\071\uff09\072\uff09\073" +
    "\uff09\075\uff09\077\uff09\001\002\000\164\003\ufea1\004\ufea1" +
    "\005\ufea1\006\ufea1\007\ufea1\010\ufea1\011\ufea1\012\ufea1\013" +
    "\ufea1\014\ufea1\015\ufea1\016\ufea1\017\ufea1\020\ufea1\021\ufea1" +
    "\022\ufea1\023\ufea1\024\ufea1\025\ufea1\026\ufea1\027\ufea1\030" +
    "\ufea1\031\ufea1\033\ufea1\034\ufea1\035\ufea1\037\ufea1\040\ufea1" +
    "\041\ufea1\042\ufea1\043\ufea1\044\ufea1\045\ufea1\046\ufea1\047" +
    "\ufea1\050\ufea1\051\ufea1\052\ufea1\053\ufea1\054\ufea1\055\ufea1" +
    "\056\ufea1\057\ufea1\060\ufea1\061\ufea1\062\ufea1\063\ufea1\064" +
    "\ufea1\065\ufea1\066\ufea1\067\ufea1\070\ufea1\071\ufea1\072\ufea1" +
    "\073\ufea1\075\ufea1\077\ufea1\001\002\000\164\003\ufe9f\004" +
    "\ufe9f\005\ufe9f\006\ufe9f\007\ufe9f\010\ufe9f\011\ufe9f\012\ufe9f" +
    "\013\ufe9f\014\ufe9f\015\ufe9f\016\ufe9f\017\ufe9f\020\ufe9f\021" +
    "\ufe9f\022\ufe9f\023\ufe9f\024\ufe9f\025\ufe9f\026\ufe9f\027\ufe9f" +
    "\030\ufe9f\031\ufe9f\033\ufe9f\034\ufe9f\035\ufe9f\037\ufe9f\040" +
    "\ufe9f\041\ufe9f\042\ufe9f\043\ufe9f\044\ufe9f\045\ufe9f\046\ufe9f" +
    "\047\ufe9f\050\ufe9f\051\ufe9f\052\ufe9f\053\ufe9f\054\ufe9f\055" +
    "\ufe9f\056\ufe9f\057\ufe9f\060\ufe9f\061\ufe9f\062\ufe9f\063\ufe9f" +
    "\064\ufe9f\065\ufe9f\066\ufe9f\067\ufe9f\070\ufe9f\071\ufe9f\072" +
    "\ufe9f\073\ufe9f\075\ufe9f\077\ufe9f\001\002\000\164\003\ufe81" +
    "\004\ufe81\005\ufe81\006\ufe81\007\ufe81\010\ufe81\011\ufe81\012" +
    "\ufe81\013\ufe81\014\ufe81\015\ufe81\016\ufe81\017\ufe81\020\ufe81" +
    "\021\ufe81\022\ufe81\023\ufe81\024\ufe81\025\ufe81\026\ufe81\027" +
    "\ufe81\030\ufe81\031\ufe81\033\ufe81\034\ufe81\035\ufe81\037\ufe81" +
    "\040\ufe81\041\ufe81\042\ufe81\043\ufe81\044\ufe81\045\ufe81\046" +
    "\ufe81\047\ufe81\050\ufe81\051\ufe81\052\ufe81\053\ufe81\054\ufe81" +
    "\055\ufe81\056\ufe81\057\ufe81\060\ufe81\061\ufe81\062\ufe81\063" +
    "\ufe81\064\ufe81\065\ufe81\066\ufe81\067\ufe81\070\ufe81\071\ufe81" +
    "\072\ufe81\073\ufe81\075\ufe81\077\ufe81\001\002\000\164\003" +
    "\ufe8b\004\ufe8b\005\ufe8b\006\ufe8b\007\ufe8b\010\ufe8b\011\ufe8b" +
    "\012\ufe8b\013\ufe8b\014\ufe8b\015\ufe8b\016\ufe8b\017\ufe8b\020" +
    "\ufe8b\021\ufe8b\022\ufe8b\023\ufe8b\024\ufe8b\025\ufe8b\026\ufe8b" +
    "\027\ufe8b\030\ufe8b\031\ufe8b\033\ufe8b\034\ufe8b\035\ufe8b\037" +
    "\ufe8b\040\ufe8b\041\ufe8b\042\ufe8b\043\ufe8b\044\ufe8b\045\ufe8b" +
    "\046\ufe8b\047\ufe8b\050\ufe8b\051\ufe8b\052\ufe8b\053\ufe8b\054" +
    "\ufe8b\055\ufe8b\056\ufe8b\057\ufe8b\060\ufe8b\061\ufe8b\062\ufe8b" +
    "\063\ufe8b\064\ufe8b\065\ufe8b\066\ufe8b\067\ufe8b\070\ufe8b\071" +
    "\ufe8b\072\ufe8b\073\ufe8b\075\ufe8b\077\ufe8b\001\002\000\164" +
    "\003\ufe90\004\ufe90\005\ufe90\006\ufe90\007\ufe90\010\ufe90\011" +
    "\ufe90\012\ufe90\013\ufe90\014\ufe90\015\ufe90\016\ufe90\017\ufe90" +
    "\020\ufe90\021\ufe90\022\ufe90\023\ufe90\024\ufe90\025\ufe90\026" +
    "\ufe90\027\ufe90\030\ufe90\031\ufe90\033\ufe90\034\ufe90\035\ufe90" +
    "\037\ufe90\040\ufe90\041\ufe90\042\ufe90\043\ufe90\044\ufe90\045" +
    "\ufe90\046\ufe90\047\ufe90\050\ufe90\051\ufe90\052\ufe90\053\ufe90" +
    "\054\ufe90\055\ufe90\056\ufe90\057\ufe90\060\ufe90\061\ufe90\062" +
    "\ufe90\063\ufe90\064\ufe90\065\ufe90\066\ufe90\067\ufe90\070\ufe90" +
    "\071\ufe90\072\ufe90\073\ufe90\075\ufe90\077\ufe90\001\002\000" +
    "\164\003\ufe86\004\ufe86\005\ufe86\006\ufe86\007\ufe86\010\ufe86" +
    "\011\ufe86\012\ufe86\013\ufe86\014\ufe86\015\ufe86\016\ufe86\017" +
    "\ufe86\020\ufe86\021\ufe86\022\ufe86\023\ufe86\024\ufe86\025\ufe86" +
    "\026\ufe86\027\ufe86\030\ufe86\031\ufe86\033\ufe86\034\ufe86\035" +
    "\ufe86\037\ufe86\040\ufe86\041\ufe86\042\ufe86\043\ufe86\044\ufe86" +
    "\045\ufe86\046\ufe86\047\ufe86\050\ufe86\051\ufe86\052\ufe86\053" +
    "\ufe86\054\ufe86\055\ufe86\056\ufe86\057\ufe86\060\ufe86\061\ufe86" +
    "\062\ufe86\063\ufe86\064\ufe86\065\ufe86\066\ufe86\067\ufe86\070" +
    "\ufe86\071\ufe86\072\ufe86\073\ufe86\075\ufe86\077\ufe86\001\002" +
    "\000\164\003\ufea9\004\ufea9\005\ufea9\006\ufea9\007\ufea9\010" +
    "\ufea9\011\ufea9\012\ufea9\013\ufea9\014\ufea9\015\ufea9\016\ufea9" +
    "\017\ufea9\020\ufea9\021\ufea9\022\ufea9\023\ufea9\024\ufea9\025" +
    "\ufea9\026\ufea9\027\ufea9\030\ufea9\031\ufea9\033\ufea9\034\ufea9" +
    "\035\ufea9\037\ufea9\040\ufea9\041\ufea9\042\ufea9\043\ufea9\044" +
    "\ufea9\045\ufea9\046\ufea9\047\ufea9\050\ufea9\051\ufea9\052\ufea9" +
    "\053\ufea9\054\ufea9\055\ufea9\056\ufea9\057\ufea9\060\ufea9\061" +
    "\ufea9\062\ufea9\063\ufea9\064\ufea9\065\ufea9\066\ufea9\067\ufea9" +
    "\070\ufea9\071\ufea9\072\ufea9\073\ufea9\075\ufea9\077\ufea9\001" +
    "\002\000\164\003\ufe83\004\ufe83\005\ufe83\006\ufe83\007\ufe83" +
    "\010\ufe83\011\ufe83\012\ufe83\013\ufe83\014\ufe83\015\ufe83\016" +
    "\ufe83\017\ufe83\020\ufe83\021\ufe83\022\ufe83\023\ufe83\024\ufe83" +
    "\025\ufe83\026\ufe83\027\ufe83\030\ufe83\031\ufe83\033\ufe83\034" +
    "\ufe83\035\ufe83\037\ufe83\040\ufe83\041\ufe83\042\ufe83\043\ufe83" +
    "\044\ufe83\045\ufe83\046\ufe83\047\ufe83\050\ufe83\051\ufe83\052" +
    "\ufe83\053\ufe83\054\ufe83\055\ufe83\056\ufe83\057\ufe83\060\ufe83" +
    "\061\ufe83\062\ufe83\063\ufe83\064\ufe83\065\ufe83\066\ufe83\067" +
    "\ufe83\070\ufe83\071\ufe83\072\ufe83\073\ufe83\075\ufe83\077\ufe83" +
    "\001\002\000\164\003\ufea7\004\ufea7\005\ufea7\006\ufea7\007" +
    "\ufea7\010\ufea7\011\ufea7\012\ufea7\013\ufea7\014\ufea7\015\ufea7" +
    "\016\ufea7\017\ufea7\020\ufea7\021\ufea7\022\ufea7\023\ufea7\024" +
    "\ufea7\025\ufea7\026\ufea7\027\ufea7\030\ufea7\031\ufea7\033\ufea7" +
    "\034\ufea7\035\ufea7\037\ufea7\040\ufea7\041\ufea7\042\ufea7\043" +
    "\ufea7\044\ufea7\045\ufea7\046\ufea7\047\ufea7\050\ufea7\051\ufea7" +
    "\052\ufea7\053\ufea7\054\ufea7\055\ufea7\056\ufea7\057\ufea7\060" +
    "\ufea7\061\ufea7\062\ufea7\063\ufea7\064\ufea7\065\ufea7\066\ufea7" +
    "\067\ufea7\070\ufea7\071\ufea7\072\ufea7\073\ufea7\075\ufea7\077" +
    "\ufea7\001\002\000\164\003\ufea8\004\ufea8\005\ufea8\006\ufea8" +
    "\007\ufea8\010\ufea8\011\ufea8\012\ufea8\013\ufea8\014\ufea8\015" +
    "\ufea8\016\ufea8\017\ufea8\020\ufea8\021\ufea8\022\ufea8\023\ufea8" +
    "\024\ufea8\025\ufea8\026\ufea8\027\ufea8\030\ufea8\031\ufea8\033" +
    "\ufea8\034\ufea8\035\ufea8\037\ufea8\040\ufea8\041\ufea8\042\ufea8" +
    "\043\ufea8\044\ufea8\045\ufea8\046\ufea8\047\ufea8\050\ufea8\051" +
    "\ufea8\052\ufea8\053\ufea8\054\ufea8\055\ufea8\056\ufea8\057\ufea8" +
    "\060\ufea8\061\ufea8\062\ufea8\063\ufea8\064\ufea8\065\ufea8\066" +
    "\ufea8\067\ufea8\070\ufea8\071\ufea8\072\ufea8\073\ufea8\075\ufea8" +
    "\077\ufea8\001\002\000\164\003\ufeac\004\ufeac\005\ufeac\006" +
    "\ufeac\007\ufeac\010\ufeac\011\ufeac\012\ufeac\013\ufeac\014\ufeac" +
    "\015\ufeac\016\ufeac\017\ufeac\020\ufeac\021\ufeac\022\ufeac\023" +
    "\ufeac\024\ufeac\025\ufeac\026\ufeac\027\ufeac\030\ufeac\031\ufeac" +
    "\033\ufeac\034\ufeac\035\ufeac\037\ufeac\040\ufeac\041\ufeac\042" +
    "\ufeac\043\ufeac\044\ufeac\045\ufeac\046\ufeac\047\ufeac\050\ufeac" +
    "\051\ufeac\052\ufeac\053\ufeac\054\ufeac\055\ufeac\056\ufeac\057" +
    "\ufeac\060\ufeac\061\ufeac\062\ufeac\063\ufeac\064\ufeac\065\ufeac" +
    "\066\ufeac\067\ufeac\070\ufeac\071\ufeac\072\ufeac\073\ufeac\075" +
    "\ufeac\077\ufeac\001\002\000\164\003\ufe8d\004\ufe8d\005\ufe8d" +
    "\006\ufe8d\007\ufe8d\010\ufe8d\011\ufe8d\012\ufe8d\013\ufe8d\014" +
    "\ufe8d\015\ufe8d\016\ufe8d\017\ufe8d\020\ufe8d\021\ufe8d\022\ufe8d" +
    "\023\ufe8d\024\ufe8d\025\ufe8d\026\ufe8d\027\ufe8d\030\ufe8d\031" +
    "\ufe8d\033\ufe8d\034\ufe8d\035\ufe8d\037\ufe8d\040\ufe8d\041\ufe8d" +
    "\042\ufe8d\043\ufe8d\044\ufe8d\045\ufe8d\046\ufe8d\047\ufe8d\050" +
    "\ufe8d\051\ufe8d\052\ufe8d\053\ufe8d\054\ufe8d\055\ufe8d\056\ufe8d" +
    "\057\ufe8d\060\ufe8d\061\ufe8d\062\ufe8d\063\ufe8d\064\ufe8d\065" +
    "\ufe8d\066\ufe8d\067\ufe8d\070\ufe8d\071\ufe8d\072\ufe8d\073\ufe8d" +
    "\075\ufe8d\077\ufe8d\001\002\000\164\003\ufe87\004\ufe87\005" +
    "\ufe87\006\ufe87\007\ufe87\010\ufe87\011\ufe87\012\ufe87\013\ufe87" +
    "\014\ufe87\015\ufe87\016\ufe87\017\ufe87\020\ufe87\021\ufe87\022" +
    "\ufe87\023\ufe87\024\ufe87\025\ufe87\026\ufe87\027\ufe87\030\ufe87" +
    "\031\ufe87\033\ufe87\034\ufe87\035\ufe87\037\ufe87\040\ufe87\041" +
    "\ufe87\042\ufe87\043\ufe87\044\ufe87\045\ufe87\046\ufe87\047\ufe87" +
    "\050\ufe87\051\ufe87\052\ufe87\053\ufe87\054\ufe87\055\ufe87\056" +
    "\ufe87\057\ufe87\060\ufe87\061\ufe87\062\ufe87\063\ufe87\064\ufe87" +
    "\065\ufe87\066\ufe87\067\ufe87\070\ufe87\071\ufe87\072\ufe87\073" +
    "\ufe87\075\ufe87\077\ufe87\001\002\000\164\003\ufe97\004\ufe97" +
    "\005\ufe97\006\ufe97\007\ufe97\010\ufe97\011\ufe97\012\ufe97\013" +
    "\ufe97\014\ufe97\015\ufe97\016\ufe97\017\ufe97\020\ufe97\021\ufe97" +
    "\022\ufe97\023\ufe97\024\ufe97\025\ufe97\026\ufe97\027\ufe97\030" +
    "\ufe97\031\ufe97\033\ufe97\034\ufe97\035\ufe97\037\ufe97\040\ufe97" +
    "\041\ufe97\042\ufe97\043\ufe97\044\ufe97\045\ufe97\046\ufe97\047" +
    "\ufe97\050\ufe97\051\ufe97\052\ufe97\053\ufe97\054\ufe97\055\ufe97" +
    "\056\ufe97\057\ufe97\060\ufe97\061\ufe97\062\ufe97\063\ufe97\064" +
    "\ufe97\065\ufe97\066\ufe97\067\ufe97\070\ufe97\071\ufe97\072\ufe97" +
    "\073\ufe97\075\ufe97\077\ufe97\001\002\000\164\003\ufe94\004" +
    "\ufe94\005\ufe94\006\ufe94\007\ufe94\010\ufe94\011\ufe94\012\ufe94" +
    "\013\ufe94\014\ufe94\015\ufe94\016\ufe94\017\ufe94\020\ufe94\021" +
    "\ufe94\022\ufe94\023\ufe94\024\ufe94\025\ufe94\026\ufe94\027\ufe94" +
    "\030\ufe94\031\ufe94\033\ufe94\034\ufe94\035\ufe94\037\ufe94\040" +
    "\ufe94\041\ufe94\042\ufe94\043\ufe94\044\ufe94\045\ufe94\046\ufe94" +
    "\047\ufe94\050\ufe94\051\ufe94\052\ufe94\053\ufe94\054\ufe94\055" +
    "\ufe94\056\ufe94\057\ufe94\060\ufe94\061\ufe94\062\ufe94\063\ufe94" +
    "\064\ufe94\065\ufe94\066\ufe94\067\ufe94\070\ufe94\071\ufe94\072" +
    "\ufe94\073\ufe94\075\ufe94\077\ufe94\001\002\000\164\003\ufe89" +
    "\004\ufe89\005\ufe89\006\ufe89\007\ufe89\010\ufe89\011\ufe89\012" +
    "\ufe89\013\ufe89\014\ufe89\015\ufe89\016\ufe89\017\ufe89\020\ufe89" +
    "\021\ufe89\022\ufe89\023\ufe89\024\ufe89\025\ufe89\026\ufe89\027" +
    "\ufe89\030\ufe89\031\ufe89\033\ufe89\034\ufe89\035\ufe89\037\ufe89" +
    "\040\ufe89\041\ufe89\042\ufe89\043\ufe89\044\ufe89\045\ufe89\046" +
    "\ufe89\047\ufe89\050\ufe89\051\ufe89\052\ufe89\053\ufe89\054\ufe89" +
    "\055\ufe89\056\ufe89\057\ufe89\060\ufe89\061\ufe89\062\ufe89\063" +
    "\ufe89\064\ufe89\065\ufe89\066\ufe89\067\ufe89\070\ufe89\071\ufe89" +
    "\072\ufe89\073\ufe89\075\ufe89\077\ufe89\001\002\000\164\003" +
    "\ufe7f\004\ufe7f\005\ufe7f\006\ufe7f\007\ufe7f\010\ufe7f\011\ufe7f" +
    "\012\ufe7f\013\ufe7f\014\ufe7f\015\ufe7f\016\ufe7f\017\ufe7f\020" +
    "\ufe7f\021\ufe7f\022\ufe7f\023\ufe7f\024\ufe7f\025\ufe7f\026\ufe7f" +
    "\027\ufe7f\030\ufe7f\031\ufe7f\033\ufe7f\034\ufe7f\035\ufe7f\037" +
    "\ufe7f\040\ufe7f\041\ufe7f\042\ufe7f\043\ufe7f\044\ufe7f\045\ufe7f" +
    "\046\ufe7f\047\ufe7f\050\ufe7f\051\ufe7f\052\ufe7f\053\ufe7f\054" +
    "\ufe7f\055\ufe7f\056\ufe7f\057\ufe7f\060\ufe7f\061\ufe7f\062\ufe7f" +
    "\063\ufe7f\064\ufe7f\065\ufe7f\066\ufe7f\067\ufe7f\070\ufe7f\071" +
    "\ufe7f\072\ufe7f\073\ufe7f\075\ufe7f\077\ufe7f\001\002\000\164" +
    "\003\ufe7d\004\ufe7d\005\ufe7d\006\ufe7d\007\ufe7d\010\ufe7d\011" +
    "\ufe7d\012\ufe7d\013\ufe7d\014\ufe7d\015\ufe7d\016\ufe7d\017\ufe7d" +
    "\020\ufe7d\021\ufe7d\022\ufe7d\023\ufe7d\024\ufe7d\025\ufe7d\026" +
    "\ufe7d\027\ufe7d\030\ufe7d\031\ufe7d\033\ufe7d\034\ufe7d\035\ufe7d" +
    "\037\ufe7d\040\ufe7d\041\ufe7d\042\ufe7d\043\ufe7d\044\ufe7d\045" +
    "\ufe7d\046\ufe7d\047\ufe7d\050\ufe7d\051\ufe7d\052\ufe7d\053\ufe7d" +
    "\054\ufe7d\055\ufe7d\056\ufe7d\057\ufe7d\060\ufe7d\061\ufe7d\062" +
    "\ufe7d\063\ufe7d\064\ufe7d\065\ufe7d\066\ufe7d\067\ufe7d\070\ufe7d" +
    "\071\ufe7d\072\ufe7d\073\ufe7d\075\ufe7d\077\ufe7d\001\002\000" +
    "\066\003\ufee0\011\ufee0\016\ufee0\020\ufee0\021\ufee0\022\ufee0" +
    "\033\ufee0\034\ufee0\035\ufee0\036\ufee0\037\ufee0\047\ufee0\051" +
    "\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0\056\ufee0\057\ufee0" +
    "\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0\075\007\076" +
    "\ufee0\001\002\000\164\003\ufe95\004\ufe95\005\ufe95\006\ufe95" +
    "\007\ufe95\010\ufe95\011\ufe95\012\ufe95\013\ufe95\014\ufe95\015" +
    "\ufe95\016\ufe95\017\ufe95\020\ufe95\021\ufe95\022\ufe95\023\ufe95" +
    "\024\ufe95\025\ufe95\026\ufe95\027\ufe95\030\ufe95\031\ufe95\033" +
    "\ufe95\034\ufe95\035\ufe95\037\ufe95\040\ufe95\041\ufe95\042\ufe95" +
    "\043\ufe95\044\ufe95\045\ufe95\046\ufe95\047\ufe95\050\ufe95\051" +
    "\ufe95\052\ufe95\053\ufe95\054\ufe95\055\ufe95\056\ufe95\057\ufe95" +
    "\060\ufe95\061\ufe95\062\ufe95\063\ufe95\064\ufe95\065\ufe95\066" +
    "\ufe95\067\ufe95\070\ufe95\071\ufe95\072\ufe95\073\ufe95\075\ufe95" +
    "\077\ufe95\001\002\000\164\003\ufe7e\004\ufe7e\005\ufe7e\006" +
    "\ufe7e\007\ufe7e\010\ufe7e\011\ufe7e\012\ufe7e\013\ufe7e\014\ufe7e" +
    "\015\ufe7e\016\ufe7e\017\ufe7e\020\ufe7e\021\ufe7e\022\ufe7e\023" +
    "\ufe7e\024\ufe7e\025\ufe7e\026\ufe7e\027\ufe7e\030\ufe7e\031\ufe7e" +
    "\033\ufe7e\034\ufe7e\035\ufe7e\037\ufe7e\040\ufe7e\041\ufe7e\042" +
    "\ufe7e\043\ufe7e\044\ufe7e\045\ufe7e\046\ufe7e\047\ufe7e\050\ufe7e" +
    "\051\ufe7e\052\ufe7e\053\ufe7e\054\ufe7e\055\ufe7e\056\ufe7e\057" +
    "\ufe7e\060\ufe7e\061\ufe7e\062\ufe7e\063\ufe7e\064\ufe7e\065\ufe7e" +
    "\066\ufe7e\067\ufe7e\070\ufe7e\071\ufe7e\072\ufe7e\073\ufe7e\075" +
    "\ufe7e\077\ufe7e\001\002\000\164\003\uff08\004\uff08\005\uff08" +
    "\006\uff08\007\uff08\010\uff08\011\uff08\012\uff08\013\uff08\014" +
    "\uff08\015\uff08\016\uff08\017\uff08\020\uff08\021\uff08\022\uff08" +
    "\023\uff08\024\uff08\025\uff08\026\uff08\027\uff08\030\uff08\031" +
    "\uff08\033\uff08\034\uff08\035\uff08\037\uff08\040\uff08\041\uff08" +
    "\042\uff08\043\uff08\044\uff08\045\uff08\046\uff08\047\uff08\050" +
    "\uff08\051\uff08\052\uff08\053\uff08\054\uff08\055\uff08\056\uff08" +
    "\057\uff08\060\uff08\061\uff08\062\uff08\063\uff08\064\uff08\065" +
    "\uff08\066\uff08\067\uff08\070\uff08\071\uff08\072\uff08\073\uff08" +
    "\075\uff08\077\uff08\001\002\000\164\003\ufe9a\004\ufe9a\005" +
    "\ufe9a\006\ufe9a\007\ufe9a\010\ufe9a\011\ufe9a\012\ufe9a\013\ufe9a" +
    "\014\ufe9a\015\ufe9a\016\ufe9a\017\ufe9a\020\ufe9a\021\ufe9a\022" +
    "\ufe9a\023\ufe9a\024\ufe9a\025\ufe9a\026\ufe9a\027\ufe9a\030\ufe9a" +
    "\031\ufe9a\033\ufe9a\034\ufe9a\035\ufe9a\037\ufe9a\040\ufe9a\041" +
    "\ufe9a\042\ufe9a\043\ufe9a\044\ufe9a\045\ufe9a\046\ufe9a\047\ufe9a" +
    "\050\ufe9a\051\ufe9a\052\ufe9a\053\ufe9a\054\ufe9a\055\ufe9a\056" +
    "\ufe9a\057\ufe9a\060\ufe9a\061\ufe9a\062\ufe9a\063\ufe9a\064\ufe9a" +
    "\065\ufe9a\066\ufe9a\067\ufe9a\070\ufe9a\071\ufe9a\072\ufe9a\073" +
    "\ufe9a\075\ufe9a\077\ufe9a\001\002\000\164\003\ufe8e\004\ufe8e" +
    "\005\ufe8e\006\ufe8e\007\ufe8e\010\ufe8e\011\ufe8e\012\ufe8e\013" +
    "\ufe8e\014\ufe8e\015\ufe8e\016\ufe8e\017\ufe8e\020\ufe8e\021\ufe8e" +
    "\022\ufe8e\023\ufe8e\024\ufe8e\025\ufe8e\026\ufe8e\027\ufe8e\030" +
    "\ufe8e\031\ufe8e\033\ufe8e\034\ufe8e\035\ufe8e\037\ufe8e\040\ufe8e" +
    "\041\ufe8e\042\ufe8e\043\ufe8e\044\ufe8e\045\ufe8e\046\ufe8e\047" +
    "\ufe8e\050\ufe8e\051\ufe8e\052\ufe8e\053\ufe8e\054\ufe8e\055\ufe8e" +
    "\056\ufe8e\057\ufe8e\060\ufe8e\061\ufe8e\062\ufe8e\063\ufe8e\064" +
    "\ufe8e\065\ufe8e\066\ufe8e\067\ufe8e\070\ufe8e\071\ufe8e\072\ufe8e" +
    "\073\ufe8e\075\ufe8e\077\ufe8e\001\002\000\164\003\uff0a\004" +
    "\uff0a\005\uff0a\006\uff0a\007\uff0a\010\uff0a\011\uff0a\012\uff0a" +
    "\013\uff0a\014\uff0a\015\uff0a\016\uff0a\017\uff0a\020\uff0a\021" +
    "\uff0a\022\uff0a\023\uff0a\024\uff0a\025\uff0a\026\uff0a\027\uff0a" +
    "\030\uff0a\031\uff0a\033\uff0a\034\uff0a\035\uff0a\037\uff0a\040" +
    "\uff0a\041\uff0a\042\uff0a\043\uff0a\044\uff0a\045\uff0a\046\uff0a" +
    "\047\uff0a\050\uff0a\051\uff0a\052\uff0a\053\uff0a\054\uff0a\055" +
    "\uff0a\056\uff0a\057\uff0a\060\uff0a\061\uff0a\062\uff0a\063\uff0a" +
    "\064\uff0a\065\uff0a\066\uff0a\067\uff0a\070\uff0a\071\uff0a\072" +
    "\uff0a\073\uff0a\075\uff0a\077\uff0a\001\002\000\164\003\ufe9b" +
    "\004\ufe9b\005\ufe9b\006\ufe9b\007\ufe9b\010\ufe9b\011\ufe9b\012" +
    "\ufe9b\013\ufe9b\014\ufe9b\015\ufe9b\016\ufe9b\017\ufe9b\020\ufe9b" +
    "\021\ufe9b\022\ufe9b\023\ufe9b\024\ufe9b\025\ufe9b\026\ufe9b\027" +
    "\ufe9b\030\ufe9b\031\ufe9b\033\ufe9b\034\ufe9b\035\ufe9b\037\ufe9b" +
    "\040\ufe9b\041\ufe9b\042\ufe9b\043\ufe9b\044\ufe9b\045\ufe9b\046" +
    "\ufe9b\047\ufe9b\050\ufe9b\051\ufe9b\052\ufe9b\053\ufe9b\054\ufe9b" +
    "\055\ufe9b\056\ufe9b\057\ufe9b\060\ufe9b\061\ufe9b\062\ufe9b\063" +
    "\ufe9b\064\ufe9b\065\ufe9b\066\ufe9b\067\ufe9b\070\ufe9b\071\ufe9b" +
    "\072\ufe9b\073\ufe9b\075\ufe9b\077\ufe9b\001\002\000\164\003" +
    "\ufe92\004\ufe92\005\ufe92\006\ufe92\007\ufe92\010\ufe92\011\ufe92" +
    "\012\ufe92\013\ufe92\014\ufe92\015\ufe92\016\ufe92\017\ufe92\020" +
    "\ufe92\021\ufe92\022\ufe92\023\ufe92\024\ufe92\025\ufe92\026\ufe92" +
    "\027\ufe92\030\ufe92\031\ufe92\033\ufe92\034\ufe92\035\ufe92\037" +
    "\ufe92\040\ufe92\041\ufe92\042\ufe92\043\ufe92\044\ufe92\045\ufe92" +
    "\046\ufe92\047\ufe92\050\ufe92\051\ufe92\052\ufe92\053\ufe92\054" +
    "\ufe92\055\ufe92\056\ufe92\057\ufe92\060\ufe92\061\ufe92\062\ufe92" +
    "\063\ufe92\064\ufe92\065\ufe92\066\ufe92\067\ufe92\070\ufe92\071" +
    "\ufe92\072\ufe92\073\ufe92\075\ufe92\077\ufe92\001\002\000\164" +
    "\003\uff07\004\uff07\005\uff07\006\uff07\007\uff07\010\uff07\011" +
    "\uff07\012\uff07\013\uff07\014\uff07\015\uff07\016\uff07\017\uff07" +
    "\020\uff07\021\uff07\022\uff07\023\uff07\024\uff07\025\uff07\026" +
    "\uff07\027\uff07\030\uff07\031\uff07\033\uff07\034\uff07\035\uff07" +
    "\037\uff07\040\uff07\041\uff07\042\uff07\043\uff07\044\uff07\045" +
    "\uff07\046\uff07\047\uff07\050\uff07\051\uff07\052\uff07\053\uff07" +
    "\054\uff07\055\uff07\056\uff07\057\uff07\060\uff07\061\uff07\062" +
    "\uff07\063\uff07\064\uff07\065\uff07\066\uff07\067\uff07\070\uff07" +
    "\071\uff07\072\uff07\073\uff07\075\uff07\077\uff07\001\002\000" +
    "\164\003\ufe8f\004\ufe8f\005\ufe8f\006\ufe8f\007\ufe8f\010\ufe8f" +
    "\011\ufe8f\012\ufe8f\013\ufe8f\014\ufe8f\015\ufe8f\016\ufe8f\017" +
    "\ufe8f\020\ufe8f\021\ufe8f\022\ufe8f\023\ufe8f\024\ufe8f\025\ufe8f" +
    "\026\ufe8f\027\ufe8f\030\ufe8f\031\ufe8f\033\ufe8f\034\ufe8f\035" +
    "\ufe8f\037\ufe8f\040\ufe8f\041\ufe8f\042\ufe8f\043\ufe8f\044\ufe8f" +
    "\045\ufe8f\046\ufe8f\047\ufe8f\050\ufe8f\051\ufe8f\052\ufe8f\053" +
    "\ufe8f\054\ufe8f\055\ufe8f\056\ufe8f\057\ufe8f\060\ufe8f\061\ufe8f" +
    "\062\ufe8f\063\ufe8f\064\ufe8f\065\ufe8f\066\ufe8f\067\ufe8f\070" +
    "\ufe8f\071\ufe8f\072\ufe8f\073\ufe8f\075\ufe8f\077\ufe8f\001\002" +
    "\000\164\003\ufe85\004\ufe85\005\ufe85\006\ufe85\007\ufe85\010" +
    "\ufe85\011\ufe85\012\ufe85\013\ufe85\014\ufe85\015\ufe85\016\ufe85" +
    "\017\ufe85\020\ufe85\021\ufe85\022\ufe85\023\ufe85\024\ufe85\025" +
    "\ufe85\026\ufe85\027\ufe85\030\ufe85\031\ufe85\033\ufe85\034\ufe85" +
    "\035\ufe85\037\ufe85\040\ufe85\041\ufe85\042\ufe85\043\ufe85\044" +
    "\ufe85\045\ufe85\046\ufe85\047\ufe85\050\ufe85\051\ufe85\052\ufe85" +
    "\053\ufe85\054\ufe85\055\ufe85\056\ufe85\057\ufe85\060\ufe85\061" +
    "\ufe85\062\ufe85\063\ufe85\064\ufe85\065\ufe85\066\ufe85\067\ufe85" +
    "\070\ufe85\071\ufe85\072\ufe85\073\ufe85\075\ufe85\077\ufe85\001" +
    "\002\000\164\003\ufe99\004\ufe99\005\ufe99\006\ufe99\007\ufe99" +
    "\010\ufe99\011\ufe99\012\ufe99\013\ufe99\014\ufe99\015\ufe99\016" +
    "\ufe99\017\ufe99\020\ufe99\021\ufe99\022\ufe99\023\ufe99\024\ufe99" +
    "\025\ufe99\026\ufe99\027\ufe99\030\ufe99\031\ufe99\033\ufe99\034" +
    "\ufe99\035\ufe99\037\ufe99\040\ufe99\041\ufe99\042\ufe99\043\ufe99" +
    "\044\ufe99\045\ufe99\046\ufe99\047\ufe99\050\ufe99\051\ufe99\052" +
    "\ufe99\053\ufe99\054\ufe99\055\ufe99\056\ufe99\057\ufe99\060\ufe99" +
    "\061\ufe99\062\ufe99\063\ufe99\064\ufe99\065\ufe99\066\ufe99\067" +
    "\ufe99\070\ufe99\071\ufe99\072\ufe99\073\ufe99\075\ufe99\077\ufe99" +
    "\001\002\000\164\003\ufeab\004\ufeab\005\ufeab\006\ufeab\007" +
    "\ufeab\010\ufeab\011\ufeab\012\ufeab\013\ufeab\014\ufeab\015\ufeab" +
    "\016\ufeab\017\ufeab\020\ufeab\021\ufeab\022\ufeab\023\ufeab\024" +
    "\ufeab\025\ufeab\026\ufeab\027\ufeab\030\ufeab\031\ufeab\033\ufeab" +
    "\034\ufeab\035\ufeab\037\ufeab\040\ufeab\041\ufeab\042\ufeab\043" +
    "\ufeab\044\ufeab\045\ufeab\046\ufeab\047\ufeab\050\ufeab\051\ufeab" +
    "\052\ufeab\053\ufeab\054\ufeab\055\ufeab\056\ufeab\057\ufeab\060" +
    "\ufeab\061\ufeab\062\ufeab\063\ufeab\064\ufeab\065\ufeab\066\ufeab" +
    "\067\ufeab\070\ufeab\071\ufeab\072\ufeab\073\ufeab\075\ufeab\077" +
    "\ufeab\001\002\000\164\003\ufe88\004\ufe88\005\ufe88\006\ufe88" +
    "\007\ufe88\010\ufe88\011\ufe88\012\ufe88\013\ufe88\014\ufe88\015" +
    "\ufe88\016\ufe88\017\ufe88\020\ufe88\021\ufe88\022\ufe88\023\ufe88" +
    "\024\ufe88\025\ufe88\026\ufe88\027\ufe88\030\ufe88\031\ufe88\033" +
    "\ufe88\034\ufe88\035\ufe88\037\ufe88\040\ufe88\041\ufe88\042\ufe88" +
    "\043\ufe88\044\ufe88\045\ufe88\046\ufe88\047\ufe88\050\ufe88\051" +
    "\ufe88\052\ufe88\053\ufe88\054\ufe88\055\ufe88\056\ufe88\057\ufe88" +
    "\060\ufe88\061\ufe88\062\ufe88\063\ufe88\064\ufe88\065\ufe88\066" +
    "\ufe88\067\ufe88\070\ufe88\071\ufe88\072\ufe88\073\ufe88\075\ufe88" +
    "\077\ufe88\001\002\000\164\003\ufe8a\004\ufe8a\005\ufe8a\006" +
    "\ufe8a\007\ufe8a\010\ufe8a\011\ufe8a\012\ufe8a\013\ufe8a\014\ufe8a" +
    "\015\ufe8a\016\ufe8a\017\ufe8a\020\ufe8a\021\ufe8a\022\ufe8a\023" +
    "\ufe8a\024\ufe8a\025\ufe8a\026\ufe8a\027\ufe8a\030\ufe8a\031\ufe8a" +
    "\033\ufe8a\034\ufe8a\035\ufe8a\037\ufe8a\040\ufe8a\041\ufe8a\042" +
    "\ufe8a\043\ufe8a\044\ufe8a\045\ufe8a\046\ufe8a\047\ufe8a\050\ufe8a" +
    "\051\ufe8a\052\ufe8a\053\ufe8a\054\ufe8a\055\ufe8a\056\ufe8a\057" +
    "\ufe8a\060\ufe8a\061\ufe8a\062\ufe8a\063\ufe8a\064\ufe8a\065\ufe8a" +
    "\066\ufe8a\067\ufe8a\070\ufe8a\071\ufe8a\072\ufe8a\073\ufe8a\075" +
    "\ufe8a\077\ufe8a\001\002\000\164\003\ufe7c\004\ufe7c\005\ufe7c" +
    "\006\ufe7c\007\ufe7c\010\ufe7c\011\ufe7c\012\ufe7c\013\ufe7c\014" +
    "\ufe7c\015\ufe7c\016\ufe7c\017\ufe7c\020\ufe7c\021\ufe7c\022\ufe7c" +
    "\023\ufe7c\024\ufe7c\025\ufe7c\026\ufe7c\027\ufe7c\030\ufe7c\031" +
    "\ufe7c\033\ufe7c\034\ufe7c\035\ufe7c\037\ufe7c\040\ufe7c\041\ufe7c" +
    "\042\ufe7c\043\ufe7c\044\ufe7c\045\ufe7c\046\ufe7c\047\ufe7c\050" +
    "\ufe7c\051\ufe7c\052\ufe7c\053\ufe7c\054\ufe7c\055\ufe7c\056\ufe7c" +
    "\057\ufe7c\060\ufe7c\061\ufe7c\062\ufe7c\063\ufe7c\064\ufe7c\065" +
    "\ufe7c\066\ufe7c\067\ufe7c\070\ufe7c\071\ufe7c\072\ufe7c\073\ufe7c" +
    "\075\ufe7c\077\ufe7c\001\002\000\164\003\ufeaa\004\ufeaa\005" +
    "\ufeaa\006\ufeaa\007\ufeaa\010\ufeaa\011\ufeaa\012\ufeaa\013\ufeaa" +
    "\014\ufeaa\015\ufeaa\016\ufeaa\017\ufeaa\020\ufeaa\021\ufeaa\022" +
    "\ufeaa\023\ufeaa\024\ufeaa\025\ufeaa\026\ufeaa\027\ufeaa\030\ufeaa" +
    "\031\ufeaa\033\ufeaa\034\ufeaa\035\ufeaa\037\ufeaa\040\ufeaa\041" +
    "\ufeaa\042\ufeaa\043\ufeaa\044\ufeaa\045\ufeaa\046\ufeaa\047\ufeaa" +
    "\050\ufeaa\051\ufeaa\052\ufeaa\053\ufeaa\054\ufeaa\055\ufeaa\056" +
    "\ufeaa\057\ufeaa\060\ufeaa\061\ufeaa\062\ufeaa\063\ufeaa\064\ufeaa" +
    "\065\ufeaa\066\ufeaa\067\ufeaa\070\ufeaa\071\ufeaa\072\ufeaa\073" +
    "\ufeaa\075\ufeaa\077\ufeaa\001\002\000\164\003\ufea5\004\ufea5" +
    "\005\ufea5\006\ufea5\007\ufea5\010\ufea5\011\ufea5\012\ufea5\013" +
    "\ufea5\014\ufea5\015\ufea5\016\ufea5\017\ufea5\020\ufea5\021\ufea5" +
    "\022\ufea5\023\ufea5\024\ufea5\025\ufea5\026\ufea5\027\ufea5\030" +
    "\ufea5\031\ufea5\033\ufea5\034\ufea5\035\ufea5\037\ufea5\040\ufea5" +
    "\041\ufea5\042\ufea5\043\ufea5\044\ufea5\045\ufea5\046\ufea5\047" +
    "\ufea5\050\ufea5\051\ufea5\052\ufea5\053\ufea5\054\ufea5\055\ufea5" +
    "\056\ufea5\057\ufea5\060\ufea5\061\ufea5\062\ufea5\063\ufea5\064" +
    "\ufea5\065\ufea5\066\ufea5\067\ufea5\070\ufea5\071\ufea5\072\ufea5" +
    "\073\ufea5\075\ufea5\077\ufea5\001\002\000\164\003\ufe91\004" +
    "\ufe91\005\ufe91\006\ufe91\007\ufe91\010\ufe91\011\ufe91\012\ufe91" +
    "\013\ufe91\014\ufe91\015\ufe91\016\ufe91\017\ufe91\020\ufe91\021" +
    "\ufe91\022\ufe91\023\ufe91\024\ufe91\025\ufe91\026\ufe91\027\ufe91" +
    "\030\ufe91\031\ufe91\033\ufe91\034\ufe91\035\ufe91\037\ufe91\040" +
    "\ufe91\041\ufe91\042\ufe91\043\ufe91\044\ufe91\045\ufe91\046\ufe91" +
    "\047\ufe91\050\ufe91\051\ufe91\052\ufe91\053\ufe91\054\ufe91\055" +
    "\ufe91\056\ufe91\057\ufe91\060\ufe91\061\ufe91\062\ufe91\063\ufe91" +
    "\064\ufe91\065\ufe91\066\ufe91\067\ufe91\070\ufe91\071\ufe91\072" +
    "\ufe91\073\ufe91\075\ufe91\077\ufe91\001\002\000\164\003\ufea6" +
    "\004\ufea6\005\ufea6\006\ufea6\007\ufea6\010\ufea6\011\ufea6\012" +
    "\ufea6\013\ufea6\014\ufea6\015\ufea6\016\ufea6\017\ufea6\020\ufea6" +
    "\021\ufea6\022\ufea6\023\ufea6\024\ufea6\025\ufea6\026\ufea6\027" +
    "\ufea6\030\ufea6\031\ufea6\033\ufea6\034\ufea6\035\ufea6\037\ufea6" +
    "\040\ufea6\041\ufea6\042\ufea6\043\ufea6\044\ufea6\045\ufea6\046" +
    "\ufea6\047\ufea6\050\ufea6\051\ufea6\052\ufea6\053\ufea6\054\ufea6" +
    "\055\ufea6\056\ufea6\057\ufea6\060\ufea6\061\ufea6\062\ufea6\063" +
    "\ufea6\064\ufea6\065\ufea6\066\ufea6\067\ufea6\070\ufea6\071\ufea6" +
    "\072\ufea6\073\ufea6\075\ufea6\077\ufea6\001\002\000\164\003" +
    "\ufe9d\004\ufe9d\005\ufe9d\006\ufe9d\007\ufe9d\010\ufe9d\011\ufe9d" +
    "\012\ufe9d\013\ufe9d\014\ufe9d\015\ufe9d\016\ufe9d\017\ufe9d\020" +
    "\ufe9d\021\ufe9d\022\ufe9d\023\ufe9d\024\ufe9d\025\ufe9d\026\ufe9d" +
    "\027\ufe9d\030\ufe9d\031\ufe9d\033\ufe9d\034\ufe9d\035\ufe9d\037" +
    "\ufe9d\040\ufe9d\041\ufe9d\042\ufe9d\043\ufe9d\044\ufe9d\045\ufe9d" +
    "\046\ufe9d\047\ufe9d\050\ufe9d\051\ufe9d\052\ufe9d\053\ufe9d\054" +
    "\ufe9d\055\ufe9d\056\ufe9d\057\ufe9d\060\ufe9d\061\ufe9d\062\ufe9d" +
    "\063\ufe9d\064\ufe9d\065\ufe9d\066\ufe9d\067\ufe9d\070\ufe9d\071" +
    "\ufe9d\072\ufe9d\073\ufe9d\075\ufe9d\077\ufe9d\001\002\000\164" +
    "\003\ufe7b\004\ufe7b\005\ufe7b\006\ufe7b\007\ufe7b\010\ufe7b\011" +
    "\ufe7b\012\ufe7b\013\ufe7b\014\ufe7b\015\ufe7b\016\ufe7b\017\ufe7b" +
    "\020\ufe7b\021\ufe7b\022\ufe7b\023\ufe7b\024\ufe7b\025\ufe7b\026" +
    "\ufe7b\027\ufe7b\030\ufe7b\031\ufe7b\033\ufe7b\034\ufe7b\035\ufe7b" +
    "\037\ufe7b\040\ufe7b\041\ufe7b\042\ufe7b\043\ufe7b\044\ufe7b\045" +
    "\ufe7b\046\ufe7b\047\ufe7b\050\ufe7b\051\ufe7b\052\ufe7b\053\ufe7b" +
    "\054\ufe7b\055\ufe7b\056\ufe7b\057\ufe7b\060\ufe7b\061\ufe7b\062" +
    "\ufe7b\063\ufe7b\064\ufe7b\065\ufe7b\066\ufe7b\067\ufe7b\070\ufe7b" +
    "\071\ufe7b\072\ufe7b\073\ufe7b\075\ufe7b\077\ufe7b\001\002\000" +
    "\164\003\ufe9e\004\ufe9e\005\ufe9e\006\ufe9e\007\ufe9e\010\ufe9e" +
    "\011\ufe9e\012\ufe9e\013\ufe9e\014\ufe9e\015\ufe9e\016\ufe9e\017" +
    "\ufe9e\020\ufe9e\021\ufe9e\022\ufe9e\023\ufe9e\024\ufe9e\025\ufe9e" +
    "\026\ufe9e\027\ufe9e\030\ufe9e\031\ufe9e\033\ufe9e\034\ufe9e\035" +
    "\ufe9e\037\ufe9e\040\ufe9e\041\ufe9e\042\ufe9e\043\ufe9e\044\ufe9e" +
    "\045\ufe9e\046\ufe9e\047\ufe9e\050\ufe9e\051\ufe9e\052\ufe9e\053" +
    "\ufe9e\054\ufe9e\055\ufe9e\056\ufe9e\057\ufe9e\060\ufe9e\061\ufe9e" +
    "\062\ufe9e\063\ufe9e\064\ufe9e\065\ufe9e\066\ufe9e\067\ufe9e\070" +
    "\ufe9e\071\ufe9e\072\ufe9e\073\ufe9e\075\ufe9e\077\ufe9e\001\002" +
    "\000\164\003\ufea2\004\ufea2\005\ufea2\006\ufea2\007\ufea2\010" +
    "\ufea2\011\ufea2\012\ufea2\013\ufea2\014\ufea2\015\ufea2\016\ufea2" +
    "\017\ufea2\020\ufea2\021\ufea2\022\ufea2\023\ufea2\024\ufea2\025" +
    "\ufea2\026\ufea2\027\ufea2\030\ufea2\031\ufea2\033\ufea2\034\ufea2" +
    "\035\ufea2\037\ufea2\040\ufea2\041\ufea2\042\ufea2\043\ufea2\044" +
    "\ufea2\045\ufea2\046\ufea2\047\ufea2\050\ufea2\051\ufea2\052\ufea2" +
    "\053\ufea2\054\ufea2\055\ufea2\056\ufea2\057\ufea2\060\ufea2\061" +
    "\ufea2\062\ufea2\063\ufea2\064\ufea2\065\ufea2\066\ufea2\067\ufea2" +
    "\070\ufea2\071\ufea2\072\ufea2\073\ufea2\075\ufea2\077\ufea2\001" +
    "\002\000\164\003\ufe98\004\ufe98\005\ufe98\006\ufe98\007\ufe98" +
    "\010\ufe98\011\ufe98\012\ufe98\013\ufe98\014\ufe98\015\ufe98\016" +
    "\ufe98\017\ufe98\020\ufe98\021\ufe98\022\ufe98\023\ufe98\024\ufe98" +
    "\025\ufe98\026\ufe98\027\ufe98\030\ufe98\031\ufe98\033\ufe98\034" +
    "\ufe98\035\ufe98\037\ufe98\040\ufe98\041\ufe98\042\ufe98\043\ufe98" +
    "\044\ufe98\045\ufe98\046\ufe98\047\ufe98\050\ufe98\051\ufe98\052" +
    "\ufe98\053\ufe98\054\ufe98\055\ufe98\056\ufe98\057\ufe98\060\ufe98" +
    "\061\ufe98\062\ufe98\063\ufe98\064\ufe98\065\ufe98\066\ufe98\067" +
    "\ufe98\070\ufe98\071\ufe98\072\ufe98\073\ufe98\075\ufe98\077\ufe98" +
    "\001\002\000\164\003\ufe96\004\ufe96\005\ufe96\006\ufe96\007" +
    "\ufe96\010\ufe96\011\ufe96\012\ufe96\013\ufe96\014\ufe96\015\ufe96" +
    "\016\ufe96\017\ufe96\020\ufe96\021\ufe96\022\ufe96\023\ufe96\024" +
    "\ufe96\025\ufe96\026\ufe96\027\ufe96\030\ufe96\031\ufe96\033\ufe96" +
    "\034\ufe96\035\ufe96\037\ufe96\040\ufe96\041\ufe96\042\ufe96\043" +
    "\ufe96\044\ufe96\045\ufe96\046\ufe96\047\ufe96\050\ufe96\051\ufe96" +
    "\052\ufe96\053\ufe96\054\ufe96\055\ufe96\056\ufe96\057\ufe96\060" +
    "\ufe96\061\ufe96\062\ufe96\063\ufe96\064\ufe96\065\ufe96\066\ufe96" +
    "\067\ufe96\070\ufe96\071\ufe96\072\ufe96\073\ufe96\075\ufe96\077" +
    "\ufe96\001\002\000\164\003\ufe79\004\ufe79\005\ufe79\006\ufe79" +
    "\007\ufe79\010\ufe79\011\ufe79\012\ufe79\013\ufe79\014\ufe79\015" +
    "\ufe79\016\ufe79\017\ufe79\020\ufe79\021\ufe79\022\ufe79\023\ufe79" +
    "\024\ufe79\025\ufe79\026\ufe79\027\ufe79\030\ufe79\031\ufe79\033" +
    "\ufe79\034\ufe79\035\ufe79\037\ufe79\040\ufe79\041\ufe79\042\ufe79" +
    "\043\ufe79\044\ufe79\045\ufe79\046\ufe79\047\ufe79\050\ufe79\051" +
    "\ufe79\052\ufe79\053\ufe79\054\ufe79\055\ufe79\056\ufe79\057\ufe79" +
    "\060\ufe79\061\ufe79\062\ufe79\063\ufe79\064\ufe79\065\ufe79\066" +
    "\ufe79\067\ufe79\070\ufe79\071\ufe79\072\ufe79\073\ufe79\075\ufe79" +
    "\077\ufe79\001\002\000\164\003\ufe7a\004\ufe7a\005\ufe7a\006" +
    "\ufe7a\007\ufe7a\010\ufe7a\011\ufe7a\012\ufe7a\013\ufe7a\014\ufe7a" +
    "\015\ufe7a\016\ufe7a\017\ufe7a\020\ufe7a\021\ufe7a\022\ufe7a\023" +
    "\ufe7a\024\ufe7a\025\ufe7a\026\ufe7a\027\ufe7a\030\ufe7a\031\ufe7a" +
    "\033\ufe7a\034\ufe7a\035\ufe7a\037\ufe7a\040\ufe7a\041\ufe7a\042" +
    "\ufe7a\043\ufe7a\044\ufe7a\045\ufe7a\046\ufe7a\047\ufe7a\050\ufe7a" +
    "\051\ufe7a\052\ufe7a\053\ufe7a\054\ufe7a\055\ufe7a\056\ufe7a\057" +
    "\ufe7a\060\ufe7a\061\ufe7a\062\ufe7a\063\ufe7a\064\ufe7a\065\ufe7a" +
    "\066\ufe7a\067\ufe7a\070\ufe7a\071\ufe7a\072\ufe7a\073\ufe7a\075" +
    "\ufe7a\077\ufe7a\001\002\000\164\003\ufe9c\004\ufe9c\005\ufe9c" +
    "\006\ufe9c\007\ufe9c\010\ufe9c\011\ufe9c\012\ufe9c\013\ufe9c\014" +
    "\ufe9c\015\ufe9c\016\ufe9c\017\ufe9c\020\ufe9c\021\ufe9c\022\ufe9c" +
    "\023\ufe9c\024\ufe9c\025\ufe9c\026\ufe9c\027\ufe9c\030\ufe9c\031" +
    "\ufe9c\033\ufe9c\034\ufe9c\035\ufe9c\037\ufe9c\040\ufe9c\041\ufe9c" +
    "\042\ufe9c\043\ufe9c\044\ufe9c\045\ufe9c\046\ufe9c\047\ufe9c\050" +
    "\ufe9c\051\ufe9c\052\ufe9c\053\ufe9c\054\ufe9c\055\ufe9c\056\ufe9c" +
    "\057\ufe9c\060\ufe9c\061\ufe9c\062\ufe9c\063\ufe9c\064\ufe9c\065" +
    "\ufe9c\066\ufe9c\067\ufe9c\070\ufe9c\071\ufe9c\072\ufe9c\073\ufe9c" +
    "\075\ufe9c\077\ufe9c\001\002\000\164\003\ufe82\004\ufe82\005" +
    "\ufe82\006\ufe82\007\ufe82\010\ufe82\011\ufe82\012\ufe82\013\ufe82" +
    "\014\ufe82\015\ufe82\016\ufe82\017\ufe82\020\ufe82\021\ufe82\022" +
    "\ufe82\023\ufe82\024\ufe82\025\ufe82\026\ufe82\027\ufe82\030\ufe82" +
    "\031\ufe82\033\ufe82\034\ufe82\035\ufe82\037\ufe82\040\ufe82\041" +
    "\ufe82\042\ufe82\043\ufe82\044\ufe82\045\ufe82\046\ufe82\047\ufe82" +
    "\050\ufe82\051\ufe82\052\ufe82\053\ufe82\054\ufe82\055\ufe82\056" +
    "\ufe82\057\ufe82\060\ufe82\061\ufe82\062\ufe82\063\ufe82\064\ufe82" +
    "\065\ufe82\066\ufe82\067\ufe82\070\ufe82\071\ufe82\072\ufe82\073" +
    "\ufe82\075\ufe82\077\ufe82\001\002\000\164\003\ufe8c\004\ufe8c" +
    "\005\ufe8c\006\ufe8c\007\ufe8c\010\ufe8c\011\ufe8c\012\ufe8c\013" +
    "\ufe8c\014\ufe8c\015\ufe8c\016\ufe8c\017\ufe8c\020\ufe8c\021\ufe8c" +
    "\022\ufe8c\023\ufe8c\024\ufe8c\025\ufe8c\026\ufe8c\027\ufe8c\030" +
    "\ufe8c\031\ufe8c\033\ufe8c\034\ufe8c\035\ufe8c\037\ufe8c\040\ufe8c" +
    "\041\ufe8c\042\ufe8c\043\ufe8c\044\ufe8c\045\ufe8c\046\ufe8c\047" +
    "\ufe8c\050\ufe8c\051\ufe8c\052\ufe8c\053\ufe8c\054\ufe8c\055\ufe8c" +
    "\056\ufe8c\057\ufe8c\060\ufe8c\061\ufe8c\062\ufe8c\063\ufe8c\064" +
    "\ufe8c\065\ufe8c\066\ufe8c\067\ufe8c\070\ufe8c\071\ufe8c\072\ufe8c" +
    "\073\ufe8c\075\ufe8c\077\ufe8c\001\002\000\164\003\ufea0\004" +
    "\ufea0\005\ufea0\006\ufea0\007\ufea0\010\ufea0\011\ufea0\012\ufea0" +
    "\013\ufea0\014\ufea0\015\ufea0\016\ufea0\017\ufea0\020\ufea0\021" +
    "\ufea0\022\ufea0\023\ufea0\024\ufea0\025\ufea0\026\ufea0\027\ufea0" +
    "\030\ufea0\031\ufea0\033\ufea0\034\ufea0\035\ufea0\037\ufea0\040" +
    "\ufea0\041\ufea0\042\ufea0\043\ufea0\044\ufea0\045\ufea0\046\ufea0" +
    "\047\ufea0\050\ufea0\051\ufea0\052\ufea0\053\ufea0\054\ufea0\055" +
    "\ufea0\056\ufea0\057\ufea0\060\ufea0\061\ufea0\062\ufea0\063\ufea0" +
    "\064\ufea0\065\ufea0\066\ufea0\067\ufea0\070\ufea0\071\ufea0\072" +
    "\ufea0\073\ufea0\075\ufea0\077\ufea0\001\002\000\164\003\ufea3" +
    "\004\ufea3\005\ufea3\006\ufea3\007\ufea3\010\ufea3\011\ufea3\012" +
    "\ufea3\013\ufea3\014\ufea3\015\ufea3\016\ufea3\017\ufea3\020\ufea3" +
    "\021\ufea3\022\ufea3\023\ufea3\024\ufea3\025\ufea3\026\ufea3\027" +
    "\ufea3\030\ufea3\031\ufea3\033\ufea3\034\ufea3\035\ufea3\037\ufea3" +
    "\040\ufea3\041\ufea3\042\ufea3\043\ufea3\044\ufea3\045\ufea3\046" +
    "\ufea3\047\ufea3\050\ufea3\051\ufea3\052\ufea3\053\ufea3\054\ufea3" +
    "\055\ufea3\056\ufea3\057\ufea3\060\ufea3\061\ufea3\062\ufea3\063" +
    "\ufea3\064\ufea3\065\ufea3\066\ufea3\067\ufea3\070\ufea3\071\ufea3" +
    "\072\ufea3\073\ufea3\075\ufea3\077\ufea3\001\002\000\164\003" +
    "\ufea4\004\ufea4\005\ufea4\006\ufea4\007\ufea4\010\ufea4\011\ufea4" +
    "\012\ufea4\013\ufea4\014\ufea4\015\ufea4\016\ufea4\017\ufea4\020" +
    "\ufea4\021\ufea4\022\ufea4\023\ufea4\024\ufea4\025\ufea4\026\ufea4" +
    "\027\ufea4\030\ufea4\031\ufea4\033\ufea4\034\ufea4\035\ufea4\037" +
    "\ufea4\040\ufea4\041\ufea4\042\ufea4\043\ufea4\044\ufea4\045\ufea4" +
    "\046\ufea4\047\ufea4\050\ufea4\051\ufea4\052\ufea4\053\ufea4\054" +
    "\ufea4\055\ufea4\056\ufea4\057\ufea4\060\ufea4\061\ufea4\062\ufea4" +
    "\063\ufea4\064\ufea4\065\ufea4\066\ufea4\067\ufea4\070\ufea4\071" +
    "\ufea4\072\ufea4\073\ufea4\075\ufea4\077\ufea4\001\002\000\164" +
    "\003\ufe93\004\ufe93\005\ufe93\006\ufe93\007\ufe93\010\ufe93\011" +
    "\ufe93\012\ufe93\013\ufe93\014\ufe93\015\ufe93\016\ufe93\017\ufe93" +
    "\020\ufe93\021\ufe93\022\ufe93\023\ufe93\024\ufe93\025\ufe93\026" +
    "\ufe93\027\ufe93\030\ufe93\031\ufe93\033\ufe93\034\ufe93\035\ufe93" +
    "\037\ufe93\040\ufe93\041\ufe93\042\ufe93\043\ufe93\044\ufe93\045" +
    "\ufe93\046\ufe93\047\ufe93\050\ufe93\051\ufe93\052\ufe93\053\ufe93" +
    "\054\ufe93\055\ufe93\056\ufe93\057\ufe93\060\ufe93\061\ufe93\062" +
    "\ufe93\063\ufe93\064\ufe93\065\ufe93\066\ufe93\067\ufe93\070\ufe93" +
    "\071\ufe93\072\ufe93\073\ufe93\075\ufe93\077\ufe93\001\002\000" +
    "\164\003\ufe84\004\ufe84\005\ufe84\006\ufe84\007\ufe84\010\ufe84" +
    "\011\ufe84\012\ufe84\013\ufe84\014\ufe84\015\ufe84\016\ufe84\017" +
    "\ufe84\020\ufe84\021\ufe84\022\ufe84\023\ufe84\024\ufe84\025\ufe84" +
    "\026\ufe84\027\ufe84\030\ufe84\031\ufe84\033\ufe84\034\ufe84\035" +
    "\ufe84\037\ufe84\040\ufe84\041\ufe84\042\ufe84\043\ufe84\044\ufe84" +
    "\045\ufe84\046\ufe84\047\ufe84\050\ufe84\051\ufe84\052\ufe84\053" +
    "\ufe84\054\ufe84\055\ufe84\056\ufe84\057\ufe84\060\ufe84\061\ufe84" +
    "\062\ufe84\063\ufe84\064\ufe84\065\ufe84\066\ufe84\067\ufe84\070" +
    "\ufe84\071\ufe84\072\ufe84\073\ufe84\075\ufe84\077\ufe84\001\002" +
    "\000\164\003\ufe80\004\ufe80\005\ufe80\006\ufe80\007\ufe80\010" +
    "\ufe80\011\ufe80\012\ufe80\013\ufe80\014\ufe80\015\ufe80\016\ufe80" +
    "\017\ufe80\020\ufe80\021\ufe80\022\ufe80\023\ufe80\024\ufe80\025" +
    "\ufe80\026\ufe80\027\ufe80\030\ufe80\031\ufe80\033\ufe80\034\ufe80" +
    "\035\ufe80\037\ufe80\040\ufe80\041\ufe80\042\ufe80\043\ufe80\044" +
    "\ufe80\045\ufe80\046\ufe80\047\ufe80\050\ufe80\051\ufe80\052\ufe80" +
    "\053\ufe80\054\ufe80\055\ufe80\056\ufe80\057\ufe80\060\ufe80\061" +
    "\ufe80\062\ufe80\063\ufe80\064\ufe80\065\ufe80\066\ufe80\067\ufe80" +
    "\070\ufe80\071\ufe80\072\ufe80\073\ufe80\075\ufe80\077\ufe80\001" +
    "\002\000\064\003\ufee5\011\ufee5\016\ufee5\020\ufee5\021\ufee5" +
    "\022\ufee5\033\ufee5\034\ufee5\035\ufee5\036\ufee5\037\ufee5\047" +
    "\ufee5\051\ufee5\052\ufee5\053\ufee5\054\ufee5\055\ufee5\056\ufee5" +
    "\057\ufee5\060\ufee5\064\ufee5\065\ufee5\067\ufee5\074\ufee5\076" +
    "\ufee5\001\002\000\004\012\u016e\001\002\000\004\013\u016f" +
    "\001\002\000\006\010\ufee0\075\007\001\002\000\004\010" +
    "\uffa6\001\002\000\004\010\u0172\001\002\000\054\003\ufee0" +
    "\011\ufee0\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0\036" +
    "\ufee0\047\ufee0\051\ufee0\054\ufee0\055\ufee0\056\ufee0\057\ufee0" +
    "\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0\075\007\076" +
    "\ufee0\001\002\000\052\003\uff97\011\uff97\020\uff97\021\uff97" +
    "\022\uff97\034\uff97\035\uff97\036\uff97\047\uff97\051\uff97\054" +
    "\uff97\055\uff97\056\uff97\057\uff97\060\uff97\064\uff97\065\uff97" +
    "\067\uff97\074\uff97\076\uff97\001\002\000\052\003\u0188\011" +
    "\u017a\020\u0175\021\u0191\022\u018f\034\023\035\036\036\020" +
    "\047\u017f\051\u017c\054\u0193\055\u0179\056\u0192\057\u0176\060" +
    "\u0194\064\u0180\065\u0183\067\u018e\074\022\076\021\001\002" +
    "\000\004\005\u0299\001\002\000\004\012\u027f\001\002\000" +
    "\060\003\uff9c\011\uff9c\016\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\047\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\064\uff9c" +
    "\065\uff9c\067\uff9c\074\uff9c\076\uff9c\001\002\000\060\003" +
    "\uff94\011\uff94\016\uff94\020\uff94\021\uff94\022\uff94\034\uff94" +
    "\035\uff94\036\uff94\047\uff94\051\uff94\052\uff94\053\uff94\054" +
    "\uff94\055\uff94\056\uff94\057\uff94\060\uff94\064\uff94\065\uff94" +
    "\067\uff94\074\uff94\076\uff94\001\002\000\004\012\u0273\001" +
    "\002\000\006\002\uffa5\075\uffa5\001\002\000\060\003\uffa1" +
    "\011\uffa1\016\uffa1\020\uffa1\021\uffa1\022\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\047\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\064\uffa1\065\uffa1\067" +
    "\uffa1\074\uffa1\076\uffa1\001\002\000\004\012\uff21\001\002" +
    "\000\060\003\uff9f\011\uff9f\016\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\047\uff9f\051\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\064" +
    "\uff9f\065\uff9f\067\uff9f\074\uff9f\076\uff9f\001\002\000\060" +
    "\003\uffa3\011\uffa3\016\uffa3\020\uffa3\021\uffa3\022\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\064\uffa3\065" +
    "\uffa3\067\uffa3\074\uffa3\076\uffa3\001\002\000\004\012\u0220" +
    "\001\002\000\004\012\u021b\001\002\000\060\003\uffa2\011" +
    "\uffa2\016\uffa2\020\uffa2\021\uffa2\022\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\047\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\060\uffa2\064\uffa2\065\uffa2\067\uffa2" +
    "\074\uffa2\076\uffa2\001\002\000\060\003\uff92\011\uff92\016" +
    "\uff92\020\uff92\021\uff92\022\uff92\034\uff92\035\uff92\036\uff92" +
    "\047\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056" +
    "\uff92\057\uff92\060\uff92\064\uff92\065\uff92\067\uff92\074\uff92" +
    "\076\uff92\001\002\000\004\012\u0216\001\002\000\060\003" +
    "\uff93\011\uff93\016\uff93\020\uff93\021\uff93\022\uff93\034\uff93" +
    "\035\uff93\036\uff93\047\uff93\051\uff93\052\uff93\053\uff93\054" +
    "\uff93\055\uff93\056\uff93\057\uff93\060\uff93\064\uff93\065\uff93" +
    "\067\uff93\074\uff93\076\uff93\001\002\000\060\003\uff98\011" +
    "\uff98\016\uff98\020\uff98\021\uff98\022\uff98\034\uff98\035\uff98" +
    "\036\uff98\047\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055" +
    "\uff98\056\uff98\057\uff98\060\uff98\064\uff98\065\uff98\067\uff98" +
    "\074\uff98\076\uff98\001\002\000\060\003\uff99\011\uff99\016" +
    "\uff99\020\uff99\021\uff99\022\uff99\034\uff99\035\uff99\036\uff99" +
    "\047\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056" +
    "\uff99\057\uff99\060\uff99\064\uff99\065\uff99\067\uff99\074\uff99" +
    "\076\uff99\001\002\000\060\003\uff9b\011\uff9b\016\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\034\uff9b\035\uff9b\036\uff9b\047\uff9b" +
    "\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057" +
    "\uff9b\060\uff9b\064\uff9b\065\uff9b\067\uff9b\074\uff9b\076\uff9b" +
    "\001\002\000\060\003\uff96\011\uff96\016\uff96\020\uff96\021" +
    "\uff96\022\uff96\034\uff96\035\uff96\036\uff96\047\uff96\051\uff96" +
    "\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060" +
    "\uff96\064\uff96\065\uff96\067\uff96\074\uff96\076\uff96\001\002" +
    "\000\060\003\uff9a\011\uff9a\016\uff9a\020\uff9a\021\uff9a\022" +
    "\uff9a\034\uff9a\035\uff9a\036\uff9a\047\uff9a\051\uff9a\052\uff9a" +
    "\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\064" +
    "\uff9a\065\uff9a\067\uff9a\074\uff9a\076\uff9a\001\002\000\060" +
    "\003\uff95\011\uff95\016\uff95\020\uff95\021\uff95\022\uff95\034" +
    "\uff95\035\uff95\036\uff95\047\uff95\051\uff95\052\uff95\053\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\064\uff95\065" +
    "\uff95\067\uff95\074\uff95\076\uff95\001\002\000\004\043\u020f" +
    "\001\002\000\060\003\uff9e\011\uff9e\016\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\034\uff9e\035\uff9e\036\uff9e\047\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060" +
    "\uff9e\064\uff9e\065\uff9e\067\uff9e\074\uff9e\076\uff9e\001\002" +
    "\000\060\003\uff9d\011\uff9d\016\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\047\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\064" +
    "\uff9d\065\uff9d\067\uff9d\074\uff9d\076\uff9d\001\002\000\010" +
    "\014\uffb8\043\u0208\067\uffce\001\002\000\004\005\u01fd\001" +
    "\002\000\060\003\uffa0\011\uffa0\016\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\034\uffa0\035\uffa0\036\uffa0\047\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\064\uffa0\065\uffa0\067\uffa0\074\uffa0\076\uffa0\001\002\000" +
    "\004\005\u01f4\001\002\000\006\010\ufee0\075\007\001\002" +
    "\000\004\012\uff37\001\002\000\004\012\u0195\001\002\000" +
    "\004\024\u0196\001\002\000\156\003\ufead\004\ufead\005\ufead" +
    "\006\ufead\007\ufead\010\ufead\011\ufead\012\ufead\013\ufead\014" +
    "\ufead\015\ufead\016\ufead\017\ufead\020\ufead\021\ufead\022\ufead" +
    "\023\ufead\025\ufead\026\ufead\027\ufead\030\ufead\031\ufead\033" +
    "\ufead\034\ufead\035\ufead\037\ufead\040\ufead\041\ufead\042\ufead" +
    "\043\ufead\044\ufead\045\ufead\046\ufead\047\ufead\050\ufead\051" +
    "\ufead\052\ufead\053\ufead\054\ufead\055\ufead\056\ufead\057\ufead" +
    "\060\ufead\061\ufead\062\ufead\063\ufead\064\ufead\065\ufead\066" +
    "\ufead\067\ufead\070\ufead\071\ufead\072\ufead\073\ufead\001\002" +
    "\000\156\003\u014f\004\u0108\005\u0119\006\u011d\007\u0104\010" +
    "\u0107\011\u0106\012\u0120\013\u011f\014\u012d\015\u012b\016\375" +
    "\017\u0128\020\376\021\u0122\022\u0121\023\u0129\025\u0123\026" +
    "\u0114\027\u0112\030\u0118\031\u0125\033\u0124\034\u010c\035\u0110" +
    "\037\u012f\040\u0101\041\u0116\042\u0113\043\u0109\044\u012a\045" +
    "\u0102\046\u011b\047\u010d\050\u011a\051\u010a\052\u0103\053\u0117" +
    "\054\u012e\055\u0105\056\u012c\057\u0100\060\u0130\061\u014c\062" +
    "\u0133\063\u0149\064\u010e\065\u0111\066\u010f\067\u011c\070\u0126" +
    "\071\u010b\072\u0115\073\u011e\001\002\000\004\024\uff0f\001" +
    "\002\000\004\024\u019a\001\002\000\004\004\u019b\001\002" +
    "\000\012\025\uff0b\045\u019c\066\uff0b\067\uff0b\001\002\000" +
    "\010\025\uff0c\066\uff0c\067\uff0c\001\002\000\010\025\u01a1" +
    "\066\u019f\067\u01a2\001\002\000\004\013\ufeff\001\002\000" +
    "\004\013\uff01\001\002\000\004\013\u01a5\001\002\000\004" +
    "\067\u01a3\001\002\000\006\013\uff02\014\uffb8\001\002\000" +
    "\004\025\u01a4\001\002\000\004\013\uff00\001\002\000\004" +
    "\006\u01a6\001\002\000\062\003\uff0e\011\uff0e\016\uff0e\020" +
    "\uff0e\021\uff0e\022\uff0e\034\uff0e\035\uff0e\036\uff0e\047\uff0e" +
    "\051\uff0e\052\uff0e\053\uff0e\054\uff0e\055\uff0e\056\uff0e\057" +
    "\uff0e\060\uff0e\064\uff0e\065\uff0e\067\uff0e\074\uff0e\075\uff0e" +
    "\076\uff0e\001\002\000\062\003\ufee0\011\ufee0\016\ufee0\020" +
    "\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0\036\ufee0\047\ufee0" +
    "\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0\056\ufee0\057" +
    "\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0\075\007" +
    "\076\ufee0\001\002\000\060\003\uff0d\011\uff0d\016\uff0d\020" +
    "\uff0d\021\uff0d\022\uff0d\034\uff0d\035\uff0d\036\uff0d\047\uff0d" +
    "\051\uff0d\052\uff0d\053\uff0d\054\uff0d\055\uff0d\056\uff0d\057" +
    "\uff0d\060\uff0d\064\uff0d\065\uff0d\067\uff0d\074\uff0d\076\uff0d" +
    "\001\002\000\004\012\u01aa\001\002\000\014\003\u01ac\034" +
    "\u01ae\035\u01ab\036\u01ad\067\uff2e\001\002\000\004\067\uff31" +
    "\001\002\000\004\067\uff2d\001\002\000\004\067\uff30\001" +
    "\002\000\004\067\uff2f\001\002\000\004\067\u01b0\001\002" +
    "\000\004\043\uff36\001\002\000\004\043\u01b2\001\002\000" +
    "\010\027\u01b5\066\u01b3\067\u01b6\001\002\000\006\006\uff2c" +
    "\013\uff2c\001\002\000\004\006\u01b9\001\002\000\006\066" +
    "\u01b7\067\u01b8\001\002\000\006\006\uff2a\013\uff2a\001\002" +
    "\000\006\006\uff2b\013\uff2b\001\002\000\006\006\uff29\013" +
    "\uff29\001\002\000\026\012\uff35\020\uff35\021\uff35\022\uff35" +
    "\025\uff35\027\uff35\066\uff35\067\uff35\072\uff35\073\uff35\001" +
    "\002\000\026\012\110\020\077\021\111\022\102\025\112" +
    "\027\104\066\105\067\101\072\u01bc\073\u01bd\001\002\000" +
    "\004\006\u01ca\001\002\000\012\006\uff54\013\uff54\100\uff54" +
    "\101\uff54\001\002\000\012\006\uff53\013\uff53\100\uff53\101" +
    "\uff53\001\002\000\026\003\u01c1\026\130\027\132\030\127" +
    "\031\133\032\131\041\u01c3\042\u01c0\043\u01c4\044\u01c2\001" +
    "\002\000\022\012\110\020\077\021\111\022\102\025\112" +
    "\027\104\066\105\067\101\001\002\000\024\012\uff62\020" +
    "\uff62\021\uff62\022\uff62\025\uff62\027\uff62\043\u01c8\066\uff62" +
    "\067\uff62\001\002\000\022\012\uff5d\020\uff5d\021\uff5d\022" +
    "\uff5d\025\uff5d\027\uff5d\066\uff5d\067\uff5d\001\002\000\004" +
    "\043\u01c7\001\002\000\024\012\uff63\020\uff63\021\uff63\022" +
    "\uff63\025\uff63\027\uff63\043\u01c6\066\uff63\067\uff63\001\002" +
    "\000\004\043\u01c5\001\002\000\022\012\uff5f\020\uff5f\021" +
    "\uff5f\022\uff5f\025\uff5f\027\uff5f\066\uff5f\067\uff5f\001\002" +
    "\000\022\012\uff61\020\uff61\021\uff61\022\uff61\025\uff61\027" +
    "\uff61\066\uff61\067\uff61\001\002\000\022\012\uff5e\020\uff5e" +
    "\021\uff5e\022\uff5e\025\uff5e\027\uff5e\066\uff5e\067\uff5e\001" +
    "\002\000\022\012\uff60\020\uff60\021\uff60\022\uff60\025\uff60" +
    "\027\uff60\066\uff60\067\uff60\001\002\000\024\006\uff55\013" +
    "\uff55\026\130\027\132\030\127\031\133\032\131\100\uff55" +
    "\101\uff55\001\002\000\004\067\u01cb\001\002\000\004\043" +
    "\u01cc\001\002\000\004\067\u01cd\001\002\000\004\026\u01ce" +
    "\001\002\000\010\027\u01b5\066\u01b3\067\u01b6\001\002\000" +
    "\004\013\u01d0\001\002\000\006\010\uff34\075\uff34\001\002" +
    "\000\006\010\ufee0\075\007\001\002\000\004\010\u01d3\001" +
    "\002\000\054\003\ufee0\011\ufee0\020\ufee0\021\ufee0\022\ufee0" +
    "\034\ufee0\035\ufee0\036\ufee0\047\ufee0\051\ufee0\054\ufee0\055" +
    "\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0" +
    "\074\ufee0\075\007\076\ufee0\001\002\000\052\003\uff97\011" +
    "\uff97\020\uff97\021\uff97\022\uff97\034\uff97\035\uff97\036\uff97" +
    "\047\uff97\051\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060" +
    "\uff97\064\uff97\065\uff97\067\uff97\074\uff97\076\uff97\001\002" +
    "\000\052\003\u0188\011\u01d6\020\u0175\021\u0191\022\u018f\034" +
    "\023\035\036\036\020\047\u017f\051\u017c\054\u0193\055\u0179" +
    "\056\u0192\057\u0176\060\u0194\064\u0180\065\u0183\067\u018e\074" +
    "\022\076\021\001\002\000\062\003\uff33\011\uff33\016\uff33" +
    "\020\uff33\021\uff33\022\uff33\034\uff33\035\uff33\036\uff33\047" +
    "\uff33\051\uff33\052\uff33\053\uff33\054\uff33\055\uff33\056\uff33" +
    "\057\uff33\060\uff33\064\uff33\065\uff33\067\uff33\074\uff33\075" +
    "\uff33\076\uff33\001\002\000\062\003\ufee0\011\ufee0\016\ufee0" +
    "\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0\036\ufee0\047" +
    "\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0\056\ufee0" +
    "\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0\075" +
    "\007\076\ufee0\001\002\000\060\003\uff32\011\uff32\016\uff32" +
    "\020\uff32\021\uff32\022\uff32\034\uff32\035\uff32\036\uff32\047" +
    "\uff32\051\uff32\052\uff32\053\uff32\054\uff32\055\uff32\056\uff32" +
    "\057\uff32\060\uff32\064\uff32\065\uff32\067\uff32\074\uff32\076" +
    "\uff32\001\002\000\004\010\uff24\001\002\000\004\010\u01db" +
    "\001\002\000\054\003\ufee0\011\ufee0\020\ufee0\021\ufee0\022" +
    "\ufee0\034\ufee0\035\ufee0\036\ufee0\047\ufee0\051\ufee0\054\ufee0" +
    "\055\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067" +
    "\ufee0\074\ufee0\075\007\076\ufee0\001\002\000\052\003\uff97" +
    "\011\uff97\020\uff97\021\uff97\022\uff97\034\uff97\035\uff97\036" +
    "\uff97\047\uff97\051\uff97\054\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\064\uff97\065\uff97\067\uff97\074\uff97\076\uff97\001" +
    "\002\000\052\003\u0188\011\u01de\020\u0175\021\u0191\022\u018f" +
    "\034\023\035\036\036\020\047\u017f\051\u017c\054\u0193\055" +
    "\u0179\056\u0192\057\u0176\060\u0194\064\u0180\065\u0183\067\u018e" +
    "\074\022\076\021\001\002\000\006\055\ufee0\075\007\001" +
    "\002\000\004\055\u01e0\001\002\000\004\012\u01e1\001\002" +
    "\000\032\003\u01e5\012\110\020\077\021\111\022\102\025" +
    "\112\027\104\044\u01e4\066\105\067\101\072\u01bc\073\u01bd" +
    "\001\002\000\010\013\u01eb\100\u01ec\101\u01ed\001\002\000" +
    "\010\013\uff59\100\uff59\101\uff59\001\002\000\026\012\u01e7" +
    "\020\077\021\111\022\102\025\112\027\104\066\105\067" +
    "\101\072\u01bc\073\u01bd\001\002\000\010\013\uff56\100\uff56" +
    "\101\uff56\001\002\000\010\013\uff57\100\uff57\101\uff57\001" +
    "\002\000\026\012\110\020\077\021\111\022\102\025\112" +
    "\027\104\066\105\067\101\072\u01bc\073\u01bd\001\002\000" +
    "\004\013\u01ea\001\002\000\030\003\u01c1\013\126\026\130" +
    "\027\132\030\127\031\133\032\131\041\u01c3\042\u01c0\043" +
    "\u01c4\044\u01c2\001\002\000\010\013\uff58\100\uff58\101\uff58" +
    "\001\002\000\004\006\u01f1\001\002\000\032\003\u01e5\012" +
    "\110\020\077\021\111\022\102\025\112\027\104\044\u01e4" +
    "\066\105\067\101\072\u01bc\073\u01bd\001\002\000\032\003" +
    "\uff5b\012\uff5b\020\uff5b\021\uff5b\022\uff5b\025\uff5b\027\uff5b" +
    "\044\uff5b\066\uff5b\067\uff5b\072\uff5b\073\uff5b\001\002\000" +
    "\032\003\u01e5\012\110\020\077\021\111\022\102\025\112" +
    "\027\104\044\u01e4\066\105\067\101\072\u01bc\073\u01bd\001" +
    "\002\000\010\013\uff5a\100\u01ec\101\uff5a\001\002\000\010" +
    "\013\uff5c\100\uff5c\101\uff5c\001\002\000\062\003\uff23\011" +
    "\uff23\016\uff23\020\uff23\021\uff23\022\uff23\034\uff23\035\uff23" +
    "\036\uff23\047\uff23\051\uff23\052\uff23\053\uff23\054\uff23\055" +
    "\uff23\056\uff23\057\uff23\060\uff23\064\uff23\065\uff23\067\uff23" +
    "\074\uff23\075\uff23\076\uff23\001\002\000\062\003\ufee0\011" +
    "\ufee0\016\ufee0\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0" +
    "\036\ufee0\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055" +
    "\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0" +
    "\074\ufee0\075\007\076\ufee0\001\002\000\060\003\uff22\011" +
    "\uff22\016\uff22\020\uff22\021\uff22\022\uff22\034\uff22\035\uff22" +
    "\036\uff22\047\uff22\051\uff22\052\uff22\053\uff22\054\uff22\055" +
    "\uff22\056\uff22\057\uff22\060\uff22\064\uff22\065\uff22\067\uff22" +
    "\074\uff22\076\uff22\001\002\000\004\067\u01f5\001\002\000" +
    "\004\012\u01f6\001\002\000\026\003\uff8b\012\uff8b\013\uff8b" +
    "\020\uff8b\021\uff8b\022\uff8b\025\uff8b\027\uff8b\066\uff8b\067" +
    "\uff8b\001\002\000\026\003\072\012\uff71\013\uff81\020\uff71" +
    "\021\uff71\022\uff71\025\uff71\027\uff71\066\uff71\067\uff71\001" +
    "\002\000\004\013\u01f9\001\002\000\004\006\u01fa\001\002" +
    "\000\062\003\uff8a\011\uff8a\016\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\047\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\064" +
    "\uff8a\065\uff8a\067\uff8a\074\uff8a\075\uff8a\076\uff8a\001\002" +
    "\000\062\003\ufee0\011\ufee0\016\ufee0\020\ufee0\021\ufee0\022" +
    "\ufee0\034\ufee0\035\ufee0\036\ufee0\047\ufee0\051\ufee0\052\ufee0" +
    "\053\ufee0\054\ufee0\055\ufee0\056\ufee0\057\ufee0\060\ufee0\064" +
    "\ufee0\065\ufee0\067\ufee0\074\ufee0\075\007\076\ufee0\001\002" +
    "\000\060\003\uff89\011\uff89\016\uff89\020\uff89\021\uff89\022" +
    "\uff89\034\uff89\035\uff89\036\uff89\047\uff89\051\uff89\052\uff89" +
    "\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\064" +
    "\uff89\065\uff89\067\uff89\074\uff89\076\uff89\001\002\000\004" +
    "\067\u01fe\001\002\000\006\005\u01ff\067\335\001\002\000" +
    "\004\067\u0200\001\002\000\004\012\u0201\001\002\000\026" +
    "\003\uff85\012\uff85\013\uff85\020\uff85\021\uff85\022\uff85\025" +
    "\uff85\027\uff85\066\uff85\067\uff85\001\002\000\026\003\072" +
    "\012\uff71\013\uff81\020\uff71\021\uff71\022\uff71\025\uff71\027" +
    "\uff71\066\uff71\067\uff71\001\002\000\004\013\u0204\001\002" +
    "\000\004\006\u0205\001\002\000\062\003\uff84\011\uff84\016" +
    "\uff84\020\uff84\021\uff84\022\uff84\034\uff84\035\uff84\036\uff84" +
    "\047\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056" +
    "\uff84\057\uff84\060\uff84\064\uff84\065\uff84\067\uff84\074\uff84" +
    "\075\uff84\076\uff84\001\002\000\062\003\ufee0\011\ufee0\016" +
    "\ufee0\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0\036\ufee0" +
    "\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0\056" +
    "\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0" +
    "\075\007\076\ufee0\001\002\000\060\003\uff83\011\uff83\016" +
    "\uff83\020\uff83\021\uff83\022\uff83\034\uff83\035\uff83\036\uff83" +
    "\047\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056" +
    "\uff83\057\uff83\060\uff83\064\uff83\065\uff83\067\uff83\074\uff83" +
    "\076\uff83\001\002\000\026\003\310\012\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\025\uffe5\027\uffe5\065\u0209\066\uffe5\067\uffe5" +
    "\001\002\000\004\012\u020a\001\002\000\004\013\u020b\001" +
    "\002\000\004\006\u020c\001\002\000\062\003\ufef3\011\ufef3" +
    "\016\ufef3\020\ufef3\021\ufef3\022\ufef3\034\ufef3\035\ufef3\036" +
    "\ufef3\047\ufef3\051\ufef3\052\ufef3\053\ufef3\054\ufef3\055\ufef3" +
    "\056\ufef3\057\ufef3\060\ufef3\064\ufef3\065\ufef3\067\ufef3\074" +
    "\ufef3\075\ufef3\076\ufef3\001\002\000\062\003\ufee0\011\ufee0" +
    "\016\ufee0\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0\036" +
    "\ufee0\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0" +
    "\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074" +
    "\ufee0\075\007\076\ufee0\001\002\000\060\003\ufef2\011\ufef2" +
    "\016\ufef2\020\ufef2\021\ufef2\022\ufef2\034\ufef2\035\ufef2\036" +
    "\ufef2\047\ufef2\051\ufef2\052\ufef2\053\ufef2\054\ufef2\055\ufef2" +
    "\056\ufef2\057\ufef2\060\ufef2\064\ufef2\065\ufef2\067\ufef2\074" +
    "\ufef2\076\ufef2\001\002\000\026\003\324\012\057\020\045" +
    "\021\060\022\047\025\061\027\052\065\u0210\066\055\067" +
    "\046\001\002\000\004\012\u0211\001\002\000\004\013\u0212" +
    "\001\002\000\004\006\u0213\001\002\000\062\003\ufef1\011" +
    "\ufef1\016\ufef1\020\ufef1\021\ufef1\022\ufef1\034\ufef1\035\ufef1" +
    "\036\ufef1\047\ufef1\051\ufef1\052\ufef1\053\ufef1\054\ufef1\055" +
    "\ufef1\056\ufef1\057\ufef1\060\ufef1\064\ufef1\065\ufef1\067\ufef1" +
    "\074\ufef1\075\ufef1\076\ufef1\001\002\000\062\003\ufee0\011" +
    "\ufee0\016\ufee0\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0" +
    "\036\ufee0\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055" +
    "\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0" +
    "\074\ufee0\075\007\076\ufee0\001\002\000\060\003\ufef0\011" +
    "\ufef0\016\ufef0\020\ufef0\021\ufef0\022\ufef0\034\ufef0\035\ufef0" +
    "\036\ufef0\047\ufef0\051\ufef0\052\ufef0\053\ufef0\054\ufef0\055" +
    "\ufef0\056\ufef0\057\ufef0\060\ufef0\064\ufef0\065\ufef0\067\ufef0" +
    "\074\ufef0\076\ufef0\001\002\000\004\013\u0217\001\002\000" +
    "\004\006\u0218\001\002\000\062\003\ufeef\011\ufeef\016\ufeef" +
    "\020\ufeef\021\ufeef\022\ufeef\034\ufeef\035\ufeef\036\ufeef\047" +
    "\ufeef\051\ufeef\052\ufeef\053\ufeef\054\ufeef\055\ufeef\056\ufeef" +
    "\057\ufeef\060\ufeef\064\ufeef\065\ufeef\067\ufeef\074\ufeef\075" +
    "\ufeef\076\ufeef\001\002\000\062\003\ufee0\011\ufee0\016\ufee0" +
    "\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0\036\ufee0\047" +
    "\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0\056\ufee0" +
    "\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0\075" +
    "\007\076\ufee0\001\002\000\060\003\ufeee\011\ufeee\016\ufeee" +
    "\020\ufeee\021\ufeee\022\ufeee\034\ufeee\035\ufeee\036\ufeee\047" +
    "\ufeee\051\ufeee\052\ufeee\053\ufeee\054\ufeee\055\ufeee\056\ufeee" +
    "\057\ufeee\060\ufeee\064\ufeee\065\ufeee\067\ufeee\074\ufeee\076" +
    "\ufeee\001\002\000\004\013\u021c\001\002\000\004\006\u021d" +
    "\001\002\000\062\003\ufef5\011\ufef5\016\ufef5\020\ufef5\021" +
    "\ufef5\022\ufef5\034\ufef5\035\ufef5\036\ufef5\047\ufef5\051\ufef5" +
    "\052\ufef5\053\ufef5\054\ufef5\055\ufef5\056\ufef5\057\ufef5\060" +
    "\ufef5\064\ufef5\065\ufef5\067\ufef5\074\ufef5\075\ufef5\076\ufef5" +
    "\001\002\000\062\003\ufee0\011\ufee0\016\ufee0\020\ufee0\021" +
    "\ufee0\022\ufee0\034\ufee0\035\ufee0\036\ufee0\047\ufee0\051\ufee0" +
    "\052\ufee0\053\ufee0\054\ufee0\055\ufee0\056\ufee0\057\ufee0\060" +
    "\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0\075\007\076\ufee0" +
    "\001\002\000\060\003\ufef4\011\ufef4\016\ufef4\020\ufef4\021" +
    "\ufef4\022\ufef4\034\ufef4\035\ufef4\036\ufef4\047\ufef4\051\ufef4" +
    "\052\ufef4\053\ufef4\054\ufef4\055\ufef4\056\ufef4\057\ufef4\060" +
    "\ufef4\064\ufef4\065\ufef4\067\ufef4\074\ufef4\076\ufef4\001\002" +
    "\000\032\003\uff6f\012\uff6f\020\uff6f\021\uff6f\022\uff6f\025" +
    "\uff6f\027\uff6f\044\uff6f\066\uff6f\067\uff6f\072\uff6f\073\uff6f" +
    "\001\002\000\032\003\u01e5\012\110\020\077\021\111\022" +
    "\102\025\112\027\104\044\u01e4\066\105\067\101\072\u01bc" +
    "\073\u01bd\001\002\000\010\013\uff6e\100\u01ec\101\u01ed\001" +
    "\002\000\004\013\u0224\001\002\000\006\010\ufee0\075\007" +
    "\001\002\000\004\010\u0226\001\002\000\054\003\ufee0\011" +
    "\ufee0\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0\036\ufee0" +
    "\047\ufee0\051\ufee0\054\ufee0\055\ufee0\056\ufee0\057\ufee0\060" +
    "\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0\075\007\076\ufee0" +
    "\001\002\000\052\003\uff97\011\uff97\020\uff97\021\uff97\022" +
    "\uff97\034\uff97\035\uff97\036\uff97\047\uff97\051\uff97\054\uff97" +
    "\055\uff97\056\uff97\057\uff97\060\uff97\064\uff97\065\uff97\067" +
    "\uff97\074\uff97\076\uff97\001\002\000\052\003\u0188\011\u0229" +
    "\020\u0175\021\u0191\022\u018f\034\023\035\036\036\020\047" +
    "\u017f\051\u017c\054\u0193\055\u0179\056\u0192\057\u0176\060\u0194" +
    "\064\u0180\065\u0183\067\u018e\074\022\076\021\001\002\000" +
    "\064\003\uff6d\011\uff6d\016\uff6d\020\uff6d\021\uff6d\022\uff6d" +
    "\034\uff6d\035\uff6d\036\uff6d\047\uff6d\050\uff6d\051\uff6d\052" +
    "\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d" +
    "\064\uff6d\065\uff6d\067\uff6d\074\uff6d\075\uff6d\076\uff6d\001" +
    "\002\000\064\003\ufee0\011\ufee0\016\ufee0\020\ufee0\021\ufee0" +
    "\022\ufee0\034\ufee0\035\ufee0\036\ufee0\047\ufee0\050\ufee0\051" +
    "\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0\056\ufee0\057\ufee0" +
    "\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0\075\007\076" +
    "\ufee0\001\002\000\062\003\uff64\011\uff64\016\uff64\020\uff64" +
    "\021\uff64\022\uff64\034\uff64\035\uff64\036\uff64\047\uff64\050" +
    "\u022d\051\uff64\052\uff64\053\uff64\054\uff64\055\uff64\056\uff64" +
    "\057\uff64\060\uff64\064\uff64\065\uff64\067\uff64\074\uff64\076" +
    "\uff64\001\002\000\060\003\uff6c\011\uff6c\016\uff6c\020\uff6c" +
    "\021\uff6c\022\uff6c\034\uff6c\035\uff6c\036\uff6c\047\uff6c\051" +
    "\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c" +
    "\060\uff6c\064\uff6c\065\uff6c\067\uff6c\074\uff6c\076\uff6c\001" +
    "\002\000\010\010\ufee0\047\u022e\075\007\001\002\000\004" +
    "\012\u0237\001\002\000\004\010\uff67\001\002\000\004\010" +
    "\u0231\001\002\000\054\003\ufee0\011\ufee0\020\ufee0\021\ufee0" +
    "\022\ufee0\034\ufee0\035\ufee0\036\ufee0\047\ufee0\051\ufee0\054" +
    "\ufee0\055\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0" +
    "\067\ufee0\074\ufee0\075\007\076\ufee0\001\002\000\052\003" +
    "\uff97\011\uff97\020\uff97\021\uff97\022\uff97\034\uff97\035\uff97" +
    "\036\uff97\047\uff97\051\uff97\054\uff97\055\uff97\056\uff97\057" +
    "\uff97\060\uff97\064\uff97\065\uff97\067\uff97\074\uff97\076\uff97" +
    "\001\002\000\052\003\u0188\011\u0234\020\u0175\021\u0191\022" +
    "\u018f\034\023\035\036\036\020\047\u017f\051\u017c\054\u0193" +
    "\055\u0179\056\u0192\057\u0176\060\u0194\064\u0180\065\u0183\067" +
    "\u018e\074\022\076\021\001\002\000\062\003\uff66\011\uff66" +
    "\016\uff66\020\uff66\021\uff66\022\uff66\034\uff66\035\uff66\036" +
    "\uff66\047\uff66\051\uff66\052\uff66\053\uff66\054\uff66\055\uff66" +
    "\056\uff66\057\uff66\060\uff66\064\uff66\065\uff66\067\uff66\074" +
    "\uff66\075\uff66\076\uff66\001\002\000\062\003\ufee0\011\ufee0" +
    "\016\ufee0\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0\036" +
    "\ufee0\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0" +
    "\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074" +
    "\ufee0\075\007\076\ufee0\001\002\000\060\003\uff65\011\uff65" +
    "\016\uff65\020\uff65\021\uff65\022\uff65\034\uff65\035\uff65\036" +
    "\uff65\047\uff65\051\uff65\052\uff65\053\uff65\054\uff65\055\uff65" +
    "\056\uff65\057\uff65\060\uff65\064\uff65\065\uff65\067\uff65\074" +
    "\uff65\076\uff65\001\002\000\032\003\uff6b\012\uff6b\020\uff6b" +
    "\021\uff6b\022\uff6b\025\uff6b\027\uff6b\044\uff6b\066\uff6b\067" +
    "\uff6b\072\uff6b\073\uff6b\001\002\000\032\003\u01e5\012\110" +
    "\020\077\021\111\022\102\025\112\027\104\044\u01e4\066" +
    "\105\067\101\072\u01bc\073\u01bd\001\002\000\010\013\uff6a" +
    "\100\u01ec\101\u01ed\001\002\000\004\013\u023b\001\002\000" +
    "\006\010\ufee0\075\007\001\002\000\004\010\u023d\001\002" +
    "\000\054\003\ufee0\011\ufee0\020\ufee0\021\ufee0\022\ufee0\034" +
    "\ufee0\035\ufee0\036\ufee0\047\ufee0\051\ufee0\054\ufee0\055\ufee0" +
    "\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074" +
    "\ufee0\075\007\076\ufee0\001\002\000\052\003\uff97\011\uff97" +
    "\020\uff97\021\uff97\022\uff97\034\uff97\035\uff97\036\uff97\047" +
    "\uff97\051\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97" +
    "\064\uff97\065\uff97\067\uff97\074\uff97\076\uff97\001\002\000" +
    "\052\003\u0188\011\u0240\020\u0175\021\u0191\022\u018f\034\023" +
    "\035\036\036\020\047\u017f\051\u017c\054\u0193\055\u0179\056" +
    "\u0192\057\u0176\060\u0194\064\u0180\065\u0183\067\u018e\074\022" +
    "\076\021\001\002\000\064\003\uff69\011\uff69\016\uff69\020" +
    "\uff69\021\uff69\022\uff69\034\uff69\035\uff69\036\uff69\047\uff69" +
    "\050\uff69\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\056" +
    "\uff69\057\uff69\060\uff69\064\uff69\065\uff69\067\uff69\074\uff69" +
    "\075\uff69\076\uff69\001\002\000\064\003\ufee0\011\ufee0\016" +
    "\ufee0\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0\036\ufee0" +
    "\047\ufee0\050\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055" +
    "\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0" +
    "\074\ufee0\075\007\076\ufee0\001\002\000\062\003\uff64\011" +
    "\uff64\016\uff64\020\uff64\021\uff64\022\uff64\034\uff64\035\uff64" +
    "\036\uff64\047\uff64\050\u022d\051\uff64\052\uff64\053\uff64\054" +
    "\uff64\055\uff64\056\uff64\057\uff64\060\uff64\064\uff64\065\uff64" +
    "\067\uff64\074\uff64\076\uff64\001\002\000\060\003\uff68\011" +
    "\uff68\016\uff68\020\uff68\021\uff68\022\uff68\034\uff68\035\uff68" +
    "\036\uff68\047\uff68\051\uff68\052\uff68\053\uff68\054\uff68\055" +
    "\uff68\056\uff68\057\uff68\060\uff68\064\uff68\065\uff68\067\uff68" +
    "\074\uff68\076\uff68\001\002\000\004\012\u0245\001\002\000" +
    "\010\025\u0247\066\u0246\067\u024a\001\002\000\004\013\uff05" +
    "\001\002\000\004\067\u026f\001\002\000\004\013\uff03\001" +
    "\002\000\004\013\uff20\001\002\000\006\013\uff06\014\uffb6" +
    "\001\002\000\004\013\u024c\001\002\000\006\010\ufee0\075" +
    "\007\001\002\000\004\010\u024e\001\002\000\012\011\ufee0" +
    "\052\ufee0\053\ufee0\075\007\001\002\000\010\011\uff18\052" +
    "\u0252\053\u0251\001\002\000\004\011\u026c\001\002\000\004" +
    "\007\u0267\001\002\000\014\003\u0256\025\u0255\027\u0257\066" +
    "\u0254\067\u0258\001\002\000\004\007\u025d\001\002\000\004" +
    "\007\uff15\001\002\000\004\067\u025b\001\002\000\004\007" +
    "\uff10\001\002\000\006\066\u0259\067\u025a\001\002\000\004" +
    "\007\uff13\001\002\000\004\007\uff11\001\002\000\004\007" +
    "\uff12\001\002\000\004\025\u025c\001\002\000\004\007\uff14" +
    "\001\002\000\004\075\uff1d\001\002\000\004\075\u0127\001" +
    "\002\000\062\003\uff97\011\uff97\016\uff97\020\uff97\021\uff97" +
    "\022\uff97\034\uff97\035\uff97\036\uff97\047\uff97\051\uff97\052" +
    "\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97" +
    "\064\uff97\065\uff97\067\uff97\074\uff97\075\u0131\076\uff97\001" +
    "\002\000\060\003\u0188\011\uff16\016\u0261\020\u0175\021\u0191" +
    "\022\u018f\034\023\035\036\036\020\047\u017f\051\u017c\052" +
    "\uff16\053\uff16\054\u0193\055\u0179\056\u0192\057\u0176\060\u0194" +
    "\064\u0180\065\u0183\067\u018e\074\022\076\021\001\002\000" +
    "\004\006\u0265\001\002\000\010\011\uff1c\052\uff1c\053\uff1c" +
    "\001\002\000\010\011\uff18\052\u0252\053\u0251\001\002\000" +
    "\004\011\uff1b\001\002\000\012\011\ufee0\052\ufee0\053\ufee0" +
    "\075\007\001\002\000\010\011\uff17\052\uff17\053\uff17\001" +
    "\002\000\004\075\uff1a\001\002\000\004\075\u0127\001\002" +
    "\000\056\003\uff97\011\uff97\016\uff97\020\uff97\021\uff97\022" +
    "\uff97\034\uff97\035\uff97\036\uff97\047\uff97\051\uff97\054\uff97" +
    "\055\uff97\056\uff97\057\uff97\060\uff97\064\uff97\065\uff97\067" +
    "\uff97\074\uff97\075\u0131\076\uff97\001\002\000\054\003\u0188" +
    "\011\uff16\016\u0261\020\u0175\021\u0191\022\u018f\034\023\035" +
    "\036\036\020\047\u017f\051\u017c\054\u0193\055\u0179\056\u0192" +
    "\057\u0176\060\u0194\064\u0180\065\u0183\067\u018e\074\022\076" +
    "\021\001\002\000\004\011\uff19\001\002\000\062\003\uff1f" +
    "\011\uff1f\016\uff1f\020\uff1f\021\uff1f\022\uff1f\034\uff1f\035" +
    "\uff1f\036\uff1f\047\uff1f\051\uff1f\052\uff1f\053\uff1f\054\uff1f" +
    "\055\uff1f\056\uff1f\057\uff1f\060\uff1f\064\uff1f\065\uff1f\067" +
    "\uff1f\074\uff1f\075\uff1f\076\uff1f\001\002\000\062\003\ufee0" +
    "\011\ufee0\016\ufee0\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035" +
    "\ufee0\036\ufee0\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0" +
    "\055\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067" +
    "\ufee0\074\ufee0\075\007\076\ufee0\001\002\000\060\003\uff1e" +
    "\011\uff1e\016\uff1e\020\uff1e\021\uff1e\022\uff1e\034\uff1e\035" +
    "\uff1e\036\uff1e\047\uff1e\051\uff1e\052\uff1e\053\uff1e\054\uff1e" +
    "\055\uff1e\056\uff1e\057\uff1e\060\uff1e\064\uff1e\065\uff1e\067" +
    "\uff1e\074\uff1e\076\uff1e\001\002\000\004\025\u0270\001\002" +
    "\000\004\013\uff04\001\002\000\006\002\ufee0\075\007\001" +
    "\002\000\004\002\uffa4\001\002\000\032\003\uff28\012\uff28" +
    "\020\uff28\021\uff28\022\uff28\025\uff28\027\uff28\044\uff28\066" +
    "\uff28\067\uff28\072\uff28\073\uff28\001\002\000\032\003\u01e5" +
    "\012\110\020\077\021\111\022\102\025\112\027\104\044" +
    "\u01e4\066\105\067\101\072\u01bc\073\u01bd\001\002\000\010" +
    "\013\uff27\100\u01ec\101\u01ed\001\002\000\004\013\u0277\001" +
    "\002\000\006\010\ufee0\075\007\001\002\000\004\010\u0279" +
    "\001\002\000\054\003\ufee0\011\ufee0\020\ufee0\021\ufee0\022" +
    "\ufee0\034\ufee0\035\ufee0\036\ufee0\047\ufee0\051\ufee0\054\ufee0" +
    "\055\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067" +
    "\ufee0\074\ufee0\075\007\076\ufee0\001\002\000\052\003\uff97" +
    "\011\uff97\020\uff97\021\uff97\022\uff97\034\uff97\035\uff97\036" +
    "\uff97\047\uff97\051\uff97\054\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\064\uff97\065\uff97\067\uff97\074\uff97\076\uff97\001" +
    "\002\000\052\003\u0188\011\u027c\020\u0175\021\u0191\022\u018f" +
    "\034\023\035\036\036\020\047\u017f\051\u017c\054\u0193\055" +
    "\u0179\056\u0192\057\u0176\060\u0194\064\u0180\065\u0183\067\u018e" +
    "\074\022\076\021\001\002\000\062\003\uff26\011\uff26\016" +
    "\uff26\020\uff26\021\uff26\022\uff26\034\uff26\035\uff26\036\uff26" +
    "\047\uff26\051\uff26\052\uff26\053\uff26\054\uff26\055\uff26\056" +
    "\uff26\057\uff26\060\uff26\064\uff26\065\uff26\067\uff26\074\uff26" +
    "\075\uff26\076\uff26\001\002\000\062\003\ufee0\011\ufee0\016" +
    "\ufee0\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0\036\ufee0" +
    "\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0\056" +
    "\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0\074\ufee0" +
    "\075\007\076\ufee0\001\002\000\060\003\uff25\011\uff25\016" +
    "\uff25\020\uff25\021\uff25\022\uff25\034\uff25\035\uff25\036\uff25" +
    "\047\uff25\051\uff25\052\uff25\053\uff25\054\uff25\055\uff25\056" +
    "\uff25\057\uff25\060\uff25\064\uff25\065\uff25\067\uff25\074\uff25" +
    "\076\uff25\001\002\000\022\003\ufefe\020\ufefe\021\ufefe\022" +
    "\ufefe\024\ufefe\045\ufefe\066\ufefe\067\ufefe\001\002\000\022" +
    "\003\u0288\020\045\021\060\022\047\024\u0285\045\u0289\066" +
    "\u0287\067\u0281\001\002\000\010\004\ufeed\013\ufeed\014\uffb8" +
    "\001\002\000\006\004\ufeeb\013\ufeeb\001\002\000\006\004" +
    "\ufefc\013\ufefc\001\002\000\004\013\u0294\001\002\000\162" +
    "\003\ufe78\004\ufe78\005\ufe78\006\ufe78\007\ufe78\010\ufe78\011" +
    "\ufe78\012\ufe78\013\ufe78\014\ufe78\015\ufe78\016\ufe78\017\ufe78" +
    "\020\ufe78\021\ufe78\022\ufe78\023\ufe78\024\ufe78\025\ufe78\026" +
    "\ufe78\027\ufe78\030\ufe78\031\ufe78\033\ufe78\034\ufe78\035\ufe78" +
    "\037\ufe78\040\ufe78\041\ufe78\042\ufe78\043\ufe78\044\ufe78\045" +
    "\ufe78\046\ufe78\047\ufe78\050\ufe78\051\ufe78\052\ufe78\053\ufe78" +
    "\054\ufe78\055\ufe78\056\ufe78\057\ufe78\060\ufe78\061\ufe78\062" +
    "\ufe78\063\ufe78\064\ufe78\065\ufe78\066\ufe78\067\ufe78\070\ufe78" +
    "\071\ufe78\072\ufe78\073\ufe78\075\ufe78\001\002\000\006\004" +
    "\ufee9\013\ufee9\001\002\000\010\004\ufee8\005\u028c\013\ufee8" +
    "\001\002\000\004\013\ufef8\001\002\000\004\067\u028b\001" +
    "\002\000\006\004\ufeea\013\ufeea\001\002\000\010\004\ufeec" +
    "\013\ufeec\014\uffb8\001\002\000\004\066\u028d\001\002\000" +
    "\006\004\ufee7\013\ufee7\001\002\000\162\003\u014f\004\u013e" +
    "\005\u0153\006\u0157\007\u013a\010\u013d\011\u013c\012\u015a\013" +
    "\u0158\014\u0168\015\u0167\016\u0134\017\u0166\020\u0135\021\u015d" +
    "\022\u015b\023\u0163\024\u028f\025\u015e\026\u014d\027\u014a\030" +
    "\u0152\031\u015f\033\u0160\034\u0142\035\u0147\037\u0169\040\u0138" +
    "\041\u0150\042\u014b\043\u013f\044\u0165\045\u0137\046\u0155\047" +
    "\u0143\050\u0154\051\u0140\052\u0139\053\u0151\054\u016a\055\u013b" +
    "\056\u0164\057\u0136\060\u016b\061\u014c\062\u0133\063\u0149\064" +
    "\u0144\065\u0148\066\u0145\067\u0156\070\u0161\071\u0141\072\u014e" +
    "\073\u0159\075\u0162\001\002\000\006\004\ufefa\013\ufefa\001" +
    "\002\000\006\004\u0292\013\ufef6\001\002\000\004\013\ufef9" +
    "\001\002\000\022\003\u0288\020\045\021\060\022\047\024" +
    "\u0285\045\u0289\066\u0287\067\u0281\001\002\000\004\013\ufef7" +
    "\001\002\000\004\006\u0295\001\002\000\062\003\ufee0\011" +
    "\ufee0\016\ufee0\020\ufee0\021\ufee0\022\ufee0\034\ufee0\035\ufee0" +
    "\036\ufee0\047\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055" +
    "\ufee0\056\ufee0\057\ufee0\060\ufee0\064\ufee0\065\ufee0\067\ufee0" +
    "\074\ufee0\075\007\076\ufee0\001\002\000\060\003\ufefd\011" +
    "\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd\034\ufefd\035\ufefd" +
    "\036\ufefd\047\ufefd\051\ufefd\052\ufefd\053\ufefd\054\ufefd\055" +
    "\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd" +
    "\074\ufefd\076\ufefd\001\002\000\006\004\u0292\013\ufef6\001" +
    "\002\000\004\013\ufefb\001\002\000\004\067\u029a\001\002" +
    "\000\004\012\u029b\001\002\000\026\003\uff88\012\uff88\013" +
    "\uff88\020\uff88\021\uff88\022\uff88\025\uff88\027\uff88\066\uff88" +
    "\067\uff88\001\002\000\026\003\072\012\uff71\013\uff81\020" +
    "\uff71\021\uff71\022\uff71\025\uff71\027\uff71\066\uff71\067\uff71" +
    "\001\002\000\004\013\u029e\001\002\000\004\006\u029f\001" +
    "\002\000\062\003\uff87\011\uff87\016\uff87\020\uff87\021\uff87" +
    "\022\uff87\034\uff87\035\uff87\036\uff87\047\uff87\051\uff87\052" +
    "\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87" +
    "\064\uff87\065\uff87\067\uff87\074\uff87\075\uff87\076\uff87\001" +
    "\002\000\062\003\ufee0\011\ufee0\016\ufee0\020\ufee0\021\ufee0" +
    "\022\ufee0\034\ufee0\035\ufee0\036\ufee0\047\ufee0\051\ufee0\052" +
    "\ufee0\053\ufee0\054\ufee0\055\ufee0\056\ufee0\057\ufee0\060\ufee0" +
    "\064\ufee0\065\ufee0\067\ufee0\074\ufee0\075\007\076\ufee0\001" +
    "\002\000\060\003\uff86\011\uff86\016\uff86\020\uff86\021\uff86" +
    "\022\uff86\034\uff86\035\uff86\036\uff86\047\uff86\051\uff86\052" +
    "\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86" +
    "\064\uff86\065\uff86\067\uff86\074\uff86\076\uff86\001\002\000" +
    "\006\024\u02a4\042\u02a3\001\002\000\004\067\u02b6\001\002" +
    "\000\010\020\u02a6\021\u02a7\022\u02a5\001\002\000\004\005" +
    "\u02ae\001\002\000\004\024\u02ab\001\002\000\004\024\u02a8" +
    "\001\002\000\030\022\ufffc\033\ufffc\034\ufffc\035\ufffc\036" +
    "\ufffc\037\ufffc\067\ufffc\071\ufffc\074\ufffc\075\ufffc\076\ufffc" +
    "\001\002\000\030\022\ufee0\033\ufee0\034\ufee0\035\ufee0\036" +
    "\ufee0\037\ufee0\067\ufee0\071\ufee0\074\ufee0\075\007\076\ufee0" +
    "\001\002\000\026\022\ufffb\033\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\067\ufffb\071\ufffb\074\ufffb\076\ufffb\001\002" +
    "\000\030\022\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\067\ufffe\071\ufffe\074\ufffe\075\ufffe\076\ufffe\001\002" +
    "\000\030\022\ufee0\033\ufee0\034\ufee0\035\ufee0\036\ufee0\037" +
    "\ufee0\067\ufee0\071\ufee0\074\ufee0\075\007\076\ufee0\001\002" +
    "\000\026\022\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037" +
    "\ufffd\067\ufffd\071\ufffd\074\ufffd\076\ufffd\001\002\000\010" +
    "\003\u02b0\030\u02af\067\u02b2\001\002\000\004\024\ufff5\001" +
    "\002\000\004\024\ufff3\001\002\000\004\024\u02b3\001\002" +
    "\000\004\024\ufff4\001\002\000\030\022\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\067\ufffa\071\ufffa\074\ufffa" +
    "\075\ufffa\076\ufffa\001\002\000\030\022\ufee0\033\ufee0\034" +
    "\ufee0\035\ufee0\036\ufee0\037\ufee0\067\ufee0\071\ufee0\074\ufee0" +
    "\075\007\076\ufee0\001\002\000\026\022\ufff9\033\ufff9\034" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\067\ufff9\071\ufff9\074\ufff9" +
    "\076\ufff9\001\002\000\006\005\u02b7\041\u02b8\001\002\000" +
    "\004\067\u02ba\001\002\000\030\022\ufee0\033\ufee0\034\ufee0" +
    "\035\ufee0\036\ufee0\037\ufee0\067\ufee0\071\ufee0\074\ufee0\075" +
    "\007\076\ufee0\001\002\000\026\022\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\067\ufff8\071\ufff8\074\ufff8\076" +
    "\ufff8\001\002\000\004\041\u02bb\001\002\000\030\022\ufee0" +
    "\033\ufee0\034\ufee0\035\ufee0\036\ufee0\037\ufee0\067\ufee0\071" +
    "\ufee0\074\ufee0\075\007\076\ufee0\001\002\000\026\022\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\067\ufff7\071" +
    "\ufff7\074\ufff7\076\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02ba\000\010\002\004\043\005\044\003\001\001\000" +
    "\004\003\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\112\013\001\001\000\002\001\001\000\004\004\014" +
    "\001\001\000\024\005\015\006\023\007\036\011\027\014" +
    "\034\042\033\045\031\053\032\073\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u0131\001\001\000\004\050\373\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\133\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\125\041\127\040\001\001\000\006\063\300\064" +
    "\266\001\001\000\004\071\042\001\001\000\004\126\255" +
    "\001\001\000\012\047\053\067\050\070\052\072\047\001" +
    "\001\000\002\001\001\000\004\134\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\225\072\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\047\053\067" +
    "\216\070\052\072\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\140\070\001\001\000\010\106\074\107\072\110" +
    "\073\001\001\000\002\001\001\000\012\077\105\100\102" +
    "\101\106\102\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\135\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\101\145\102\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\077\124\100" +
    "\102\101\106\102\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\167\121\001\001\000\010\106\074\107\072\110" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\077\137\100\102\101" +
    "\106\102\077\001\001\000\012\077\136\100\102\101\106" +
    "\102\077\001\001\000\012\077\135\100\102\101\106\102" +
    "\077\001\001\000\012\077\134\100\102\101\106\102\077" +
    "\001\001\000\012\077\133\100\102\101\106\102\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\135" +
    "\150\001\001\000\006\065\152\066\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\047\053\067\154\070" +
    "\052\072\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\047\053\067\171\070\052\072" +
    "\047\001\001\000\002\001\001\000\012\047\053\067\170" +
    "\070\052\072\047\001\001\000\012\047\053\067\167\070" +
    "\052\072\047\001\001\000\012\047\053\067\166\070\052" +
    "\072\047\001\001\000\012\047\053\067\165\070\052\072" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\171\205\001\001\000\010\106\074\107\072\110\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\170\213\001\001\000\010\106" +
    "\074\107\072\110\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\134\227\001" +
    "\001\000\006\065\230\066\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\142\244\001\001\000\010\106\074\107\072" +
    "\110\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\141\252\001\001" +
    "\000\010\106\074\107\072\110\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\005\044\261\001" +
    "\001\000\002\001\001\000\006\071\263\132\264\001\001" +
    "\000\004\131\276\001\001\000\006\063\265\064\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\105\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\277\001\001\000\002\001\001\000\004\130" +
    "\301\001\001\000\004\041\302\001\001\000\002\001\001" +
    "\000\006\043\005\044\304\001\001\000\002\001\001\000" +
    "\006\065\320\066\151\001\001\000\004\120\310\001\001" +
    "\000\002\001\001\000\012\047\053\067\311\070\052\072" +
    "\047\001\001\000\002\001\001\000\004\121\313\001\001" +
    "\000\006\043\005\044\314\001\001\000\002\001\001\000" +
    "\004\123\316\001\001\000\006\043\005\044\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\047\053\067" +
    "\322\070\052\072\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\124\325\001\001\000\006\043\005\044" +
    "\326\001\001\000\002\001\001\000\004\122\330\001\001" +
    "\000\006\043\005\044\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\151\336\153\335" +
    "\001\001\000\004\016\357\001\001\000\004\111\337\001" +
    "\001\000\004\152\344\001\001\000\006\106\342\107\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\111\350\155\351\001\001\000\004\154" +
    "\353\001\001\000\004\016\352\001\001\000\002\001\001" +
    "\000\004\016\354\001\001\000\002\001\001\000\006\043" +
    "\005\044\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\043\005\044\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\053\070\367\072\047\001" +
    "\001\000\002\001\001\000\004\117\371\001\001\000\006" +
    "\043\005\044\372\001\001\000\002\001\001\000\004\043" +
    "\376\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\u015b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\005\044\u016b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\005\044\u016f\001\001\000\004\136\u0170\001\001\000\002" +
    "\001\001\000\006\043\005\044\u0172\001\001\000\004\012" +
    "\u0173\001\001\000\046\006\u0189\007\u0177\013\u017d\014\u0181" +
    "\017\u0180\021\u017a\022\u018f\023\u017c\024\u018b\027\u018c\031" +
    "\u0176\033\u0186\034\u0188\042\u0185\045\u0184\053\032\061\u0183" +
    "\073\u018a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\137\u0270\001\001\000\002\001\001\000\004\204\u0243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\133\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\005" +
    "\044\u01d8\001\001\000\004\172\u01a8\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u0196\001\001\000\004" +
    "\054\u0197\001\001\000\004\212\u0198\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u019c\001\001\000\002" +
    "\001\001\000\006\057\u019f\073\u019d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\133\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\213\u01a6\001\001\000\006" +
    "\043\005\044\u01a7\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\u01ae\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\173\u01b0\001\001\000\002\001\001\000\004" +
    "\074\u01b3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\174\u01b9\001\001\000\014\075\u01ba\077" +
    "\u01bd\100\102\101\106\102\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\u01be\001" +
    "\001\000\012\077\u01c8\100\102\101\106\102\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\u01ce\001\001\000\002\001" +
    "\001\000\004\175\u01d0\001\001\000\006\043\005\044\u01d1" +
    "\001\001\000\002\001\001\000\006\043\005\044\u01d3\001" +
    "\001\000\004\012\u01d4\001\001\000\046\006\u0189\007\u0177" +
    "\013\u017d\014\u0181\017\u0180\021\u017a\022\u018f\023\u017c\024" +
    "\u018b\027\u018c\031\u0176\033\u0186\034\u0188\042\u0185\045\u0184" +
    "\053\032\061\u0183\073\u018a\001\001\000\004\176\u01d6\001" +
    "\001\000\006\043\005\044\u01d7\001\001\000\002\001\001" +
    "\000\004\202\u01d9\001\001\000\002\001\001\000\006\043" +
    "\005\044\u01db\001\001\000\004\012\u01dc\001\001\000\046" +
    "\006\u0189\007\u0177\013\u017d\014\u0181\017\u0180\021\u017a\022" +
    "\u018f\023\u017c\024\u018b\027\u018c\031\u0176\033\u0186\034\u0188" +
    "\042\u0185\045\u0184\053\032\061\u0183\073\u018a\001\001\000" +
    "\006\043\005\044\u01de\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\075\u01e2\076\u01e1\077\u01bd\100\102\101" +
    "\106\102\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\075\u01e5\077\u01bd\100\102\101\106\102\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\075\u01e7" +
    "\077\u01e8\100\102\101\106\102\077\001\001\000\002\001" +
    "\001\000\004\056\u01be\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\075\u01e2\076\u01ef\077\u01bd\100\102\101" +
    "\106\102\077\001\001\000\004\166\u01ed\001\001\000\016" +
    "\075\u01e2\076\u01ee\077\u01bd\100\102\101\106\102\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\203\u01f1" +
    "\001\001\000\006\043\005\044\u01f2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\143\u01f6" +
    "\001\001\000\010\106\074\107\072\110\u01f7\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\144\u01fa\001\001" +
    "\000\006\043\005\044\u01fb\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\147\u0201\001\001\000\010\106\074\107" +
    "\072\110\u0202\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\150\u0205\001\001\000\006\043\005\044\u0206\001" +
    "\001\000\002\001\001\000\004\120\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\220" +
    "\u020c\001\001\000\006\043\005\044\u020d\001\001\000\002" +
    "\001\001\000\012\047\053\067\322\070\052\072\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\221\u0213\001\001\000\006\043\005\044\u0214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\222\u0218\001\001\000\006\043\005\044\u0219\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\217\u021d\001\001\000\006\043\005\044\u021e\001" +
    "\001\000\002\001\001\000\004\156\u0220\001\001\000\016" +
    "\075\u01e2\076\u0221\077\u01bd\100\102\101\106\102\077\001" +
    "\001\000\004\157\u0222\001\001\000\002\001\001\000\006" +
    "\043\005\044\u0224\001\001\000\002\001\001\000\006\043" +
    "\005\044\u0226\001\001\000\004\012\u0227\001\001\000\046" +
    "\006\u0189\007\u0177\013\u017d\014\u0181\017\u0180\021\u017a\022" +
    "\u018f\023\u017c\024\u018b\027\u018c\031\u0176\033\u0186\034\u0188" +
    "\042\u0185\045\u0184\053\032\061\u0183\073\u018a\001\001\000" +
    "\004\160\u0229\001\001\000\006\043\005\044\u022a\001\001" +
    "\000\004\020\u022b\001\001\000\002\001\001\000\006\043" +
    "\005\044\u022e\001\001\000\002\001\001\000\004\164\u022f" +
    "\001\001\000\002\001\001\000\006\043\005\044\u0231\001" +
    "\001\000\004\012\u0232\001\001\000\046\006\u0189\007\u0177" +
    "\013\u017d\014\u0181\017\u0180\021\u017a\022\u018f\023\u017c\024" +
    "\u018b\027\u018c\031\u0176\033\u0186\034\u0188\042\u0185\045\u0184" +
    "\053\032\061\u0183\073\u018a\001\001\000\004\165\u0234\001" +
    "\001\000\006\043\005\044\u0235\001\001\000\002\001\001" +
    "\000\004\161\u0237\001\001\000\016\075\u01e2\076\u0238\077" +
    "\u01bd\100\102\101\106\102\077\001\001\000\004\162\u0239" +
    "\001\001\000\002\001\001\000\006\043\005\044\u023b\001" +
    "\001\000\002\001\001\000\006\043\005\044\u023d\001\001" +
    "\000\004\012\u023e\001\001\000\046\006\u0189\007\u0177\013" +
    "\u017d\014\u0181\017\u0180\021\u017a\022\u018f\023\u017c\024\u018b" +
    "\027\u018c\031\u0176\033\u0186\034\u0188\042\u0185\045\u0184\053" +
    "\032\061\u0183\073\u018a\001\001\000\004\163\u0240\001\001" +
    "\000\006\043\005\044\u0241\001\001\000\004\020\u0242\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\072\u0247" +
    "\103\u0248\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\205\u024a\001\001\000\004\134\227" +
    "\001\001\000\002\001\001\000\006\043\005\044\u024c\001" +
    "\001\000\002\001\001\000\006\043\005\044\u024e\001\001" +
    "\000\004\025\u024f\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\104\u0252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\207\u025d\001" +
    "\001\000\004\043\u025e\001\001\000\004\012\u025f\001\001" +
    "\000\050\006\u0189\007\u0177\010\u0261\013\u017d\014\u0181\017" +
    "\u0180\021\u017a\022\u018f\023\u017c\024\u018b\027\u018c\031\u0176" +
    "\033\u0186\034\u0188\042\u0185\045\u0184\053\032\061\u0183\073" +
    "\u018a\001\001\000\002\001\001\000\004\210\u0262\001\001" +
    "\000\004\025\u0263\001\001\000\002\001\001\000\006\043" +
    "\005\044\u0265\001\001\000\002\001\001\000\004\211\u0267" +
    "\001\001\000\004\043\u0268\001\001\000\004\012\u0269\001" +
    "\001\000\050\006\u0189\007\u0177\010\u026a\013\u017d\014\u0181" +
    "\017\u0180\021\u017a\022\u018f\023\u017c\024\u018b\027\u018c\031" +
    "\u0176\033\u0186\034\u0188\042\u0185\045\u0184\053\032\061\u0183" +
    "\073\u018a\001\001\000\002\001\001\000\004\206\u026c\001" +
    "\001\000\006\043\005\044\u026d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\005\044" +
    "\u0271\001\001\000\002\001\001\000\004\177\u0273\001\001" +
    "\000\016\075\u01e2\076\u0274\077\u01bd\100\102\101\106\102" +
    "\077\001\001\000\004\200\u0275\001\001\000\002\001\001" +
    "\000\006\043\005\044\u0277\001\001\000\002\001\001\000" +
    "\006\043\005\044\u0279\001\001\000\004\012\u027a\001\001" +
    "\000\046\006\u0189\007\u0177\013\u017d\014\u0181\017\u0180\021" +
    "\u017a\022\u018f\023\u017c\024\u018b\027\u018c\031\u0176\033\u0186" +
    "\034\u0188\042\u0185\045\u0184\053\032\061\u0183\073\u018a\001" +
    "\001\000\004\201\u027c\001\001\000\006\043\005\044\u027d" +
    "\001\001\000\002\001\001\000\004\214\u027f\001\001\000" +
    "\012\026\u0283\047\u0285\060\u0282\073\u0281\001\001\000\004" +
    "\133\305\001\001\000\002\001\001\000\004\215\u0296\001" +
    "\001\000\002\001\001\000\004\051\u028d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\u0289\001\001\000\002\001\001\000\004\133\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\u015b\001" +
    "\001\000\004\216\u028f\001\001\000\004\032\u0290\001\001" +
    "\000\002\001\001\000\012\026\u0292\047\u0285\060\u0282\073" +
    "\u0281\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\005\044\u0295\001\001\000\002\001\001\000\004\032" +
    "\u0297\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\145\u029b\001\001\000\010\106\074\107" +
    "\072\110\u029c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\146\u029f\001\001\000\006\043\005\044\u02a0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\114\u02a8\001\001\000\006\043\005" +
    "\044\u02a9\001\001\000\002\001\001\000\004\113\u02ab\001" +
    "\001\000\006\043\005\044\u02ac\001\001\000\002\001\001" +
    "\000\004\052\u02b0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\115\u02b3" +
    "\001\001\000\006\043\005\044\u02b4\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\005" +
    "\044\u02b8\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\005\044\u02bb\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public VerifC verif = new VerifC();
    public int jerarquia = 0;
    public String tipoActual = "";
    public OperacionesC op = new OperacionesC();
    public TablaSimbolos tabla;
    public static Integer itMetodo = null;
    public String auxTipo = "";
    /*variables exclusiva para la comprobacion de parametros, Produccion -> METODO*/
    public boolean metodoCorrecto = false;
    public Clase claseUsar = null;
    public String idClase2 = "";
    public String idSwitch = "";
    public String len = "";
    public int contParam = 0;
    public int it = 0;
    public String idClase = "";

    /*Variables para los cuartetos*/
    public ArrayList<String> arrayFinales = new ArrayList<>();
    public int contFinales = 0;
    public ManejoC manejoc = new ManejoC();
    public ManejoCondiciones manejo = new ManejoCondiciones();
    public static String aux2 = "", aux3 = "", etInst = "";
    public static boolean inst = false;
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();
    public ArrayList<Boolean> usoPila = new ArrayList<>();
    public boolean auxFor = false;

    /*---------------------------------------- CODIGO EJECUTABLE ------------------------------------------------*/

    public ArrayList<String> dimensiones = new ArrayList<>();
    public String idArreglo = "";
    public boolean esArreglo = false;
    public String claseAux = "";
    public ExeC exe = new ExeC();

    public SintaxC(AnalizadorLexico4 lexer, TablaSimbolos tabla){
        super(lexer);
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+"   "+mensaje);
    }

    public void syntax_error(Symbol s){
         int fila = s.left + PanelPrincipal.totalLineas+1;
        PanelPrincipal.errores += "Fila: "+fila+" Columna:"+s.right+" Tipo de error: SINTACTICO.\n";
   }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxC$actions {
  private final SintaxC parser;

  /** Constructor */
  CUP$SintaxC$actions(SintaxC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxC$do_action(
    int                        CUP$SintaxC$act_num,
    java_cup.runtime.lr_parser CUP$SintaxC$parser,
    java.util.Stack            CUP$SintaxC$stack,
    int                        CUP$SintaxC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxC$result;

      /* select the action based on the action number */
      switch (CUP$SintaxC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // TEXTO2 ::= 
            {
              String RESULT =null;
		  RESULT = ""; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // TEXTO2 ::= TEXTO2 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // TEXTO2 ::= TEXTO2 enter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 RESULT = a + "\n";   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // TEXTO2 ::= TEXTO2 MODULOS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // TEXTO2 ::= TEXTO2 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // TEXTO2 ::= TEXTO2 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // TEXTO2 ::= TEXTO2 getch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // TEXTO2 ::= TEXTO2 clscr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // TEXTO2 ::= TEXTO2 scanf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // TEXTO2 ::= TEXTO2 printf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // TEXTO2 ::= TEXTO2 condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // TEXTO2 ::= TEXTO2 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // TEXTO2 ::= TEXTO2 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // TEXTO2 ::= TEXTO2 condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // TEXTO2 ::= TEXTO2 condCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // TEXTO2 ::= TEXTO2 condSwitch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // TEXTO2 ::= TEXTO2 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // TEXTO2 ::= TEXTO2 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // TEXTO2 ::= TEXTO2 pleca 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // TEXTO2 ::= TEXTO2 ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // TEXTO2 ::= TEXTO2 admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // TEXTO2 ::= TEXTO2 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // TEXTO2 ::= TEXTO2 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // TEXTO2 ::= TEXTO2 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // TEXTO2 ::= TEXTO2 main 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // TEXTO2 ::= TEXTO2 falso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // TEXTO2 ::= TEXTO2 verdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // TEXTO2 ::= TEXTO2 tipoConst 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // TEXTO2 ::= TEXTO2 tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // TEXTO2 ::= TEXTO2 tipoInteger 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // TEXTO2 ::= TEXTO2 tipoVoid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // TEXTO2 ::= TEXTO2 numeral 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // TEXTO2 ::= TEXTO2 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // TEXTO2 ::= TEXTO2 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // TEXTO2 ::= TEXTO2 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // TEXTO2 ::= TEXTO2 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // TEXTO2 ::= TEXTO2 principal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // TEXTO2 ::= TEXTO2 java 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TEXTO2 ::= TEXTO2 python 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TEXTO2 ::= TEXTO2 visual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // TEXTO2 ::= TEXTO2 condInclude 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TEXTO2 ::= TEXTO2 condBreak 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TEXTO2 ::= TEXTO2 comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // TEXTO2 ::= TEXTO2 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // TEXTO2 ::= TEXTO2 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // TEXTO2 ::= TEXTO2 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // TEXTO2 ::= TEXTO2 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // TEXTO2 ::= TEXTO2 llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // TEXTO2 ::= TEXTO2 llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // TEXTO2 ::= TEXTO2 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // TEXTO2 ::= TEXTO2 puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // TEXTO2 ::= TEXTO2 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // TEXTO2 ::= TEXTO2 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + " "+ b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // TEXTO ::= 
            {
              String RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // TEXTO ::= TEXTO resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TEXTO ::= TEXTO id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TEXTO ::= TEXTO numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TEXTO ::= TEXTO getch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TEXTO ::= TEXTO clscr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TEXTO ::= TEXTO scanf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TEXTO ::= TEXTO printf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TEXTO ::= TEXTO condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TEXTO ::= TEXTO condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TEXTO ::= TEXTO condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TEXTO ::= TEXTO condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TEXTO ::= TEXTO condCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TEXTO ::= TEXTO condSwitch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TEXTO ::= TEXTO condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TEXTO ::= TEXTO condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TEXTO ::= TEXTO pleca 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // TEXTO ::= TEXTO ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // TEXTO ::= TEXTO admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // TEXTO ::= TEXTO igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // TEXTO ::= TEXTO menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // TEXTO ::= TEXTO mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // TEXTO ::= TEXTO main 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TEXTO ::= TEXTO falso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TEXTO ::= TEXTO verdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TEXTO ::= TEXTO tipoConst 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TEXTO ::= TEXTO tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TEXTO ::= TEXTO tipoInteger 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TEXTO ::= TEXTO tipoVoid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TEXTO ::= TEXTO numeral 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TEXTO ::= TEXTO div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TEXTO ::= TEXTO por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TEXTO ::= TEXTO menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TEXTO ::= TEXTO mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TEXTO ::= TEXTO principal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TEXTO ::= TEXTO java 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // TEXTO ::= TEXTO python 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TEXTO ::= TEXTO visual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TEXTO ::= TEXTO condInclude 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // TEXTO ::= TEXTO condBreak 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // TEXTO ::= TEXTO comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // TEXTO ::= TEXTO agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TEXTO ::= TEXTO agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TEXTO ::= TEXTO parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // TEXTO ::= TEXTO parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TEXTO ::= TEXTO llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TEXTO ::= TEXTO llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TEXTO ::= TEXTO dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TEXTO ::= TEXTO puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TEXTO ::= TEXTO punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TEXTO ::= TEXTO coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + " " + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ENTER2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER2",34, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ENTER2 ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER2",34, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ENTER2 ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER2",34, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ENTER ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER",33, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ENTER ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER",33, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // COMENTARIO_B ::= comentario_b TEXTO2 comentario_c ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",35, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // COMENTARIO_A ::= comentario_a TEXTO ENTER 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("COMENTARIO_A",32, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // VAR_TEXTO ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",46, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // VAR_TEXTO ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",46, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // VAR_TEXTO ::= METODOS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",46, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // VAR_TEXTO ::= ampersand VECTOR 
            {
              String RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",46, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // VAR_TEXTO ::= VECTOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a.getId(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",46, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // VAR_TEXTO ::= ampersand id 
            {
              String RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",46, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // VAR_TEXTO ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); 
                                                                                   RESULT = parser.manejoc.etiquetaId(parser.tabla, a.toString());   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",46, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // GETCH ::= getch parentesis_a parentesis_b puntoComa NT$72 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("GETCH",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // NT$72 ::= 
            {
              Object RESULT =null;
  parser.manejoc.crearGetch(parser.tabla, null, false); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$72",144, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // GETCH ::= VECTOR igual getch parentesis_a parentesis_b puntoComa NT$71 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("GETCH",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // NT$71 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
  if(a.getValor()){ 
                                                                                        if(!parser.tipoActual.equals("Integer") || !parser.tipoActual.equals("Char")){ 
                                                                                            System.out.println("arreglo "+a.toString()+" con valor incorrecto para asignacion de getch");  
                                                                                        } else {
                                                                                            parser.manejoc.crearGetch(parser.tabla, a.getId(), true);
                                                                                        }
                                                                                    } else { 
                                                                                        System.out.println("Variable no existe para poder asignar getch"); 
                                                                                    } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$71",143, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // GETCH ::= id igual getch parentesis_a parentesis_b puntoComa NT$70 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("GETCH",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // NT$70 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
  parser.manejoc.crearGetch(parser.tabla, a.toString(), false);  
                                                                                    parser.tipoActual=parser.verif.devolverTipoVar(parser.tabla.getObC(), parser.jerarquia, a.toString(), aleft+PanelPrincipal.totalLineas, aright);  
                                                                                    if(parser.tipoActual.equals("Integer") || parser.tipoActual.equals("Char")){
                                                                                    } else { 
                                                                                        int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: La variable "+a.toString()+" con valor incorrecto para asignacion de getch\n"; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$70",142, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // CLSCR ::= clscr parentesis_a parentesis_b puntoComa NT$69 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLSCR",25, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // NT$69 ::= 
            {
              Object RESULT =null;
 parser.manejoc.crearClscr(parser.tabla.getObC()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$69",141, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // RESTO_MENSAJE ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",24, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // RESTO_MENSAJE ::= coma TEXTO3 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",24, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // TEXTO3 ::= error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en uso de instruccion print\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO3",20, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // TEXTO3 ::= comilla TEXTO2 comilla NT$68 RESTO_MENSAJE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO3",20, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // NT$68 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.manejoc.mostrarMensaje(parser.tabla, a.toString()+b+c.toString(), null); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$68",140, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TEXTO3 ::= VAR_TEXTO NT$67 RESTO_MENSAJE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO3",20, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // NT$67 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.manejoc.mostrarMensaje(parser.tabla, a, "%f"); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$67",139, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // MENSAJE ::= printf parentesis_a NT$66 TEXTO3 parentesis_b puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		 parser.manejoc.mostrarQuiebre(parser.tabla); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MENSAJE",23, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // NT$66 ::= 
            {
              Object RESULT =null;
 parser.tipoActual="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$66",138, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // VAR_SCANF ::= VECTOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  parser.esArreglo = true;
                                                                if(a != null){ 
                                                                    RESULT = a.getId(); 
                                                                } else { 
                                                                    RESULT = ""; 
                                                                } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_SCANF",45, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // VAR_SCANF ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_SCANF",45, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // VAR_SCANF ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_SCANF",45, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // VAR_SCANF ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); 
                                                                RESULT = a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_SCANF",45, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // VAR_LECTURA ::= VECTOR_OP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  if(a != null){ 
                                                                    RESULT = a.getId(); 
                                                                } else { 
                                                                    RESULT = ""; 
                                                                } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_LECTURA",65, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // VAR_LECTURA ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_LECTURA",65, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // VAR_LECTURA ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_LECTURA",65, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // VAR_LECTURA ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String et = parser.manejoc.etiquetaId(parser.tabla, a.toString());
                                                                parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); 
                                                                RESULT = et;  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_LECTURA",65, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // MODULOS ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en mascaras para lectura de datos.\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MODULOS",42, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // MODULOS ::= scanfChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT="Char"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MODULOS",42, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // MODULOS ::= scanfFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MODULOS",42, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // MODULOS ::= scanfInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT="Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MODULOS",42, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // AMPER ::= 
            {
              Boolean RESULT =null;
		  RESULT = false; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("AMPER",48, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // AMPER ::= ampersand 
            {
              Boolean RESULT =null;
		  RESULT = true; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("AMPER",48, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // LECTURA_DATOS ::= scanf parentesis_a comilla TEXTO MODULOS NT$64 comilla coma AMPER VAR_SCANF parentesis_b puntoComa NT$65 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // NT$65 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
  if(!z){
                                                                                            int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Falta de '&' dentro de scanf\n";
                                                                                        }
                                                                                        parser.manejoc.mostrarQuiebre(parser.tabla);
                                                                                        parser.manejoc.crearScanf(parser.tabla, b, a, parser.esArreglo); 
                                                                                        parser.esArreglo = false;   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$65",137, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // NT$64 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.manejoc.mostrarMensaje(parser.tabla, "\""+v+"\"", null);
                                                                                        parser.manejoc.mostrarQuiebre(parser.tabla);
                                                                                        parser.tipoActual=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$64",136, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // VAR_CASE ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de variable para switch\n"; 
                                                                        RESULT = ""; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",66, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // VAR_CASE ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a.toString()+b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",66, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // VAR_CASE ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String et = parser.manejoc.etiquetaId(parser.tabla, b.toString());
                                                                        RESULT = a.toString()+et; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",66, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // VAR_CASE ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = parser.manejoc.etiquetaId(parser.tabla, a.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",66, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // VAR_CASE ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",66, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // VAR_CASE ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a.toString();  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",66, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // BREAK ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BREAK",6, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // BREAK ::= condBreak puntoComa ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BREAK",6, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CASES ::= condDef dosPuntos NT$63 ENTER CUERPO_MAIN BREAK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		  parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); 
                                                                        parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // NT$63 ::= 
            {
              Object RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$63",135, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CASES ::= condCase VAR_CASE dosPuntos NT$61 ENTER CUERPO_MAIN BREAK NT$62 CASES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$62 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
  parser.manejoc.agregarFinCase(parser.tabla.getObC(), parser.arrayFinales, parser.jerarquia);  
                                                                        parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); 
                                                                        parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$62",134, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$61 ::= 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.jerarquia++; 
                                                                        parser.manejoc.agregarCaseSwitch(parser.tabla.getObC(), parser.jerarquia, parser.idSwitch, h, "==");  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$61",133, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // SWITCH ::= condSwitch NT$58 parentesis_a VAR_LECTURA NT$59 parentesis_b ENTER2 llave_a ENTER2 CASES llave_b NT$60 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$60 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
  parser.tabla.getObC().getCuarpeta().add(new Nodo("ETIQUETA", parser.arrayFinales.get(parser.arrayFinales.size()-1), null, null, parser.jerarquia)); 
                                                                        parser.arrayFinales.remove(parser.arrayFinales.size()-1);       
                                                                        parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); 
                                                                        parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$60",132, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // NT$59 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.arrayFinales.add("etFinal_"+parser.contFinales); 
                                                                        parser.contFinales++; 
                                                                        parser.idSwitch = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$59",131, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // NT$58 ::= 
            {
              Object RESULT =null;
  parser.tipoActual="Integer";  
                                                                        parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$58",130, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // DO_WHILE ::= condDo ENTER2 NT$56 llave_a ENTER2 CUERPO_MAIN llave_b ENTER2 condWhile parentesis_a EXT parentesis_b puntoComa NT$57 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DO_WHILE",17, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-14)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NT$57 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
  parser.manejoc.agregarCondicionWhile(parser.tabla.getObC(), parser.usoPila, h, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);    
                                                                                                                    parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); 
                                                                                                                    parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$57",129, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NT$56 ::= 
            {
              Object RESULT =null;
  parser.usoPila.add(false);   
                                                                                                                    parser.jerarquia++; 
                                                                                                                    parser.pilaFalsas.add(new ArrayList<>()); 
                                                                                                                    parser.manejoc.agregarDoWhile(parser.tabla.getObC(), parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$56",128, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // WHILE ::= condWhile parentesis_a NT$53 EXT NT$54 parentesis_b ENTER2 llave_a ENTER2 CUERPO_MAIN llave_b NT$55 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("WHILE",16, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // NT$55 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
  parser.manejoc.retornoWhile(parser.tabla.getObC(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);   
                                                                            parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); 
                                                                            parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$55",127, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // NT$54 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.manejoc.agregarWhile(parser.tabla.getObC(), h, parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$54",126, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // NT$53 ::= 
            {
              Object RESULT =null;
  parser.usoPila.add(false);    
                                                                            parser.jerarquia++; 
                                                                            parser.pilaFalsas.add(new ArrayList<>()); 
                                                                            parser.manejoc.agregarPreludioWhile(parser.tabla, parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$53",125, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // VAR_FOR ::= menos id 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String et = parser.manejoc.etiquetaId(parser.tabla, a.toString());
                                                        Boolean valor = parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, "Integer", aleft+PanelPrincipal.totalLineas, aright); 
                                                        RESULT = new NodoOperacion(b.toString() + et, valor);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_FOR",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // VAR_FOR ::= id 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String et = parser.manejoc.etiquetaId(parser.tabla, a.toString());
                                                        Boolean valor = parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, "Integer", aleft+PanelPrincipal.totalLineas, aright); 
                                                        RESULT = new NodoOperacion(et, valor);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_FOR",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // VAR_FOR ::= menos numero 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Integer", "Integer", a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                        RESULT = new NodoOperacion(b.toString()+a.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_FOR",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // VAR_FOR ::= numero 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Integer", "Integer", a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                        RESULT = new NodoOperacion(a.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_FOR",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TIPO_VAR_FOR ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de tipo dentro de un for, se esperaba un tipo de dato\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TIPO_VAR_FOR ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TIPO_VAR_FOR ::= tipoChar 
            {
              String RESULT =null;
		 RESULT = "Char"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TIPO_VAR_FOR ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT = "Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TIPO_VAR_FOR ::= tipoInteger 
            {
              String RESULT =null;
		 RESULT = "Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // FOR ::= condFor NT$48 parentesis_a TIPO_VAR_FOR id NT$49 igual VAR_FOR puntoComa NT$50 BOOLEAN puntoComa id igual id mas VAR_FOR parentesis_b NT$51 ENTER2 llave_a ENTER2 CUERPO_MAIN llave_b NT$52 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-22)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-22)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-22)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-21)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-21)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-21)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).right;
		NodoOperacion h = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-15)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-15)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-15)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		NodoOperacion f = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-25)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$52 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-20)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-20)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-20)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-19)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-19)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-19)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-16)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-16)).right;
		NodoOperacion h = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-16)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		NodoOperacion f = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
  parser.manejoc.retornarFor(parser.tabla, parser.usoPila, d.toString(), e.toString(), f.getId(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                                parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); 
                                                                                parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$52",124, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$51 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).right;
		NodoOperacion h = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion f = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.manejoc.agregarFor(parser.tabla, b.toString(), h.getId(), c, parser.jerarquia, a);  
                                                                                parser.verif.verificarFor(parser.tabla.getObC(), parser.jerarquia, parser.auxFor, d.toString(), e.toString(), parser.tipoActual, f.getValor(), a, b.toString());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$51",123, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$50 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion h = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  if(h.getValor()){ 
                                                                                    parser.auxFor = parser.verif.verifVarFor(parser.tabla.getObC(), b.toString(), a, "Integer", parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright, parser.dimensiones); 
                                                                                } else { 
                                                                                    parser.auxFor=false; 
                                                                                } 
                                                                                parser.tipoActual="Integer"; 
                                                                                parser.manejoc.agregarPreludioFor(parser.tabla, b.toString(), h.getId(), parser.jerarquia);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$50",122, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NT$49 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  if(!a.equals("")){
                                                                                    parser.exe.agregarVariable(parser.tabla, b.toString(), 1, false, a);
                                                                                }    
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$49",121, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$48 ::= 
            {
              Object RESULT =null;
  parser.usoPila.add(false);  
                                                                                parser.jerarquia++; 
                                                                                parser.pilaFalsas.add(new ArrayList<>());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$48",120, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // METODO_COND ::= java punto id punto id parentesis_a NT$47 PARAM_METODOS parentesis_b 
            {
              NodoBoolean RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (NodoBoolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<NodoBoolean> d = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  String tip = "";    
                                                                        if(parser.metodoCorrecto){ 
                                                                            tip=parser.claseUsar.getMisMetodos().get(parser.itMetodo).getRetorno();   
                                                                        }
                                                                        String et = parser.manejoc.operacionMetodo(parser.tabla, c.toString(), parser.idClase2, "JV", d, bleft+PanelPrincipal.totalLineas, b.toString());    
                                                                        RESULT = new NodoBoolean(tip, et); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODO_COND",63, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$47 ::= 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.len=a.toString(); 
                                                                        parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), b.toString(), parser.jerarquia, c.toString(), bleft+PanelPrincipal.totalLineas, bright); 
                                                                        parser.claseUsar = parser.verif.devolverClaseJava2(parser.tabla, b.toString(), bleft+PanelPrincipal.totalLineas, bright); 
                                                                        if(parser.claseUsar != null){ 
                                                                            parser.idClase2 = parser.claseUsar.getId(); 
                                                                        } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$47",119, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // METODO_COND ::= visual punto id parentesis_a NT$46 PARAM_METODOS parentesis_b 
            {
              NodoBoolean RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (NodoBoolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  String tip = ""; 
                                                                        if(parser.metodoCorrecto){  
                                                                            tip = parser.tabla.getObVb().getMisMetodos().get(parser.itMetodo).getRetorno();    
                                                                        } 
                                                                        String et = parser.manejoc.operacionMetodo(parser.tabla, b.toString(), "", "VB", c, bleft+PanelPrincipal.totalLineas, "");
                                                                        RESULT = new NodoBoolean(tip, et); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODO_COND",63, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$46 ::= 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.len=a.toString(); 
                                                                        parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$46",118, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // METODO_COND ::= python punto id parentesis_a NT$45 PARAM_METODOS parentesis_b 
            {
              NodoBoolean RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (NodoBoolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  String tip = ""; 
                                                                        if(parser.metodoCorrecto){  
                                                                            tip = parser.tabla.getObPython().getMisMetodos().get(parser.itMetodo).getRetorno(); 
                                                                        }  
                                                                        String et = parser.manejoc.operacionMetodo(parser.tabla, b.toString(), "", "PY", c, bleft+PanelPrincipal.totalLineas, "");
                                                                        RESULT= new NodoBoolean(tip, et);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODO_COND",63, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$45 ::= 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.len=a.toString(); 
                                                                        parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$45",117, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // VAL_COND ::= menos id 
            {
              NodoBoolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String tip = parser.op.devolverTipoVar(parser.tabla.getObC(), parser.jerarquia, a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                                        RESULT = parser.manejoc.devolverEtiquetaId(parser.tabla, a.toString(), tip, true); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // VAL_COND ::= menos METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  parser.idClase2 = ""; 
                                                                        parser.contParam = 0; 
                                                                        RESULT = new NodoBoolean(a.getTipo(), "-"+a.getId()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // VAL_COND ::= menos VECTOR_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String et = "-"+a.getId(); 
                                                                        RESULT = new NodoBoolean(a.getTipo(), et); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // VAL_COND ::= menos numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // VAL_COND ::= menos numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // VAL_COND ::= id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String tip = parser.op.devolverTipoVar(parser.tabla.getObC(), parser.jerarquia, a.toString(), aleft+PanelPrincipal.totalLineas, aright);  
                                                                        RESULT = parser.manejoc.devolverEtiquetaId(parser.tabla, a.toString(), tip, false); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // VAL_COND ::= METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  parser.idClase2 = ""; 
                                                                        parser.contParam = 0; 
                                                                        RESULT = new NodoBoolean(a.getTipo(), a.getId());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // VAL_COND ::= VECTOR_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // VAL_COND ::= numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // VAL_COND ::= numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // VAL_COND ::= menos comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // VAL_COND ::= menos comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // VAL_COND ::= comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // VAL_COND ::= comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // OP_COND ::= VAL_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // OP_COND ::= OP_COND modulo OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = parser.manejoc.concatenarOperacion(parser.tabla.getObC(), a, b, "modulo"); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OP_COND ::= OP_COND div OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = parser.manejoc.concatenarOperacion(parser.tabla.getObC(), a, b, "div"); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OP_COND ::= OP_COND por OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = parser.manejoc.concatenarOperacion(parser.tabla.getObC(), a, b, "mult"); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OP_COND ::= OP_COND menos OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = parser.manejoc.concatenarOperacion(parser.tabla.getObC(), a, b, "resta"); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OP_COND ::= OP_COND mas OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = parser.manejoc.concatenarOperacion(parser.tabla.getObC(), a, b, "suma"); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OP_COND ::= parentesis_a OP_COND parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // BOOLEAN ::= falso 
            {
              ArrayList<Nodo> RESULT =null;
		 RESULT = parser.manejoc.agregarFalso(parser.tabla.getObC(), parser.pilaFalsas, parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BOOLEAN",59, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // BOOLEAN ::= verdadero 
            {
              ArrayList<Nodo> RESULT =null;
		 RESULT = parser.manejoc.agregarVerdadero(parser.tabla.getObC(), parser.pilaFalsas, parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BOOLEAN",59, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // BOOLEAN ::= OP_COND OP OP_COND 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = parser.manejoc.agregarBooleans(parser.tabla.getObC(), parser.pilaFalsas, a, b, c, parser.jerarquia);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BOOLEAN",59, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXT ::= error 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de booleano\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",60, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXT ::= admiracion BOOLEAN 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = parser.manejoc.cambiarGotos(a); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",60, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXT ::= admiracion parentesis_a BOOLEAN parentesis_b 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  RESULT = parser.manejoc.cambiarGotos(a); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",60, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXT ::= BOOLEAN 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",60, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXT ::= EXT or NT$44 EXT 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  parser.manejoc.manejoOr(parser.tabla.getObC(), parser.usoPila, parser.pilaCuarpeta, b, a, parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",60, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$44 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.aux3 = parser.aux2; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$44",116, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXT ::= EXT and EXT 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = parser.manejoc.manejoAnd(a, b); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",60, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OP ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en definicion de operador logico\n";
                                                           RESULT = "=="; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OP ::= admiracion igual 
            {
              String RESULT =null;
		 RESULT="!="; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OP ::= igual igual 
            {
              String RESULT =null;
		 RESULT="=="; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OP ::= menor igual 
            {
              String RESULT =null;
		 RESULT="<="; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OP ::= mayor igual 
            {
              String RESULT =null;
		 RESULT=">="; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OP ::= menor 
            {
              String RESULT =null;
		 RESULT="<"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OP ::= mayor 
            {
              String RESULT =null;
		 RESULT=">"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ELSE ::= 
            {
              Object RESULT =null;
		                                                          parser.manejo.agregarEtiquetaFinC(parser.tabla.getObC(), parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ELSE",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ELSE ::= condElse ENTER2 NT$42 llave_a ENTER2 CUERPO_MAIN llave_b NT$43 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ELSE",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
  parser.manejo.irEtiquetaFinC(parser.tabla.getObC(), parser.jerarquia);  
                                                                        parser.manejo.agregarEtiquetaFinC(parser.tabla.getObC(), parser.jerarquia);  
                                                                        parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); 
                                                                        parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$43",115, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$42 ::= 
            {
              Object RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$42",114, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ELSE ::= condElse condIf parentesis_a NT$39 EXT NT$40 parentesis_b ENTER2 llave_a ENTER2 CUERPO_MAIN llave_b NT$41 ENTER2 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ELSE",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-14)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
  parser.manejo.irEtiquetaFinC(parser.tabla.getObC(), parser.jerarquia); 
                                                                        parser.manejoc.segundoChequeoIf(parser.tabla.getObC(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia); 
                                                                        parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); 
                                                                        parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$41",113, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$40 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.manejoc.primerChequeoIf(parser.tabla.getObC(), h); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$40",112, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$39 ::= 
            {
              Object RESULT =null;
  parser.usoPila.add(false);  
                                                                        parser.jerarquia++; 
                                                                        parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$39",111, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // IF ::= condIf parentesis_a NT$36 EXT NT$37 parentesis_b ENTER2 llave_a ENTER2 CUERPO_MAIN llave_b NT$38 ENTER2 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$38 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
  parser.manejo.irEtiquetaFinC(parser.tabla.getObC(), parser.jerarquia); 
                                                                        parser.manejoc.segundoChequeoIf(parser.tabla.getObC(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                        parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); 
                                                                        parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$38",110, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$37 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.manejoc.primerChequeoIf(parser.tabla.getObC(), h); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$37",109, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$36 ::= 
            {
              Object RESULT =null;
  parser.usoPila.add(false);  
                                                                        parser.jerarquia++; 
                                                                        parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$36",108, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PARAM2 ::= error 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de parametros, se esperaba una variable\n";
                                                           RESULT = new ArrayList<>(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM2",69, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PARAM2 ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM2",69, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARAM2 ::= PARAM2 OP_COND coma 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  //parser.manejoc.invocacionParametros(parser.tabla.getObC(), b.getId());  
                                                            if(a!=null){ 
                                                                if(!b.getTipo().equals("")) { 
                                                                    a.add(b); 
                                                                    RESULT=a; 
                                                                } else { 
                                                                    RESULT=null; 
                                                                } 
                                                            } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM2",69, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARAM ::= error 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de parametros, se esperaba una variable\n";
                                                           RESULT = new ArrayList<>(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM",68, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARAM ::= PARAM2 OP_COND 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  //parser.manejoc.invocacionParametros(parser.tabla.getObC(), b.getId());   
                                                            if(a!=null){ 
                                                                if(!b.getTipo().equals("")){ 
                                                                    a.add(b); 
                                                                    RESULT=a; 
                                                                } else { 
                                                                    RESULT=null; 
                                                                } 
                                                            } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM",68, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONSTRUCTOR ::= parentesis_a parentesis_b 
            {
              ArrayList<NodoBoolean> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",71, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONSTRUCTOR ::= parentesis_a PARAM parentesis_b 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",71, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CLASES2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES2",12, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CLASES2 ::= coma id NT$35 CLASES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES2",12, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$35 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.op.agregarClase(parser.tabla.getObC(), a.toString(), parser.idClase, parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright);
                                                                            parser.exe.agregarVariable(parser.tabla, a.toString(), 1, false, parser.idClase);
                                                                            parser.manejoc.agregarConstructor(parser.tabla, parser.idClase, a.toString(), 0, new ArrayList<>());     
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$35",107, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CLASES2 ::= coma id CONSTRUCTOR NT$34 CLASES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES2",12, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$34 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.op.crearClase(parser.tabla, b, parser.idClase, a.toString(), parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright);
                                                                            parser.exe.agregarVariable(parser.tabla, a.toString(), 1, false, parser.idClase); 
                                                                            parser.manejoc.agregarConstructor(parser.tabla, parser.idClase, a.toString(), b.size(), b);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$34",106, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CLASES ::= java punto id id NT$33 CLASES2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES",10, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$33 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.idClase = b.toString(); 
                                                                            parser.exe.agregarVariable(parser.tabla, c.toString(), 1, false, b.toString());
                                                                            parser.op.agregarClase(parser.tabla.getObC(), c.toString(), b.toString(), parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright);
                                                                            parser.manejoc.agregarConstructor(parser.tabla, b.toString(), c.toString(), 0, new ArrayList<>());       
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$33",105, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CLASES ::= java punto id id NT$31 CONSTRUCTOR NT$32 CLASES2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		ArrayList<NodoBoolean> d = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES",10, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<NodoBoolean> d = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.op.crearClase(parser.tabla, d, b.toString(), c.toString(), parser.jerarquia, cleft+PanelPrincipal.totalLineas, cright);
                                                                            parser.manejoc.agregarConstructor(parser.tabla, b.toString(), c.toString(), d.size(), d);     
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$32",104, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$31 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.idClase = b.toString(); 
                                                                            parser.exe.agregarVariable(parser.tabla, c.toString(), 1, false, b.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$31",103, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PARAM_METODOS ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",70, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAM_METODOS ::= PARAM 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",70, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // METODOS_MAIN ::= java punto id punto id parentesis_a NT$29 PARAM_METODOS parentesis_b puntoComa NT$30 ENTER2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		ArrayList<NodoBoolean> d = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS_MAIN",47, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$30 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<NodoBoolean> d = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
  parser.manejoc.crearMetodo(parser.tabla, c.toString(), parser.claseAux, "JV", d, bleft+PanelPrincipal.totalLineas, b.toString());
                                                                    parser.claseAux = ""; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$30",102, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$29 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.len=a.toString(); 
                                                                    parser.metodoCorrecto=parser.verif.verificarMetodo(parser.tabla, a.toString(), b.toString(), parser.jerarquia, c.toString(), cleft+PanelPrincipal.totalLineas, cright); 
                                                                    parser.claseUsar = parser.verif.devolverClaseJava2(parser.tabla, b.toString(), bleft+PanelPrincipal.totalLineas, bright); 
                                                                    if(parser.claseUsar != null){ 
                                                                        parser.claseAux = parser.claseUsar.getId();
                                                                        parser.idClase2 = "JV_"+parser.claseUsar.getId(); 
                                                                    } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$29",101, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // METODOS_MAIN ::= visual punto id parentesis_a NT$27 PARAM_METODOS parentesis_b puntoComa NT$28 ENTER2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS_MAIN",47, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$28 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
  parser.manejoc.crearMetodo(parser.tabla, b.toString(), "", "VB", c, bleft+PanelPrincipal.totalLineas, "");    
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$28",100, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$27 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.len=a.toString(); 
                                                                    parser.metodoCorrecto=parser.verif.verificarMetodo(parser.tabla, a.toString(), null, parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$27",99, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // METODOS_MAIN ::= python punto id parentesis_a NT$25 PARAM_METODOS parentesis_b puntoComa NT$26 ENTER2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS_MAIN",47, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$26 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
  parser.manejoc.crearMetodo(parser.tabla, b.toString(), "", "PY", c, bleft+PanelPrincipal.totalLineas, "");    
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$26",98, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$25 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.len=a.toString();   
                                                                    parser.metodoCorrecto=parser.verif.verificarMetodo(parser.tabla, a.toString(), null, parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$25",97, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // METODOS ::= java punto id punto id parentesis_a NT$24 PARAM_METODOS parentesis_b 
            {
              String RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<NodoBoolean> d = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  String idClase = "";
                                                                if(parser.claseUsar != null){ 
                                                                 idClase = parser.claseUsar.getId(); 
                                                                } 
                                                                RESULT = parser.manejoc.operacionMetodo(parser.tabla, c.toString(), idClase, "JV", d, bleft+PanelPrincipal.totalLineas, b.toString());    
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$24 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.len = a.toString(); 
                                                                parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), b.toString(), parser.jerarquia, c.toString(), bleft+PanelPrincipal.totalLineas, bright); 
                                                                parser.claseUsar = parser.verif.devolverClaseJava2(parser.tabla, b.toString(), bleft+PanelPrincipal.totalLineas, bright);   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$24",96, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // METODOS ::= visual punto id parentesis_a NT$23 PARAM_METODOS parentesis_b 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  RESULT = parser.manejoc.operacionMetodo(parser.tabla, b.toString(), "", "VB", c, bleft+PanelPrincipal.totalLineas, "");  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$23 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.len = a.toString(); 
                                                                parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$23",95, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // METODOS ::= python punto id parentesis_a NT$22 PARAM_METODOS parentesis_b 
            {
              String RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<NodoBoolean> c = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		    RESULT = parser.manejoc.operacionMetodo(parser.tabla, b.toString(), "", "PY", c, bleft+PanelPrincipal.totalLineas, "");    
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$22 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.len=a.toString(); 
                                                                parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$22",94, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VARIABLES_MAIN ::= CLASES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VARIABLES_MAIN ::= METODOS_MAIN 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VARIABLES_MAIN ::= VARS 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VARIABLES_MAIN ::= ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CUERPO_MAIN ::= CUERPO_MAIN error 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CUERPO_MAIN ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPO_MAIN ::= CUERPO_MAIN COMENTARIO_B 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPO_MAIN ::= CUERPO_MAIN COMENTARIO_A 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPO_MAIN ::= CUERPO_MAIN GETCH 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUERPO_MAIN ::= CUERPO_MAIN CLSCR 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUERPO_MAIN ::= CUERPO_MAIN MENSAJE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUERPO_MAIN ::= CUERPO_MAIN LECTURA_DATOS 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CUERPO_MAIN ::= CUERPO_MAIN SWITCH 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CUERPO_MAIN ::= CUERPO_MAIN DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CUERPO_MAIN ::= CUERPO_MAIN WHILE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CUERPO_MAIN ::= CUERPO_MAIN FOR 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CUERPO_MAIN ::= CUERPO_MAIN IF 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CUERPO_MAIN ::= CUERPO_MAIN VARIABLES_MAIN 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MAIN ::= tipoVoid main parentesis_a parentesis_b ENTER2 NT$20 llave_a ENTER2 CUERPO_MAIN llave_b NT$21 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MAIN",7, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
  parser.manejoc.finMain(parser.tabla.getObC()); 
                                                                        parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$21",93, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$20 ::= 
            {
              Object RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$20",92, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VAR_VECTOR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a.toString();  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_VECTOR",67, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VAR_VECTOR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a.toString();  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_VECTOR",67, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DIM_ASIG2 ::= DIM_ASIG2 agrupacion_a error agrupacion_b 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de valor para un arreglo, se esperaba un valor numerico\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM_ASIG2",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DIM_ASIG2 ::= 
            {
              Integer RESULT =null;
		  RESULT = 0; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM_ASIG2",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DIM_ASIG2 ::= DIM_ASIG2 agrupacion_a VAR_VECTOR agrupacion_b 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		   Integer suma = a + 1; 
                                                                                parser.dimensiones.add(b);
                                                                                RESULT=suma; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM_ASIG2",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DIM_ASIG ::= DIM_ASIG2 agrupacion_a error agrupacion_b 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		   int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de valor para un arreglo, se esperaba un valor numerico\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM_ASIG",49, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DIM_ASIG ::= DIM_ASIG2 agrupacion_a VAR_VECTOR agrupacion_b 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		   Integer suma = a + 1; 
                                                                                parser.dimensiones.add(b);     
                                                                                RESULT=suma; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM_ASIG",49, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DIM2 ::= DIM2 agrupacion_a error agrupacion_b 
            {
              NodoArreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de valor para un arreglo, se esperaba un valor numerico\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM2",52, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DIM2 ::= 
            {
              NodoArreglo RESULT =null;
		 RESULT = new NodoArreglo(0, ""); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM2",52, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DIM2 ::= DIM2 agrupacion_a OPERACION agrupacion_b 
            {
              NodoArreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		NodoArreglo a = (NodoArreglo)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  if(b.getValor() != null){ 
                                                                        if(b.getValor()){ 
                                                                            Integer suma = a.getSize() + 1; 
                                                                            String et = parser.manejoc.acumularSuma(parser.tabla, parser.idArreglo, suma, b.getId(), a.getEtiqueta());    
                                                                            RESULT = new NodoArreglo(suma, et); 
                                                                        } else {
                                                                            RESULT=null; 
                                                                        } 
                                                                    } else { 
                                                                        RESULT=null; 
                                                                    } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM2",52, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DIM ::= DIM2 agrupacion_a error agrupacion_b 
            {
              NodoArreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de valor para un arreglo, se esperaba un valor numerico\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DIM ::= DIM2 agrupacion_a OPERACION agrupacion_b 
            {
              NodoArreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		NodoArreglo a = (NodoArreglo)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  if(b.getValor()!= null){ 
                                                                        if(b.getValor()){
                                                                            Integer suma = a.getSize() + 1; 
                                                                            String et = parser.manejoc.acumularSuma(parser.tabla, parser.idArreglo, suma, b.getId(), a.getEtiqueta());
                                                                            RESULT = new NodoArreglo(suma, et);
                                                                        } else { 
                                                                            RESULT = null; 
                                                                        } 
                                                                    } else {
                                                                        RESULT = null; 
                                                                    } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VECTOR_COND ::= id NT$19 DIM 
            {
              NodoBoolean RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (NodoBoolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoArreglo b = (NodoArreglo)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  
                                                    String tip = "";
                                                  //  if(b != null){
                                                        tip = parser.op.devolverTipoArreglo(parser.tabla.getObC(), a.toString(), b.getSize(), parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright);
                                                   // }
                                                    String et = "";
                                                   // if(b != null){
                                                        et = parser.manejoc.etiquetaArreglo(parser.tabla, b.getEtiqueta(), a.toString());
                                                   // }
                                                    RESULT = new NodoBoolean(tip, et); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VECTOR_COND",64, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$19 ::= 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.idArreglo = a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$19",91, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VECTOR_OP ::= id NT$18 DIM 
            {
              NodoOperacion RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (NodoOperacion) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoArreglo b = (NodoArreglo)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  parser.tipoActual = parser.auxTipo; 
                                                    parser.auxTipo = ""; 
                                                    if(b != null){ 
                                                        String et = parser.manejoc.etiquetaArreglo(parser.tabla, b.getEtiqueta(), a.toString());
                                                        Boolean val = parser.verif.verifVectorOperacion(parser.tabla.getObC(), a.toString(), b.getSize(), parser.jerarquia, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); 
                                                        RESULT = new NodoOperacion(et, val);
                                                    } else {
                                                        RESULT = new NodoOperacion("", null);    
                                                    }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VECTOR_OP",56, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$18 ::= 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.auxTipo = parser.tipoActual; 
                                                    parser.tipoActual = "Integer";
                                                    parser.idArreglo = a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$18",90, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VECTOR ::= id NT$17 DIM 
            {
              NodoOperacion RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (NodoOperacion) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoArreglo b = (NodoArreglo)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String posStack = parser.manejoc.encontrarNodoArreglo(parser.tabla, b.getEtiqueta(), a.toString());
                                                    boolean valor = false;
                                                    if(parser.verif.verifExistenciaArreglo(parser.tabla.getObC(), parser.jerarquia, a.toString())){ 
                                                        parser.tipoActual = parser.tabla.getObC().getListArreglos().get(VerifObjetos.iterador).getTipo(); 
                                                        valor = true; 
                                                    } else {  
                                                        valor = false; 
                                                    }  
                                                    RESULT = new NodoOperacion(posStack, valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VECTOR",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$17 ::= 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.tipoActual="Integer";
                                                    parser.idArreglo = a.toString();  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$17",89, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VAR ::= menos comillaSimple numero comillaSimple 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoOperacion(a.toString() + b.toString() + c.toString() + d.toString(), true);   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VAR ::= menos comillaSimple id comillaSimple 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoOperacion(a.toString() + b.toString() + c.toString() + d.toString(), true);   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VAR ::= menos id 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  Boolean valor = parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); 
                                                                    String et = parser.manejoc.etiquetaId(parser.tabla, a.toString());        
                                                                    RESULT = new NodoOperacion(b.toString()+et, valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VAR ::= menos METODOS 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  parser.contParam = 0; 
                                                                    parser.idClase2 = "";  
                                                                    RESULT = new NodoOperacion("-"+a, true); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VAR ::= menos VECTOR_OP 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String t = parser.manejoc.etiquetaNegativa(parser.tabla, a.getId());
                                                                    RESULT = new NodoOperacion(b.toString()+t, a.getValor()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VAR ::= menos numero punto numero 
            {
              NodoOperacion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Float", parser.tipoActual, a.toString()+b.toString()+c.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(d.toString()+a.toString()+b.toString()+c.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAR ::= menos numero 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Integer", parser.tipoActual, a.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(b.toString()+a.toString(),valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAR ::= id 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  Boolean valor = parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright);  
                                                                    String et = parser.manejoc.etiquetaId(parser.tabla, a.toString());
                                                                    RESULT = new NodoOperacion(et, valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VAR ::= METODOS 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  parser.contParam = 0; 
                                                                    parser.idClase2 = ""; 
                                                                    RESULT = new NodoOperacion(a, true);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VAR ::= VECTOR_OP 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VAR ::= numero punto numero 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Float", parser.tipoActual, a.toString()+b.toString()+c.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(a.toString()+b.toString()+c.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VAR ::= numero 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Integer", parser.tipoActual, a.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(a.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VAR ::= comillaSimple numero comillaSimple 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoOperacion(a.toString()+b.toString()+c.toString(), true);   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAR ::= comillaSimple id comillaSimple 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoOperacion(a.toString()+b.toString()+c.toString(), true);   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERACION ::= VAR 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERACION ::= OPERACION modulo OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String id = parser.manejoc.agregarOperacion(parser.tabla.getObC(), a.getId(), b.getId(), "modulo"); if(a.getValor() && b.getValor()){ RESULT = new NodoOperacion(id, true);  } else { RESULT=new NodoOperacion(id, false); }   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERACION ::= OPERACION div OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String id = parser.manejoc.agregarOperacion(parser.tabla.getObC(), a.getId(), b.getId(), "div"); if(a.getValor() && b.getValor()){ RESULT = new NodoOperacion(id, true);  } else { RESULT=new NodoOperacion(id, false); }   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION ::= OPERACION por OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String id = parser.manejoc.agregarOperacion(parser.tabla.getObC(), a.getId(), b.getId(), "mult"); if(a.getValor() && b.getValor()){ RESULT = new NodoOperacion(id, true);  } else { RESULT=new NodoOperacion(id, false); }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERACION ::= OPERACION menos OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String id = parser.manejoc.agregarOperacion(parser.tabla.getObC(), a.getId(), b.getId(), "resta"); if(a.getValor() && b.getValor()){ RESULT = new NodoOperacion(id, true);  } else { RESULT=new NodoOperacion(id, false); }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERACION ::= OPERACION mas OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String id = parser.manejoc.agregarOperacion(parser.tabla.getObC(), a.getId(), b.getId(), "suma");  if(a.getValor() && b.getValor()){ RESULT = new NodoOperacion(id, true);  } else { RESULT=new NodoOperacion(id, false); }      
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  RESULT = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_VAR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 PanelPrincipal.errores += "Fila: " + aleft + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de tipos, el tipo: "+a.toString()+" no existe dentro de la gramatica C\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",41, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_VAR ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",41, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_VAR ::= tipoChar 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",41, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_VAR ::= tipoInteger 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",41, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARS2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS2",31, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARS2 ::= coma id NT$16 DIM_ASIG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  if(b != null){ 
                                                                    int size = parser.manejoc.definirSize(parser.tabla, parser.dimensiones, a.toString(), bleft+PanelPrincipal.totalLineas, bright);
                                                                    parser.exe.agregarVariable(parser.tabla, a.toString(), size, true, parser.tipoActual);
                                                                    parser.op.agregarNuevaVar(parser.tabla.getObC(), a.toString(), parser.tipoActual, "Arreglo", parser.jerarquia, true, "", b, aleft+PanelPrincipal.totalLineas, aright, parser.dimensiones, null); 
                                                                } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS2",31, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$16 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.tipoActual = "Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$16",88, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARS2 ::= coma id VALOR NT$15 VARS2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS2",31, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$15 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.manejoc.crearVariableConValor(parser.tabla, a.toString(), parser.tipoActual, b); 
                                                                parser.exe.agregarVariable(parser.tabla, a.toString(), 1, false, parser.tipoActual);
                                                                if(b != null){ 
                                                                    if(b.getValor()){ 
                                                                        parser.op.agregarNuevaVar(parser.tabla.getObC(), a.toString(), parser.tipoActual, "Variable", parser.jerarquia, b.getValor(), "", null, aleft+PanelPrincipal.totalLineas, aright, parser.dimensiones, null); 
                                                                    } 
                                                                } else { 
                                                                    parser.op.agregarNuevaVar(parser.tabla.getObC(), a.toString(), parser.tipoActual, "Variable", parser.jerarquia, false, "", null, aleft+PanelPrincipal.totalLineas, aright, parser.dimensiones, null); 
                                                                }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$15",87, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARS ::= TIPO_VAR id NT$13 DIM_ASIG NT$14 VARS2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS",5, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.tipoActual=a; 
                                                                if(c!=null){
                                                                    int size = parser.manejoc.definirSize(parser.tabla, parser.dimensiones, b.toString(), cleft+PanelPrincipal.totalLineas, cright);
                                                                    parser.exe.agregarVariable(parser.tabla, b.toString(), size, true, a);
                                                                    parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Arreglo", parser.jerarquia, true, "", c, bleft+PanelPrincipal.totalLineas, bright, parser.dimensiones, null); 
                                                                } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$14",86, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.tipoActual = "Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$13",85, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARS ::= TIPO_VAR id NT$11 VALOR NT$12 VARS2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		NodoOperacion c = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS",5, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion c = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.manejoc.crearVariableConValor(parser.tabla, b.toString(), a, c);    
                                                                if(c!=null){ 
                                                                    if(c.getValor()){
                                                                        parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Variable", parser.jerarquia, c.getValor(), "", null, bleft+PanelPrincipal.totalLineas, bright, parser.dimensiones, null); 
                                                                    } else { 
                                                                        System.out.println("soy falso"); 
                                                                    } 
                                                                } else { 
                                                                    parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Variable", parser.jerarquia, false, "", null, bleft+PanelPrincipal.totalLineas, bright, parser.dimensiones, null); 
                                                                }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$12",84, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.tipoActual = a; 
                                                                parser.exe.agregarVariable(parser.tabla, b.toString(), 1, false, a); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$11",83, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACIONES ::= VECTOR igual error puntoComa NT$10 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de dato a arreglo, se esperaba operacion aritmetica.\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$10",82, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACIONES ::= id igual error puntoComa NT$9 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 int linea = bleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + bright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de dato a variable: "+a.toString()+", se esperaba operacion aritmetica\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$9",81, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACIONES ::= VECTOR igual OPERACION puntoComa NT$8 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  if(a.getValor() && b.getValor()){ 
                                                                    parser.manejoc.asignarValorNodo(parser.tabla, a.getId(), b.getId()); 
                                                                }     
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$8",80, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACIONES ::= id igual NT$6 OPERACION puntoComa NT$7 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.manejoc.asignarValor(parser.tabla, a.toString(), b.getId());   
                                                                parser.tabla.getObC().getListVariables().get(VerifObjetos.iterador).getListAsignaciones().add(parser.jerarquia); 
                                                                parser.tabla.getObC().getListVariables().get(VerifObjetos.iterador).setValor(true);    
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$7",79, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.tipoActual = parser.verif.devolverTipoVar(parser.tabla.getObC(), parser.jerarquia, a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$6",78, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= igual error 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de dato a variable, se esperaba operacion aritmetica\n"; 
                                                           RESULT = null; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VALOR",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= 
            {
              NodoOperacion RESULT =null;
		 RESULT=null; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VALOR",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR ::= igual OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VALOR",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONSTANTES ::= tipoConst TIPO_VAR NT$4 id igual VAR puntoComa NT$5 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		NodoOperacion c = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CONSTANTES",3, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion c = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.exe.agregarVariable(parser.tabla, b.toString(), 1, false, a);
                                                            parser.manejoc.crearConstante(parser.tabla, b.toString(), c.getId());
                                                            parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Constante", parser.jerarquia, true, "", null, bleft+PanelPrincipal.totalLineas, bright, parser.dimensiones, c.getId()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$5",77, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.tipoActual = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$4",76, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARIABLES ::= VARIABLES COMENTARIO_B 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLES ::= VARIABLES COMENTARIO_A 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLES ::= VARIABLES CLASES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLES ::= VARIABLES VARS 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLES ::= VARIABLES ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLES ::= VARIABLES CONSTANTES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // JAVA_CLASES ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error al momento de llamar una clase de JAVA\n"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("JAVA_CLASES",40, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // JAVA_CLASES ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("JAVA_CLASES",40, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // JAVA_CLASES ::= por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("JAVA_CLASES",40, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LIBRERIAS ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LIBRERIAS ::= LIBRERIAS numeral condInclude menor id punto id mayor ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LIBRERIAS ::= LIBRERIAS numeral condInclude menor id mayor ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LIBRERIAS ::= LIBRERIAS numeral condInclude comilla java punto JAVA_CLASES comilla NT$3 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.op.activarLenguaje(a.toString(), parser.tabla, b, bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$3",75, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIBRERIAS ::= LIBRERIAS numeral condInclude comilla python comilla NT$2 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.op.activarLenguaje(a.toString(), parser.tabla, "", aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$2",74, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIAS ::= LIBRERIAS numeral condInclude comilla visual comilla NT$1 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.op.activarLenguaje(a.toString(), parser.tabla, "", aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$1",73, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= ENTER2 LIBRERIAS NT$0 VARIABLES MAIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.manejoc.crearMain(parser.tabla.getObC()); 
                                                               parser.manejoc.inicializaciones(parser.tabla); 
                                                               parser.manejoc.modificarConstructores(parser.tabla);     
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$0",72, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		RESULT = start_val;
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxC$parser.done_parsing();
          return CUP$SintaxC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

