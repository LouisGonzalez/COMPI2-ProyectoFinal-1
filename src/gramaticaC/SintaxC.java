
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 05 00:33:34 CST 2020
//----------------------------------------------------

package gramaticaC;

import java_cup.runtime.*;
import Operaciones.*;
import Tablas.*;
import verificaciones.*;
import objetos.*;
import ObjetosC.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 05 00:33:34 CST 2020
  */
public class SintaxC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxC() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0184\000\002\002\004\000\002\002\005\000\002\103" +
    "\002\000\002\003\012\000\002\104\002\000\002\003\012" +
    "\000\002\105\002\000\002\003\014\000\002\003\011\000" +
    "\002\003\013\000\002\003\002\000\002\051\003\000\002" +
    "\051\003\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\002\000\002\106\002" +
    "\000\002\107\002\000\002\005\013\000\002\062\004\000" +
    "\002\062\002\000\002\110\002\000\002\111\002\000\002" +
    "\006\011\000\002\112\002\000\002\006\010\000\002\113" +
    "\002\000\002\114\002\000\002\007\012\000\002\115\002" +
    "\000\002\007\011\000\002\116\002\000\002\041\007\000" +
    "\002\041\005\000\002\041\002\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\003\000\002\056\005\000" +
    "\002\056\003\000\002\056\005\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\004\000\002\056" +
    "\006\000\002\056\004\000\002\056\004\000\002\056\004" +
    "\000\002\117\002\000\002\060\005\000\002\120\002\000" +
    "\002\061\005\000\002\065\006\000\002\066\006\000\002" +
    "\066\002\000\002\121\002\000\002\122\002\000\002\011" +
    "\016\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\002\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\123\002\000\002\057\011\000" +
    "\002\124\002\000\002\057\011\000\002\125\002\000\002" +
    "\057\013\000\002\126\002\000\002\064\013\000\002\127" +
    "\002\000\002\064\013\000\002\130\002\000\002\064\015" +
    "\000\002\131\002\000\002\067\005\000\002\067\002\000" +
    "\002\132\002\000\002\070\006\000\002\070\002\000\002" +
    "\133\002\000\002\134\002\000\002\014\014\000\002\135" +
    "\002\000\002\014\012\000\002\102\005\000\002\102\004" +
    "\000\002\100\004\000\002\101\005\000\002\101\002\000" +
    "\002\136\002\000\002\016\007\000\002\137\002\000\002" +
    "\016\006\000\002\016\002\000\002\140\002\000\002\141" +
    "\002\000\002\017\017\000\002\077\005\000\002\077\003" +
    "\000\002\077\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\071\005\000\002\071\005\000\002\071" +
    "\003\000\002\071\006\000\002\071\004\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\003\000\002" +
    "\074\005\000\002\074\003\000\002\074\005\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\074\004" +
    "\000\002\074\006\000\002\074\004\000\002\074\004\000" +
    "\002\074\004\000\002\076\004\000\002\142\002\000\002" +
    "\075\011\000\002\143\002\000\002\075\011\000\002\144" +
    "\002\000\002\075\013\000\002\145\002\000\002\146\002" +
    "\000\002\021\020\000\002\147\002\000\002\150\002\000" +
    "\002\021\013\000\002\021\002\000\002\151\002\000\002" +
    "\152\002\000\002\153\002\000\002\154\002\000\002\022" +
    "\033\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\002\000\002\072\003\000\002\072\003\000" +
    "\002\155\002\000\002\156\002\000\002\023\016\000\002" +
    "\157\002\000\002\160\002\000\002\024\021\000\002\161" +
    "\002\000\002\162\002\000\002\163\002\000\002\025\017" +
    "\000\002\164\002\000\002\165\002\000\002\026\013\000" +
    "\002\166\002\000\002\026\010\000\002\026\002\000\002" +
    "\010\005\000\002\010\002\000\002\040\003\000\002\040" +
    "\005\000\002\167\002\000\002\027\017\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\063\003\000" +
    "\002\063\003\000\002\170\002\000\002\031\014\000\002" +
    "\171\002\000\002\031\012\000\002\032\007\000\002\032" +
    "\005\000\002\032\002\000\002\033\007\000\002\172\002" +
    "\000\002\034\012\000\002\173\002\000\002\034\012\000" +
    "\002\034\007\000\002\035\003\000\002\035\004\000\002" +
    "\035\003\000\002\035\004\000\002\035\003\000\002\035" +
    "\003\000\002\035\005\000\002\042\005\000\002\045\006" +
    "\000\002\043\004\000\002\043\003\000\002\044\004\000" +
    "\002\044\003\000\002\044\002\000\002\047\004\000\002" +
    "\047\004\000\002\047\004\000\002\047\004\000\002\047" +
    "\004\000\002\047\004\000\002\047\004\000\002\047\004" +
    "\000\002\047\004\000\002\047\004\000\002\047\004\000" +
    "\002\047\004\000\002\047\004\000\002\047\004\000\002" +
    "\047\004\000\002\047\004\000\002\047\004\000\002\047" +
    "\004\000\002\047\004\000\002\047\004\000\002\047\004" +
    "\000\002\047\004\000\002\047\004\000\002\047\004\000" +
    "\002\047\004\000\002\047\004\000\002\047\004\000\002" +
    "\047\004\000\002\047\004\000\002\047\004\000\002\047" +
    "\004\000\002\047\004\000\002\047\004\000\002\047\004" +
    "\000\002\047\004\000\002\047\004\000\002\047\004\000" +
    "\002\047\004\000\002\047\004\000\002\047\004\000\002" +
    "\047\004\000\002\047\004\000\002\047\004\000\002\047" +
    "\004\000\002\047\004\000\002\047\004\000\002\047\004" +
    "\000\002\047\004\000\002\047\004\000\002\047\004\000" +
    "\002\047\002\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\002\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02aa\000\022\022\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\067\ufff7\071\ufff7\001\002\000\022\022\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\067\ufff0\071" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\017\u0293\001\002\000\020\022\013\033" +
    "\024\034\021\035\022\036\017\037\016\067\011\001\002" +
    "\000\006\014\uffc7\043\u0292\001\002\000\004\043\u0291\001" +
    "\002\000\004\005\u028f\001\002\000\020\022\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\037\ufff4\067\ufff4\001\002\000" +
    "\004\002\000\001\002\000\010\034\021\035\022\036\017" +
    "\001\002\000\004\067\uffda\001\002\000\020\022\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\067\ufff1\001\002" +
    "\000\004\067\uffdb\001\002\000\004\067\uffdc\001\002\000" +
    "\020\022\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\067\ufff2\001\002\000\004\040\160\001\002\000\020\022" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\067\ufff3" +
    "\001\002\000\004\067\027\001\002\000\012\004\uffe5\006" +
    "\uffe5\014\uffc1\043\uffe5\001\002\000\004\014\155\001\002" +
    "\000\006\004\uffe2\006\uffe2\001\002\000\010\004\uffeb\006" +
    "\uffeb\043\034\001\002\000\006\004\uffe4\006\uffe4\001\002" +
    "\000\022\012\046\020\035\021\047\022\037\025\050\027" +
    "\042\066\045\067\036\001\002\000\004\005\126\001\002" +
    "\000\026\004\uffcd\006\uffcd\013\uffcd\014\uffc5\015\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\001\002\000\004" +
    "\005\116\001\002\000\020\004\uffec\006\uffec\026\064\027" +
    "\067\030\063\031\071\032\065\001\002\000\024\004\uffcf" +
    "\006\uffcf\013\uffcf\015\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\001\002\000\014\020\035\021\047\022\037" +
    "\066\106\067\111\001\002\000\024\004\uffd3\006\uffd3\013" +
    "\uffd3\015\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\001\002\000\024\004\uffce\006\uffce\013\uffce\015\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\001\002\000\026" +
    "\004\uffd1\005\104\006\uffd1\013\uffd1\015\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\001\002\000\022\012\046" +
    "\020\035\021\047\022\037\025\050\027\042\066\045\067" +
    "\036\001\002\000\004\005\053\001\002\000\004\067\051" +
    "\001\002\000\004\025\052\001\002\000\024\004\uffd2\006" +
    "\uffd2\013\uffd2\015\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\001\002\000\004\067\054\001\002\000\004\012" +
    "\055\001\002\000\024\012\uffac\013\uffac\020\uffac\021\uffac" +
    "\022\uffac\025\uffac\027\uffac\066\uffac\067\uffac\001\002\000" +
    "\024\012\uffa0\013\uff9e\020\uffa0\021\uffa0\022\uffa0\025\uffa0" +
    "\027\uffa0\066\uffa0\067\uffa0\001\002\000\022\012\046\020" +
    "\035\021\047\022\037\025\050\027\042\066\045\067\036" +
    "\001\002\000\004\013\061\001\002\000\024\004\uffab\006" +
    "\uffab\013\uffab\015\uffab\026\uffab\027\uffab\030\uffab\031\uffab" +
    "\032\uffab\001\002\000\020\004\070\013\uff9b\026\064\027" +
    "\067\030\063\031\071\032\065\001\002\000\022\012\046" +
    "\020\035\021\047\022\037\025\050\027\042\066\045\067" +
    "\036\001\002\000\022\012\046\020\035\021\047\022\037" +
    "\025\050\027\042\066\045\067\036\001\002\000\022\012" +
    "\046\020\035\021\047\022\037\025\050\027\042\066\045" +
    "\067\036\001\002\000\004\013\uff9f\001\002\000\022\012" +
    "\046\020\035\021\047\022\037\025\050\027\042\066\045" +
    "\067\036\001\002\000\022\012\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\025\uff9d\027\uff9d\066\uff9d\067\uff9d\001\002\000\022" +
    "\012\046\020\035\021\047\022\037\025\050\027\042\066" +
    "\045\067\036\001\002\000\024\004\uffd5\006\uffd5\013\uffd5" +
    "\015\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\001" +
    "\002\000\022\012\046\020\035\021\047\022\037\025\050" +
    "\027\042\066\045\067\036\001\002\000\020\004\070\013" +
    "\uff9b\026\064\027\067\030\063\031\071\032\065\001\002" +
    "\000\004\013\uff9c\001\002\000\024\004\uffd7\006\uffd7\013" +
    "\uffd7\015\uffd7\026\uffd7\027\uffd7\030\063\031\071\032\065" +
    "\001\002\000\024\004\uffd4\006\uffd4\013\uffd4\015\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\001\002\000\024" +
    "\004\uffd8\006\uffd8\013\uffd8\015\uffd8\026\uffd8\027\uffd8\030" +
    "\063\031\071\032\065\001\002\000\024\004\uffd6\006\uffd6" +
    "\013\uffd6\015\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\001\002\000\016\013\103\026\064\027\067\030\063" +
    "\031\071\032\065\001\002\000\024\004\uffd9\006\uffd9\013" +
    "\uffd9\015\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\001\002\000\004\066\105\001\002\000\024\004\uffd0\006" +
    "\uffd0\013\uffd0\015\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\001\002\000\026\004\uffcc\005\114\006\uffcc\013" +
    "\uffcc\015\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\001\002\000\024\004\uffca\006\uffca\013\uffca\015\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\001\002\000\024" +
    "\004\uffc9\006\uffc9\013\uffc9\015\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\001\002\000\026\004\uffc8\006\uffc8" +
    "\013\uffc8\014\uffc5\015\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\001\002\000\004\014\uffc1\001\002\000\024" +
    "\004\uffc4\006\uffc4\013\uffc4\015\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\001\002\000\004\066\115\001\002" +
    "\000\024\004\uffcb\006\uffcb\013\uffcb\015\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\001\002\000\004\067\117" +
    "\001\002\000\004\005\120\001\002\000\004\067\121\001" +
    "\002\000\004\012\122\001\002\000\024\012\uffa8\013\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\025\uffa8\027\uffa8\066\uffa8\067" +
    "\uffa8\001\002\000\024\012\uffa0\013\uff9e\020\uffa0\021\uffa0" +
    "\022\uffa0\025\uffa0\027\uffa0\066\uffa0\067\uffa0\001\002\000" +
    "\004\013\125\001\002\000\024\004\uffa7\006\uffa7\013\uffa7" +
    "\015\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\001" +
    "\002\000\004\067\127\001\002\000\004\012\130\001\002" +
    "\000\024\012\uffaa\013\uffaa\020\uffaa\021\uffaa\022\uffaa\025" +
    "\uffaa\027\uffaa\066\uffaa\067\uffaa\001\002\000\024\012\uffa0" +
    "\013\uff9e\020\uffa0\021\uffa0\022\uffa0\025\uffa0\027\uffa0\066" +
    "\uffa0\067\uffa0\001\002\000\004\013\133\001\002\000\024" +
    "\004\uffa9\006\uffa9\013\uffa9\015\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\001\002\000\006\004\135\006\uffdd" +
    "\001\002\000\004\067\144\001\002\000\004\006\137\001" +
    "\002\000\064\011\uff1a\016\uff1a\020\uff1a\021\uff1a\022\uff1a" +
    "\033\uff1a\034\uff1a\035\uff1a\036\uff1a\037\uff1a\047\uff1a\051" +
    "\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a" +
    "\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074\uff1a\075\142\076" +
    "\uff1a\001\002\000\062\011\uffe3\016\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\047" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\057\uffe3\060\uffe3\064\uffe3\065\uffe3\067\uffe3\074\uffe3\076" +
    "\uffe3\001\002\000\004\075\143\001\002\000\074\002\uff1b" +
    "\010\uff1b\011\uff1b\016\uff1b\020\uff1b\021\uff1b\022\uff1b\033" +
    "\uff1b\034\uff1b\035\uff1b\036\uff1b\037\uff1b\047\uff1b\050\uff1b" +
    "\051\uff1b\052\uff1b\053\uff1b\054\uff1b\055\uff1b\056\uff1b\057" +
    "\uff1b\060\uff1b\064\uff1b\065\uff1b\067\uff1b\071\uff1b\074\uff1b" +
    "\075\uff1d\076\uff1b\001\002\000\074\002\uff1c\010\uff1c\011" +
    "\uff1c\016\uff1c\020\uff1c\021\uff1c\022\uff1c\033\uff1c\034\uff1c" +
    "\035\uff1c\036\uff1c\037\uff1c\047\uff1c\050\uff1c\051\uff1c\052" +
    "\uff1c\053\uff1c\054\uff1c\055\uff1c\056\uff1c\057\uff1c\060\uff1c" +
    "\064\uff1c\065\uff1c\067\uff1c\071\uff1c\074\uff1c\075\uff1e\076" +
    "\uff1c\001\002\000\012\004\uffeb\006\uffeb\014\uffc1\043\034" +
    "\001\002\000\006\004\uffe0\006\uffe0\001\002\000\004\006" +
    "\uffde\001\002\000\006\004\135\006\uffdd\001\002\000\004" +
    "\006\uffdf\001\002\000\006\004\135\006\uffdd\001\002\000" +
    "\004\006\153\001\002\000\064\011\uff1a\016\uff1a\020\uff1a" +
    "\021\uff1a\022\uff1a\033\uff1a\034\uff1a\035\uff1a\036\uff1a\037" +
    "\uff1a\047\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a" +
    "\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074" +
    "\uff1a\075\142\076\uff1a\001\002\000\062\011\uffe1\016\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\047\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\064\uffe1\065\uffe1\067" +
    "\uffe1\074\uffe1\076\uffe1\001\002\000\022\012\046\020\035" +
    "\021\047\022\037\025\050\027\042\066\045\067\036\001" +
    "\002\000\016\015\157\026\064\027\067\030\063\031\071" +
    "\032\065\001\002\000\042\004\uffc3\006\uffc3\013\uffc3\014" +
    "\uffc2\015\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\100\uffc3\101\uffc3\001" +
    "\002\000\004\012\161\001\002\000\004\013\162\001\002" +
    "\000\006\010\uff1a\075\142\001\002\000\004\010\uffc0\001" +
    "\002\000\004\010\165\001\002\000\052\011\uff1a\020\uff1a" +
    "\021\uff1a\022\uff1a\034\uff1a\035\uff1a\036\uff1a\047\uff1a\051" +
    "\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a" +
    "\065\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001\002\000" +
    "\050\011\uffb1\020\uffb1\021\uffb1\022\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\047\uffb1\051\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\064\uffb1\065\uffb1\067\uffb1\074\uffb1\076\uffb1" +
    "\001\002\000\050\011\175\020\170\021\225\022\223\034" +
    "\021\035\022\036\017\047\202\051\177\054\227\055\174" +
    "\056\226\057\171\060\230\064\203\065\204\067\222\074" +
    "\210\076\207\001\002\000\004\005\u027f\001\002\000\004" +
    "\012\u022d\001\002\000\056\011\uffb6\016\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\034\uffb6\035\uffb6\036\uffb6\047\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\064\uffb6\065\uffb6\067\uffb6\074\uffb6\076\uffb6\001\002" +
    "\000\056\011\uffaf\016\uffaf\020\uffaf\021\uffaf\022\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\047\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\064\uffaf\065" +
    "\uffaf\067\uffaf\074\uffaf\076\uffaf\001\002\000\004\012\u0222" +
    "\001\002\000\006\002\uffbf\075\uffbf\001\002\000\056\011" +
    "\uffbb\016\uffbb\020\uffbb\021\uffbb\022\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\064\uffbb\065\uffbb\067\uffbb" +
    "\074\uffbb\076\uffbb\001\002\000\004\012\uff49\001\002\000" +
    "\056\011\uffb9\016\uffb9\020\uffb9\021\uffb9\022\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\064\uffb9\065\uffb9" +
    "\067\uffb9\074\uffb9\076\uffb9\001\002\000\056\011\uffbd\016" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\047\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\064\uffbd\065\uffbd\067\uffbd\074\uffbd" +
    "\076\uffbd\001\002\000\004\012\u01dc\001\002\000\004\012" +
    "\u01d8\001\002\000\004\012\u01d4\001\002\000\056\011\uffad" +
    "\016\uffad\020\uffad\021\uffad\022\uffad\034\uffad\035\uffad\036" +
    "\uffad\047\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\064\uffad\065\uffad\067\uffad\074" +
    "\uffad\076\uffad\001\002\000\056\011\uffbc\016\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\034\uffbc\035\uffbc\036\uffbc\047\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\064\uffbc\065\uffbc\067\uffbc\074\uffbc\076\uffbc\001" +
    "\002\000\160\004\ufe7e\005\ufe7e\006\ufe7e\007\ufe7e\010\ufe7e" +
    "\011\ufe7e\012\ufe7e\013\ufe7e\014\ufe7e\015\ufe7e\016\ufe7e\017" +
    "\ufe7e\020\ufe7e\021\ufe7e\022\ufe7e\023\ufe7e\025\ufe7e\026\ufe7e" +
    "\027\ufe7e\030\ufe7e\031\ufe7e\033\ufe7e\034\ufe7e\035\ufe7e\037" +
    "\ufe7e\040\ufe7e\041\ufe7e\042\ufe7e\043\ufe7e\044\ufe7e\045\ufe7e" +
    "\046\ufe7e\047\ufe7e\050\ufe7e\051\ufe7e\052\ufe7e\053\ufe7e\054" +
    "\ufe7e\055\ufe7e\056\ufe7e\057\ufe7e\060\ufe7e\061\ufe7e\062\ufe7e" +
    "\063\ufe7e\064\ufe7e\065\ufe7e\066\ufe7e\067\ufe7e\070\ufe7e\071" +
    "\ufe7e\072\ufe7e\073\ufe7e\075\ufe7e\077\ufe7e\001\002\000\150" +
    "\004\ufee7\005\ufee7\006\ufee7\007\ufee7\010\ufee7\011\ufee7\012" +
    "\ufee7\013\ufee7\014\ufee7\015\ufee7\016\ufee7\017\ufee7\020\ufee7" +
    "\021\ufee7\022\ufee7\023\ufee7\025\ufee7\026\ufee7\027\ufee7\030" +
    "\ufee7\031\ufee7\033\ufee7\034\ufee7\035\ufee7\037\ufee7\040\ufee7" +
    "\041\ufee7\042\ufee7\043\ufee7\044\ufee7\045\ufee7\046\ufee7\047" +
    "\ufee7\050\ufee7\051\ufee7\052\ufee7\053\ufee7\054\ufee7\055\ufee7" +
    "\056\ufee7\057\ufee7\060\ufee7\064\ufee7\065\ufee7\066\ufee7\067" +
    "\ufee7\070\ufee7\071\ufee7\072\ufee7\073\ufee7\075\ufee7\001\002" +
    "\000\056\011\uffae\016\uffae\020\uffae\021\uffae\022\uffae\034" +
    "\uffae\035\uffae\036\uffae\047\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\064\uffae\065" +
    "\uffae\067\uffae\074\uffae\076\uffae\001\002\000\056\011\uffb2" +
    "\016\uffb2\020\uffb2\021\uffb2\022\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\064\uffb2\065\uffb2\067\uffb2\074" +
    "\uffb2\076\uffb2\001\002\000\056\011\uffb3\016\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\034\uffb3\035\uffb3\036\uffb3\047\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\064\uffb3\065\uffb3\067\uffb3\074\uffb3\076\uffb3\001" +
    "\002\000\056\011\uffb5\016\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\047\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\064\uffb5" +
    "\065\uffb5\067\uffb5\074\uffb5\076\uffb5\001\002\000\056\011" +
    "\uffb4\016\uffb4\020\uffb4\021\uffb4\022\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\064\uffb4\065\uffb4\067\uffb4" +
    "\074\uffb4\076\uffb4\001\002\000\056\011\uffb0\016\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\034\uffb0\035\uffb0\036\uffb0\047\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\064\uffb0\065\uffb0\067\uffb0\074\uffb0\076\uffb0" +
    "\001\002\000\004\043\u018e\001\002\000\056\011\uffb8\016" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\047\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\060\uffb8\064\uffb8\065\uffb8\067\uffb8\074\uffb8" +
    "\076\uffb8\001\002\000\056\011\uffb7\016\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\034\uffb7\035\uffb7\036\uffb7\047\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\064\uffb7\065\uffb7\067\uffb7\074\uffb7\076\uffb7\001\002" +
    "\000\006\014\uffc7\043\u0180\001\002\000\004\005\u015d\001" +
    "\002\000\056\011\uffba\016\uffba\020\uffba\021\uffba\022\uffba" +
    "\034\uffba\035\uffba\036\uffba\047\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\064\uffba" +
    "\065\uffba\067\uffba\074\uffba\076\uffba\001\002\000\004\005" +
    "\u0155\001\002\000\006\010\uff1a\075\142\001\002\000\004" +
    "\012\uff5a\001\002\000\004\012\231\001\002\000\004\024" +
    "\232\001\002\000\154\004\ufee7\005\ufee7\006\ufee7\007\ufee7" +
    "\010\ufee7\011\ufee7\012\ufee7\013\ufee7\014\ufee7\015\ufee7\016" +
    "\ufee7\017\ufee7\020\ufee7\021\ufee7\022\ufee7\023\ufee7\025\ufee7" +
    "\026\ufee7\027\ufee7\030\ufee7\031\ufee7\033\ufee7\034\ufee7\035" +
    "\ufee7\037\ufee7\040\ufee7\041\ufee7\042\ufee7\043\ufee7\044\ufee7" +
    "\045\ufee7\046\ufee7\047\ufee7\050\ufee7\051\ufee7\052\ufee7\053" +
    "\ufee7\054\ufee7\055\ufee7\056\ufee7\057\ufee7\060\ufee7\061\ufee7" +
    "\062\ufee7\063\ufee7\064\ufee7\065\ufee7\066\ufee7\067\ufee7\070" +
    "\ufee7\071\ufee7\072\ufee7\073\ufee7\001\002\000\154\004\247" +
    "\005\272\006\276\007\243\010\246\011\245\012\301\013" +
    "\277\014\316\015\314\016\234\017\311\020\236\021\304" +
    "\022\302\023\312\025\305\026\265\027\262\030\271\031" +
    "\306\033\307\034\253\035\257\037\317\040\240\041\267" +
    "\042\263\043\250\044\313\045\241\046\274\047\254\050" +
    "\273\051\251\052\242\053\270\054\320\055\244\056\315" +
    "\057\237\060\321\061\264\062\235\063\261\064\255\065" +
    "\260\066\256\067\275\070\310\071\252\072\266\073\300" +
    "\001\002\000\156\004\uff0e\005\uff0e\006\uff0e\007\uff0e\010" +
    "\uff0e\011\uff0e\012\uff0e\013\uff0e\014\uff0e\015\uff0e\016\uff0e" +
    "\017\uff0e\020\uff0e\021\uff0e\022\uff0e\023\uff0e\025\uff0e\026" +
    "\uff0e\027\uff0e\030\uff0e\031\uff0e\033\uff0e\034\uff0e\035\uff0e" +
    "\037\uff0e\040\uff0e\041\uff0e\042\uff0e\043\uff0e\044\uff0e\045" +
    "\uff0e\046\uff0e\047\uff0e\050\uff0e\051\uff0e\052\uff0e\053\uff0e" +
    "\054\uff0e\055\uff0e\056\uff0e\057\uff0e\060\uff0e\061\uff0e\062" +
    "\uff0e\063\uff0e\064\uff0e\065\uff0e\066\uff0e\067\uff0e\070\uff0e" +
    "\071\uff0e\072\uff0e\073\uff0e\075\uff0e\001\002\000\162\004" +
    "\uff38\005\uff38\006\uff38\007\uff38\010\uff38\011\uff38\012\uff38" +
    "\013\uff38\014\uff38\015\uff38\016\uff38\017\uff38\020\uff38\021" +
    "\uff38\022\uff38\023\uff38\024\uff38\025\uff38\026\uff38\027\uff38" +
    "\030\uff38\031\uff38\033\uff38\034\uff38\035\uff38\037\uff38\040" +
    "\uff38\041\uff38\042\uff38\043\uff38\044\uff38\045\uff38\046\uff38" +
    "\047\uff38\050\uff38\051\uff38\052\uff38\053\uff38\054\uff38\055" +
    "\uff38\056\uff38\057\uff38\060\uff38\061\uff38\062\uff38\063\uff38" +
    "\064\uff38\065\uff38\066\uff38\067\uff38\070\uff38\071\uff38\072" +
    "\uff38\073\uff38\075\uff38\077\uff38\001\002\000\156\004\uff0c" +
    "\005\uff0c\006\uff0c\007\uff0c\010\uff0c\011\uff0c\012\uff0c\013" +
    "\uff0c\014\uff0c\015\uff0c\016\uff0c\017\uff0c\020\uff0c\021\uff0c" +
    "\022\uff0c\023\uff0c\025\uff0c\026\uff0c\027\uff0c\030\uff0c\031" +
    "\uff0c\033\uff0c\034\uff0c\035\uff0c\037\uff0c\040\uff0c\041\uff0c" +
    "\042\uff0c\043\uff0c\044\uff0c\045\uff0c\046\uff0c\047\uff0c\050" +
    "\uff0c\051\uff0c\052\uff0c\053\uff0c\054\uff0c\055\uff0c\056\uff0c" +
    "\057\uff0c\060\uff0c\061\uff0c\062\uff0c\063\uff0c\064\uff0c\065" +
    "\uff0c\066\uff0c\067\uff0c\070\uff0c\071\uff0c\072\uff0c\073\uff0c" +
    "\075\uff0c\001\002\000\156\004\ufeee\005\ufeee\006\ufeee\007" +
    "\ufeee\010\ufeee\011\ufeee\012\ufeee\013\ufeee\014\ufeee\015\ufeee" +
    "\016\ufeee\017\ufeee\020\ufeee\021\ufeee\022\ufeee\023\ufeee\025" +
    "\ufeee\026\ufeee\027\ufeee\030\ufeee\031\ufeee\033\ufeee\034\ufeee" +
    "\035\ufeee\037\ufeee\040\ufeee\041\ufeee\042\ufeee\043\ufeee\044" +
    "\ufeee\045\ufeee\046\ufeee\047\ufeee\050\ufeee\051\ufeee\052\ufeee" +
    "\053\ufeee\054\ufeee\055\ufeee\056\ufeee\057\ufeee\060\ufeee\061" +
    "\ufeee\062\ufeee\063\ufeee\064\ufeee\065\ufeee\066\ufeee\067\ufeee" +
    "\070\ufeee\071\ufeee\072\ufeee\073\ufeee\075\ufeee\001\002\000" +
    "\156\004\ufefd\005\ufefd\006\ufefd\007\ufefd\010\ufefd\011\ufefd" +
    "\012\ufefd\013\ufefd\014\ufefd\015\ufefd\016\ufefd\017\ufefd\020" +
    "\ufefd\021\ufefd\022\ufefd\023\ufefd\025\ufefd\026\ufefd\027\ufefd" +
    "\030\ufefd\031\ufefd\033\ufefd\034\ufefd\035\ufefd\037\ufefd\040" +
    "\ufefd\041\ufefd\042\ufefd\043\ufefd\044\ufefd\045\ufefd\046\ufefd" +
    "\047\ufefd\050\ufefd\051\ufefd\052\ufefd\053\ufefd\054\ufefd\055" +
    "\ufefd\056\ufefd\057\ufefd\060\ufefd\061\ufefd\062\ufefd\063\ufefd" +
    "\064\ufefd\065\ufefd\066\ufefd\067\ufefd\070\ufefd\071\ufefd\072" +
    "\ufefd\073\ufefd\075\ufefd\001\002\000\156\004\ufef8\005\ufef8" +
    "\006\ufef8\007\ufef8\010\ufef8\011\ufef8\012\ufef8\013\ufef8\014" +
    "\ufef8\015\ufef8\016\ufef8\017\ufef8\020\ufef8\021\ufef8\022\ufef8" +
    "\023\ufef8\025\ufef8\026\ufef8\027\ufef8\030\ufef8\031\ufef8\033" +
    "\ufef8\034\ufef8\035\ufef8\037\ufef8\040\ufef8\041\ufef8\042\ufef8" +
    "\043\ufef8\044\ufef8\045\ufef8\046\ufef8\047\ufef8\050\ufef8\051" +
    "\ufef8\052\ufef8\053\ufef8\054\ufef8\055\ufef8\056\ufef8\057\ufef8" +
    "\060\ufef8\061\ufef8\062\ufef8\063\ufef8\064\ufef8\065\ufef8\066" +
    "\ufef8\067\ufef8\070\ufef8\071\ufef8\072\ufef8\073\ufef8\075\ufef8" +
    "\001\002\000\156\004\ufef3\005\ufef3\006\ufef3\007\ufef3\010" +
    "\ufef3\011\ufef3\012\ufef3\013\ufef3\014\ufef3\015\ufef3\016\ufef3" +
    "\017\ufef3\020\ufef3\021\ufef3\022\ufef3\023\ufef3\025\ufef3\026" +
    "\ufef3\027\ufef3\030\ufef3\031\ufef3\033\ufef3\034\ufef3\035\ufef3" +
    "\037\ufef3\040\ufef3\041\ufef3\042\ufef3\043\ufef3\044\ufef3\045" +
    "\ufef3\046\ufef3\047\ufef3\050\ufef3\051\ufef3\052\ufef3\053\ufef3" +
    "\054\ufef3\055\ufef3\056\ufef3\057\ufef3\060\ufef3\061\ufef3\062" +
    "\ufef3\063\ufef3\064\ufef3\065\ufef3\066\ufef3\067\ufef3\070\ufef3" +
    "\071\ufef3\072\ufef3\073\ufef3\075\ufef3\001\002\000\156\004" +
    "\uff16\005\uff16\006\uff16\007\uff16\010\uff16\011\uff16\012\uff16" +
    "\013\uff16\014\uff16\015\uff16\016\uff16\017\uff16\020\uff16\021" +
    "\uff16\022\uff16\023\uff16\025\uff16\026\uff16\027\uff16\030\uff16" +
    "\031\uff16\033\uff16\034\uff16\035\uff16\037\uff16\040\uff16\041" +
    "\uff16\042\uff16\043\uff16\044\uff16\045\uff16\046\uff16\047\uff16" +
    "\050\uff16\051\uff16\052\uff16\053\uff16\054\uff16\055\uff16\056" +
    "\uff16\057\uff16\060\uff16\061\uff16\062\uff16\063\uff16\064\uff16" +
    "\065\uff16\066\uff16\067\uff16\070\uff16\071\uff16\072\uff16\073" +
    "\uff16\075\uff16\001\002\000\156\004\ufef0\005\ufef0\006\ufef0" +
    "\007\ufef0\010\ufef0\011\ufef0\012\ufef0\013\ufef0\014\ufef0\015" +
    "\ufef0\016\ufef0\017\ufef0\020\ufef0\021\ufef0\022\ufef0\023\ufef0" +
    "\025\ufef0\026\ufef0\027\ufef0\030\ufef0\031\ufef0\033\ufef0\034" +
    "\ufef0\035\ufef0\037\ufef0\040\ufef0\041\ufef0\042\ufef0\043\ufef0" +
    "\044\ufef0\045\ufef0\046\ufef0\047\ufef0\050\ufef0\051\ufef0\052" +
    "\ufef0\053\ufef0\054\ufef0\055\ufef0\056\ufef0\057\ufef0\060\ufef0" +
    "\061\ufef0\062\ufef0\063\ufef0\064\ufef0\065\ufef0\066\ufef0\067" +
    "\ufef0\070\ufef0\071\ufef0\072\ufef0\073\ufef0\075\ufef0\001\002" +
    "\000\156\004\uff14\005\uff14\006\uff14\007\uff14\010\uff14\011" +
    "\uff14\012\uff14\013\uff14\014\uff14\015\uff14\016\uff14\017\uff14" +
    "\020\uff14\021\uff14\022\uff14\023\uff14\025\uff14\026\uff14\027" +
    "\uff14\030\uff14\031\uff14\033\uff14\034\uff14\035\uff14\037\uff14" +
    "\040\uff14\041\uff14\042\uff14\043\uff14\044\uff14\045\uff14\046" +
    "\uff14\047\uff14\050\uff14\051\uff14\052\uff14\053\uff14\054\uff14" +
    "\055\uff14\056\uff14\057\uff14\060\uff14\061\uff14\062\uff14\063" +
    "\uff14\064\uff14\065\uff14\066\uff14\067\uff14\070\uff14\071\uff14" +
    "\072\uff14\073\uff14\075\uff14\001\002\000\156\004\uff15\005" +
    "\uff15\006\uff15\007\uff15\010\uff15\011\uff15\012\uff15\013\uff15" +
    "\014\uff15\015\uff15\016\uff15\017\uff15\020\uff15\021\uff15\022" +
    "\uff15\023\uff15\025\uff15\026\uff15\027\uff15\030\uff15\031\uff15" +
    "\033\uff15\034\uff15\035\uff15\037\uff15\040\uff15\041\uff15\042" +
    "\uff15\043\uff15\044\uff15\045\uff15\046\uff15\047\uff15\050\uff15" +
    "\051\uff15\052\uff15\053\uff15\054\uff15\055\uff15\056\uff15\057" +
    "\uff15\060\uff15\061\uff15\062\uff15\063\uff15\064\uff15\065\uff15" +
    "\066\uff15\067\uff15\070\uff15\071\uff15\072\uff15\073\uff15\075" +
    "\uff15\001\002\000\156\004\uff19\005\uff19\006\uff19\007\uff19" +
    "\010\uff19\011\uff19\012\uff19\013\uff19\014\uff19\015\uff19\016" +
    "\uff19\017\uff19\020\uff19\021\uff19\022\uff19\023\uff19\025\uff19" +
    "\026\uff19\027\uff19\030\uff19\031\uff19\033\uff19\034\uff19\035" +
    "\uff19\037\uff19\040\uff19\041\uff19\042\uff19\043\uff19\044\uff19" +
    "\045\uff19\046\uff19\047\uff19\050\uff19\051\uff19\052\uff19\053" +
    "\uff19\054\uff19\055\uff19\056\uff19\057\uff19\060\uff19\061\uff19" +
    "\062\uff19\063\uff19\064\uff19\065\uff19\066\uff19\067\uff19\070" +
    "\uff19\071\uff19\072\uff19\073\uff19\075\uff19\001\002\000\156" +
    "\004\ufefa\005\ufefa\006\ufefa\007\ufefa\010\ufefa\011\ufefa\012" +
    "\ufefa\013\ufefa\014\ufefa\015\ufefa\016\ufefa\017\ufefa\020\ufefa" +
    "\021\ufefa\022\ufefa\023\ufefa\025\ufefa\026\ufefa\027\ufefa\030" +
    "\ufefa\031\ufefa\033\ufefa\034\ufefa\035\ufefa\037\ufefa\040\ufefa" +
    "\041\ufefa\042\ufefa\043\ufefa\044\ufefa\045\ufefa\046\ufefa\047" +
    "\ufefa\050\ufefa\051\ufefa\052\ufefa\053\ufefa\054\ufefa\055\ufefa" +
    "\056\ufefa\057\ufefa\060\ufefa\061\ufefa\062\ufefa\063\ufefa\064" +
    "\ufefa\065\ufefa\066\ufefa\067\ufefa\070\ufefa\071\ufefa\072\ufefa" +
    "\073\ufefa\075\ufefa\001\002\000\156\004\ufef4\005\ufef4\006" +
    "\ufef4\007\ufef4\010\ufef4\011\ufef4\012\ufef4\013\ufef4\014\ufef4" +
    "\015\ufef4\016\ufef4\017\ufef4\020\ufef4\021\ufef4\022\ufef4\023" +
    "\ufef4\025\ufef4\026\ufef4\027\ufef4\030\ufef4\031\ufef4\033\ufef4" +
    "\034\ufef4\035\ufef4\037\ufef4\040\ufef4\041\ufef4\042\ufef4\043" +
    "\ufef4\044\ufef4\045\ufef4\046\ufef4\047\ufef4\050\ufef4\051\ufef4" +
    "\052\ufef4\053\ufef4\054\ufef4\055\ufef4\056\ufef4\057\ufef4\060" +
    "\ufef4\061\ufef4\062\ufef4\063\ufef4\064\ufef4\065\ufef4\066\ufef4" +
    "\067\ufef4\070\ufef4\071\ufef4\072\ufef4\073\ufef4\075\ufef4\001" +
    "\002\000\156\004\uff04\005\uff04\006\uff04\007\uff04\010\uff04" +
    "\011\uff04\012\uff04\013\uff04\014\uff04\015\uff04\016\uff04\017" +
    "\uff04\020\uff04\021\uff04\022\uff04\023\uff04\025\uff04\026\uff04" +
    "\027\uff04\030\uff04\031\uff04\033\uff04\034\uff04\035\uff04\037" +
    "\uff04\040\uff04\041\uff04\042\uff04\043\uff04\044\uff04\045\uff04" +
    "\046\uff04\047\uff04\050\uff04\051\uff04\052\uff04\053\uff04\054" +
    "\uff04\055\uff04\056\uff04\057\uff04\060\uff04\061\uff04\062\uff04" +
    "\063\uff04\064\uff04\065\uff04\066\uff04\067\uff04\070\uff04\071" +
    "\uff04\072\uff04\073\uff04\075\uff04\001\002\000\156\004\uff01" +
    "\005\uff01\006\uff01\007\uff01\010\uff01\011\uff01\012\uff01\013" +
    "\uff01\014\uff01\015\uff01\016\uff01\017\uff01\020\uff01\021\uff01" +
    "\022\uff01\023\uff01\025\uff01\026\uff01\027\uff01\030\uff01\031" +
    "\uff01\033\uff01\034\uff01\035\uff01\037\uff01\040\uff01\041\uff01" +
    "\042\uff01\043\uff01\044\uff01\045\uff01\046\uff01\047\uff01\050" +
    "\uff01\051\uff01\052\uff01\053\uff01\054\uff01\055\uff01\056\uff01" +
    "\057\uff01\060\uff01\061\uff01\062\uff01\063\uff01\064\uff01\065" +
    "\uff01\066\uff01\067\uff01\070\uff01\071\uff01\072\uff01\073\uff01" +
    "\075\uff01\001\002\000\156\004\ufef6\005\ufef6\006\ufef6\007" +
    "\ufef6\010\ufef6\011\ufef6\012\ufef6\013\ufef6\014\ufef6\015\ufef6" +
    "\016\ufef6\017\ufef6\020\ufef6\021\ufef6\022\ufef6\023\ufef6\025" +
    "\ufef6\026\ufef6\027\ufef6\030\ufef6\031\ufef6\033\ufef6\034\ufef6" +
    "\035\ufef6\037\ufef6\040\ufef6\041\ufef6\042\ufef6\043\ufef6\044" +
    "\ufef6\045\ufef6\046\ufef6\047\ufef6\050\ufef6\051\ufef6\052\ufef6" +
    "\053\ufef6\054\ufef6\055\ufef6\056\ufef6\057\ufef6\060\ufef6\061" +
    "\ufef6\062\ufef6\063\ufef6\064\ufef6\065\ufef6\066\ufef6\067\ufef6" +
    "\070\ufef6\071\ufef6\072\ufef6\073\ufef6\075\ufef6\001\002\000" +
    "\156\004\ufeec\005\ufeec\006\ufeec\007\ufeec\010\ufeec\011\ufeec" +
    "\012\ufeec\013\ufeec\014\ufeec\015\ufeec\016\ufeec\017\ufeec\020" +
    "\ufeec\021\ufeec\022\ufeec\023\ufeec\025\ufeec\026\ufeec\027\ufeec" +
    "\030\ufeec\031\ufeec\033\ufeec\034\ufeec\035\ufeec\037\ufeec\040" +
    "\ufeec\041\ufeec\042\ufeec\043\ufeec\044\ufeec\045\ufeec\046\ufeec" +
    "\047\ufeec\050\ufeec\051\ufeec\052\ufeec\053\ufeec\054\ufeec\055" +
    "\ufeec\056\ufeec\057\ufeec\060\ufeec\061\ufeec\062\ufeec\063\ufeec" +
    "\064\ufeec\065\ufeec\066\ufeec\067\ufeec\070\ufeec\071\ufeec\072" +
    "\ufeec\073\ufeec\075\ufeec\001\002\000\156\004\ufeea\005\ufeea" +
    "\006\ufeea\007\ufeea\010\ufeea\011\ufeea\012\ufeea\013\ufeea\014" +
    "\ufeea\015\ufeea\016\ufeea\017\ufeea\020\ufeea\021\ufeea\022\ufeea" +
    "\023\ufeea\025\ufeea\026\ufeea\027\ufeea\030\ufeea\031\ufeea\033" +
    "\ufeea\034\ufeea\035\ufeea\037\ufeea\040\ufeea\041\ufeea\042\ufeea" +
    "\043\ufeea\044\ufeea\045\ufeea\046\ufeea\047\ufeea\050\ufeea\051" +
    "\ufeea\052\ufeea\053\ufeea\054\ufeea\055\ufeea\056\ufeea\057\ufeea" +
    "\060\ufeea\061\ufeea\062\ufeea\063\ufeea\064\ufeea\065\ufeea\066" +
    "\ufeea\067\ufeea\070\ufeea\071\ufeea\072\ufeea\073\ufeea\075\ufeea" +
    "\001\002\000\156\004\uff02\005\uff02\006\uff02\007\uff02\010" +
    "\uff02\011\uff02\012\uff02\013\uff02\014\uff02\015\uff02\016\uff02" +
    "\017\uff02\020\uff02\021\uff02\022\uff02\023\uff02\025\uff02\026" +
    "\uff02\027\uff02\030\uff02\031\uff02\033\uff02\034\uff02\035\uff02" +
    "\037\uff02\040\uff02\041\uff02\042\uff02\043\uff02\044\uff02\045" +
    "\uff02\046\uff02\047\uff02\050\uff02\051\uff02\052\uff02\053\uff02" +
    "\054\uff02\055\uff02\056\uff02\057\uff02\060\uff02\061\uff02\062" +
    "\uff02\063\uff02\064\uff02\065\uff02\066\uff02\067\uff02\070\uff02" +
    "\071\uff02\072\uff02\073\uff02\075\uff02\001\002\000\156\004" +
    "\ufeeb\005\ufeeb\006\ufeeb\007\ufeeb\010\ufeeb\011\ufeeb\012\ufeeb" +
    "\013\ufeeb\014\ufeeb\015\ufeeb\016\ufeeb\017\ufeeb\020\ufeeb\021" +
    "\ufeeb\022\ufeeb\023\ufeeb\025\ufeeb\026\ufeeb\027\ufeeb\030\ufeeb" +
    "\031\ufeeb\033\ufeeb\034\ufeeb\035\ufeeb\037\ufeeb\040\ufeeb\041" +
    "\ufeeb\042\ufeeb\043\ufeeb\044\ufeeb\045\ufeeb\046\ufeeb\047\ufeeb" +
    "\050\ufeeb\051\ufeeb\052\ufeeb\053\ufeeb\054\ufeeb\055\ufeeb\056" +
    "\ufeeb\057\ufeeb\060\ufeeb\061\ufeeb\062\ufeeb\063\ufeeb\064\ufeeb" +
    "\065\ufeeb\066\ufeeb\067\ufeeb\070\ufeeb\071\ufeeb\072\ufeeb\073" +
    "\ufeeb\075\ufeeb\001\002\000\162\004\uff37\005\uff37\006\uff37" +
    "\007\uff37\010\uff37\011\uff37\012\uff37\013\uff37\014\uff37\015" +
    "\uff37\016\uff37\017\uff37\020\uff37\021\uff37\022\uff37\023\uff37" +
    "\024\uff37\025\uff37\026\uff37\027\uff37\030\uff37\031\uff37\033" +
    "\uff37\034\uff37\035\uff37\037\uff37\040\uff37\041\uff37\042\uff37" +
    "\043\uff37\044\uff37\045\uff37\046\uff37\047\uff37\050\uff37\051" +
    "\uff37\052\uff37\053\uff37\054\uff37\055\uff37\056\uff37\057\uff37" +
    "\060\uff37\061\uff37\062\uff37\063\uff37\064\uff37\065\uff37\066" +
    "\uff37\067\uff37\070\uff37\071\uff37\072\uff37\073\uff37\075\uff37" +
    "\077\uff37\001\002\000\156\004\uff07\005\uff07\006\uff07\007" +
    "\uff07\010\uff07\011\uff07\012\uff07\013\uff07\014\uff07\015\uff07" +
    "\016\uff07\017\uff07\020\uff07\021\uff07\022\uff07\023\uff07\025" +
    "\uff07\026\uff07\027\uff07\030\uff07\031\uff07\033\uff07\034\uff07" +
    "\035\uff07\037\uff07\040\uff07\041\uff07\042\uff07\043\uff07\044" +
    "\uff07\045\uff07\046\uff07\047\uff07\050\uff07\051\uff07\052\uff07" +
    "\053\uff07\054\uff07\055\uff07\056\uff07\057\uff07\060\uff07\061" +
    "\uff07\062\uff07\063\uff07\064\uff07\065\uff07\066\uff07\067\uff07" +
    "\070\uff07\071\uff07\072\uff07\073\uff07\075\uff07\001\002\000" +
    "\156\004\ufefb\005\ufefb\006\ufefb\007\ufefb\010\ufefb\011\ufefb" +
    "\012\ufefb\013\ufefb\014\ufefb\015\ufefb\016\ufefb\017\ufefb\020" +
    "\ufefb\021\ufefb\022\ufefb\023\ufefb\025\ufefb\026\ufefb\027\ufefb" +
    "\030\ufefb\031\ufefb\033\ufefb\034\ufefb\035\ufefb\037\ufefb\040" +
    "\ufefb\041\ufefb\042\ufefb\043\ufefb\044\ufefb\045\ufefb\046\ufefb" +
    "\047\ufefb\050\ufefb\051\ufefb\052\ufefb\053\ufefb\054\ufefb\055" +
    "\ufefb\056\ufefb\057\ufefb\060\ufefb\061\ufefb\062\ufefb\063\ufefb" +
    "\064\ufefb\065\ufefb\066\ufefb\067\ufefb\070\ufefb\071\ufefb\072" +
    "\ufefb\073\ufefb\075\ufefb\001\002\000\162\004\uff39\005\uff39" +
    "\006\uff39\007\uff39\010\uff39\011\uff39\012\uff39\013\uff39\014" +
    "\uff39\015\uff39\016\uff39\017\uff39\020\uff39\021\uff39\022\uff39" +
    "\023\uff39\024\uff39\025\uff39\026\uff39\027\uff39\030\uff39\031" +
    "\uff39\033\uff39\034\uff39\035\uff39\037\uff39\040\uff39\041\uff39" +
    "\042\uff39\043\uff39\044\uff39\045\uff39\046\uff39\047\uff39\050" +
    "\uff39\051\uff39\052\uff39\053\uff39\054\uff39\055\uff39\056\uff39" +
    "\057\uff39\060\uff39\061\uff39\062\uff39\063\uff39\064\uff39\065" +
    "\uff39\066\uff39\067\uff39\070\uff39\071\uff39\072\uff39\073\uff39" +
    "\075\uff39\077\uff39\001\002\000\156\004\uff08\005\uff08\006" +
    "\uff08\007\uff08\010\uff08\011\uff08\012\uff08\013\uff08\014\uff08" +
    "\015\uff08\016\uff08\017\uff08\020\uff08\021\uff08\022\uff08\023" +
    "\uff08\025\uff08\026\uff08\027\uff08\030\uff08\031\uff08\033\uff08" +
    "\034\uff08\035\uff08\037\uff08\040\uff08\041\uff08\042\uff08\043" +
    "\uff08\044\uff08\045\uff08\046\uff08\047\uff08\050\uff08\051\uff08" +
    "\052\uff08\053\uff08\054\uff08\055\uff08\056\uff08\057\uff08\060" +
    "\uff08\061\uff08\062\uff08\063\uff08\064\uff08\065\uff08\066\uff08" +
    "\067\uff08\070\uff08\071\uff08\072\uff08\073\uff08\075\uff08\001" +
    "\002\000\156\004\ufeff\005\ufeff\006\ufeff\007\ufeff\010\ufeff" +
    "\011\ufeff\012\ufeff\013\ufeff\014\ufeff\015\ufeff\016\ufeff\017" +
    "\ufeff\020\ufeff\021\ufeff\022\ufeff\023\ufeff\025\ufeff\026\ufeff" +
    "\027\ufeff\030\ufeff\031\ufeff\033\ufeff\034\ufeff\035\ufeff\037" +
    "\ufeff\040\ufeff\041\ufeff\042\ufeff\043\ufeff\044\ufeff\045\ufeff" +
    "\046\ufeff\047\ufeff\050\ufeff\051\ufeff\052\ufeff\053\ufeff\054" +
    "\ufeff\055\ufeff\056\ufeff\057\ufeff\060\ufeff\061\ufeff\062\ufeff" +
    "\063\ufeff\064\ufeff\065\ufeff\066\ufeff\067\ufeff\070\ufeff\071" +
    "\ufeff\072\ufeff\073\ufeff\075\ufeff\001\002\000\156\004\ufefc" +
    "\005\ufefc\006\ufefc\007\ufefc\010\ufefc\011\ufefc\012\ufefc\013" +
    "\ufefc\014\ufefc\015\ufefc\016\ufefc\017\ufefc\020\ufefc\021\ufefc" +
    "\022\ufefc\023\ufefc\025\ufefc\026\ufefc\027\ufefc\030\ufefc\031" +
    "\ufefc\033\ufefc\034\ufefc\035\ufefc\037\ufefc\040\ufefc\041\ufefc" +
    "\042\ufefc\043\ufefc\044\ufefc\045\ufefc\046\ufefc\047\ufefc\050" +
    "\ufefc\051\ufefc\052\ufefc\053\ufefc\054\ufefc\055\ufefc\056\ufefc" +
    "\057\ufefc\060\ufefc\061\ufefc\062\ufefc\063\ufefc\064\ufefc\065" +
    "\ufefc\066\ufefc\067\ufefc\070\ufefc\071\ufefc\072\ufefc\073\ufefc" +
    "\075\ufefc\001\002\000\156\004\ufef2\005\ufef2\006\ufef2\007" +
    "\ufef2\010\ufef2\011\ufef2\012\ufef2\013\ufef2\014\ufef2\015\ufef2" +
    "\016\ufef2\017\ufef2\020\ufef2\021\ufef2\022\ufef2\023\ufef2\025" +
    "\ufef2\026\ufef2\027\ufef2\030\ufef2\031\ufef2\033\ufef2\034\ufef2" +
    "\035\ufef2\037\ufef2\040\ufef2\041\ufef2\042\ufef2\043\ufef2\044" +
    "\ufef2\045\ufef2\046\ufef2\047\ufef2\050\ufef2\051\ufef2\052\ufef2" +
    "\053\ufef2\054\ufef2\055\ufef2\056\ufef2\057\ufef2\060\ufef2\061" +
    "\ufef2\062\ufef2\063\ufef2\064\ufef2\065\ufef2\066\ufef2\067\ufef2" +
    "\070\ufef2\071\ufef2\072\ufef2\073\ufef2\075\ufef2\001\002\000" +
    "\156\004\uff06\005\uff06\006\uff06\007\uff06\010\uff06\011\uff06" +
    "\012\uff06\013\uff06\014\uff06\015\uff06\016\uff06\017\uff06\020" +
    "\uff06\021\uff06\022\uff06\023\uff06\025\uff06\026\uff06\027\uff06" +
    "\030\uff06\031\uff06\033\uff06\034\uff06\035\uff06\037\uff06\040" +
    "\uff06\041\uff06\042\uff06\043\uff06\044\uff06\045\uff06\046\uff06" +
    "\047\uff06\050\uff06\051\uff06\052\uff06\053\uff06\054\uff06\055" +
    "\uff06\056\uff06\057\uff06\060\uff06\061\uff06\062\uff06\063\uff06" +
    "\064\uff06\065\uff06\066\uff06\067\uff06\070\uff06\071\uff06\072" +
    "\uff06\073\uff06\075\uff06\001\002\000\156\004\uff18\005\uff18" +
    "\006\uff18\007\uff18\010\uff18\011\uff18\012\uff18\013\uff18\014" +
    "\uff18\015\uff18\016\uff18\017\uff18\020\uff18\021\uff18\022\uff18" +
    "\023\uff18\025\uff18\026\uff18\027\uff18\030\uff18\031\uff18\033" +
    "\uff18\034\uff18\035\uff18\037\uff18\040\uff18\041\uff18\042\uff18" +
    "\043\uff18\044\uff18\045\uff18\046\uff18\047\uff18\050\uff18\051" +
    "\uff18\052\uff18\053\uff18\054\uff18\055\uff18\056\uff18\057\uff18" +
    "\060\uff18\061\uff18\062\uff18\063\uff18\064\uff18\065\uff18\066" +
    "\uff18\067\uff18\070\uff18\071\uff18\072\uff18\073\uff18\075\uff18" +
    "\001\002\000\156\004\ufef5\005\ufef5\006\ufef5\007\ufef5\010" +
    "\ufef5\011\ufef5\012\ufef5\013\ufef5\014\ufef5\015\ufef5\016\ufef5" +
    "\017\ufef5\020\ufef5\021\ufef5\022\ufef5\023\ufef5\025\ufef5\026" +
    "\ufef5\027\ufef5\030\ufef5\031\ufef5\033\ufef5\034\ufef5\035\ufef5" +
    "\037\ufef5\040\ufef5\041\ufef5\042\ufef5\043\ufef5\044\ufef5\045" +
    "\ufef5\046\ufef5\047\ufef5\050\ufef5\051\ufef5\052\ufef5\053\ufef5" +
    "\054\ufef5\055\ufef5\056\ufef5\057\ufef5\060\ufef5\061\ufef5\062" +
    "\ufef5\063\ufef5\064\ufef5\065\ufef5\066\ufef5\067\ufef5\070\ufef5" +
    "\071\ufef5\072\ufef5\073\ufef5\075\ufef5\001\002\000\156\004" +
    "\ufef7\005\ufef7\006\ufef7\007\ufef7\010\ufef7\011\ufef7\012\ufef7" +
    "\013\ufef7\014\ufef7\015\ufef7\016\ufef7\017\ufef7\020\ufef7\021" +
    "\ufef7\022\ufef7\023\ufef7\025\ufef7\026\ufef7\027\ufef7\030\ufef7" +
    "\031\ufef7\033\ufef7\034\ufef7\035\ufef7\037\ufef7\040\ufef7\041" +
    "\ufef7\042\ufef7\043\ufef7\044\ufef7\045\ufef7\046\ufef7\047\ufef7" +
    "\050\ufef7\051\ufef7\052\ufef7\053\ufef7\054\ufef7\055\ufef7\056" +
    "\ufef7\057\ufef7\060\ufef7\061\ufef7\062\ufef7\063\ufef7\064\ufef7" +
    "\065\ufef7\066\ufef7\067\ufef7\070\ufef7\071\ufef7\072\ufef7\073" +
    "\ufef7\075\ufef7\001\002\000\156\004\ufee9\005\ufee9\006\ufee9" +
    "\007\ufee9\010\ufee9\011\ufee9\012\ufee9\013\ufee9\014\ufee9\015" +
    "\ufee9\016\ufee9\017\ufee9\020\ufee9\021\ufee9\022\ufee9\023\ufee9" +
    "\025\ufee9\026\ufee9\027\ufee9\030\ufee9\031\ufee9\033\ufee9\034" +
    "\ufee9\035\ufee9\037\ufee9\040\ufee9\041\ufee9\042\ufee9\043\ufee9" +
    "\044\ufee9\045\ufee9\046\ufee9\047\ufee9\050\ufee9\051\ufee9\052" +
    "\ufee9\053\ufee9\054\ufee9\055\ufee9\056\ufee9\057\ufee9\060\ufee9" +
    "\061\ufee9\062\ufee9\063\ufee9\064\ufee9\065\ufee9\066\ufee9\067" +
    "\ufee9\070\ufee9\071\ufee9\072\ufee9\073\ufee9\075\ufee9\001\002" +
    "\000\156\004\uff17\005\uff17\006\uff17\007\uff17\010\uff17\011" +
    "\uff17\012\uff17\013\uff17\014\uff17\015\uff17\016\uff17\017\uff17" +
    "\020\uff17\021\uff17\022\uff17\023\uff17\025\uff17\026\uff17\027" +
    "\uff17\030\uff17\031\uff17\033\uff17\034\uff17\035\uff17\037\uff17" +
    "\040\uff17\041\uff17\042\uff17\043\uff17\044\uff17\045\uff17\046" +
    "\uff17\047\uff17\050\uff17\051\uff17\052\uff17\053\uff17\054\uff17" +
    "\055\uff17\056\uff17\057\uff17\060\uff17\061\uff17\062\uff17\063" +
    "\uff17\064\uff17\065\uff17\066\uff17\067\uff17\070\uff17\071\uff17" +
    "\072\uff17\073\uff17\075\uff17\001\002\000\156\004\uff12\005" +
    "\uff12\006\uff12\007\uff12\010\uff12\011\uff12\012\uff12\013\uff12" +
    "\014\uff12\015\uff12\016\uff12\017\uff12\020\uff12\021\uff12\022" +
    "\uff12\023\uff12\025\uff12\026\uff12\027\uff12\030\uff12\031\uff12" +
    "\033\uff12\034\uff12\035\uff12\037\uff12\040\uff12\041\uff12\042" +
    "\uff12\043\uff12\044\uff12\045\uff12\046\uff12\047\uff12\050\uff12" +
    "\051\uff12\052\uff12\053\uff12\054\uff12\055\uff12\056\uff12\057" +
    "\uff12\060\uff12\061\uff12\062\uff12\063\uff12\064\uff12\065\uff12" +
    "\066\uff12\067\uff12\070\uff12\071\uff12\072\uff12\073\uff12\075" +
    "\uff12\001\002\000\156\004\ufefe\005\ufefe\006\ufefe\007\ufefe" +
    "\010\ufefe\011\ufefe\012\ufefe\013\ufefe\014\ufefe\015\ufefe\016" +
    "\ufefe\017\ufefe\020\ufefe\021\ufefe\022\ufefe\023\ufefe\025\ufefe" +
    "\026\ufefe\027\ufefe\030\ufefe\031\ufefe\033\ufefe\034\ufefe\035" +
    "\ufefe\037\ufefe\040\ufefe\041\ufefe\042\ufefe\043\ufefe\044\ufefe" +
    "\045\ufefe\046\ufefe\047\ufefe\050\ufefe\051\ufefe\052\ufefe\053" +
    "\ufefe\054\ufefe\055\ufefe\056\ufefe\057\ufefe\060\ufefe\061\ufefe" +
    "\062\ufefe\063\ufefe\064\ufefe\065\ufefe\066\ufefe\067\ufefe\070" +
    "\ufefe\071\ufefe\072\ufefe\073\ufefe\075\ufefe\001\002\000\156" +
    "\004\uff13\005\uff13\006\uff13\007\uff13\010\uff13\011\uff13\012" +
    "\uff13\013\uff13\014\uff13\015\uff13\016\uff13\017\uff13\020\uff13" +
    "\021\uff13\022\uff13\023\uff13\025\uff13\026\uff13\027\uff13\030" +
    "\uff13\031\uff13\033\uff13\034\uff13\035\uff13\037\uff13\040\uff13" +
    "\041\uff13\042\uff13\043\uff13\044\uff13\045\uff13\046\uff13\047" +
    "\uff13\050\uff13\051\uff13\052\uff13\053\uff13\054\uff13\055\uff13" +
    "\056\uff13\057\uff13\060\uff13\061\uff13\062\uff13\063\uff13\064" +
    "\uff13\065\uff13\066\uff13\067\uff13\070\uff13\071\uff13\072\uff13" +
    "\073\uff13\075\uff13\001\002\000\156\004\uff0a\005\uff0a\006" +
    "\uff0a\007\uff0a\010\uff0a\011\uff0a\012\uff0a\013\uff0a\014\uff0a" +
    "\015\uff0a\016\uff0a\017\uff0a\020\uff0a\021\uff0a\022\uff0a\023" +
    "\uff0a\025\uff0a\026\uff0a\027\uff0a\030\uff0a\031\uff0a\033\uff0a" +
    "\034\uff0a\035\uff0a\037\uff0a\040\uff0a\041\uff0a\042\uff0a\043" +
    "\uff0a\044\uff0a\045\uff0a\046\uff0a\047\uff0a\050\uff0a\051\uff0a" +
    "\052\uff0a\053\uff0a\054\uff0a\055\uff0a\056\uff0a\057\uff0a\060" +
    "\uff0a\061\uff0a\062\uff0a\063\uff0a\064\uff0a\065\uff0a\066\uff0a" +
    "\067\uff0a\070\uff0a\071\uff0a\072\uff0a\073\uff0a\075\uff0a\001" +
    "\002\000\004\024\uff3b\001\002\000\156\004\uff0b\005\uff0b" +
    "\006\uff0b\007\uff0b\010\uff0b\011\uff0b\012\uff0b\013\uff0b\014" +
    "\uff0b\015\uff0b\016\uff0b\017\uff0b\020\uff0b\021\uff0b\022\uff0b" +
    "\023\uff0b\025\uff0b\026\uff0b\027\uff0b\030\uff0b\031\uff0b\033" +
    "\uff0b\034\uff0b\035\uff0b\037\uff0b\040\uff0b\041\uff0b\042\uff0b" +
    "\043\uff0b\044\uff0b\045\uff0b\046\uff0b\047\uff0b\050\uff0b\051" +
    "\uff0b\052\uff0b\053\uff0b\054\uff0b\055\uff0b\056\uff0b\057\uff0b" +
    "\060\uff0b\061\uff0b\062\uff0b\063\uff0b\064\uff0b\065\uff0b\066" +
    "\uff0b\067\uff0b\070\uff0b\071\uff0b\072\uff0b\073\uff0b\075\uff0b" +
    "\001\002\000\156\004\uff0f\005\uff0f\006\uff0f\007\uff0f\010" +
    "\uff0f\011\uff0f\012\uff0f\013\uff0f\014\uff0f\015\uff0f\016\uff0f" +
    "\017\uff0f\020\uff0f\021\uff0f\022\uff0f\023\uff0f\025\uff0f\026" +
    "\uff0f\027\uff0f\030\uff0f\031\uff0f\033\uff0f\034\uff0f\035\uff0f" +
    "\037\uff0f\040\uff0f\041\uff0f\042\uff0f\043\uff0f\044\uff0f\045" +
    "\uff0f\046\uff0f\047\uff0f\050\uff0f\051\uff0f\052\uff0f\053\uff0f" +
    "\054\uff0f\055\uff0f\056\uff0f\057\uff0f\060\uff0f\061\uff0f\062" +
    "\uff0f\063\uff0f\064\uff0f\065\uff0f\066\uff0f\067\uff0f\070\uff0f" +
    "\071\uff0f\072\uff0f\073\uff0f\075\uff0f\001\002\000\156\004" +
    "\uff05\005\uff05\006\uff05\007\uff05\010\uff05\011\uff05\012\uff05" +
    "\013\uff05\014\uff05\015\uff05\016\uff05\017\uff05\020\uff05\021" +
    "\uff05\022\uff05\023\uff05\025\uff05\026\uff05\027\uff05\030\uff05" +
    "\031\uff05\033\uff05\034\uff05\035\uff05\037\uff05\040\uff05\041" +
    "\uff05\042\uff05\043\uff05\044\uff05\045\uff05\046\uff05\047\uff05" +
    "\050\uff05\051\uff05\052\uff05\053\uff05\054\uff05\055\uff05\056" +
    "\uff05\057\uff05\060\uff05\061\uff05\062\uff05\063\uff05\064\uff05" +
    "\065\uff05\066\uff05\067\uff05\070\uff05\071\uff05\072\uff05\073" +
    "\uff05\075\uff05\001\002\000\156\004\uff03\005\uff03\006\uff03" +
    "\007\uff03\010\uff03\011\uff03\012\uff03\013\uff03\014\uff03\015" +
    "\uff03\016\uff03\017\uff03\020\uff03\021\uff03\022\uff03\023\uff03" +
    "\025\uff03\026\uff03\027\uff03\030\uff03\031\uff03\033\uff03\034" +
    "\uff03\035\uff03\037\uff03\040\uff03\041\uff03\042\uff03\043\uff03" +
    "\044\uff03\045\uff03\046\uff03\047\uff03\050\uff03\051\uff03\052" +
    "\uff03\053\uff03\054\uff03\055\uff03\056\uff03\057\uff03\060\uff03" +
    "\061\uff03\062\uff03\063\uff03\064\uff03\065\uff03\066\uff03\067" +
    "\uff03\070\uff03\071\uff03\072\uff03\073\uff03\075\uff03\001\002" +
    "\000\156\004\ufee8\005\ufee8\006\ufee8\007\ufee8\010\ufee8\011" +
    "\ufee8\012\ufee8\013\ufee8\014\ufee8\015\ufee8\016\ufee8\017\ufee8" +
    "\020\ufee8\021\ufee8\022\ufee8\023\ufee8\025\ufee8\026\ufee8\027" +
    "\ufee8\030\ufee8\031\ufee8\033\ufee8\034\ufee8\035\ufee8\037\ufee8" +
    "\040\ufee8\041\ufee8\042\ufee8\043\ufee8\044\ufee8\045\ufee8\046" +
    "\ufee8\047\ufee8\050\ufee8\051\ufee8\052\ufee8\053\ufee8\054\ufee8" +
    "\055\ufee8\056\ufee8\057\ufee8\060\ufee8\061\ufee8\062\ufee8\063" +
    "\ufee8\064\ufee8\065\ufee8\066\ufee8\067\ufee8\070\ufee8\071\ufee8" +
    "\072\ufee8\073\ufee8\075\ufee8\001\002\000\156\004\uff0d\005" +
    "\uff0d\006\uff0d\007\uff0d\010\uff0d\011\uff0d\012\uff0d\013\uff0d" +
    "\014\uff0d\015\uff0d\016\uff0d\017\uff0d\020\uff0d\021\uff0d\022" +
    "\uff0d\023\uff0d\025\uff0d\026\uff0d\027\uff0d\030\uff0d\031\uff0d" +
    "\033\uff0d\034\uff0d\035\uff0d\037\uff0d\040\uff0d\041\uff0d\042" +
    "\uff0d\043\uff0d\044\uff0d\045\uff0d\046\uff0d\047\uff0d\050\uff0d" +
    "\051\uff0d\052\uff0d\053\uff0d\054\uff0d\055\uff0d\056\uff0d\057" +
    "\uff0d\060\uff0d\061\uff0d\062\uff0d\063\uff0d\064\uff0d\065\uff0d" +
    "\066\uff0d\067\uff0d\070\uff0d\071\uff0d\072\uff0d\073\uff0d\075" +
    "\uff0d\001\002\000\156\004\uff09\005\uff09\006\uff09\007\uff09" +
    "\010\uff09\011\uff09\012\uff09\013\uff09\014\uff09\015\uff09\016" +
    "\uff09\017\uff09\020\uff09\021\uff09\022\uff09\023\uff09\025\uff09" +
    "\026\uff09\027\uff09\030\uff09\031\uff09\033\uff09\034\uff09\035" +
    "\uff09\037\uff09\040\uff09\041\uff09\042\uff09\043\uff09\044\uff09" +
    "\045\uff09\046\uff09\047\uff09\050\uff09\051\uff09\052\uff09\053" +
    "\uff09\054\uff09\055\uff09\056\uff09\057\uff09\060\uff09\061\uff09" +
    "\062\uff09\063\uff09\064\uff09\065\uff09\066\uff09\067\uff09\070" +
    "\uff09\071\uff09\072\uff09\073\uff09\075\uff09\001\002\000\156" +
    "\004\ufef9\005\ufef9\006\ufef9\007\ufef9\010\ufef9\011\ufef9\012" +
    "\ufef9\013\ufef9\014\ufef9\015\ufef9\016\ufef9\017\ufef9\020\ufef9" +
    "\021\ufef9\022\ufef9\023\ufef9\025\ufef9\026\ufef9\027\ufef9\030" +
    "\ufef9\031\ufef9\033\ufef9\034\ufef9\035\ufef9\037\ufef9\040\ufef9" +
    "\041\ufef9\042\ufef9\043\ufef9\044\ufef9\045\ufef9\046\ufef9\047" +
    "\ufef9\050\ufef9\051\ufef9\052\ufef9\053\ufef9\054\ufef9\055\ufef9" +
    "\056\ufef9\057\ufef9\060\ufef9\061\ufef9\062\ufef9\063\ufef9\064" +
    "\ufef9\065\ufef9\066\ufef9\067\ufef9\070\ufef9\071\ufef9\072\ufef9" +
    "\073\ufef9\075\ufef9\001\002\000\156\004\uff10\005\uff10\006" +
    "\uff10\007\uff10\010\uff10\011\uff10\012\uff10\013\uff10\014\uff10" +
    "\015\uff10\016\uff10\017\uff10\020\uff10\021\uff10\022\uff10\023" +
    "\uff10\025\uff10\026\uff10\027\uff10\030\uff10\031\uff10\033\uff10" +
    "\034\uff10\035\uff10\037\uff10\040\uff10\041\uff10\042\uff10\043" +
    "\uff10\044\uff10\045\uff10\046\uff10\047\uff10\050\uff10\051\uff10" +
    "\052\uff10\053\uff10\054\uff10\055\uff10\056\uff10\057\uff10\060" +
    "\uff10\061\uff10\062\uff10\063\uff10\064\uff10\065\uff10\066\uff10" +
    "\067\uff10\070\uff10\071\uff10\072\uff10\073\uff10\075\uff10\001" +
    "\002\000\156\004\ufeef\005\ufeef\006\ufeef\007\ufeef\010\ufeef" +
    "\011\ufeef\012\ufeef\013\ufeef\014\ufeef\015\ufeef\016\ufeef\017" +
    "\ufeef\020\ufeef\021\ufeef\022\ufeef\023\ufeef\025\ufeef\026\ufeef" +
    "\027\ufeef\030\ufeef\031\ufeef\033\ufeef\034\ufeef\035\ufeef\037" +
    "\ufeef\040\ufeef\041\ufeef\042\ufeef\043\ufeef\044\ufeef\045\ufeef" +
    "\046\ufeef\047\ufeef\050\ufeef\051\ufeef\052\ufeef\053\ufeef\054" +
    "\ufeef\055\ufeef\056\ufeef\057\ufeef\060\ufeef\061\ufeef\062\ufeef" +
    "\063\ufeef\064\ufeef\065\ufeef\066\ufeef\067\ufeef\070\ufeef\071" +
    "\ufeef\072\ufeef\073\ufeef\075\ufeef\001\002\000\156\004\uff11" +
    "\005\uff11\006\uff11\007\uff11\010\uff11\011\uff11\012\uff11\013" +
    "\uff11\014\uff11\015\uff11\016\uff11\017\uff11\020\uff11\021\uff11" +
    "\022\uff11\023\uff11\025\uff11\026\uff11\027\uff11\030\uff11\031" +
    "\uff11\033\uff11\034\uff11\035\uff11\037\uff11\040\uff11\041\uff11" +
    "\042\uff11\043\uff11\044\uff11\045\uff11\046\uff11\047\uff11\050" +
    "\uff11\051\uff11\052\uff11\053\uff11\054\uff11\055\uff11\056\uff11" +
    "\057\uff11\060\uff11\061\uff11\062\uff11\063\uff11\064\uff11\065" +
    "\uff11\066\uff11\067\uff11\070\uff11\071\uff11\072\uff11\073\uff11" +
    "\075\uff11\001\002\000\156\004\uff00\005\uff00\006\uff00\007" +
    "\uff00\010\uff00\011\uff00\012\uff00\013\uff00\014\uff00\015\uff00" +
    "\016\uff00\017\uff00\020\uff00\021\uff00\022\uff00\023\uff00\025" +
    "\uff00\026\uff00\027\uff00\030\uff00\031\uff00\033\uff00\034\uff00" +
    "\035\uff00\037\uff00\040\uff00\041\uff00\042\uff00\043\uff00\044" +
    "\uff00\045\uff00\046\uff00\047\uff00\050\uff00\051\uff00\052\uff00" +
    "\053\uff00\054\uff00\055\uff00\056\uff00\057\uff00\060\uff00\061" +
    "\uff00\062\uff00\063\uff00\064\uff00\065\uff00\066\uff00\067\uff00" +
    "\070\uff00\071\uff00\072\uff00\073\uff00\075\uff00\001\002\000" +
    "\156\004\ufef1\005\ufef1\006\ufef1\007\ufef1\010\ufef1\011\ufef1" +
    "\012\ufef1\013\ufef1\014\ufef1\015\ufef1\016\ufef1\017\ufef1\020" +
    "\ufef1\021\ufef1\022\ufef1\023\ufef1\025\ufef1\026\ufef1\027\ufef1" +
    "\030\ufef1\031\ufef1\033\ufef1\034\ufef1\035\ufef1\037\ufef1\040" +
    "\ufef1\041\ufef1\042\ufef1\043\ufef1\044\ufef1\045\ufef1\046\ufef1" +
    "\047\ufef1\050\ufef1\051\ufef1\052\ufef1\053\ufef1\054\ufef1\055" +
    "\ufef1\056\ufef1\057\ufef1\060\ufef1\061\ufef1\062\ufef1\063\ufef1" +
    "\064\ufef1\065\ufef1\066\ufef1\067\ufef1\070\ufef1\071\ufef1\072" +
    "\ufef1\073\ufef1\075\ufef1\001\002\000\156\004\ufeed\005\ufeed" +
    "\006\ufeed\007\ufeed\010\ufeed\011\ufeed\012\ufeed\013\ufeed\014" +
    "\ufeed\015\ufeed\016\ufeed\017\ufeed\020\ufeed\021\ufeed\022\ufeed" +
    "\023\ufeed\025\ufeed\026\ufeed\027\ufeed\030\ufeed\031\ufeed\033" +
    "\ufeed\034\ufeed\035\ufeed\037\ufeed\040\ufeed\041\ufeed\042\ufeed" +
    "\043\ufeed\044\ufeed\045\ufeed\046\ufeed\047\ufeed\050\ufeed\051" +
    "\ufeed\052\ufeed\053\ufeed\054\ufeed\055\ufeed\056\ufeed\057\ufeed" +
    "\060\ufeed\061\ufeed\062\ufeed\063\ufeed\064\ufeed\065\ufeed\066" +
    "\ufeed\067\ufeed\070\ufeed\071\ufeed\072\ufeed\073\ufeed\075\ufeed" +
    "\001\002\000\004\024\323\001\002\000\004\004\324\001" +
    "\002\000\004\045\325\001\002\000\004\067\330\001\002" +
    "\000\004\013\uff35\001\002\000\004\013\331\001\002\000" +
    "\006\013\uff36\014\uffc5\001\002\000\004\006\332\001\002" +
    "\000\060\011\uff1a\016\uff1a\020\uff1a\021\uff1a\022\uff1a\034" +
    "\uff1a\035\uff1a\036\uff1a\047\uff1a\051\uff1a\052\uff1a\053\uff1a" +
    "\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065" +
    "\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001\002\000\056" +
    "\011\uff3a\016\uff3a\020\uff3a\021\uff3a\022\uff3a\034\uff3a\035" +
    "\uff3a\036\uff3a\047\uff3a\051\uff3a\052\uff3a\053\uff3a\054\uff3a" +
    "\055\uff3a\056\uff3a\057\uff3a\060\uff3a\064\uff3a\065\uff3a\067" +
    "\uff3a\074\uff3a\076\uff3a\001\002\000\004\012\335\001\002" +
    "\000\012\034\340\035\336\036\337\067\uff52\001\002\000" +
    "\004\067\uff55\001\002\000\004\067\uff54\001\002\000\004" +
    "\067\uff53\001\002\000\004\067\342\001\002\000\004\043" +
    "\343\001\002\000\006\066\344\067\346\001\002\000\006" +
    "\006\uff51\013\uff51\001\002\000\004\006\347\001\002\000" +
    "\006\006\uff50\013\uff50\001\002\000\026\012\uff59\020\uff59" +
    "\021\uff59\022\uff59\025\uff59\027\uff59\066\uff59\067\uff59\072" +
    "\uff59\073\uff59\001\002\000\026\012\365\020\351\021\366" +
    "\022\354\025\367\027\360\066\362\067\353\072\361\073" +
    "\357\001\002\000\004\005\u0136\001\002\000\036\004\uff70" +
    "\006\uff70\013\uff70\026\uff70\027\uff70\030\uff70\031\uff70\032" +
    "\uff70\041\uff70\042\uff70\043\uff70\044\uff70\100\uff70\101\uff70" +
    "\001\002\000\040\004\uff6e\006\uff6e\013\uff6e\014\uffc1\026" +
    "\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\041\uff6e\042\uff6e" +
    "\043\uff6e\044\uff6e\100\uff6e\101\uff6e\001\002\000\004\005" +
    "\u012e\001\002\000\004\006\u011f\001\002\000\036\004\uff74" +
    "\006\uff74\013\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032" +
    "\uff74\041\uff74\042\uff74\043\uff74\044\uff74\100\uff74\101\uff74" +
    "\001\002\000\012\006\uff86\013\uff86\100\uff86\101\uff86\001" +
    "\002\000\014\020\351\021\366\022\354\066\u0118\067\u011b" +
    "\001\002\000\012\006\uff87\013\uff87\100\uff87\101\uff87\001" +
    "\002\000\040\004\uff72\005\u0116\006\uff72\013\uff72\026\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\041\uff72\042\uff72\043" +
    "\uff72\044\uff72\100\uff72\101\uff72\001\002\000\024\026\u0104" +
    "\027\u0105\030\u0102\031\u0106\032\u0103\041\u010f\042\u010d\043" +
    "\u0110\044\u010e\001\002\000\036\004\uff6f\006\uff6f\013\uff6f" +
    "\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f\041\uff6f\042" +
    "\uff6f\043\uff6f\044\uff6f\100\uff6f\101\uff6f\001\002\000\022" +
    "\012\365\020\351\021\366\022\354\025\367\027\360\066" +
    "\362\067\353\001\002\000\004\005\372\001\002\000\004" +
    "\067\370\001\002\000\004\025\371\001\002\000\036\004" +
    "\uff73\006\uff73\013\uff73\026\uff73\027\uff73\030\uff73\031\uff73" +
    "\032\uff73\041\uff73\042\uff73\043\uff73\044\uff73\100\uff73\101" +
    "\uff73\001\002\000\004\067\373\001\002\000\004\012\374" +
    "\001\002\000\024\012\uff67\013\uff67\020\uff67\021\uff67\022" +
    "\uff67\025\uff67\027\uff67\066\uff67\067\uff67\001\002\000\024" +
    "\012\uffa0\013\uff9e\020\uffa0\021\uffa0\022\uffa0\025\uffa0\027" +
    "\uffa0\066\uffa0\067\uffa0\001\002\000\004\013\377\001\002" +
    "\000\036\004\uff66\006\uff66\013\uff66\026\uff66\027\uff66\030" +
    "\uff66\031\uff66\032\uff66\041\uff66\042\uff66\043\uff66\044\uff66" +
    "\100\uff66\101\uff66\001\002\000\016\013\u0101\026\u0104\027" +
    "\u0105\030\u0102\031\u0106\032\u0103\001\002\000\036\004\uff7a" +
    "\006\uff7a\013\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032" +
    "\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\100\uff7a\101\uff7a" +
    "\001\002\000\022\012\365\020\351\021\366\022\354\025" +
    "\367\027\360\066\362\067\353\001\002\000\022\012\365" +
    "\020\351\021\366\022\354\025\367\027\360\066\362\067" +
    "\353\001\002\000\022\012\365\020\351\021\366\022\354" +
    "\025\367\027\360\066\362\067\353\001\002\000\022\012" +
    "\365\020\351\021\366\022\354\025\367\027\360\066\362" +
    "\067\353\001\002\000\022\012\365\020\351\021\366\022" +
    "\354\025\367\027\360\066\362\067\353\001\002\000\036" +
    "\004\uff76\006\uff76\013\uff76\026\uff76\027\uff76\030\uff76\031" +
    "\uff76\032\uff76\041\uff76\042\uff76\043\uff76\044\uff76\100\uff76" +
    "\101\uff76\001\002\000\036\004\uff78\006\uff78\013\uff78\026" +
    "\uff78\027\uff78\030\u0102\031\u0106\032\u0103\041\uff78\042\uff78" +
    "\043\uff78\044\uff78\100\uff78\101\uff78\001\002\000\036\004" +
    "\uff79\006\uff79\013\uff79\026\uff79\027\uff79\030\u0102\031\u0106" +
    "\032\u0103\041\uff79\042\uff79\043\uff79\044\uff79\100\uff79\101" +
    "\uff79\001\002\000\036\004\uff75\006\uff75\013\uff75\026\uff75" +
    "\027\uff75\030\uff75\031\uff75\032\uff75\041\uff75\042\uff75\043" +
    "\uff75\044\uff75\100\uff75\101\uff75\001\002\000\036\004\uff77" +
    "\006\uff77\013\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032" +
    "\uff77\041\uff77\042\uff77\043\uff77\044\uff77\100\uff77\101\uff77" +
    "\001\002\000\022\012\365\020\351\021\366\022\354\025" +
    "\367\027\360\066\362\067\353\001\002\000\024\012\uff84" +
    "\020\uff84\021\uff84\022\uff84\025\uff84\027\uff84\043\u0114\066" +
    "\uff84\067\uff84\001\002\000\004\043\u0113\001\002\000\024" +
    "\012\uff85\020\uff85\021\uff85\022\uff85\025\uff85\027\uff85\043" +
    "\u0112\066\uff85\067\uff85\001\002\000\004\043\u0111\001\002" +
    "\000\022\012\uff81\020\uff81\021\uff81\022\uff81\025\uff81\027" +
    "\uff81\066\uff81\067\uff81\001\002\000\022\012\uff83\020\uff83" +
    "\021\uff83\022\uff83\025\uff83\027\uff83\066\uff83\067\uff83\001" +
    "\002\000\022\012\uff80\020\uff80\021\uff80\022\uff80\025\uff80" +
    "\027\uff80\066\uff80\067\uff80\001\002\000\022\012\uff82\020" +
    "\uff82\021\uff82\022\uff82\025\uff82\027\uff82\066\uff82\067\uff82" +
    "\001\002\000\024\006\uff88\013\uff88\026\u0104\027\u0105\030" +
    "\u0102\031\u0106\032\u0103\100\uff88\101\uff88\001\002\000\004" +
    "\066\u0117\001\002\000\036\004\uff71\006\uff71\013\uff71\026" +
    "\uff71\027\uff71\030\uff71\031\uff71\032\uff71\041\uff71\042\uff71" +
    "\043\uff71\044\uff71\100\uff71\101\uff71\001\002\000\040\004" +
    "\uff6d\005\u011d\006\uff6d\013\uff6d\026\uff6d\027\uff6d\030\uff6d" +
    "\031\uff6d\032\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\100" +
    "\uff6d\101\uff6d\001\002\000\036\004\uff6a\006\uff6a\013\uff6a" +
    "\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\041\uff6a\042" +
    "\uff6a\043\uff6a\044\uff6a\100\uff6a\101\uff6a\001\002\000\036" +
    "\004\uff6b\006\uff6b\013\uff6b\026\uff6b\027\uff6b\030\uff6b\031" +
    "\uff6b\032\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\100\uff6b" +
    "\101\uff6b\001\002\000\040\004\uff69\006\uff69\013\uff69\014" +
    "\uffc1\026\uff69\027\uff69\030\uff69\031\uff69\032\uff69\041\uff69" +
    "\042\uff69\043\uff69\044\uff69\100\uff69\101\uff69\001\002\000" +
    "\036\004\uff68\006\uff68\013\uff68\026\uff68\027\uff68\030\uff68" +
    "\031\uff68\032\uff68\041\uff68\042\uff68\043\uff68\044\uff68\100" +
    "\uff68\101\uff68\001\002\000\004\066\u011e\001\002\000\036" +
    "\004\uff6c\006\uff6c\013\uff6c\026\uff6c\027\uff6c\030\uff6c\031" +
    "\uff6c\032\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c\100\uff6c" +
    "\101\uff6c\001\002\000\004\067\u0120\001\002\000\004\043" +
    "\u0121\001\002\000\004\067\u0122\001\002\000\004\026\u0123" +
    "\001\002\000\006\066\344\067\346\001\002\000\004\013" +
    "\u0125\001\002\000\006\010\uff58\075\uff58\001\002\000\006" +
    "\010\uff1a\075\142\001\002\000\004\010\u0128\001\002\000" +
    "\052\011\uff1a\020\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a" +
    "\036\uff1a\047\uff1a\051\uff1a\054\uff1a\055\uff1a\056\uff1a\057" +
    "\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074\uff1a\075\142" +
    "\076\uff1a\001\002\000\050\011\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\047\uffb1\051\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\064\uffb1\065\uffb1\067" +
    "\uffb1\074\uffb1\076\uffb1\001\002\000\050\011\u012b\020\170" +
    "\021\225\022\223\034\021\035\022\036\017\047\202\051" +
    "\177\054\227\055\174\056\226\057\171\060\230\064\203" +
    "\065\204\067\222\074\210\076\207\001\002\000\060\011" +
    "\uff57\016\uff57\020\uff57\021\uff57\022\uff57\034\uff57\035\uff57" +
    "\036\uff57\047\uff57\051\uff57\052\uff57\053\uff57\054\uff57\055" +
    "\uff57\056\uff57\057\uff57\060\uff57\064\uff57\065\uff57\067\uff57" +
    "\074\uff57\075\uff57\076\uff57\001\002\000\060\011\uff1a\016" +
    "\uff1a\020\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a\036\uff1a" +
    "\047\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056" +
    "\uff1a\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074\uff1a" +
    "\075\142\076\uff1a\001\002\000\056\011\uff56\016\uff56\020" +
    "\uff56\021\uff56\022\uff56\034\uff56\035\uff56\036\uff56\047\uff56" +
    "\051\uff56\052\uff56\053\uff56\054\uff56\055\uff56\056\uff56\057" +
    "\uff56\060\uff56\064\uff56\065\uff56\067\uff56\074\uff56\076\uff56" +
    "\001\002\000\004\067\u012f\001\002\000\004\005\u0130\001" +
    "\002\000\004\067\u0131\001\002\000\004\012\u0132\001\002" +
    "\000\024\012\uff63\013\uff63\020\uff63\021\uff63\022\uff63\025" +
    "\uff63\027\uff63\066\uff63\067\uff63\001\002\000\024\012\uffa0" +
    "\013\uff9e\020\uffa0\021\uffa0\022\uffa0\025\uffa0\027\uffa0\066" +
    "\uffa0\067\uffa0\001\002\000\004\013\u0135\001\002\000\036" +
    "\004\uff62\006\uff62\013\uff62\026\uff62\027\uff62\030\uff62\031" +
    "\uff62\032\uff62\041\uff62\042\uff62\043\uff62\044\uff62\100\uff62" +
    "\101\uff62\001\002\000\004\067\u0137\001\002\000\004\012" +
    "\u0138\001\002\000\024\012\uff65\013\uff65\020\uff65\021\uff65" +
    "\022\uff65\025\uff65\027\uff65\066\uff65\067\uff65\001\002\000" +
    "\024\012\uffa0\013\uff9e\020\uffa0\021\uffa0\022\uffa0\025\uffa0" +
    "\027\uffa0\066\uffa0\067\uffa0\001\002\000\004\013\u013b\001" +
    "\002\000\036\004\uff64\006\uff64\013\uff64\026\uff64\027\uff64" +
    "\030\uff64\031\uff64\032\uff64\041\uff64\042\uff64\043\uff64\044" +
    "\uff64\100\uff64\101\uff64\001\002\000\004\010\uff4c\001\002" +
    "\000\004\010\u013e\001\002\000\052\011\uff1a\020\uff1a\021" +
    "\uff1a\022\uff1a\034\uff1a\035\uff1a\036\uff1a\047\uff1a\051\uff1a" +
    "\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065" +
    "\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001\002\000\050" +
    "\011\uffb1\020\uffb1\021\uffb1\022\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\047\uffb1\051\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\064\uffb1\065\uffb1\067\uffb1\074\uffb1\076\uffb1\001" +
    "\002\000\050\011\u0141\020\170\021\225\022\223\034\021" +
    "\035\022\036\017\047\202\051\177\054\227\055\174\056" +
    "\226\057\171\060\230\064\203\065\204\067\222\074\210" +
    "\076\207\001\002\000\006\055\uff1a\075\142\001\002\000" +
    "\004\055\u0143\001\002\000\004\012\u0144\001\002\000\030" +
    "\012\365\020\351\021\366\022\354\025\367\027\360\044" +
    "\u0146\066\362\067\353\072\361\073\357\001\002\000\010" +
    "\013\uff7d\100\uff7d\101\uff7d\001\002\000\026\012\u0151\020" +
    "\351\021\366\022\354\025\367\027\360\066\362\067\353" +
    "\072\361\073\357\001\002\000\010\013\u0148\100\u0149\101" +
    "\u014a\001\002\000\004\006\u014d\001\002\000\030\012\365" +
    "\020\351\021\366\022\354\025\367\027\360\044\u0146\066" +
    "\362\067\353\072\361\073\357\001\002\000\030\012\365" +
    "\020\351\021\366\022\354\025\367\027\360\044\u0146\066" +
    "\362\067\353\072\361\073\357\001\002\000\010\013\uff7e" +
    "\100\u0149\101\uff7e\001\002\000\010\013\uff7f\100\uff7f\101" +
    "\uff7f\001\002\000\060\011\uff4b\016\uff4b\020\uff4b\021\uff4b" +
    "\022\uff4b\034\uff4b\035\uff4b\036\uff4b\047\uff4b\051\uff4b\052" +
    "\uff4b\053\uff4b\054\uff4b\055\uff4b\056\uff4b\057\uff4b\060\uff4b" +
    "\064\uff4b\065\uff4b\067\uff4b\074\uff4b\075\uff4b\076\uff4b\001" +
    "\002\000\060\011\uff1a\016\uff1a\020\uff1a\021\uff1a\022\uff1a" +
    "\034\uff1a\035\uff1a\036\uff1a\047\uff1a\051\uff1a\052\uff1a\053" +
    "\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a" +
    "\065\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001\002\000" +
    "\056\011\uff4a\016\uff4a\020\uff4a\021\uff4a\022\uff4a\034\uff4a" +
    "\035\uff4a\036\uff4a\047\uff4a\051\uff4a\052\uff4a\053\uff4a\054" +
    "\uff4a\055\uff4a\056\uff4a\057\uff4a\060\uff4a\064\uff4a\065\uff4a" +
    "\067\uff4a\074\uff4a\076\uff4a\001\002\000\010\013\uff7b\100" +
    "\uff7b\101\uff7b\001\002\000\026\012\365\020\351\021\366" +
    "\022\354\025\367\027\360\066\362\067\353\072\361\073" +
    "\357\001\002\000\004\013\u0154\001\002\000\026\013\u0101" +
    "\026\u0104\027\u0105\030\u0102\031\u0106\032\u0103\041\u010f\042" +
    "\u010d\043\u0110\044\u010e\001\002\000\010\013\uff7c\100\uff7c" +
    "\101\uff7c\001\002\000\004\067\u0156\001\002\000\004\012" +
    "\u0157\001\002\000\024\012\uffa6\013\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\025\uffa6\027\uffa6\066\uffa6\067\uffa6\001\002\000" +
    "\024\012\uffa0\013\uff9e\020\uffa0\021\uffa0\022\uffa0\025\uffa0" +
    "\027\uffa0\066\uffa0\067\uffa0\001\002\000\004\013\u015a\001" +
    "\002\000\004\006\u015b\001\002\000\060\011\uff1a\016\uff1a" +
    "\020\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a\036\uff1a\047" +
    "\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056\uff1a" +
    "\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074\uff1a\075" +
    "\142\076\uff1a\001\002\000\056\011\uffa5\016\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\034\uffa5\035\uffa5\036\uffa5\047\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\064\uffa5\065\uffa5\067\uffa5\074\uffa5\076\uffa5\001" +
    "\002\000\004\067\u015e\001\002\000\006\005\u015f\067\u0160" +
    "\001\002\000\004\067\u0179\001\002\000\010\004\uff97\006" +
    "\uff97\012\uff9a\001\002\000\006\004\u016c\006\uff8c\001\002" +
    "\000\004\012\u0164\001\002\000\006\004\uff99\006\uff99\001" +
    "\002\000\024\012\uff91\013\u0165\020\uff91\021\uff91\022\uff91" +
    "\025\uff91\027\uff91\066\uff91\067\uff91\001\002\000\006\004" +
    "\uff94\006\uff94\001\002\000\022\012\365\020\351\021\366" +
    "\022\354\025\367\027\360\066\362\067\353\001\002\000" +
    "\004\013\u0168\001\002\000\006\004\uff95\006\uff95\001\002" +
    "\000\020\004\u016a\013\uff93\026\u0104\027\u0105\030\u0102\031" +
    "\u0106\032\u0103\001\002\000\022\012\uff92\020\uff92\021\uff92" +
    "\022\uff92\025\uff92\027\uff92\066\uff92\067\uff92\001\002\000" +
    "\006\004\u016c\006\uff8c\001\002\000\004\067\u0170\001\002" +
    "\000\004\006\u016e\001\002\000\064\011\uff1a\016\uff1a\020" +
    "\uff1a\021\uff1a\022\uff1a\033\uff1a\034\uff1a\035\uff1a\036\uff1a" +
    "\037\uff1a\047\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055" +
    "\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a" +
    "\074\uff1a\075\142\076\uff1a\001\002\000\062\011\uff98\016" +
    "\uff98\020\uff98\021\uff98\022\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\047\uff98\051\uff98\052\uff98\053\uff98\054" +
    "\uff98\055\uff98\056\uff98\057\uff98\060\uff98\064\uff98\065\uff98" +
    "\067\uff98\074\uff98\076\uff98\001\002\000\010\004\uff8e\006" +
    "\uff8e\012\u0164\001\002\000\006\004\uff90\006\uff90\001\002" +
    "\000\006\004\u016c\006\uff8c\001\002\000\004\006\uff8d\001" +
    "\002\000\006\004\u016c\006\uff8c\001\002\000\004\006\uff8f" +
    "\001\002\000\004\006\u0177\001\002\000\064\011\uff1a\016" +
    "\uff1a\020\uff1a\021\uff1a\022\uff1a\033\uff1a\034\uff1a\035\uff1a" +
    "\036\uff1a\037\uff1a\047\uff1a\051\uff1a\052\uff1a\053\uff1a\054" +
    "\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065\uff1a" +
    "\067\uff1a\074\uff1a\075\142\076\uff1a\001\002\000\062\011" +
    "\uff96\016\uff96\020\uff96\021\uff96\022\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\047\uff96\051\uff96\052\uff96\053" +
    "\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96\064\uff96" +
    "\065\uff96\067\uff96\074\uff96\076\uff96\001\002\000\004\012" +
    "\u017a\001\002\000\024\012\uffa2\013\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\025\uffa2\027\uffa2\066\uffa2\067\uffa2\001\002\000" +
    "\024\012\uffa0\013\uff9e\020\uffa0\021\uffa0\022\uffa0\025\uffa0" +
    "\027\uffa0\066\uffa0\067\uffa0\001\002\000\004\013\u017d\001" +
    "\002\000\004\006\u017e\001\002\000\060\011\uff1a\016\uff1a" +
    "\020\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a\036\uff1a\047" +
    "\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056\uff1a" +
    "\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074\uff1a\075" +
    "\142\076\uff1a\001\002\000\056\011\uffa1\016\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\034\uffa1\035\uffa1\036\uffa1\047\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\064\uffa1\065\uffa1\067\uffa1\074\uffa1\076\uffa1\001" +
    "\002\000\024\012\uffea\020\uffea\021\uffea\022\uffea\025\uffea" +
    "\027\uffea\065\u0184\066\uffea\067\uffea\001\002\000\004\014" +
    "\uffc1\001\002\000\010\004\uffc6\013\uffc6\043\uffc6\001\002" +
    "\000\022\012\046\020\035\021\047\022\037\025\050\027" +
    "\042\066\045\067\036\001\002\000\004\012\u0185\001\002" +
    "\000\004\013\u0186\001\002\000\004\006\u0187\001\002\000" +
    "\060\011\uff2c\016\uff2c\020\uff2c\021\uff2c\022\uff2c\034\uff2c" +
    "\035\uff2c\036\uff2c\047\uff2c\051\uff2c\052\uff2c\053\uff2c\054" +
    "\uff2c\055\uff2c\056\uff2c\057\uff2c\060\uff2c\064\uff2c\065\uff2c" +
    "\067\uff2c\074\uff2c\075\uff2c\076\uff2c\001\002\000\060\011" +
    "\uff1a\016\uff1a\020\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a" +
    "\036\uff1a\047\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055" +
    "\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a" +
    "\074\uff1a\075\142\076\uff1a\001\002\000\056\011\uff2b\016" +
    "\uff2b\020\uff2b\021\uff2b\022\uff2b\034\uff2b\035\uff2b\036\uff2b" +
    "\047\uff2b\051\uff2b\052\uff2b\053\uff2b\054\uff2b\055\uff2b\056" +
    "\uff2b\057\uff2b\060\uff2b\064\uff2b\065\uff2b\067\uff2b\074\uff2b" +
    "\076\uff2b\001\002\000\016\006\u018b\026\064\027\067\030" +
    "\063\031\071\032\065\001\002\000\064\011\uffe9\016\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\047\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\055\uffe9\056\uffe9\057\uffe9\060\uffe9\064\uffe9\065\uffe9\067" +
    "\uffe9\074\uffe9\075\uffe9\076\uffe9\001\002\000\064\011\uff1a" +
    "\016\uff1a\020\uff1a\021\uff1a\022\uff1a\033\uff1a\034\uff1a\035" +
    "\uff1a\036\uff1a\037\uff1a\047\uff1a\051\uff1a\052\uff1a\053\uff1a" +
    "\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065" +
    "\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001\002\000\062" +
    "\011\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\047\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\064" +
    "\uffe8\065\uffe8\067\uffe8\074\uffe8\076\uffe8\001\002\000\024" +
    "\012\046\020\035\021\047\022\037\025\050\027\042\065" +
    "\u0190\066\045\067\036\001\002\000\016\006\u0196\026\064" +
    "\027\067\030\063\031\071\032\065\001\002\000\004\012" +
    "\u0191\001\002\000\004\013\u0192\001\002\000\004\006\u0193" +
    "\001\002\000\060\011\uff2a\016\uff2a\020\uff2a\021\uff2a\022" +
    "\uff2a\034\uff2a\035\uff2a\036\uff2a\047\uff2a\051\uff2a\052\uff2a" +
    "\053\uff2a\054\uff2a\055\uff2a\056\uff2a\057\uff2a\060\uff2a\064" +
    "\uff2a\065\uff2a\067\uff2a\074\uff2a\075\uff2a\076\uff2a\001\002" +
    "\000\060\011\uff1a\016\uff1a\020\uff1a\021\uff1a\022\uff1a\034" +
    "\uff1a\035\uff1a\036\uff1a\047\uff1a\051\uff1a\052\uff1a\053\uff1a" +
    "\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065" +
    "\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001\002\000\056" +
    "\011\uff29\016\uff29\020\uff29\021\uff29\022\uff29\034\uff29\035" +
    "\uff29\036\uff29\047\uff29\051\uff29\052\uff29\053\uff29\054\uff29" +
    "\055\uff29\056\uff29\057\uff29\060\uff29\064\uff29\065\uff29\067" +
    "\uff29\074\uff29\076\uff29\001\002\000\064\011\uffe7\016\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\047\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\064\uffe7\065\uffe7\067" +
    "\uffe7\074\uffe7\075\uffe7\076\uffe7\001\002\000\064\011\uff1a" +
    "\016\uff1a\020\uff1a\021\uff1a\022\uff1a\033\uff1a\034\uff1a\035" +
    "\uff1a\036\uff1a\037\uff1a\047\uff1a\051\uff1a\052\uff1a\053\uff1a" +
    "\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065" +
    "\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001\002\000\062" +
    "\011\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\047\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\064" +
    "\uffe6\065\uffe6\067\uffe6\074\uffe6\076\uffe6\001\002\000\150" +
    "\004\247\005\272\006\276\007\243\010\246\011\245\012" +
    "\301\013\277\014\316\015\314\016\234\017\311\020\236" +
    "\021\304\022\302\023\312\025\305\026\265\027\262\030" +
    "\271\031\306\033\307\034\253\035\257\037\317\040\240" +
    "\041\267\042\263\043\250\044\313\045\241\046\274\047" +
    "\254\050\273\051\251\052\242\053\270\054\320\055\244" +
    "\056\315\057\237\060\321\064\255\065\260\066\256\067" +
    "\275\070\310\071\252\072\266\073\300\075\u019b\001\002" +
    "\000\060\011\uff20\016\uff20\020\uff20\021\uff20\022\uff20\034" +
    "\uff20\035\uff20\036\uff20\047\uff20\051\uff20\052\uff20\053\uff20" +
    "\054\uff20\055\uff20\056\uff20\057\uff20\060\uff20\064\uff20\065" +
    "\uff20\067\uff20\074\uff20\075\u019c\076\uff20\001\002\000\060" +
    "\011\uff1d\016\uff1d\020\uff1d\021\uff1d\022\uff1d\034\uff1d\035" +
    "\uff1d\036\uff1d\047\uff1d\051\uff1d\052\uff1d\053\uff1d\054\uff1d" +
    "\055\uff1d\056\uff1d\057\uff1d\060\uff1d\064\uff1d\065\uff1d\067" +
    "\uff1d\074\uff1d\075\uff1d\076\uff1d\001\002\000\060\011\uff1e" +
    "\016\uff1e\020\uff1e\021\uff1e\022\uff1e\034\uff1e\035\uff1e\036" +
    "\uff1e\047\uff1e\051\uff1e\052\uff1e\053\uff1e\054\uff1e\055\uff1e" +
    "\056\uff1e\057\uff1e\060\uff1e\064\uff1e\065\uff1e\067\uff1e\074" +
    "\uff1e\075\uff1e\076\uff1e\001\002\000\160\004\u01a8\005\u01ba" +
    "\006\u01be\007\u01a4\010\u01a7\011\u01a6\012\u01c1\013\u01c0\014" +
    "\u01cf\015\u01cd\016\u019e\017\u01ca\020\u019f\021\u01c4\022\u01c2" +
    "\023\u01cb\025\u01c5\026\u01b5\027\u01b3\030\u01b9\031\u01c7\033" +
    "\u01c6\034\u01ac\035\u01b1\037\u01d1\040\u01a1\041\u01b7\042\u01b4" +
    "\043\u01a9\044\u01cc\045\u01a2\046\u01bc\047\u01ad\050\u01bb\051" +
    "\u01aa\052\u01a3\053\u01b8\054\u01d0\055\u01a5\056\u01ce\057\u01a0" +
    "\060\u01d2\061\264\062\235\063\261\064\u01ae\065\u01b2\066" +
    "\u01af\067\u01bd\070\u01c9\071\u01ab\072\u01b6\073\u01bf\075\u01c8" +
    "\077\u01b0\001\002\000\160\004\ufea7\005\ufea7\006\ufea7\007" +
    "\ufea7\010\ufea7\011\ufea7\012\ufea7\013\ufea7\014\ufea7\015\ufea7" +
    "\016\ufea7\017\ufea7\020\ufea7\021\ufea7\022\ufea7\023\ufea7\025" +
    "\ufea7\026\ufea7\027\ufea7\030\ufea7\031\ufea7\033\ufea7\034\ufea7" +
    "\035\ufea7\037\ufea7\040\ufea7\041\ufea7\042\ufea7\043\ufea7\044" +
    "\ufea7\045\ufea7\046\ufea7\047\ufea7\050\ufea7\051\ufea7\052\ufea7" +
    "\053\ufea7\054\ufea7\055\ufea7\056\ufea7\057\ufea7\060\ufea7\061" +
    "\ufea7\062\ufea7\063\ufea7\064\ufea7\065\ufea7\066\ufea7\067\ufea7" +
    "\070\ufea7\071\ufea7\072\ufea7\073\ufea7\075\ufea7\077\ufea7\001" +
    "\002\000\160\004\ufea5\005\ufea5\006\ufea5\007\ufea5\010\ufea5" +
    "\011\ufea5\012\ufea5\013\ufea5\014\ufea5\015\ufea5\016\ufea5\017" +
    "\ufea5\020\ufea5\021\ufea5\022\ufea5\023\ufea5\025\ufea5\026\ufea5" +
    "\027\ufea5\030\ufea5\031\ufea5\033\ufea5\034\ufea5\035\ufea5\037" +
    "\ufea5\040\ufea5\041\ufea5\042\ufea5\043\ufea5\044\ufea5\045\ufea5" +
    "\046\ufea5\047\ufea5\050\ufea5\051\ufea5\052\ufea5\053\ufea5\054" +
    "\ufea5\055\ufea5\056\ufea5\057\ufea5\060\ufea5\061\ufea5\062\ufea5" +
    "\063\ufea5\064\ufea5\065\ufea5\066\ufea5\067\ufea5\070\ufea5\071" +
    "\ufea5\072\ufea5\073\ufea5\075\ufea5\077\ufea5\001\002\000\160" +
    "\004\ufe87\005\ufe87\006\ufe87\007\ufe87\010\ufe87\011\ufe87\012" +
    "\ufe87\013\ufe87\014\ufe87\015\ufe87\016\ufe87\017\ufe87\020\ufe87" +
    "\021\ufe87\022\ufe87\023\ufe87\025\ufe87\026\ufe87\027\ufe87\030" +
    "\ufe87\031\ufe87\033\ufe87\034\ufe87\035\ufe87\037\ufe87\040\ufe87" +
    "\041\ufe87\042\ufe87\043\ufe87\044\ufe87\045\ufe87\046\ufe87\047" +
    "\ufe87\050\ufe87\051\ufe87\052\ufe87\053\ufe87\054\ufe87\055\ufe87" +
    "\056\ufe87\057\ufe87\060\ufe87\061\ufe87\062\ufe87\063\ufe87\064" +
    "\ufe87\065\ufe87\066\ufe87\067\ufe87\070\ufe87\071\ufe87\072\ufe87" +
    "\073\ufe87\075\ufe87\077\ufe87\001\002\000\160\004\ufe96\005" +
    "\ufe96\006\ufe96\007\ufe96\010\ufe96\011\ufe96\012\ufe96\013\ufe96" +
    "\014\ufe96\015\ufe96\016\ufe96\017\ufe96\020\ufe96\021\ufe96\022" +
    "\ufe96\023\ufe96\025\ufe96\026\ufe96\027\ufe96\030\ufe96\031\ufe96" +
    "\033\ufe96\034\ufe96\035\ufe96\037\ufe96\040\ufe96\041\ufe96\042" +
    "\ufe96\043\ufe96\044\ufe96\045\ufe96\046\ufe96\047\ufe96\050\ufe96" +
    "\051\ufe96\052\ufe96\053\ufe96\054\ufe96\055\ufe96\056\ufe96\057" +
    "\ufe96\060\ufe96\061\ufe96\062\ufe96\063\ufe96\064\ufe96\065\ufe96" +
    "\066\ufe96\067\ufe96\070\ufe96\071\ufe96\072\ufe96\073\ufe96\075" +
    "\ufe96\077\ufe96\001\002\000\160\004\ufe91\005\ufe91\006\ufe91" +
    "\007\ufe91\010\ufe91\011\ufe91\012\ufe91\013\ufe91\014\ufe91\015" +
    "\ufe91\016\ufe91\017\ufe91\020\ufe91\021\ufe91\022\ufe91\023\ufe91" +
    "\025\ufe91\026\ufe91\027\ufe91\030\ufe91\031\ufe91\033\ufe91\034" +
    "\ufe91\035\ufe91\037\ufe91\040\ufe91\041\ufe91\042\ufe91\043\ufe91" +
    "\044\ufe91\045\ufe91\046\ufe91\047\ufe91\050\ufe91\051\ufe91\052" +
    "\ufe91\053\ufe91\054\ufe91\055\ufe91\056\ufe91\057\ufe91\060\ufe91" +
    "\061\ufe91\062\ufe91\063\ufe91\064\ufe91\065\ufe91\066\ufe91\067" +
    "\ufe91\070\ufe91\071\ufe91\072\ufe91\073\ufe91\075\ufe91\077\ufe91" +
    "\001\002\000\160\004\ufe8c\005\ufe8c\006\ufe8c\007\ufe8c\010" +
    "\ufe8c\011\ufe8c\012\ufe8c\013\ufe8c\014\ufe8c\015\ufe8c\016\ufe8c" +
    "\017\ufe8c\020\ufe8c\021\ufe8c\022\ufe8c\023\ufe8c\025\ufe8c\026" +
    "\ufe8c\027\ufe8c\030\ufe8c\031\ufe8c\033\ufe8c\034\ufe8c\035\ufe8c" +
    "\037\ufe8c\040\ufe8c\041\ufe8c\042\ufe8c\043\ufe8c\044\ufe8c\045" +
    "\ufe8c\046\ufe8c\047\ufe8c\050\ufe8c\051\ufe8c\052\ufe8c\053\ufe8c" +
    "\054\ufe8c\055\ufe8c\056\ufe8c\057\ufe8c\060\ufe8c\061\ufe8c\062" +
    "\ufe8c\063\ufe8c\064\ufe8c\065\ufe8c\066\ufe8c\067\ufe8c\070\ufe8c" +
    "\071\ufe8c\072\ufe8c\073\ufe8c\075\ufe8c\077\ufe8c\001\002\000" +
    "\160\004\ufeaf\005\ufeaf\006\ufeaf\007\ufeaf\010\ufeaf\011\ufeaf" +
    "\012\ufeaf\013\ufeaf\014\ufeaf\015\ufeaf\016\ufeaf\017\ufeaf\020" +
    "\ufeaf\021\ufeaf\022\ufeaf\023\ufeaf\025\ufeaf\026\ufeaf\027\ufeaf" +
    "\030\ufeaf\031\ufeaf\033\ufeaf\034\ufeaf\035\ufeaf\037\ufeaf\040" +
    "\ufeaf\041\ufeaf\042\ufeaf\043\ufeaf\044\ufeaf\045\ufeaf\046\ufeaf" +
    "\047\ufeaf\050\ufeaf\051\ufeaf\052\ufeaf\053\ufeaf\054\ufeaf\055" +
    "\ufeaf\056\ufeaf\057\ufeaf\060\ufeaf\061\ufeaf\062\ufeaf\063\ufeaf" +
    "\064\ufeaf\065\ufeaf\066\ufeaf\067\ufeaf\070\ufeaf\071\ufeaf\072" +
    "\ufeaf\073\ufeaf\075\ufeaf\077\ufeaf\001\002\000\160\004\ufe89" +
    "\005\ufe89\006\ufe89\007\ufe89\010\ufe89\011\ufe89\012\ufe89\013" +
    "\ufe89\014\ufe89\015\ufe89\016\ufe89\017\ufe89\020\ufe89\021\ufe89" +
    "\022\ufe89\023\ufe89\025\ufe89\026\ufe89\027\ufe89\030\ufe89\031" +
    "\ufe89\033\ufe89\034\ufe89\035\ufe89\037\ufe89\040\ufe89\041\ufe89" +
    "\042\ufe89\043\ufe89\044\ufe89\045\ufe89\046\ufe89\047\ufe89\050" +
    "\ufe89\051\ufe89\052\ufe89\053\ufe89\054\ufe89\055\ufe89\056\ufe89" +
    "\057\ufe89\060\ufe89\061\ufe89\062\ufe89\063\ufe89\064\ufe89\065" +
    "\ufe89\066\ufe89\067\ufe89\070\ufe89\071\ufe89\072\ufe89\073\ufe89" +
    "\075\ufe89\077\ufe89\001\002\000\160\004\ufead\005\ufead\006" +
    "\ufead\007\ufead\010\ufead\011\ufead\012\ufead\013\ufead\014\ufead" +
    "\015\ufead\016\ufead\017\ufead\020\ufead\021\ufead\022\ufead\023" +
    "\ufead\025\ufead\026\ufead\027\ufead\030\ufead\031\ufead\033\ufead" +
    "\034\ufead\035\ufead\037\ufead\040\ufead\041\ufead\042\ufead\043" +
    "\ufead\044\ufead\045\ufead\046\ufead\047\ufead\050\ufead\051\ufead" +
    "\052\ufead\053\ufead\054\ufead\055\ufead\056\ufead\057\ufead\060" +
    "\ufead\061\ufead\062\ufead\063\ufead\064\ufead\065\ufead\066\ufead" +
    "\067\ufead\070\ufead\071\ufead\072\ufead\073\ufead\075\ufead\077" +
    "\ufead\001\002\000\160\004\ufeae\005\ufeae\006\ufeae\007\ufeae" +
    "\010\ufeae\011\ufeae\012\ufeae\013\ufeae\014\ufeae\015\ufeae\016" +
    "\ufeae\017\ufeae\020\ufeae\021\ufeae\022\ufeae\023\ufeae\025\ufeae" +
    "\026\ufeae\027\ufeae\030\ufeae\031\ufeae\033\ufeae\034\ufeae\035" +
    "\ufeae\037\ufeae\040\ufeae\041\ufeae\042\ufeae\043\ufeae\044\ufeae" +
    "\045\ufeae\046\ufeae\047\ufeae\050\ufeae\051\ufeae\052\ufeae\053" +
    "\ufeae\054\ufeae\055\ufeae\056\ufeae\057\ufeae\060\ufeae\061\ufeae" +
    "\062\ufeae\063\ufeae\064\ufeae\065\ufeae\066\ufeae\067\ufeae\070" +
    "\ufeae\071\ufeae\072\ufeae\073\ufeae\075\ufeae\077\ufeae\001\002" +
    "\000\160\004\ufeb2\005\ufeb2\006\ufeb2\007\ufeb2\010\ufeb2\011" +
    "\ufeb2\012\ufeb2\013\ufeb2\014\ufeb2\015\ufeb2\016\ufeb2\017\ufeb2" +
    "\020\ufeb2\021\ufeb2\022\ufeb2\023\ufeb2\025\ufeb2\026\ufeb2\027" +
    "\ufeb2\030\ufeb2\031\ufeb2\033\ufeb2\034\ufeb2\035\ufeb2\037\ufeb2" +
    "\040\ufeb2\041\ufeb2\042\ufeb2\043\ufeb2\044\ufeb2\045\ufeb2\046" +
    "\ufeb2\047\ufeb2\050\ufeb2\051\ufeb2\052\ufeb2\053\ufeb2\054\ufeb2" +
    "\055\ufeb2\056\ufeb2\057\ufeb2\060\ufeb2\061\ufeb2\062\ufeb2\063" +
    "\ufeb2\064\ufeb2\065\ufeb2\066\ufeb2\067\ufeb2\070\ufeb2\071\ufeb2" +
    "\072\ufeb2\073\ufeb2\075\ufeb2\077\ufeb2\001\002\000\160\004" +
    "\ufe93\005\ufe93\006\ufe93\007\ufe93\010\ufe93\011\ufe93\012\ufe93" +
    "\013\ufe93\014\ufe93\015\ufe93\016\ufe93\017\ufe93\020\ufe93\021" +
    "\ufe93\022\ufe93\023\ufe93\025\ufe93\026\ufe93\027\ufe93\030\ufe93" +
    "\031\ufe93\033\ufe93\034\ufe93\035\ufe93\037\ufe93\040\ufe93\041" +
    "\ufe93\042\ufe93\043\ufe93\044\ufe93\045\ufe93\046\ufe93\047\ufe93" +
    "\050\ufe93\051\ufe93\052\ufe93\053\ufe93\054\ufe93\055\ufe93\056" +
    "\ufe93\057\ufe93\060\ufe93\061\ufe93\062\ufe93\063\ufe93\064\ufe93" +
    "\065\ufe93\066\ufe93\067\ufe93\070\ufe93\071\ufe93\072\ufe93\073" +
    "\ufe93\075\ufe93\077\ufe93\001\002\000\160\004\ufe8d\005\ufe8d" +
    "\006\ufe8d\007\ufe8d\010\ufe8d\011\ufe8d\012\ufe8d\013\ufe8d\014" +
    "\ufe8d\015\ufe8d\016\ufe8d\017\ufe8d\020\ufe8d\021\ufe8d\022\ufe8d" +
    "\023\ufe8d\025\ufe8d\026\ufe8d\027\ufe8d\030\ufe8d\031\ufe8d\033" +
    "\ufe8d\034\ufe8d\035\ufe8d\037\ufe8d\040\ufe8d\041\ufe8d\042\ufe8d" +
    "\043\ufe8d\044\ufe8d\045\ufe8d\046\ufe8d\047\ufe8d\050\ufe8d\051" +
    "\ufe8d\052\ufe8d\053\ufe8d\054\ufe8d\055\ufe8d\056\ufe8d\057\ufe8d" +
    "\060\ufe8d\061\ufe8d\062\ufe8d\063\ufe8d\064\ufe8d\065\ufe8d\066" +
    "\ufe8d\067\ufe8d\070\ufe8d\071\ufe8d\072\ufe8d\073\ufe8d\075\ufe8d" +
    "\077\ufe8d\001\002\000\160\004\ufe9d\005\ufe9d\006\ufe9d\007" +
    "\ufe9d\010\ufe9d\011\ufe9d\012\ufe9d\013\ufe9d\014\ufe9d\015\ufe9d" +
    "\016\ufe9d\017\ufe9d\020\ufe9d\021\ufe9d\022\ufe9d\023\ufe9d\025" +
    "\ufe9d\026\ufe9d\027\ufe9d\030\ufe9d\031\ufe9d\033\ufe9d\034\ufe9d" +
    "\035\ufe9d\037\ufe9d\040\ufe9d\041\ufe9d\042\ufe9d\043\ufe9d\044" +
    "\ufe9d\045\ufe9d\046\ufe9d\047\ufe9d\050\ufe9d\051\ufe9d\052\ufe9d" +
    "\053\ufe9d\054\ufe9d\055\ufe9d\056\ufe9d\057\ufe9d\060\ufe9d\061" +
    "\ufe9d\062\ufe9d\063\ufe9d\064\ufe9d\065\ufe9d\066\ufe9d\067\ufe9d" +
    "\070\ufe9d\071\ufe9d\072\ufe9d\073\ufe9d\075\ufe9d\077\ufe9d\001" +
    "\002\000\160\004\ufe9a\005\ufe9a\006\ufe9a\007\ufe9a\010\ufe9a" +
    "\011\ufe9a\012\ufe9a\013\ufe9a\014\ufe9a\015\ufe9a\016\ufe9a\017" +
    "\ufe9a\020\ufe9a\021\ufe9a\022\ufe9a\023\ufe9a\025\ufe9a\026\ufe9a" +
    "\027\ufe9a\030\ufe9a\031\ufe9a\033\ufe9a\034\ufe9a\035\ufe9a\037" +
    "\ufe9a\040\ufe9a\041\ufe9a\042\ufe9a\043\ufe9a\044\ufe9a\045\ufe9a" +
    "\046\ufe9a\047\ufe9a\050\ufe9a\051\ufe9a\052\ufe9a\053\ufe9a\054" +
    "\ufe9a\055\ufe9a\056\ufe9a\057\ufe9a\060\ufe9a\061\ufe9a\062\ufe9a" +
    "\063\ufe9a\064\ufe9a\065\ufe9a\066\ufe9a\067\ufe9a\070\ufe9a\071" +
    "\ufe9a\072\ufe9a\073\ufe9a\075\ufe9a\077\ufe9a\001\002\000\160" +
    "\004\ufe8f\005\ufe8f\006\ufe8f\007\ufe8f\010\ufe8f\011\ufe8f\012" +
    "\ufe8f\013\ufe8f\014\ufe8f\015\ufe8f\016\ufe8f\017\ufe8f\020\ufe8f" +
    "\021\ufe8f\022\ufe8f\023\ufe8f\025\ufe8f\026\ufe8f\027\ufe8f\030" +
    "\ufe8f\031\ufe8f\033\ufe8f\034\ufe8f\035\ufe8f\037\ufe8f\040\ufe8f" +
    "\041\ufe8f\042\ufe8f\043\ufe8f\044\ufe8f\045\ufe8f\046\ufe8f\047" +
    "\ufe8f\050\ufe8f\051\ufe8f\052\ufe8f\053\ufe8f\054\ufe8f\055\ufe8f" +
    "\056\ufe8f\057\ufe8f\060\ufe8f\061\ufe8f\062\ufe8f\063\ufe8f\064" +
    "\ufe8f\065\ufe8f\066\ufe8f\067\ufe8f\070\ufe8f\071\ufe8f\072\ufe8f" +
    "\073\ufe8f\075\ufe8f\077\ufe8f\001\002\000\160\004\ufe85\005" +
    "\ufe85\006\ufe85\007\ufe85\010\ufe85\011\ufe85\012\ufe85\013\ufe85" +
    "\014\ufe85\015\ufe85\016\ufe85\017\ufe85\020\ufe85\021\ufe85\022" +
    "\ufe85\023\ufe85\025\ufe85\026\ufe85\027\ufe85\030\ufe85\031\ufe85" +
    "\033\ufe85\034\ufe85\035\ufe85\037\ufe85\040\ufe85\041\ufe85\042" +
    "\ufe85\043\ufe85\044\ufe85\045\ufe85\046\ufe85\047\ufe85\050\ufe85" +
    "\051\ufe85\052\ufe85\053\ufe85\054\ufe85\055\ufe85\056\ufe85\057" +
    "\ufe85\060\ufe85\061\ufe85\062\ufe85\063\ufe85\064\ufe85\065\ufe85" +
    "\066\ufe85\067\ufe85\070\ufe85\071\ufe85\072\ufe85\073\ufe85\075" +
    "\ufe85\077\ufe85\001\002\000\160\004\ufe83\005\ufe83\006\ufe83" +
    "\007\ufe83\010\ufe83\011\ufe83\012\ufe83\013\ufe83\014\ufe83\015" +
    "\ufe83\016\ufe83\017\ufe83\020\ufe83\021\ufe83\022\ufe83\023\ufe83" +
    "\025\ufe83\026\ufe83\027\ufe83\030\ufe83\031\ufe83\033\ufe83\034" +
    "\ufe83\035\ufe83\037\ufe83\040\ufe83\041\ufe83\042\ufe83\043\ufe83" +
    "\044\ufe83\045\ufe83\046\ufe83\047\ufe83\050\ufe83\051\ufe83\052" +
    "\ufe83\053\ufe83\054\ufe83\055\ufe83\056\ufe83\057\ufe83\060\ufe83" +
    "\061\ufe83\062\ufe83\063\ufe83\064\ufe83\065\ufe83\066\ufe83\067" +
    "\ufe83\070\ufe83\071\ufe83\072\ufe83\073\ufe83\075\ufe83\077\ufe83" +
    "\001\002\000\060\011\uff1a\016\uff1a\020\uff1a\021\uff1a\022" +
    "\uff1a\034\uff1a\035\uff1a\036\uff1a\047\uff1a\051\uff1a\052\uff1a" +
    "\053\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064" +
    "\uff1a\065\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001\002" +
    "\000\160\004\ufe9b\005\ufe9b\006\ufe9b\007\ufe9b\010\ufe9b\011" +
    "\ufe9b\012\ufe9b\013\ufe9b\014\ufe9b\015\ufe9b\016\ufe9b\017\ufe9b" +
    "\020\ufe9b\021\ufe9b\022\ufe9b\023\ufe9b\025\ufe9b\026\ufe9b\027" +
    "\ufe9b\030\ufe9b\031\ufe9b\033\ufe9b\034\ufe9b\035\ufe9b\037\ufe9b" +
    "\040\ufe9b\041\ufe9b\042\ufe9b\043\ufe9b\044\ufe9b\045\ufe9b\046" +
    "\ufe9b\047\ufe9b\050\ufe9b\051\ufe9b\052\ufe9b\053\ufe9b\054\ufe9b" +
    "\055\ufe9b\056\ufe9b\057\ufe9b\060\ufe9b\061\ufe9b\062\ufe9b\063" +
    "\ufe9b\064\ufe9b\065\ufe9b\066\ufe9b\067\ufe9b\070\ufe9b\071\ufe9b" +
    "\072\ufe9b\073\ufe9b\075\ufe9b\077\ufe9b\001\002\000\160\004" +
    "\ufe84\005\ufe84\006\ufe84\007\ufe84\010\ufe84\011\ufe84\012\ufe84" +
    "\013\ufe84\014\ufe84\015\ufe84\016\ufe84\017\ufe84\020\ufe84\021" +
    "\ufe84\022\ufe84\023\ufe84\025\ufe84\026\ufe84\027\ufe84\030\ufe84" +
    "\031\ufe84\033\ufe84\034\ufe84\035\ufe84\037\ufe84\040\ufe84\041" +
    "\ufe84\042\ufe84\043\ufe84\044\ufe84\045\ufe84\046\ufe84\047\ufe84" +
    "\050\ufe84\051\ufe84\052\ufe84\053\ufe84\054\ufe84\055\ufe84\056" +
    "\ufe84\057\ufe84\060\ufe84\061\ufe84\062\ufe84\063\ufe84\064\ufe84" +
    "\065\ufe84\066\ufe84\067\ufe84\070\ufe84\071\ufe84\072\ufe84\073" +
    "\ufe84\075\ufe84\077\ufe84\001\002\000\160\004\ufea0\005\ufea0" +
    "\006\ufea0\007\ufea0\010\ufea0\011\ufea0\012\ufea0\013\ufea0\014" +
    "\ufea0\015\ufea0\016\ufea0\017\ufea0\020\ufea0\021\ufea0\022\ufea0" +
    "\023\ufea0\025\ufea0\026\ufea0\027\ufea0\030\ufea0\031\ufea0\033" +
    "\ufea0\034\ufea0\035\ufea0\037\ufea0\040\ufea0\041\ufea0\042\ufea0" +
    "\043\ufea0\044\ufea0\045\ufea0\046\ufea0\047\ufea0\050\ufea0\051" +
    "\ufea0\052\ufea0\053\ufea0\054\ufea0\055\ufea0\056\ufea0\057\ufea0" +
    "\060\ufea0\061\ufea0\062\ufea0\063\ufea0\064\ufea0\065\ufea0\066" +
    "\ufea0\067\ufea0\070\ufea0\071\ufea0\072\ufea0\073\ufea0\075\ufea0" +
    "\077\ufea0\001\002\000\160\004\ufe94\005\ufe94\006\ufe94\007" +
    "\ufe94\010\ufe94\011\ufe94\012\ufe94\013\ufe94\014\ufe94\015\ufe94" +
    "\016\ufe94\017\ufe94\020\ufe94\021\ufe94\022\ufe94\023\ufe94\025" +
    "\ufe94\026\ufe94\027\ufe94\030\ufe94\031\ufe94\033\ufe94\034\ufe94" +
    "\035\ufe94\037\ufe94\040\ufe94\041\ufe94\042\ufe94\043\ufe94\044" +
    "\ufe94\045\ufe94\046\ufe94\047\ufe94\050\ufe94\051\ufe94\052\ufe94" +
    "\053\ufe94\054\ufe94\055\ufe94\056\ufe94\057\ufe94\060\ufe94\061" +
    "\ufe94\062\ufe94\063\ufe94\064\ufe94\065\ufe94\066\ufe94\067\ufe94" +
    "\070\ufe94\071\ufe94\072\ufe94\073\ufe94\075\ufe94\077\ufe94\001" +
    "\002\000\160\004\ufea1\005\ufea1\006\ufea1\007\ufea1\010\ufea1" +
    "\011\ufea1\012\ufea1\013\ufea1\014\ufea1\015\ufea1\016\ufea1\017" +
    "\ufea1\020\ufea1\021\ufea1\022\ufea1\023\ufea1\025\ufea1\026\ufea1" +
    "\027\ufea1\030\ufea1\031\ufea1\033\ufea1\034\ufea1\035\ufea1\037" +
    "\ufea1\040\ufea1\041\ufea1\042\ufea1\043\ufea1\044\ufea1\045\ufea1" +
    "\046\ufea1\047\ufea1\050\ufea1\051\ufea1\052\ufea1\053\ufea1\054" +
    "\ufea1\055\ufea1\056\ufea1\057\ufea1\060\ufea1\061\ufea1\062\ufea1" +
    "\063\ufea1\064\ufea1\065\ufea1\066\ufea1\067\ufea1\070\ufea1\071" +
    "\ufea1\072\ufea1\073\ufea1\075\ufea1\077\ufea1\001\002\000\160" +
    "\004\ufe98\005\ufe98\006\ufe98\007\ufe98\010\ufe98\011\ufe98\012" +
    "\ufe98\013\ufe98\014\ufe98\015\ufe98\016\ufe98\017\ufe98\020\ufe98" +
    "\021\ufe98\022\ufe98\023\ufe98\025\ufe98\026\ufe98\027\ufe98\030" +
    "\ufe98\031\ufe98\033\ufe98\034\ufe98\035\ufe98\037\ufe98\040\ufe98" +
    "\041\ufe98\042\ufe98\043\ufe98\044\ufe98\045\ufe98\046\ufe98\047" +
    "\ufe98\050\ufe98\051\ufe98\052\ufe98\053\ufe98\054\ufe98\055\ufe98" +
    "\056\ufe98\057\ufe98\060\ufe98\061\ufe98\062\ufe98\063\ufe98\064" +
    "\ufe98\065\ufe98\066\ufe98\067\ufe98\070\ufe98\071\ufe98\072\ufe98" +
    "\073\ufe98\075\ufe98\077\ufe98\001\002\000\160\004\ufe95\005" +
    "\ufe95\006\ufe95\007\ufe95\010\ufe95\011\ufe95\012\ufe95\013\ufe95" +
    "\014\ufe95\015\ufe95\016\ufe95\017\ufe95\020\ufe95\021\ufe95\022" +
    "\ufe95\023\ufe95\025\ufe95\026\ufe95\027\ufe95\030\ufe95\031\ufe95" +
    "\033\ufe95\034\ufe95\035\ufe95\037\ufe95\040\ufe95\041\ufe95\042" +
    "\ufe95\043\ufe95\044\ufe95\045\ufe95\046\ufe95\047\ufe95\050\ufe95" +
    "\051\ufe95\052\ufe95\053\ufe95\054\ufe95\055\ufe95\056\ufe95\057" +
    "\ufe95\060\ufe95\061\ufe95\062\ufe95\063\ufe95\064\ufe95\065\ufe95" +
    "\066\ufe95\067\ufe95\070\ufe95\071\ufe95\072\ufe95\073\ufe95\075" +
    "\ufe95\077\ufe95\001\002\000\160\004\ufe8b\005\ufe8b\006\ufe8b" +
    "\007\ufe8b\010\ufe8b\011\ufe8b\012\ufe8b\013\ufe8b\014\ufe8b\015" +
    "\ufe8b\016\ufe8b\017\ufe8b\020\ufe8b\021\ufe8b\022\ufe8b\023\ufe8b" +
    "\025\ufe8b\026\ufe8b\027\ufe8b\030\ufe8b\031\ufe8b\033\ufe8b\034" +
    "\ufe8b\035\ufe8b\037\ufe8b\040\ufe8b\041\ufe8b\042\ufe8b\043\ufe8b" +
    "\044\ufe8b\045\ufe8b\046\ufe8b\047\ufe8b\050\ufe8b\051\ufe8b\052" +
    "\ufe8b\053\ufe8b\054\ufe8b\055\ufe8b\056\ufe8b\057\ufe8b\060\ufe8b" +
    "\061\ufe8b\062\ufe8b\063\ufe8b\064\ufe8b\065\ufe8b\066\ufe8b\067" +
    "\ufe8b\070\ufe8b\071\ufe8b\072\ufe8b\073\ufe8b\075\ufe8b\077\ufe8b" +
    "\001\002\000\160\004\ufe9f\005\ufe9f\006\ufe9f\007\ufe9f\010" +
    "\ufe9f\011\ufe9f\012\ufe9f\013\ufe9f\014\ufe9f\015\ufe9f\016\ufe9f" +
    "\017\ufe9f\020\ufe9f\021\ufe9f\022\ufe9f\023\ufe9f\025\ufe9f\026" +
    "\ufe9f\027\ufe9f\030\ufe9f\031\ufe9f\033\ufe9f\034\ufe9f\035\ufe9f" +
    "\037\ufe9f\040\ufe9f\041\ufe9f\042\ufe9f\043\ufe9f\044\ufe9f\045" +
    "\ufe9f\046\ufe9f\047\ufe9f\050\ufe9f\051\ufe9f\052\ufe9f\053\ufe9f" +
    "\054\ufe9f\055\ufe9f\056\ufe9f\057\ufe9f\060\ufe9f\061\ufe9f\062" +
    "\ufe9f\063\ufe9f\064\ufe9f\065\ufe9f\066\ufe9f\067\ufe9f\070\ufe9f" +
    "\071\ufe9f\072\ufe9f\073\ufe9f\075\ufe9f\077\ufe9f\001\002\000" +
    "\160\004\ufeb1\005\ufeb1\006\ufeb1\007\ufeb1\010\ufeb1\011\ufeb1" +
    "\012\ufeb1\013\ufeb1\014\ufeb1\015\ufeb1\016\ufeb1\017\ufeb1\020" +
    "\ufeb1\021\ufeb1\022\ufeb1\023\ufeb1\025\ufeb1\026\ufeb1\027\ufeb1" +
    "\030\ufeb1\031\ufeb1\033\ufeb1\034\ufeb1\035\ufeb1\037\ufeb1\040" +
    "\ufeb1\041\ufeb1\042\ufeb1\043\ufeb1\044\ufeb1\045\ufeb1\046\ufeb1" +
    "\047\ufeb1\050\ufeb1\051\ufeb1\052\ufeb1\053\ufeb1\054\ufeb1\055" +
    "\ufeb1\056\ufeb1\057\ufeb1\060\ufeb1\061\ufeb1\062\ufeb1\063\ufeb1" +
    "\064\ufeb1\065\ufeb1\066\ufeb1\067\ufeb1\070\ufeb1\071\ufeb1\072" +
    "\ufeb1\073\ufeb1\075\ufeb1\077\ufeb1\001\002\000\160\004\ufe8e" +
    "\005\ufe8e\006\ufe8e\007\ufe8e\010\ufe8e\011\ufe8e\012\ufe8e\013" +
    "\ufe8e\014\ufe8e\015\ufe8e\016\ufe8e\017\ufe8e\020\ufe8e\021\ufe8e" +
    "\022\ufe8e\023\ufe8e\025\ufe8e\026\ufe8e\027\ufe8e\030\ufe8e\031" +
    "\ufe8e\033\ufe8e\034\ufe8e\035\ufe8e\037\ufe8e\040\ufe8e\041\ufe8e" +
    "\042\ufe8e\043\ufe8e\044\ufe8e\045\ufe8e\046\ufe8e\047\ufe8e\050" +
    "\ufe8e\051\ufe8e\052\ufe8e\053\ufe8e\054\ufe8e\055\ufe8e\056\ufe8e" +
    "\057\ufe8e\060\ufe8e\061\ufe8e\062\ufe8e\063\ufe8e\064\ufe8e\065" +
    "\ufe8e\066\ufe8e\067\ufe8e\070\ufe8e\071\ufe8e\072\ufe8e\073\ufe8e" +
    "\075\ufe8e\077\ufe8e\001\002\000\160\004\ufe90\005\ufe90\006" +
    "\ufe90\007\ufe90\010\ufe90\011\ufe90\012\ufe90\013\ufe90\014\ufe90" +
    "\015\ufe90\016\ufe90\017\ufe90\020\ufe90\021\ufe90\022\ufe90\023" +
    "\ufe90\025\ufe90\026\ufe90\027\ufe90\030\ufe90\031\ufe90\033\ufe90" +
    "\034\ufe90\035\ufe90\037\ufe90\040\ufe90\041\ufe90\042\ufe90\043" +
    "\ufe90\044\ufe90\045\ufe90\046\ufe90\047\ufe90\050\ufe90\051\ufe90" +
    "\052\ufe90\053\ufe90\054\ufe90\055\ufe90\056\ufe90\057\ufe90\060" +
    "\ufe90\061\ufe90\062\ufe90\063\ufe90\064\ufe90\065\ufe90\066\ufe90" +
    "\067\ufe90\070\ufe90\071\ufe90\072\ufe90\073\ufe90\075\ufe90\077" +
    "\ufe90\001\002\000\160\004\ufe82\005\ufe82\006\ufe82\007\ufe82" +
    "\010\ufe82\011\ufe82\012\ufe82\013\ufe82\014\ufe82\015\ufe82\016" +
    "\ufe82\017\ufe82\020\ufe82\021\ufe82\022\ufe82\023\ufe82\025\ufe82" +
    "\026\ufe82\027\ufe82\030\ufe82\031\ufe82\033\ufe82\034\ufe82\035" +
    "\ufe82\037\ufe82\040\ufe82\041\ufe82\042\ufe82\043\ufe82\044\ufe82" +
    "\045\ufe82\046\ufe82\047\ufe82\050\ufe82\051\ufe82\052\ufe82\053" +
    "\ufe82\054\ufe82\055\ufe82\056\ufe82\057\ufe82\060\ufe82\061\ufe82" +
    "\062\ufe82\063\ufe82\064\ufe82\065\ufe82\066\ufe82\067\ufe82\070" +
    "\ufe82\071\ufe82\072\ufe82\073\ufe82\075\ufe82\077\ufe82\001\002" +
    "\000\160\004\ufeb0\005\ufeb0\006\ufeb0\007\ufeb0\010\ufeb0\011" +
    "\ufeb0\012\ufeb0\013\ufeb0\014\ufeb0\015\ufeb0\016\ufeb0\017\ufeb0" +
    "\020\ufeb0\021\ufeb0\022\ufeb0\023\ufeb0\025\ufeb0\026\ufeb0\027" +
    "\ufeb0\030\ufeb0\031\ufeb0\033\ufeb0\034\ufeb0\035\ufeb0\037\ufeb0" +
    "\040\ufeb0\041\ufeb0\042\ufeb0\043\ufeb0\044\ufeb0\045\ufeb0\046" +
    "\ufeb0\047\ufeb0\050\ufeb0\051\ufeb0\052\ufeb0\053\ufeb0\054\ufeb0" +
    "\055\ufeb0\056\ufeb0\057\ufeb0\060\ufeb0\061\ufeb0\062\ufeb0\063" +
    "\ufeb0\064\ufeb0\065\ufeb0\066\ufeb0\067\ufeb0\070\ufeb0\071\ufeb0" +
    "\072\ufeb0\073\ufeb0\075\ufeb0\077\ufeb0\001\002\000\160\004" +
    "\ufe97\005\ufe97\006\ufe97\007\ufe97\010\ufe97\011\ufe97\012\ufe97" +
    "\013\ufe97\014\ufe97\015\ufe97\016\ufe97\017\ufe97\020\ufe97\021" +
    "\ufe97\022\ufe97\023\ufe97\025\ufe97\026\ufe97\027\ufe97\030\ufe97" +
    "\031\ufe97\033\ufe97\034\ufe97\035\ufe97\037\ufe97\040\ufe97\041" +
    "\ufe97\042\ufe97\043\ufe97\044\ufe97\045\ufe97\046\ufe97\047\ufe97" +
    "\050\ufe97\051\ufe97\052\ufe97\053\ufe97\054\ufe97\055\ufe97\056" +
    "\ufe97\057\ufe97\060\ufe97\061\ufe97\062\ufe97\063\ufe97\064\ufe97" +
    "\065\ufe97\066\ufe97\067\ufe97\070\ufe97\071\ufe97\072\ufe97\073" +
    "\ufe97\075\ufe97\077\ufe97\001\002\000\160\004\ufeab\005\ufeab" +
    "\006\ufeab\007\ufeab\010\ufeab\011\ufeab\012\ufeab\013\ufeab\014" +
    "\ufeab\015\ufeab\016\ufeab\017\ufeab\020\ufeab\021\ufeab\022\ufeab" +
    "\023\ufeab\025\ufeab\026\ufeab\027\ufeab\030\ufeab\031\ufeab\033" +
    "\ufeab\034\ufeab\035\ufeab\037\ufeab\040\ufeab\041\ufeab\042\ufeab" +
    "\043\ufeab\044\ufeab\045\ufeab\046\ufeab\047\ufeab\050\ufeab\051" +
    "\ufeab\052\ufeab\053\ufeab\054\ufeab\055\ufeab\056\ufeab\057\ufeab" +
    "\060\ufeab\061\ufeab\062\ufeab\063\ufeab\064\ufeab\065\ufeab\066" +
    "\ufeab\067\ufeab\070\ufeab\071\ufeab\072\ufeab\073\ufeab\075\ufeab" +
    "\077\ufeab\001\002\000\160\004\ufeac\005\ufeac\006\ufeac\007" +
    "\ufeac\010\ufeac\011\ufeac\012\ufeac\013\ufeac\014\ufeac\015\ufeac" +
    "\016\ufeac\017\ufeac\020\ufeac\021\ufeac\022\ufeac\023\ufeac\025" +
    "\ufeac\026\ufeac\027\ufeac\030\ufeac\031\ufeac\033\ufeac\034\ufeac" +
    "\035\ufeac\037\ufeac\040\ufeac\041\ufeac\042\ufeac\043\ufeac\044" +
    "\ufeac\045\ufeac\046\ufeac\047\ufeac\050\ufeac\051\ufeac\052\ufeac" +
    "\053\ufeac\054\ufeac\055\ufeac\056\ufeac\057\ufeac\060\ufeac\061" +
    "\ufeac\062\ufeac\063\ufeac\064\ufeac\065\ufeac\066\ufeac\067\ufeac" +
    "\070\ufeac\071\ufeac\072\ufeac\073\ufeac\075\ufeac\077\ufeac\001" +
    "\002\000\160\004\ufea3\005\ufea3\006\ufea3\007\ufea3\010\ufea3" +
    "\011\ufea3\012\ufea3\013\ufea3\014\ufea3\015\ufea3\016\ufea3\017" +
    "\ufea3\020\ufea3\021\ufea3\022\ufea3\023\ufea3\025\ufea3\026\ufea3" +
    "\027\ufea3\030\ufea3\031\ufea3\033\ufea3\034\ufea3\035\ufea3\037" +
    "\ufea3\040\ufea3\041\ufea3\042\ufea3\043\ufea3\044\ufea3\045\ufea3" +
    "\046\ufea3\047\ufea3\050\ufea3\051\ufea3\052\ufea3\053\ufea3\054" +
    "\ufea3\055\ufea3\056\ufea3\057\ufea3\060\ufea3\061\ufea3\062\ufea3" +
    "\063\ufea3\064\ufea3\065\ufea3\066\ufea3\067\ufea3\070\ufea3\071" +
    "\ufea3\072\ufea3\073\ufea3\075\ufea3\077\ufea3\001\002\000\160" +
    "\004\ufe81\005\ufe81\006\ufe81\007\ufe81\010\ufe81\011\ufe81\012" +
    "\ufe81\013\ufe81\014\ufe81\015\ufe81\016\ufe81\017\ufe81\020\ufe81" +
    "\021\ufe81\022\ufe81\023\ufe81\025\ufe81\026\ufe81\027\ufe81\030" +
    "\ufe81\031\ufe81\033\ufe81\034\ufe81\035\ufe81\037\ufe81\040\ufe81" +
    "\041\ufe81\042\ufe81\043\ufe81\044\ufe81\045\ufe81\046\ufe81\047" +
    "\ufe81\050\ufe81\051\ufe81\052\ufe81\053\ufe81\054\ufe81\055\ufe81" +
    "\056\ufe81\057\ufe81\060\ufe81\061\ufe81\062\ufe81\063\ufe81\064" +
    "\ufe81\065\ufe81\066\ufe81\067\ufe81\070\ufe81\071\ufe81\072\ufe81" +
    "\073\ufe81\075\ufe81\077\ufe81\001\002\000\160\004\ufea4\005" +
    "\ufea4\006\ufea4\007\ufea4\010\ufea4\011\ufea4\012\ufea4\013\ufea4" +
    "\014\ufea4\015\ufea4\016\ufea4\017\ufea4\020\ufea4\021\ufea4\022" +
    "\ufea4\023\ufea4\025\ufea4\026\ufea4\027\ufea4\030\ufea4\031\ufea4" +
    "\033\ufea4\034\ufea4\035\ufea4\037\ufea4\040\ufea4\041\ufea4\042" +
    "\ufea4\043\ufea4\044\ufea4\045\ufea4\046\ufea4\047\ufea4\050\ufea4" +
    "\051\ufea4\052\ufea4\053\ufea4\054\ufea4\055\ufea4\056\ufea4\057" +
    "\ufea4\060\ufea4\061\ufea4\062\ufea4\063\ufea4\064\ufea4\065\ufea4" +
    "\066\ufea4\067\ufea4\070\ufea4\071\ufea4\072\ufea4\073\ufea4\075" +
    "\ufea4\077\ufea4\001\002\000\160\004\ufea8\005\ufea8\006\ufea8" +
    "\007\ufea8\010\ufea8\011\ufea8\012\ufea8\013\ufea8\014\ufea8\015" +
    "\ufea8\016\ufea8\017\ufea8\020\ufea8\021\ufea8\022\ufea8\023\ufea8" +
    "\025\ufea8\026\ufea8\027\ufea8\030\ufea8\031\ufea8\033\ufea8\034" +
    "\ufea8\035\ufea8\037\ufea8\040\ufea8\041\ufea8\042\ufea8\043\ufea8" +
    "\044\ufea8\045\ufea8\046\ufea8\047\ufea8\050\ufea8\051\ufea8\052" +
    "\ufea8\053\ufea8\054\ufea8\055\ufea8\056\ufea8\057\ufea8\060\ufea8" +
    "\061\ufea8\062\ufea8\063\ufea8\064\ufea8\065\ufea8\066\ufea8\067" +
    "\ufea8\070\ufea8\071\ufea8\072\ufea8\073\ufea8\075\ufea8\077\ufea8" +
    "\001\002\000\160\004\ufe9c\005\ufe9c\006\ufe9c\007\ufe9c\010" +
    "\ufe9c\011\ufe9c\012\ufe9c\013\ufe9c\014\ufe9c\015\ufe9c\016\ufe9c" +
    "\017\ufe9c\020\ufe9c\021\ufe9c\022\ufe9c\023\ufe9c\025\ufe9c\026" +
    "\ufe9c\027\ufe9c\030\ufe9c\031\ufe9c\033\ufe9c\034\ufe9c\035\ufe9c" +
    "\037\ufe9c\040\ufe9c\041\ufe9c\042\ufe9c\043\ufe9c\044\ufe9c\045" +
    "\ufe9c\046\ufe9c\047\ufe9c\050\ufe9c\051\ufe9c\052\ufe9c\053\ufe9c" +
    "\054\ufe9c\055\ufe9c\056\ufe9c\057\ufe9c\060\ufe9c\061\ufe9c\062" +
    "\ufe9c\063\ufe9c\064\ufe9c\065\ufe9c\066\ufe9c\067\ufe9c\070\ufe9c" +
    "\071\ufe9c\072\ufe9c\073\ufe9c\075\ufe9c\077\ufe9c\001\002\000" +
    "\160\004\ufe9e\005\ufe9e\006\ufe9e\007\ufe9e\010\ufe9e\011\ufe9e" +
    "\012\ufe9e\013\ufe9e\014\ufe9e\015\ufe9e\016\ufe9e\017\ufe9e\020" +
    "\ufe9e\021\ufe9e\022\ufe9e\023\ufe9e\025\ufe9e\026\ufe9e\027\ufe9e" +
    "\030\ufe9e\031\ufe9e\033\ufe9e\034\ufe9e\035\ufe9e\037\ufe9e\040" +
    "\ufe9e\041\ufe9e\042\ufe9e\043\ufe9e\044\ufe9e\045\ufe9e\046\ufe9e" +
    "\047\ufe9e\050\ufe9e\051\ufe9e\052\ufe9e\053\ufe9e\054\ufe9e\055" +
    "\ufe9e\056\ufe9e\057\ufe9e\060\ufe9e\061\ufe9e\062\ufe9e\063\ufe9e" +
    "\064\ufe9e\065\ufe9e\066\ufe9e\067\ufe9e\070\ufe9e\071\ufe9e\072" +
    "\ufe9e\073\ufe9e\075\ufe9e\077\ufe9e\001\002\000\160\004\ufe80" +
    "\005\ufe80\006\ufe80\007\ufe80\010\ufe80\011\ufe80\012\ufe80\013" +
    "\ufe80\014\ufe80\015\ufe80\016\ufe80\017\ufe80\020\ufe80\021\ufe80" +
    "\022\ufe80\023\ufe80\025\ufe80\026\ufe80\027\ufe80\030\ufe80\031" +
    "\ufe80\033\ufe80\034\ufe80\035\ufe80\037\ufe80\040\ufe80\041\ufe80" +
    "\042\ufe80\043\ufe80\044\ufe80\045\ufe80\046\ufe80\047\ufe80\050" +
    "\ufe80\051\ufe80\052\ufe80\053\ufe80\054\ufe80\055\ufe80\056\ufe80" +
    "\057\ufe80\060\ufe80\061\ufe80\062\ufe80\063\ufe80\064\ufe80\065" +
    "\ufe80\066\ufe80\067\ufe80\070\ufe80\071\ufe80\072\ufe80\073\ufe80" +
    "\075\ufe80\077\ufe80\001\002\000\160\004\ufe7f\005\ufe7f\006" +
    "\ufe7f\007\ufe7f\010\ufe7f\011\ufe7f\012\ufe7f\013\ufe7f\014\ufe7f" +
    "\015\ufe7f\016\ufe7f\017\ufe7f\020\ufe7f\021\ufe7f\022\ufe7f\023" +
    "\ufe7f\025\ufe7f\026\ufe7f\027\ufe7f\030\ufe7f\031\ufe7f\033\ufe7f" +
    "\034\ufe7f\035\ufe7f\037\ufe7f\040\ufe7f\041\ufe7f\042\ufe7f\043" +
    "\ufe7f\044\ufe7f\045\ufe7f\046\ufe7f\047\ufe7f\050\ufe7f\051\ufe7f" +
    "\052\ufe7f\053\ufe7f\054\ufe7f\055\ufe7f\056\ufe7f\057\ufe7f\060" +
    "\ufe7f\061\ufe7f\062\ufe7f\063\ufe7f\064\ufe7f\065\ufe7f\066\ufe7f" +
    "\067\ufe7f\070\ufe7f\071\ufe7f\072\ufe7f\073\ufe7f\075\ufe7f\077" +
    "\ufe7f\001\002\000\160\004\ufea6\005\ufea6\006\ufea6\007\ufea6" +
    "\010\ufea6\011\ufea6\012\ufea6\013\ufea6\014\ufea6\015\ufea6\016" +
    "\ufea6\017\ufea6\020\ufea6\021\ufea6\022\ufea6\023\ufea6\025\ufea6" +
    "\026\ufea6\027\ufea6\030\ufea6\031\ufea6\033\ufea6\034\ufea6\035" +
    "\ufea6\037\ufea6\040\ufea6\041\ufea6\042\ufea6\043\ufea6\044\ufea6" +
    "\045\ufea6\046\ufea6\047\ufea6\050\ufea6\051\ufea6\052\ufea6\053" +
    "\ufea6\054\ufea6\055\ufea6\056\ufea6\057\ufea6\060\ufea6\061\ufea6" +
    "\062\ufea6\063\ufea6\064\ufea6\065\ufea6\066\ufea6\067\ufea6\070" +
    "\ufea6\071\ufea6\072\ufea6\073\ufea6\075\ufea6\077\ufea6\001\002" +
    "\000\160\004\ufea2\005\ufea2\006\ufea2\007\ufea2\010\ufea2\011" +
    "\ufea2\012\ufea2\013\ufea2\014\ufea2\015\ufea2\016\ufea2\017\ufea2" +
    "\020\ufea2\021\ufea2\022\ufea2\023\ufea2\025\ufea2\026\ufea2\027" +
    "\ufea2\030\ufea2\031\ufea2\033\ufea2\034\ufea2\035\ufea2\037\ufea2" +
    "\040\ufea2\041\ufea2\042\ufea2\043\ufea2\044\ufea2\045\ufea2\046" +
    "\ufea2\047\ufea2\050\ufea2\051\ufea2\052\ufea2\053\ufea2\054\ufea2" +
    "\055\ufea2\056\ufea2\057\ufea2\060\ufea2\061\ufea2\062\ufea2\063" +
    "\ufea2\064\ufea2\065\ufea2\066\ufea2\067\ufea2\070\ufea2\071\ufea2" +
    "\072\ufea2\073\ufea2\075\ufea2\077\ufea2\001\002\000\160\004" +
    "\ufe92\005\ufe92\006\ufe92\007\ufe92\010\ufe92\011\ufe92\012\ufe92" +
    "\013\ufe92\014\ufe92\015\ufe92\016\ufe92\017\ufe92\020\ufe92\021" +
    "\ufe92\022\ufe92\023\ufe92\025\ufe92\026\ufe92\027\ufe92\030\ufe92" +
    "\031\ufe92\033\ufe92\034\ufe92\035\ufe92\037\ufe92\040\ufe92\041" +
    "\ufe92\042\ufe92\043\ufe92\044\ufe92\045\ufe92\046\ufe92\047\ufe92" +
    "\050\ufe92\051\ufe92\052\ufe92\053\ufe92\054\ufe92\055\ufe92\056" +
    "\ufe92\057\ufe92\060\ufe92\061\ufe92\062\ufe92\063\ufe92\064\ufe92" +
    "\065\ufe92\066\ufe92\067\ufe92\070\ufe92\071\ufe92\072\ufe92\073" +
    "\ufe92\075\ufe92\077\ufe92\001\002\000\160\004\ufea9\005\ufea9" +
    "\006\ufea9\007\ufea9\010\ufea9\011\ufea9\012\ufea9\013\ufea9\014" +
    "\ufea9\015\ufea9\016\ufea9\017\ufea9\020\ufea9\021\ufea9\022\ufea9" +
    "\023\ufea9\025\ufea9\026\ufea9\027\ufea9\030\ufea9\031\ufea9\033" +
    "\ufea9\034\ufea9\035\ufea9\037\ufea9\040\ufea9\041\ufea9\042\ufea9" +
    "\043\ufea9\044\ufea9\045\ufea9\046\ufea9\047\ufea9\050\ufea9\051" +
    "\ufea9\052\ufea9\053\ufea9\054\ufea9\055\ufea9\056\ufea9\057\ufea9" +
    "\060\ufea9\061\ufea9\062\ufea9\063\ufea9\064\ufea9\065\ufea9\066" +
    "\ufea9\067\ufea9\070\ufea9\071\ufea9\072\ufea9\073\ufea9\075\ufea9" +
    "\077\ufea9\001\002\000\160\004\ufe88\005\ufe88\006\ufe88\007" +
    "\ufe88\010\ufe88\011\ufe88\012\ufe88\013\ufe88\014\ufe88\015\ufe88" +
    "\016\ufe88\017\ufe88\020\ufe88\021\ufe88\022\ufe88\023\ufe88\025" +
    "\ufe88\026\ufe88\027\ufe88\030\ufe88\031\ufe88\033\ufe88\034\ufe88" +
    "\035\ufe88\037\ufe88\040\ufe88\041\ufe88\042\ufe88\043\ufe88\044" +
    "\ufe88\045\ufe88\046\ufe88\047\ufe88\050\ufe88\051\ufe88\052\ufe88" +
    "\053\ufe88\054\ufe88\055\ufe88\056\ufe88\057\ufe88\060\ufe88\061" +
    "\ufe88\062\ufe88\063\ufe88\064\ufe88\065\ufe88\066\ufe88\067\ufe88" +
    "\070\ufe88\071\ufe88\072\ufe88\073\ufe88\075\ufe88\077\ufe88\001" +
    "\002\000\160\004\ufeaa\005\ufeaa\006\ufeaa\007\ufeaa\010\ufeaa" +
    "\011\ufeaa\012\ufeaa\013\ufeaa\014\ufeaa\015\ufeaa\016\ufeaa\017" +
    "\ufeaa\020\ufeaa\021\ufeaa\022\ufeaa\023\ufeaa\025\ufeaa\026\ufeaa" +
    "\027\ufeaa\030\ufeaa\031\ufeaa\033\ufeaa\034\ufeaa\035\ufeaa\037" +
    "\ufeaa\040\ufeaa\041\ufeaa\042\ufeaa\043\ufeaa\044\ufeaa\045\ufeaa" +
    "\046\ufeaa\047\ufeaa\050\ufeaa\051\ufeaa\052\ufeaa\053\ufeaa\054" +
    "\ufeaa\055\ufeaa\056\ufeaa\057\ufeaa\060\ufeaa\061\ufeaa\062\ufeaa" +
    "\063\ufeaa\064\ufeaa\065\ufeaa\066\ufeaa\067\ufeaa\070\ufeaa\071" +
    "\ufeaa\072\ufeaa\073\ufeaa\075\ufeaa\077\ufeaa\001\002\000\160" +
    "\004\ufe8a\005\ufe8a\006\ufe8a\007\ufe8a\010\ufe8a\011\ufe8a\012" +
    "\ufe8a\013\ufe8a\014\ufe8a\015\ufe8a\016\ufe8a\017\ufe8a\020\ufe8a" +
    "\021\ufe8a\022\ufe8a\023\ufe8a\025\ufe8a\026\ufe8a\027\ufe8a\030" +
    "\ufe8a\031\ufe8a\033\ufe8a\034\ufe8a\035\ufe8a\037\ufe8a\040\ufe8a" +
    "\041\ufe8a\042\ufe8a\043\ufe8a\044\ufe8a\045\ufe8a\046\ufe8a\047" +
    "\ufe8a\050\ufe8a\051\ufe8a\052\ufe8a\053\ufe8a\054\ufe8a\055\ufe8a" +
    "\056\ufe8a\057\ufe8a\060\ufe8a\061\ufe8a\062\ufe8a\063\ufe8a\064" +
    "\ufe8a\065\ufe8a\066\ufe8a\067\ufe8a\070\ufe8a\071\ufe8a\072\ufe8a" +
    "\073\ufe8a\075\ufe8a\077\ufe8a\001\002\000\160\004\ufe99\005" +
    "\ufe99\006\ufe99\007\ufe99\010\ufe99\011\ufe99\012\ufe99\013\ufe99" +
    "\014\ufe99\015\ufe99\016\ufe99\017\ufe99\020\ufe99\021\ufe99\022" +
    "\ufe99\023\ufe99\025\ufe99\026\ufe99\027\ufe99\030\ufe99\031\ufe99" +
    "\033\ufe99\034\ufe99\035\ufe99\037\ufe99\040\ufe99\041\ufe99\042" +
    "\ufe99\043\ufe99\044\ufe99\045\ufe99\046\ufe99\047\ufe99\050\ufe99" +
    "\051\ufe99\052\ufe99\053\ufe99\054\ufe99\055\ufe99\056\ufe99\057" +
    "\ufe99\060\ufe99\061\ufe99\062\ufe99\063\ufe99\064\ufe99\065\ufe99" +
    "\066\ufe99\067\ufe99\070\ufe99\071\ufe99\072\ufe99\073\ufe99\075" +
    "\ufe99\077\ufe99\001\002\000\160\004\ufe86\005\ufe86\006\ufe86" +
    "\007\ufe86\010\ufe86\011\ufe86\012\ufe86\013\ufe86\014\ufe86\015" +
    "\ufe86\016\ufe86\017\ufe86\020\ufe86\021\ufe86\022\ufe86\023\ufe86" +
    "\025\ufe86\026\ufe86\027\ufe86\030\ufe86\031\ufe86\033\ufe86\034" +
    "\ufe86\035\ufe86\037\ufe86\040\ufe86\041\ufe86\042\ufe86\043\ufe86" +
    "\044\ufe86\045\ufe86\046\ufe86\047\ufe86\050\ufe86\051\ufe86\052" +
    "\ufe86\053\ufe86\054\ufe86\055\ufe86\056\ufe86\057\ufe86\060\ufe86" +
    "\061\ufe86\062\ufe86\063\ufe86\064\ufe86\065\ufe86\066\ufe86\067" +
    "\ufe86\070\ufe86\071\ufe86\072\ufe86\073\ufe86\075\ufe86\077\ufe86" +
    "\001\002\000\056\011\uff1f\016\uff1f\020\uff1f\021\uff1f\022" +
    "\uff1f\034\uff1f\035\uff1f\036\uff1f\047\uff1f\051\uff1f\052\uff1f" +
    "\053\uff1f\054\uff1f\055\uff1f\056\uff1f\057\uff1f\060\uff1f\064" +
    "\uff1f\065\uff1f\067\uff1f\074\uff1f\076\uff1f\001\002\000\004" +
    "\013\u01d5\001\002\000\004\006\u01d6\001\002\000\060\011" +
    "\uff1a\016\uff1a\020\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a" +
    "\036\uff1a\047\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055" +
    "\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a" +
    "\074\uff1a\075\142\076\uff1a\001\002\000\056\011\uff28\016" +
    "\uff28\020\uff28\021\uff28\022\uff28\034\uff28\035\uff28\036\uff28" +
    "\047\uff28\051\uff28\052\uff28\053\uff28\054\uff28\055\uff28\056" +
    "\uff28\057\uff28\060\uff28\064\uff28\065\uff28\067\uff28\074\uff28" +
    "\076\uff28\001\002\000\004\013\u01d9\001\002\000\004\006" +
    "\u01da\001\002\000\060\011\uff1a\016\uff1a\020\uff1a\021\uff1a" +
    "\022\uff1a\034\uff1a\035\uff1a\036\uff1a\047\uff1a\051\uff1a\052" +
    "\uff1a\053\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a" +
    "\064\uff1a\065\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001" +
    "\002\000\056\011\uff2d\016\uff2d\020\uff2d\021\uff2d\022\uff2d" +
    "\034\uff2d\035\uff2d\036\uff2d\047\uff2d\051\uff2d\052\uff2d\053" +
    "\uff2d\054\uff2d\055\uff2d\056\uff2d\057\uff2d\060\uff2d\064\uff2d" +
    "\065\uff2d\067\uff2d\074\uff2d\076\uff2d\001\002\000\030\012" +
    "\365\020\351\021\366\022\354\025\367\027\360\044\u0146" +
    "\066\362\067\353\072\361\073\357\001\002\000\010\013" +
    "\u01de\100\u0149\101\u014a\001\002\000\006\010\uff1a\075\142" +
    "\001\002\000\004\010\uff8b\001\002\000\004\010\u01e1\001" +
    "\002\000\052\011\uff1a\020\uff1a\021\uff1a\022\uff1a\034\uff1a" +
    "\035\uff1a\036\uff1a\047\uff1a\051\uff1a\054\uff1a\055\uff1a\056" +
    "\uff1a\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074\uff1a" +
    "\075\142\076\uff1a\001\002\000\050\011\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\034\uffb1\035\uffb1\036\uffb1\047\uffb1\051\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\064\uffb1\065" +
    "\uffb1\067\uffb1\074\uffb1\076\uffb1\001\002\000\050\011\u01e4" +
    "\020\170\021\225\022\223\034\021\035\022\036\017\047" +
    "\202\051\177\054\227\055\174\056\226\057\171\060\230" +
    "\064\203\065\204\067\222\074\210\076\207\001\002\000" +
    "\062\011\uff8a\016\uff8a\020\uff8a\021\uff8a\022\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053" +
    "\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\064\uff8a" +
    "\065\uff8a\067\uff8a\074\uff8a\075\uff8a\076\uff8a\001\002\000" +
    "\062\011\uff1a\016\uff1a\020\uff1a\021\uff1a\022\uff1a\034\uff1a" +
    "\035\uff1a\036\uff1a\047\uff1a\050\uff1a\051\uff1a\052\uff1a\053" +
    "\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a" +
    "\065\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001\002\000" +
    "\060\011\uff5b\016\uff5b\020\uff5b\021\uff5b\022\uff5b\034\uff5b" +
    "\035\uff5b\036\uff5b\047\uff5b\050\u01e8\051\uff5b\052\uff5b\053" +
    "\uff5b\054\uff5b\055\uff5b\056\uff5b\057\uff5b\060\uff5b\064\uff5b" +
    "\065\uff5b\067\uff5b\074\uff5b\076\uff5b\001\002\000\056\011" +
    "\uff89\016\uff89\020\uff89\021\uff89\022\uff89\034\uff89\035\uff89" +
    "\036\uff89\047\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055" +
    "\uff89\056\uff89\057\uff89\060\uff89\064\uff89\065\uff89\067\uff89" +
    "\074\uff89\076\uff89\001\002\000\010\010\uff1a\047\u01e9\075" +
    "\142\001\002\000\004\012\u01f2\001\002\000\004\010\uff5e" +
    "\001\002\000\004\010\u01ec\001\002\000\052\011\uff1a\020" +
    "\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a\036\uff1a\047\uff1a" +
    "\051\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064" +
    "\uff1a\065\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001\002" +
    "\000\050\011\uffb1\020\uffb1\021\uffb1\022\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\047\uffb1\051\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\064\uffb1\065\uffb1\067\uffb1\074\uffb1\076" +
    "\uffb1\001\002\000\050\011\u01ef\020\170\021\225\022\223" +
    "\034\021\035\022\036\017\047\202\051\177\054\227\055" +
    "\174\056\226\057\171\060\230\064\203\065\204\067\222" +
    "\074\210\076\207\001\002\000\060\011\uff5d\016\uff5d\020" +
    "\uff5d\021\uff5d\022\uff5d\034\uff5d\035\uff5d\036\uff5d\047\uff5d" +
    "\051\uff5d\052\uff5d\053\uff5d\054\uff5d\055\uff5d\056\uff5d\057" +
    "\uff5d\060\uff5d\064\uff5d\065\uff5d\067\uff5d\074\uff5d\075\uff5d" +
    "\076\uff5d\001\002\000\060\011\uff1a\016\uff1a\020\uff1a\021" +
    "\uff1a\022\uff1a\034\uff1a\035\uff1a\036\uff1a\047\uff1a\051\uff1a" +
    "\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060" +
    "\uff1a\064\uff1a\065\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a" +
    "\001\002\000\056\011\uff5c\016\uff5c\020\uff5c\021\uff5c\022" +
    "\uff5c\034\uff5c\035\uff5c\036\uff5c\047\uff5c\051\uff5c\052\uff5c" +
    "\053\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c\060\uff5c\064" +
    "\uff5c\065\uff5c\067\uff5c\074\uff5c\076\uff5c\001\002\000\030" +
    "\012\365\020\351\021\366\022\354\025\367\027\360\044" +
    "\u0146\066\362\067\353\072\361\073\357\001\002\000\010" +
    "\013\u01f4\100\u0149\101\u014a\001\002\000\006\010\uff1a\075" +
    "\142\001\002\000\004\010\uff61\001\002\000\004\010\u01f7" +
    "\001\002\000\052\011\uff1a\020\uff1a\021\uff1a\022\uff1a\034" +
    "\uff1a\035\uff1a\036\uff1a\047\uff1a\051\uff1a\054\uff1a\055\uff1a" +
    "\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074" +
    "\uff1a\075\142\076\uff1a\001\002\000\050\011\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\034\uffb1\035\uffb1\036\uffb1\047\uffb1\051" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\064\uffb1" +
    "\065\uffb1\067\uffb1\074\uffb1\076\uffb1\001\002\000\050\011" +
    "\u01fa\020\170\021\225\022\223\034\021\035\022\036\017" +
    "\047\202\051\177\054\227\055\174\056\226\057\171\060" +
    "\230\064\203\065\204\067\222\074\210\076\207\001\002" +
    "\000\062\011\uff60\016\uff60\020\uff60\021\uff60\022\uff60\034" +
    "\uff60\035\uff60\036\uff60\047\uff60\050\uff60\051\uff60\052\uff60" +
    "\053\uff60\054\uff60\055\uff60\056\uff60\057\uff60\060\uff60\064" +
    "\uff60\065\uff60\067\uff60\074\uff60\075\uff60\076\uff60\001\002" +
    "\000\062\011\uff1a\016\uff1a\020\uff1a\021\uff1a\022\uff1a\034" +
    "\uff1a\035\uff1a\036\uff1a\047\uff1a\050\uff1a\051\uff1a\052\uff1a" +
    "\053\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\064" +
    "\uff1a\065\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001\002" +
    "\000\060\011\uff5b\016\uff5b\020\uff5b\021\uff5b\022\uff5b\034" +
    "\uff5b\035\uff5b\036\uff5b\047\uff5b\050\u01e8\051\uff5b\052\uff5b" +
    "\053\uff5b\054\uff5b\055\uff5b\056\uff5b\057\uff5b\060\uff5b\064" +
    "\uff5b\065\uff5b\067\uff5b\074\uff5b\076\uff5b\001\002\000\056" +
    "\011\uff5f\016\uff5f\020\uff5f\021\uff5f\022\uff5f\034\uff5f\035" +
    "\uff5f\036\uff5f\047\uff5f\051\uff5f\052\uff5f\053\uff5f\054\uff5f" +
    "\055\uff5f\056\uff5f\057\uff5f\060\uff5f\064\uff5f\065\uff5f\067" +
    "\uff5f\074\uff5f\076\uff5f\001\002\000\004\012\u01ff\001\002" +
    "\000\004\067\330\001\002\000\004\013\u0201\001\002\000" +
    "\006\010\uff1a\075\142\001\002\000\004\010\uff48\001\002" +
    "\000\004\010\u0204\001\002\000\012\011\uff1a\052\uff1a\053" +
    "\uff1a\075\142\001\002\000\010\011\uff40\052\u0208\053\u0207" +
    "\001\002\000\004\011\u021d\001\002\000\004\007\u0218\001" +
    "\002\000\006\025\u020b\066\u020a\001\002\000\004\007\u020e" +
    "\001\002\000\004\007\uff3d\001\002\000\004\067\u020c\001" +
    "\002\000\004\025\u020d\001\002\000\004\007\uff3c\001\002" +
    "\000\004\075\uff45\001\002\000\004\075\u019b\001\002\000" +
    "\060\011\uffb1\016\uffb1\020\uffb1\021\uffb1\022\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\047\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\064\uffb1\065\uffb1" +
    "\067\uffb1\074\uffb1\075\u019c\076\uffb1\001\002\000\056\011" +
    "\uff3e\016\u0212\020\170\021\225\022\223\034\021\035\022" +
    "\036\017\047\202\051\177\052\uff3e\053\uff3e\054\227\055" +
    "\174\056\226\057\171\060\230\064\203\065\204\067\222" +
    "\074\210\076\207\001\002\000\004\006\u0216\001\002\000" +
    "\010\011\uff44\052\uff44\053\uff44\001\002\000\010\011\uff40" +
    "\052\u0208\053\u0207\001\002\000\004\011\uff43\001\002\000" +
    "\012\011\uff1a\052\uff1a\053\uff1a\075\142\001\002\000\010" +
    "\011\uff3f\052\uff3f\053\uff3f\001\002\000\004\075\uff42\001" +
    "\002\000\004\075\u019b\001\002\000\054\011\uffb1\016\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\034\uffb1\035\uffb1\036\uffb1\047" +
    "\uffb1\051\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1" +
    "\064\uffb1\065\uffb1\067\uffb1\074\uffb1\075\u019c\076\uffb1\001" +
    "\002\000\052\011\uff3e\016\u0212\020\170\021\225\022\223" +
    "\034\021\035\022\036\017\047\202\051\177\054\227\055" +
    "\174\056\226\057\171\060\230\064\203\065\204\067\222" +
    "\074\210\076\207\001\002\000\004\011\uff41\001\002\000" +
    "\060\011\uff47\016\uff47\020\uff47\021\uff47\022\uff47\034\uff47" +
    "\035\uff47\036\uff47\047\uff47\051\uff47\052\uff47\053\uff47\054" +
    "\uff47\055\uff47\056\uff47\057\uff47\060\uff47\064\uff47\065\uff47" +
    "\067\uff47\074\uff47\075\uff47\076\uff47\001\002\000\060\011" +
    "\uff1a\016\uff1a\020\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a" +
    "\036\uff1a\047\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055" +
    "\uff1a\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a" +
    "\074\uff1a\075\142\076\uff1a\001\002\000\056\011\uff46\016" +
    "\uff46\020\uff46\021\uff46\022\uff46\034\uff46\035\uff46\036\uff46" +
    "\047\uff46\051\uff46\052\uff46\053\uff46\054\uff46\055\uff46\056" +
    "\uff46\057\uff46\060\uff46\064\uff46\065\uff46\067\uff46\074\uff46" +
    "\076\uff46\001\002\000\006\002\uff1a\075\142\001\002\000" +
    "\004\002\uffbe\001\002\000\030\012\365\020\351\021\366" +
    "\022\354\025\367\027\360\044\u0146\066\362\067\353\072" +
    "\361\073\357\001\002\000\010\013\u0224\100\u0149\101\u014a" +
    "\001\002\000\006\010\uff1a\075\142\001\002\000\004\010" +
    "\uff4f\001\002\000\004\010\u0227\001\002\000\052\011\uff1a" +
    "\020\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a\036\uff1a\047" +
    "\uff1a\051\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a" +
    "\064\uff1a\065\uff1a\067\uff1a\074\uff1a\075\142\076\uff1a\001" +
    "\002\000\050\011\uffb1\020\uffb1\021\uffb1\022\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\047\uffb1\051\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\060\uffb1\064\uffb1\065\uffb1\067\uffb1\074\uffb1" +
    "\076\uffb1\001\002\000\050\011\u022a\020\170\021\225\022" +
    "\223\034\021\035\022\036\017\047\202\051\177\054\227" +
    "\055\174\056\226\057\171\060\230\064\203\065\204\067" +
    "\222\074\210\076\207\001\002\000\060\011\uff4e\016\uff4e" +
    "\020\uff4e\021\uff4e\022\uff4e\034\uff4e\035\uff4e\036\uff4e\047" +
    "\uff4e\051\uff4e\052\uff4e\053\uff4e\054\uff4e\055\uff4e\056\uff4e" +
    "\057\uff4e\060\uff4e\064\uff4e\065\uff4e\067\uff4e\074\uff4e\075" +
    "\uff4e\076\uff4e\001\002\000\060\011\uff1a\016\uff1a\020\uff1a" +
    "\021\uff1a\022\uff1a\034\uff1a\035\uff1a\036\uff1a\047\uff1a\051" +
    "\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056\uff1a\057\uff1a" +
    "\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074\uff1a\075\142\076" +
    "\uff1a\001\002\000\056\011\uff4d\016\uff4d\020\uff4d\021\uff4d" +
    "\022\uff4d\034\uff4d\035\uff4d\036\uff4d\047\uff4d\051\uff4d\052" +
    "\uff4d\053\uff4d\054\uff4d\055\uff4d\056\uff4d\057\uff4d\060\uff4d" +
    "\064\uff4d\065\uff4d\067\uff4d\074\uff4d\076\uff4d\001\002\000" +
    "\020\020\uff32\021\uff32\022\uff32\024\uff34\045\uff32\066\uff32" +
    "\067\uff32\001\002\000\016\020\035\021\047\022\037\045" +
    "\u026e\066\u026d\067\u0268\001\002\000\004\024\u0230\001\002" +
    "\000\156\004\ufeb3\005\ufeb3\006\ufeb3\007\ufeb3\010\ufeb3\011" +
    "\ufeb3\012\ufeb3\013\ufeb3\014\ufeb3\015\ufeb3\016\ufeb3\017\ufeb3" +
    "\020\ufeb3\021\ufeb3\022\ufeb3\023\ufeb3\024\ufeb3\025\ufeb3\026" +
    "\ufeb3\027\ufeb3\030\ufeb3\031\ufeb3\033\ufeb3\034\ufeb3\035\ufeb3" +
    "\037\ufeb3\040\ufeb3\041\ufeb3\042\ufeb3\043\ufeb3\044\ufeb3\045" +
    "\ufeb3\046\ufeb3\047\ufeb3\050\ufeb3\051\ufeb3\052\ufeb3\053\ufeb3" +
    "\054\ufeb3\055\ufeb3\056\ufeb3\057\ufeb3\060\ufeb3\061\ufeb3\062" +
    "\ufeb3\063\ufeb3\064\ufeb3\065\ufeb3\066\ufeb3\067\ufeb3\070\ufeb3" +
    "\071\ufeb3\072\ufeb3\073\ufeb3\001\002\000\156\004\u023d\005" +
    "\u024e\006\u0252\007\u0239\010\u023c\011\u023b\012\u0255\013\u0254" +
    "\014\u0262\015\u0261\016\u0232\017\u0260\020\u0233\021\u0259\022" +
    "\u0256\023\u025e\024\u0235\025\u0258\026\u0249\027\u0247\030\u024d" +
    "\031\u025a\033\u025b\034\u0241\035\u0246\037\u0264\040\u0237\041" +
    "\u024b\042\u0248\043\u023e\044\u025f\045\u0236\046\u0250\047\u0242" +
    "\050\u024f\051\u023f\052\u0238\053\u024c\054\u0263\055\u023a\056" +
    "\u025d\057\u0234\060\u0265\061\264\062\235\063\261\064\u0243" +
    "\065\u0245\066\u0244\067\u0251\070\u025c\071\u0240\072\u024a\073" +
    "\u0253\001\002\000\156\004\ufedb\005\ufedb\006\ufedb\007\ufedb" +
    "\010\ufedb\011\ufedb\012\ufedb\013\ufedb\014\ufedb\015\ufedb\016" +
    "\ufedb\017\ufedb\020\ufedb\021\ufedb\022\ufedb\023\ufedb\024\ufedb" +
    "\025\ufedb\026\ufedb\027\ufedb\030\ufedb\031\ufedb\033\ufedb\034" +
    "\ufedb\035\ufedb\037\ufedb\040\ufedb\041\ufedb\042\ufedb\043\ufedb" +
    "\044\ufedb\045\ufedb\046\ufedb\047\ufedb\050\ufedb\051\ufedb\052" +
    "\ufedb\053\ufedb\054\ufedb\055\ufedb\056\ufedb\057\ufedb\060\ufedb" +
    "\061\ufedb\062\ufedb\063\ufedb\064\ufedb\065\ufedb\066\ufedb\067" +
    "\ufedb\070\ufedb\071\ufedb\072\ufedb\073\ufedb\001\002\000\156" +
    "\004\ufed9\005\ufed9\006\ufed9\007\ufed9\010\ufed9\011\ufed9\012" +
    "\ufed9\013\ufed9\014\ufed9\015\ufed9\016\ufed9\017\ufed9\020\ufed9" +
    "\021\ufed9\022\ufed9\023\ufed9\024\ufed9\025\ufed9\026\ufed9\027" +
    "\ufed9\030\ufed9\031\ufed9\033\ufed9\034\ufed9\035\ufed9\037\ufed9" +
    "\040\ufed9\041\ufed9\042\ufed9\043\ufed9\044\ufed9\045\ufed9\046" +
    "\ufed9\047\ufed9\050\ufed9\051\ufed9\052\ufed9\053\ufed9\054\ufed9" +
    "\055\ufed9\056\ufed9\057\ufed9\060\ufed9\061\ufed9\062\ufed9\063" +
    "\ufed9\064\ufed9\065\ufed9\066\ufed9\067\ufed9\070\ufed9\071\ufed9" +
    "\072\ufed9\073\ufed9\001\002\000\156\004\ufebb\005\ufebb\006" +
    "\ufebb\007\ufebb\010\ufebb\011\ufebb\012\ufebb\013\ufebb\014\ufebb" +
    "\015\ufebb\016\ufebb\017\ufebb\020\ufebb\021\ufebb\022\ufebb\023" +
    "\ufebb\024\ufebb\025\ufebb\026\ufebb\027\ufebb\030\ufebb\031\ufebb" +
    "\033\ufebb\034\ufebb\035\ufebb\037\ufebb\040\ufebb\041\ufebb\042" +
    "\ufebb\043\ufebb\044\ufebb\045\ufebb\046\ufebb\047\ufebb\050\ufebb" +
    "\051\ufebb\052\ufebb\053\ufebb\054\ufebb\055\ufebb\056\ufebb\057" +
    "\ufebb\060\ufebb\061\ufebb\062\ufebb\063\ufebb\064\ufebb\065\ufebb" +
    "\066\ufebb\067\ufebb\070\ufebb\071\ufebb\072\ufebb\073\ufebb\001" +
    "\002\000\006\004\u0267\013\uff2e\001\002\000\156\004\ufec5" +
    "\005\ufec5\006\ufec5\007\ufec5\010\ufec5\011\ufec5\012\ufec5\013" +
    "\ufec5\014\ufec5\015\ufec5\016\ufec5\017\ufec5\020\ufec5\021\ufec5" +
    "\022\ufec5\023\ufec5\024\ufec5\025\ufec5\026\ufec5\027\ufec5\030" +
    "\ufec5\031\ufec5\033\ufec5\034\ufec5\035\ufec5\037\ufec5\040\ufec5" +
    "\041\ufec5\042\ufec5\043\ufec5\044\ufec5\045\ufec5\046\ufec5\047" +
    "\ufec5\050\ufec5\051\ufec5\052\ufec5\053\ufec5\054\ufec5\055\ufec5" +
    "\056\ufec5\057\ufec5\060\ufec5\061\ufec5\062\ufec5\063\ufec5\064" +
    "\ufec5\065\ufec5\066\ufec5\067\ufec5\070\ufec5\071\ufec5\072\ufec5" +
    "\073\ufec5\001\002\000\156\004\ufeca\005\ufeca\006\ufeca\007" +
    "\ufeca\010\ufeca\011\ufeca\012\ufeca\013\ufeca\014\ufeca\015\ufeca" +
    "\016\ufeca\017\ufeca\020\ufeca\021\ufeca\022\ufeca\023\ufeca\024" +
    "\ufeca\025\ufeca\026\ufeca\027\ufeca\030\ufeca\031\ufeca\033\ufeca" +
    "\034\ufeca\035\ufeca\037\ufeca\040\ufeca\041\ufeca\042\ufeca\043" +
    "\ufeca\044\ufeca\045\ufeca\046\ufeca\047\ufeca\050\ufeca\051\ufeca" +
    "\052\ufeca\053\ufeca\054\ufeca\055\ufeca\056\ufeca\057\ufeca\060" +
    "\ufeca\061\ufeca\062\ufeca\063\ufeca\064\ufeca\065\ufeca\066\ufeca" +
    "\067\ufeca\070\ufeca\071\ufeca\072\ufeca\073\ufeca\001\002\000" +
    "\156\004\ufec0\005\ufec0\006\ufec0\007\ufec0\010\ufec0\011\ufec0" +
    "\012\ufec0\013\ufec0\014\ufec0\015\ufec0\016\ufec0\017\ufec0\020" +
    "\ufec0\021\ufec0\022\ufec0\023\ufec0\024\ufec0\025\ufec0\026\ufec0" +
    "\027\ufec0\030\ufec0\031\ufec0\033\ufec0\034\ufec0\035\ufec0\037" +
    "\ufec0\040\ufec0\041\ufec0\042\ufec0\043\ufec0\044\ufec0\045\ufec0" +
    "\046\ufec0\047\ufec0\050\ufec0\051\ufec0\052\ufec0\053\ufec0\054" +
    "\ufec0\055\ufec0\056\ufec0\057\ufec0\060\ufec0\061\ufec0\062\ufec0" +
    "\063\ufec0\064\ufec0\065\ufec0\066\ufec0\067\ufec0\070\ufec0\071" +
    "\ufec0\072\ufec0\073\ufec0\001\002\000\156\004\ufee3\005\ufee3" +
    "\006\ufee3\007\ufee3\010\ufee3\011\ufee3\012\ufee3\013\ufee3\014" +
    "\ufee3\015\ufee3\016\ufee3\017\ufee3\020\ufee3\021\ufee3\022\ufee3" +
    "\023\ufee3\024\ufee3\025\ufee3\026\ufee3\027\ufee3\030\ufee3\031" +
    "\ufee3\033\ufee3\034\ufee3\035\ufee3\037\ufee3\040\ufee3\041\ufee3" +
    "\042\ufee3\043\ufee3\044\ufee3\045\ufee3\046\ufee3\047\ufee3\050" +
    "\ufee3\051\ufee3\052\ufee3\053\ufee3\054\ufee3\055\ufee3\056\ufee3" +
    "\057\ufee3\060\ufee3\061\ufee3\062\ufee3\063\ufee3\064\ufee3\065" +
    "\ufee3\066\ufee3\067\ufee3\070\ufee3\071\ufee3\072\ufee3\073\ufee3" +
    "\001\002\000\156\004\ufebd\005\ufebd\006\ufebd\007\ufebd\010" +
    "\ufebd\011\ufebd\012\ufebd\013\ufebd\014\ufebd\015\ufebd\016\ufebd" +
    "\017\ufebd\020\ufebd\021\ufebd\022\ufebd\023\ufebd\024\ufebd\025" +
    "\ufebd\026\ufebd\027\ufebd\030\ufebd\031\ufebd\033\ufebd\034\ufebd" +
    "\035\ufebd\037\ufebd\040\ufebd\041\ufebd\042\ufebd\043\ufebd\044" +
    "\ufebd\045\ufebd\046\ufebd\047\ufebd\050\ufebd\051\ufebd\052\ufebd" +
    "\053\ufebd\054\ufebd\055\ufebd\056\ufebd\057\ufebd\060\ufebd\061" +
    "\ufebd\062\ufebd\063\ufebd\064\ufebd\065\ufebd\066\ufebd\067\ufebd" +
    "\070\ufebd\071\ufebd\072\ufebd\073\ufebd\001\002\000\156\004" +
    "\ufee1\005\ufee1\006\ufee1\007\ufee1\010\ufee1\011\ufee1\012\ufee1" +
    "\013\ufee1\014\ufee1\015\ufee1\016\ufee1\017\ufee1\020\ufee1\021" +
    "\ufee1\022\ufee1\023\ufee1\024\ufee1\025\ufee1\026\ufee1\027\ufee1" +
    "\030\ufee1\031\ufee1\033\ufee1\034\ufee1\035\ufee1\037\ufee1\040" +
    "\ufee1\041\ufee1\042\ufee1\043\ufee1\044\ufee1\045\ufee1\046\ufee1" +
    "\047\ufee1\050\ufee1\051\ufee1\052\ufee1\053\ufee1\054\ufee1\055" +
    "\ufee1\056\ufee1\057\ufee1\060\ufee1\061\ufee1\062\ufee1\063\ufee1" +
    "\064\ufee1\065\ufee1\066\ufee1\067\ufee1\070\ufee1\071\ufee1\072" +
    "\ufee1\073\ufee1\001\002\000\156\004\ufee2\005\ufee2\006\ufee2" +
    "\007\ufee2\010\ufee2\011\ufee2\012\ufee2\013\ufee2\014\ufee2\015" +
    "\ufee2\016\ufee2\017\ufee2\020\ufee2\021\ufee2\022\ufee2\023\ufee2" +
    "\024\ufee2\025\ufee2\026\ufee2\027\ufee2\030\ufee2\031\ufee2\033" +
    "\ufee2\034\ufee2\035\ufee2\037\ufee2\040\ufee2\041\ufee2\042\ufee2" +
    "\043\ufee2\044\ufee2\045\ufee2\046\ufee2\047\ufee2\050\ufee2\051" +
    "\ufee2\052\ufee2\053\ufee2\054\ufee2\055\ufee2\056\ufee2\057\ufee2" +
    "\060\ufee2\061\ufee2\062\ufee2\063\ufee2\064\ufee2\065\ufee2\066" +
    "\ufee2\067\ufee2\070\ufee2\071\ufee2\072\ufee2\073\ufee2\001\002" +
    "\000\156\004\ufee6\005\ufee6\006\ufee6\007\ufee6\010\ufee6\011" +
    "\ufee6\012\ufee6\013\ufee6\014\ufee6\015\ufee6\016\ufee6\017\ufee6" +
    "\020\ufee6\021\ufee6\022\ufee6\023\ufee6\024\ufee6\025\ufee6\026" +
    "\ufee6\027\ufee6\030\ufee6\031\ufee6\033\ufee6\034\ufee6\035\ufee6" +
    "\037\ufee6\040\ufee6\041\ufee6\042\ufee6\043\ufee6\044\ufee6\045" +
    "\ufee6\046\ufee6\047\ufee6\050\ufee6\051\ufee6\052\ufee6\053\ufee6" +
    "\054\ufee6\055\ufee6\056\ufee6\057\ufee6\060\ufee6\061\ufee6\062" +
    "\ufee6\063\ufee6\064\ufee6\065\ufee6\066\ufee6\067\ufee6\070\ufee6" +
    "\071\ufee6\072\ufee6\073\ufee6\001\002\000\156\004\ufec7\005" +
    "\ufec7\006\ufec7\007\ufec7\010\ufec7\011\ufec7\012\ufec7\013\ufec7" +
    "\014\ufec7\015\ufec7\016\ufec7\017\ufec7\020\ufec7\021\ufec7\022" +
    "\ufec7\023\ufec7\024\ufec7\025\ufec7\026\ufec7\027\ufec7\030\ufec7" +
    "\031\ufec7\033\ufec7\034\ufec7\035\ufec7\037\ufec7\040\ufec7\041" +
    "\ufec7\042\ufec7\043\ufec7\044\ufec7\045\ufec7\046\ufec7\047\ufec7" +
    "\050\ufec7\051\ufec7\052\ufec7\053\ufec7\054\ufec7\055\ufec7\056" +
    "\ufec7\057\ufec7\060\ufec7\061\ufec7\062\ufec7\063\ufec7\064\ufec7" +
    "\065\ufec7\066\ufec7\067\ufec7\070\ufec7\071\ufec7\072\ufec7\073" +
    "\ufec7\001\002\000\156\004\ufec1\005\ufec1\006\ufec1\007\ufec1" +
    "\010\ufec1\011\ufec1\012\ufec1\013\ufec1\014\ufec1\015\ufec1\016" +
    "\ufec1\017\ufec1\020\ufec1\021\ufec1\022\ufec1\023\ufec1\024\ufec1" +
    "\025\ufec1\026\ufec1\027\ufec1\030\ufec1\031\ufec1\033\ufec1\034" +
    "\ufec1\035\ufec1\037\ufec1\040\ufec1\041\ufec1\042\ufec1\043\ufec1" +
    "\044\ufec1\045\ufec1\046\ufec1\047\ufec1\050\ufec1\051\ufec1\052" +
    "\ufec1\053\ufec1\054\ufec1\055\ufec1\056\ufec1\057\ufec1\060\ufec1" +
    "\061\ufec1\062\ufec1\063\ufec1\064\ufec1\065\ufec1\066\ufec1\067" +
    "\ufec1\070\ufec1\071\ufec1\072\ufec1\073\ufec1\001\002\000\156" +
    "\004\ufed1\005\ufed1\006\ufed1\007\ufed1\010\ufed1\011\ufed1\012" +
    "\ufed1\013\ufed1\014\ufed1\015\ufed1\016\ufed1\017\ufed1\020\ufed1" +
    "\021\ufed1\022\ufed1\023\ufed1\024\ufed1\025\ufed1\026\ufed1\027" +
    "\ufed1\030\ufed1\031\ufed1\033\ufed1\034\ufed1\035\ufed1\037\ufed1" +
    "\040\ufed1\041\ufed1\042\ufed1\043\ufed1\044\ufed1\045\ufed1\046" +
    "\ufed1\047\ufed1\050\ufed1\051\ufed1\052\ufed1\053\ufed1\054\ufed1" +
    "\055\ufed1\056\ufed1\057\ufed1\060\ufed1\061\ufed1\062\ufed1\063" +
    "\ufed1\064\ufed1\065\ufed1\066\ufed1\067\ufed1\070\ufed1\071\ufed1" +
    "\072\ufed1\073\ufed1\001\002\000\156\004\ufece\005\ufece\006" +
    "\ufece\007\ufece\010\ufece\011\ufece\012\ufece\013\ufece\014\ufece" +
    "\015\ufece\016\ufece\017\ufece\020\ufece\021\ufece\022\ufece\023" +
    "\ufece\024\ufece\025\ufece\026\ufece\027\ufece\030\ufece\031\ufece" +
    "\033\ufece\034\ufece\035\ufece\037\ufece\040\ufece\041\ufece\042" +
    "\ufece\043\ufece\044\ufece\045\ufece\046\ufece\047\ufece\050\ufece" +
    "\051\ufece\052\ufece\053\ufece\054\ufece\055\ufece\056\ufece\057" +
    "\ufece\060\ufece\061\ufece\062\ufece\063\ufece\064\ufece\065\ufece" +
    "\066\ufece\067\ufece\070\ufece\071\ufece\072\ufece\073\ufece\001" +
    "\002\000\156\004\ufec3\005\ufec3\006\ufec3\007\ufec3\010\ufec3" +
    "\011\ufec3\012\ufec3\013\ufec3\014\ufec3\015\ufec3\016\ufec3\017" +
    "\ufec3\020\ufec3\021\ufec3\022\ufec3\023\ufec3\024\ufec3\025\ufec3" +
    "\026\ufec3\027\ufec3\030\ufec3\031\ufec3\033\ufec3\034\ufec3\035" +
    "\ufec3\037\ufec3\040\ufec3\041\ufec3\042\ufec3\043\ufec3\044\ufec3" +
    "\045\ufec3\046\ufec3\047\ufec3\050\ufec3\051\ufec3\052\ufec3\053" +
    "\ufec3\054\ufec3\055\ufec3\056\ufec3\057\ufec3\060\ufec3\061\ufec3" +
    "\062\ufec3\063\ufec3\064\ufec3\065\ufec3\066\ufec3\067\ufec3\070" +
    "\ufec3\071\ufec3\072\ufec3\073\ufec3\001\002\000\156\004\ufeb9" +
    "\005\ufeb9\006\ufeb9\007\ufeb9\010\ufeb9\011\ufeb9\012\ufeb9\013" +
    "\ufeb9\014\ufeb9\015\ufeb9\016\ufeb9\017\ufeb9\020\ufeb9\021\ufeb9" +
    "\022\ufeb9\023\ufeb9\024\ufeb9\025\ufeb9\026\ufeb9\027\ufeb9\030" +
    "\ufeb9\031\ufeb9\033\ufeb9\034\ufeb9\035\ufeb9\037\ufeb9\040\ufeb9" +
    "\041\ufeb9\042\ufeb9\043\ufeb9\044\ufeb9\045\ufeb9\046\ufeb9\047" +
    "\ufeb9\050\ufeb9\051\ufeb9\052\ufeb9\053\ufeb9\054\ufeb9\055\ufeb9" +
    "\056\ufeb9\057\ufeb9\060\ufeb9\061\ufeb9\062\ufeb9\063\ufeb9\064" +
    "\ufeb9\065\ufeb9\066\ufeb9\067\ufeb9\070\ufeb9\071\ufeb9\072\ufeb9" +
    "\073\ufeb9\001\002\000\156\004\ufeb7\005\ufeb7\006\ufeb7\007" +
    "\ufeb7\010\ufeb7\011\ufeb7\012\ufeb7\013\ufeb7\014\ufeb7\015\ufeb7" +
    "\016\ufeb7\017\ufeb7\020\ufeb7\021\ufeb7\022\ufeb7\023\ufeb7\024" +
    "\ufeb7\025\ufeb7\026\ufeb7\027\ufeb7\030\ufeb7\031\ufeb7\033\ufeb7" +
    "\034\ufeb7\035\ufeb7\037\ufeb7\040\ufeb7\041\ufeb7\042\ufeb7\043" +
    "\ufeb7\044\ufeb7\045\ufeb7\046\ufeb7\047\ufeb7\050\ufeb7\051\ufeb7" +
    "\052\ufeb7\053\ufeb7\054\ufeb7\055\ufeb7\056\ufeb7\057\ufeb7\060" +
    "\ufeb7\061\ufeb7\062\ufeb7\063\ufeb7\064\ufeb7\065\ufeb7\066\ufeb7" +
    "\067\ufeb7\070\ufeb7\071\ufeb7\072\ufeb7\073\ufeb7\001\002\000" +
    "\156\004\ufeb8\005\ufeb8\006\ufeb8\007\ufeb8\010\ufeb8\011\ufeb8" +
    "\012\ufeb8\013\ufeb8\014\ufeb8\015\ufeb8\016\ufeb8\017\ufeb8\020" +
    "\ufeb8\021\ufeb8\022\ufeb8\023\ufeb8\024\ufeb8\025\ufeb8\026\ufeb8" +
    "\027\ufeb8\030\ufeb8\031\ufeb8\033\ufeb8\034\ufeb8\035\ufeb8\037" +
    "\ufeb8\040\ufeb8\041\ufeb8\042\ufeb8\043\ufeb8\044\ufeb8\045\ufeb8" +
    "\046\ufeb8\047\ufeb8\050\ufeb8\051\ufeb8\052\ufeb8\053\ufeb8\054" +
    "\ufeb8\055\ufeb8\056\ufeb8\057\ufeb8\060\ufeb8\061\ufeb8\062\ufeb8" +
    "\063\ufeb8\064\ufeb8\065\ufeb8\066\ufeb8\067\ufeb8\070\ufeb8\071" +
    "\ufeb8\072\ufeb8\073\ufeb8\001\002\000\156\004\ufecf\005\ufecf" +
    "\006\ufecf\007\ufecf\010\ufecf\011\ufecf\012\ufecf\013\ufecf\014" +
    "\ufecf\015\ufecf\016\ufecf\017\ufecf\020\ufecf\021\ufecf\022\ufecf" +
    "\023\ufecf\024\ufecf\025\ufecf\026\ufecf\027\ufecf\030\ufecf\031" +
    "\ufecf\033\ufecf\034\ufecf\035\ufecf\037\ufecf\040\ufecf\041\ufecf" +
    "\042\ufecf\043\ufecf\044\ufecf\045\ufecf\046\ufecf\047\ufecf\050" +
    "\ufecf\051\ufecf\052\ufecf\053\ufecf\054\ufecf\055\ufecf\056\ufecf" +
    "\057\ufecf\060\ufecf\061\ufecf\062\ufecf\063\ufecf\064\ufecf\065" +
    "\ufecf\066\ufecf\067\ufecf\070\ufecf\071\ufecf\072\ufecf\073\ufecf" +
    "\001\002\000\156\004\ufed4\005\ufed4\006\ufed4\007\ufed4\010" +
    "\ufed4\011\ufed4\012\ufed4\013\ufed4\014\ufed4\015\ufed4\016\ufed4" +
    "\017\ufed4\020\ufed4\021\ufed4\022\ufed4\023\ufed4\024\ufed4\025" +
    "\ufed4\026\ufed4\027\ufed4\030\ufed4\031\ufed4\033\ufed4\034\ufed4" +
    "\035\ufed4\037\ufed4\040\ufed4\041\ufed4\042\ufed4\043\ufed4\044" +
    "\ufed4\045\ufed4\046\ufed4\047\ufed4\050\ufed4\051\ufed4\052\ufed4" +
    "\053\ufed4\054\ufed4\055\ufed4\056\ufed4\057\ufed4\060\ufed4\061" +
    "\ufed4\062\ufed4\063\ufed4\064\ufed4\065\ufed4\066\ufed4\067\ufed4" +
    "\070\ufed4\071\ufed4\072\ufed4\073\ufed4\001\002\000\156\004" +
    "\ufec8\005\ufec8\006\ufec8\007\ufec8\010\ufec8\011\ufec8\012\ufec8" +
    "\013\ufec8\014\ufec8\015\ufec8\016\ufec8\017\ufec8\020\ufec8\021" +
    "\ufec8\022\ufec8\023\ufec8\024\ufec8\025\ufec8\026\ufec8\027\ufec8" +
    "\030\ufec8\031\ufec8\033\ufec8\034\ufec8\035\ufec8\037\ufec8\040" +
    "\ufec8\041\ufec8\042\ufec8\043\ufec8\044\ufec8\045\ufec8\046\ufec8" +
    "\047\ufec8\050\ufec8\051\ufec8\052\ufec8\053\ufec8\054\ufec8\055" +
    "\ufec8\056\ufec8\057\ufec8\060\ufec8\061\ufec8\062\ufec8\063\ufec8" +
    "\064\ufec8\065\ufec8\066\ufec8\067\ufec8\070\ufec8\071\ufec8\072" +
    "\ufec8\073\ufec8\001\002\000\156\004\ufed5\005\ufed5\006\ufed5" +
    "\007\ufed5\010\ufed5\011\ufed5\012\ufed5\013\ufed5\014\ufed5\015" +
    "\ufed5\016\ufed5\017\ufed5\020\ufed5\021\ufed5\022\ufed5\023\ufed5" +
    "\024\ufed5\025\ufed5\026\ufed5\027\ufed5\030\ufed5\031\ufed5\033" +
    "\ufed5\034\ufed5\035\ufed5\037\ufed5\040\ufed5\041\ufed5\042\ufed5" +
    "\043\ufed5\044\ufed5\045\ufed5\046\ufed5\047\ufed5\050\ufed5\051" +
    "\ufed5\052\ufed5\053\ufed5\054\ufed5\055\ufed5\056\ufed5\057\ufed5" +
    "\060\ufed5\061\ufed5\062\ufed5\063\ufed5\064\ufed5\065\ufed5\066" +
    "\ufed5\067\ufed5\070\ufed5\071\ufed5\072\ufed5\073\ufed5\001\002" +
    "\000\156\004\ufecc\005\ufecc\006\ufecc\007\ufecc\010\ufecc\011" +
    "\ufecc\012\ufecc\013\ufecc\014\ufecc\015\ufecc\016\ufecc\017\ufecc" +
    "\020\ufecc\021\ufecc\022\ufecc\023\ufecc\024\ufecc\025\ufecc\026" +
    "\ufecc\027\ufecc\030\ufecc\031\ufecc\033\ufecc\034\ufecc\035\ufecc" +
    "\037\ufecc\040\ufecc\041\ufecc\042\ufecc\043\ufecc\044\ufecc\045" +
    "\ufecc\046\ufecc\047\ufecc\050\ufecc\051\ufecc\052\ufecc\053\ufecc" +
    "\054\ufecc\055\ufecc\056\ufecc\057\ufecc\060\ufecc\061\ufecc\062" +
    "\ufecc\063\ufecc\064\ufecc\065\ufecc\066\ufecc\067\ufecc\070\ufecc" +
    "\071\ufecc\072\ufecc\073\ufecc\001\002\000\156\004\ufec9\005" +
    "\ufec9\006\ufec9\007\ufec9\010\ufec9\011\ufec9\012\ufec9\013\ufec9" +
    "\014\ufec9\015\ufec9\016\ufec9\017\ufec9\020\ufec9\021\ufec9\022" +
    "\ufec9\023\ufec9\024\ufec9\025\ufec9\026\ufec9\027\ufec9\030\ufec9" +
    "\031\ufec9\033\ufec9\034\ufec9\035\ufec9\037\ufec9\040\ufec9\041" +
    "\ufec9\042\ufec9\043\ufec9\044\ufec9\045\ufec9\046\ufec9\047\ufec9" +
    "\050\ufec9\051\ufec9\052\ufec9\053\ufec9\054\ufec9\055\ufec9\056" +
    "\ufec9\057\ufec9\060\ufec9\061\ufec9\062\ufec9\063\ufec9\064\ufec9" +
    "\065\ufec9\066\ufec9\067\ufec9\070\ufec9\071\ufec9\072\ufec9\073" +
    "\ufec9\001\002\000\156\004\ufebf\005\ufebf\006\ufebf\007\ufebf" +
    "\010\ufebf\011\ufebf\012\ufebf\013\ufebf\014\ufebf\015\ufebf\016" +
    "\ufebf\017\ufebf\020\ufebf\021\ufebf\022\ufebf\023\ufebf\024\ufebf" +
    "\025\ufebf\026\ufebf\027\ufebf\030\ufebf\031\ufebf\033\ufebf\034" +
    "\ufebf\035\ufebf\037\ufebf\040\ufebf\041\ufebf\042\ufebf\043\ufebf" +
    "\044\ufebf\045\ufebf\046\ufebf\047\ufebf\050\ufebf\051\ufebf\052" +
    "\ufebf\053\ufebf\054\ufebf\055\ufebf\056\ufebf\057\ufebf\060\ufebf" +
    "\061\ufebf\062\ufebf\063\ufebf\064\ufebf\065\ufebf\066\ufebf\067" +
    "\ufebf\070\ufebf\071\ufebf\072\ufebf\073\ufebf\001\002\000\156" +
    "\004\ufed3\005\ufed3\006\ufed3\007\ufed3\010\ufed3\011\ufed3\012" +
    "\ufed3\013\ufed3\014\ufed3\015\ufed3\016\ufed3\017\ufed3\020\ufed3" +
    "\021\ufed3\022\ufed3\023\ufed3\024\ufed3\025\ufed3\026\ufed3\027" +
    "\ufed3\030\ufed3\031\ufed3\033\ufed3\034\ufed3\035\ufed3\037\ufed3" +
    "\040\ufed3\041\ufed3\042\ufed3\043\ufed3\044\ufed3\045\ufed3\046" +
    "\ufed3\047\ufed3\050\ufed3\051\ufed3\052\ufed3\053\ufed3\054\ufed3" +
    "\055\ufed3\056\ufed3\057\ufed3\060\ufed3\061\ufed3\062\ufed3\063" +
    "\ufed3\064\ufed3\065\ufed3\066\ufed3\067\ufed3\070\ufed3\071\ufed3" +
    "\072\ufed3\073\ufed3\001\002\000\156\004\ufee5\005\ufee5\006" +
    "\ufee5\007\ufee5\010\ufee5\011\ufee5\012\ufee5\013\ufee5\014\ufee5" +
    "\015\ufee5\016\ufee5\017\ufee5\020\ufee5\021\ufee5\022\ufee5\023" +
    "\ufee5\024\ufee5\025\ufee5\026\ufee5\027\ufee5\030\ufee5\031\ufee5" +
    "\033\ufee5\034\ufee5\035\ufee5\037\ufee5\040\ufee5\041\ufee5\042" +
    "\ufee5\043\ufee5\044\ufee5\045\ufee5\046\ufee5\047\ufee5\050\ufee5" +
    "\051\ufee5\052\ufee5\053\ufee5\054\ufee5\055\ufee5\056\ufee5\057" +
    "\ufee5\060\ufee5\061\ufee5\062\ufee5\063\ufee5\064\ufee5\065\ufee5" +
    "\066\ufee5\067\ufee5\070\ufee5\071\ufee5\072\ufee5\073\ufee5\001" +
    "\002\000\156\004\ufec2\005\ufec2\006\ufec2\007\ufec2\010\ufec2" +
    "\011\ufec2\012\ufec2\013\ufec2\014\ufec2\015\ufec2\016\ufec2\017" +
    "\ufec2\020\ufec2\021\ufec2\022\ufec2\023\ufec2\024\ufec2\025\ufec2" +
    "\026\ufec2\027\ufec2\030\ufec2\031\ufec2\033\ufec2\034\ufec2\035" +
    "\ufec2\037\ufec2\040\ufec2\041\ufec2\042\ufec2\043\ufec2\044\ufec2" +
    "\045\ufec2\046\ufec2\047\ufec2\050\ufec2\051\ufec2\052\ufec2\053" +
    "\ufec2\054\ufec2\055\ufec2\056\ufec2\057\ufec2\060\ufec2\061\ufec2" +
    "\062\ufec2\063\ufec2\064\ufec2\065\ufec2\066\ufec2\067\ufec2\070" +
    "\ufec2\071\ufec2\072\ufec2\073\ufec2\001\002\000\156\004\ufec4" +
    "\005\ufec4\006\ufec4\007\ufec4\010\ufec4\011\ufec4\012\ufec4\013" +
    "\ufec4\014\ufec4\015\ufec4\016\ufec4\017\ufec4\020\ufec4\021\ufec4" +
    "\022\ufec4\023\ufec4\024\ufec4\025\ufec4\026\ufec4\027\ufec4\030" +
    "\ufec4\031\ufec4\033\ufec4\034\ufec4\035\ufec4\037\ufec4\040\ufec4" +
    "\041\ufec4\042\ufec4\043\ufec4\044\ufec4\045\ufec4\046\ufec4\047" +
    "\ufec4\050\ufec4\051\ufec4\052\ufec4\053\ufec4\054\ufec4\055\ufec4" +
    "\056\ufec4\057\ufec4\060\ufec4\061\ufec4\062\ufec4\063\ufec4\064" +
    "\ufec4\065\ufec4\066\ufec4\067\ufec4\070\ufec4\071\ufec4\072\ufec4" +
    "\073\ufec4\001\002\000\156\004\ufeb6\005\ufeb6\006\ufeb6\007" +
    "\ufeb6\010\ufeb6\011\ufeb6\012\ufeb6\013\ufeb6\014\ufeb6\015\ufeb6" +
    "\016\ufeb6\017\ufeb6\020\ufeb6\021\ufeb6\022\ufeb6\023\ufeb6\024" +
    "\ufeb6\025\ufeb6\026\ufeb6\027\ufeb6\030\ufeb6\031\ufeb6\033\ufeb6" +
    "\034\ufeb6\035\ufeb6\037\ufeb6\040\ufeb6\041\ufeb6\042\ufeb6\043" +
    "\ufeb6\044\ufeb6\045\ufeb6\046\ufeb6\047\ufeb6\050\ufeb6\051\ufeb6" +
    "\052\ufeb6\053\ufeb6\054\ufeb6\055\ufeb6\056\ufeb6\057\ufeb6\060" +
    "\ufeb6\061\ufeb6\062\ufeb6\063\ufeb6\064\ufeb6\065\ufeb6\066\ufeb6" +
    "\067\ufeb6\070\ufeb6\071\ufeb6\072\ufeb6\073\ufeb6\001\002\000" +
    "\156\004\ufee4\005\ufee4\006\ufee4\007\ufee4\010\ufee4\011\ufee4" +
    "\012\ufee4\013\ufee4\014\ufee4\015\ufee4\016\ufee4\017\ufee4\020" +
    "\ufee4\021\ufee4\022\ufee4\023\ufee4\024\ufee4\025\ufee4\026\ufee4" +
    "\027\ufee4\030\ufee4\031\ufee4\033\ufee4\034\ufee4\035\ufee4\037" +
    "\ufee4\040\ufee4\041\ufee4\042\ufee4\043\ufee4\044\ufee4\045\ufee4" +
    "\046\ufee4\047\ufee4\050\ufee4\051\ufee4\052\ufee4\053\ufee4\054" +
    "\ufee4\055\ufee4\056\ufee4\057\ufee4\060\ufee4\061\ufee4\062\ufee4" +
    "\063\ufee4\064\ufee4\065\ufee4\066\ufee4\067\ufee4\070\ufee4\071" +
    "\ufee4\072\ufee4\073\ufee4\001\002\000\156\004\ufecb\005\ufecb" +
    "\006\ufecb\007\ufecb\010\ufecb\011\ufecb\012\ufecb\013\ufecb\014" +
    "\ufecb\015\ufecb\016\ufecb\017\ufecb\020\ufecb\021\ufecb\022\ufecb" +
    "\023\ufecb\024\ufecb\025\ufecb\026\ufecb\027\ufecb\030\ufecb\031" +
    "\ufecb\033\ufecb\034\ufecb\035\ufecb\037\ufecb\040\ufecb\041\ufecb" +
    "\042\ufecb\043\ufecb\044\ufecb\045\ufecb\046\ufecb\047\ufecb\050" +
    "\ufecb\051\ufecb\052\ufecb\053\ufecb\054\ufecb\055\ufecb\056\ufecb" +
    "\057\ufecb\060\ufecb\061\ufecb\062\ufecb\063\ufecb\064\ufecb\065" +
    "\ufecb\066\ufecb\067\ufecb\070\ufecb\071\ufecb\072\ufecb\073\ufecb" +
    "\001\002\000\156\004\ufedf\005\ufedf\006\ufedf\007\ufedf\010" +
    "\ufedf\011\ufedf\012\ufedf\013\ufedf\014\ufedf\015\ufedf\016\ufedf" +
    "\017\ufedf\020\ufedf\021\ufedf\022\ufedf\023\ufedf\024\ufedf\025" +
    "\ufedf\026\ufedf\027\ufedf\030\ufedf\031\ufedf\033\ufedf\034\ufedf" +
    "\035\ufedf\037\ufedf\040\ufedf\041\ufedf\042\ufedf\043\ufedf\044" +
    "\ufedf\045\ufedf\046\ufedf\047\ufedf\050\ufedf\051\ufedf\052\ufedf" +
    "\053\ufedf\054\ufedf\055\ufedf\056\ufedf\057\ufedf\060\ufedf\061" +
    "\ufedf\062\ufedf\063\ufedf\064\ufedf\065\ufedf\066\ufedf\067\ufedf" +
    "\070\ufedf\071\ufedf\072\ufedf\073\ufedf\001\002\000\156\004" +
    "\ufee0\005\ufee0\006\ufee0\007\ufee0\010\ufee0\011\ufee0\012\ufee0" +
    "\013\ufee0\014\ufee0\015\ufee0\016\ufee0\017\ufee0\020\ufee0\021" +
    "\ufee0\022\ufee0\023\ufee0\024\ufee0\025\ufee0\026\ufee0\027\ufee0" +
    "\030\ufee0\031\ufee0\033\ufee0\034\ufee0\035\ufee0\037\ufee0\040" +
    "\ufee0\041\ufee0\042\ufee0\043\ufee0\044\ufee0\045\ufee0\046\ufee0" +
    "\047\ufee0\050\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055" +
    "\ufee0\056\ufee0\057\ufee0\060\ufee0\061\ufee0\062\ufee0\063\ufee0" +
    "\064\ufee0\065\ufee0\066\ufee0\067\ufee0\070\ufee0\071\ufee0\072" +
    "\ufee0\073\ufee0\001\002\000\156\004\ufed7\005\ufed7\006\ufed7" +
    "\007\ufed7\010\ufed7\011\ufed7\012\ufed7\013\ufed7\014\ufed7\015" +
    "\ufed7\016\ufed7\017\ufed7\020\ufed7\021\ufed7\022\ufed7\023\ufed7" +
    "\024\ufed7\025\ufed7\026\ufed7\027\ufed7\030\ufed7\031\ufed7\033" +
    "\ufed7\034\ufed7\035\ufed7\037\ufed7\040\ufed7\041\ufed7\042\ufed7" +
    "\043\ufed7\044\ufed7\045\ufed7\046\ufed7\047\ufed7\050\ufed7\051" +
    "\ufed7\052\ufed7\053\ufed7\054\ufed7\055\ufed7\056\ufed7\057\ufed7" +
    "\060\ufed7\061\ufed7\062\ufed7\063\ufed7\064\ufed7\065\ufed7\066" +
    "\ufed7\067\ufed7\070\ufed7\071\ufed7\072\ufed7\073\ufed7\001\002" +
    "\000\156\004\ufeb5\005\ufeb5\006\ufeb5\007\ufeb5\010\ufeb5\011" +
    "\ufeb5\012\ufeb5\013\ufeb5\014\ufeb5\015\ufeb5\016\ufeb5\017\ufeb5" +
    "\020\ufeb5\021\ufeb5\022\ufeb5\023\ufeb5\024\ufeb5\025\ufeb5\026" +
    "\ufeb5\027\ufeb5\030\ufeb5\031\ufeb5\033\ufeb5\034\ufeb5\035\ufeb5" +
    "\037\ufeb5\040\ufeb5\041\ufeb5\042\ufeb5\043\ufeb5\044\ufeb5\045" +
    "\ufeb5\046\ufeb5\047\ufeb5\050\ufeb5\051\ufeb5\052\ufeb5\053\ufeb5" +
    "\054\ufeb5\055\ufeb5\056\ufeb5\057\ufeb5\060\ufeb5\061\ufeb5\062" +
    "\ufeb5\063\ufeb5\064\ufeb5\065\ufeb5\066\ufeb5\067\ufeb5\070\ufeb5" +
    "\071\ufeb5\072\ufeb5\073\ufeb5\001\002\000\156\004\ufedc\005" +
    "\ufedc\006\ufedc\007\ufedc\010\ufedc\011\ufedc\012\ufedc\013\ufedc" +
    "\014\ufedc\015\ufedc\016\ufedc\017\ufedc\020\ufedc\021\ufedc\022" +
    "\ufedc\023\ufedc\024\ufedc\025\ufedc\026\ufedc\027\ufedc\030\ufedc" +
    "\031\ufedc\033\ufedc\034\ufedc\035\ufedc\037\ufedc\040\ufedc\041" +
    "\ufedc\042\ufedc\043\ufedc\044\ufedc\045\ufedc\046\ufedc\047\ufedc" +
    "\050\ufedc\051\ufedc\052\ufedc\053\ufedc\054\ufedc\055\ufedc\056" +
    "\ufedc\057\ufedc\060\ufedc\061\ufedc\062\ufedc\063\ufedc\064\ufedc" +
    "\065\ufedc\066\ufedc\067\ufedc\070\ufedc\071\ufedc\072\ufedc\073" +
    "\ufedc\001\002\000\156\004\ufed8\005\ufed8\006\ufed8\007\ufed8" +
    "\010\ufed8\011\ufed8\012\ufed8\013\ufed8\014\ufed8\015\ufed8\016" +
    "\ufed8\017\ufed8\020\ufed8\021\ufed8\022\ufed8\023\ufed8\024\ufed8" +
    "\025\ufed8\026\ufed8\027\ufed8\030\ufed8\031\ufed8\033\ufed8\034" +
    "\ufed8\035\ufed8\037\ufed8\040\ufed8\041\ufed8\042\ufed8\043\ufed8" +
    "\044\ufed8\045\ufed8\046\ufed8\047\ufed8\050\ufed8\051\ufed8\052" +
    "\ufed8\053\ufed8\054\ufed8\055\ufed8\056\ufed8\057\ufed8\060\ufed8" +
    "\061\ufed8\062\ufed8\063\ufed8\064\ufed8\065\ufed8\066\ufed8\067" +
    "\ufed8\070\ufed8\071\ufed8\072\ufed8\073\ufed8\001\002\000\156" +
    "\004\ufed2\005\ufed2\006\ufed2\007\ufed2\010\ufed2\011\ufed2\012" +
    "\ufed2\013\ufed2\014\ufed2\015\ufed2\016\ufed2\017\ufed2\020\ufed2" +
    "\021\ufed2\022\ufed2\023\ufed2\024\ufed2\025\ufed2\026\ufed2\027" +
    "\ufed2\030\ufed2\031\ufed2\033\ufed2\034\ufed2\035\ufed2\037\ufed2" +
    "\040\ufed2\041\ufed2\042\ufed2\043\ufed2\044\ufed2\045\ufed2\046" +
    "\ufed2\047\ufed2\050\ufed2\051\ufed2\052\ufed2\053\ufed2\054\ufed2" +
    "\055\ufed2\056\ufed2\057\ufed2\060\ufed2\061\ufed2\062\ufed2\063" +
    "\ufed2\064\ufed2\065\ufed2\066\ufed2\067\ufed2\070\ufed2\071\ufed2" +
    "\072\ufed2\073\ufed2\001\002\000\156\004\ufed0\005\ufed0\006" +
    "\ufed0\007\ufed0\010\ufed0\011\ufed0\012\ufed0\013\ufed0\014\ufed0" +
    "\015\ufed0\016\ufed0\017\ufed0\020\ufed0\021\ufed0\022\ufed0\023" +
    "\ufed0\024\ufed0\025\ufed0\026\ufed0\027\ufed0\030\ufed0\031\ufed0" +
    "\033\ufed0\034\ufed0\035\ufed0\037\ufed0\040\ufed0\041\ufed0\042" +
    "\ufed0\043\ufed0\044\ufed0\045\ufed0\046\ufed0\047\ufed0\050\ufed0" +
    "\051\ufed0\052\ufed0\053\ufed0\054\ufed0\055\ufed0\056\ufed0\057" +
    "\ufed0\060\ufed0\061\ufed0\062\ufed0\063\ufed0\064\ufed0\065\ufed0" +
    "\066\ufed0\067\ufed0\070\ufed0\071\ufed0\072\ufed0\073\ufed0\001" +
    "\002\000\156\004\ufeb4\005\ufeb4\006\ufeb4\007\ufeb4\010\ufeb4" +
    "\011\ufeb4\012\ufeb4\013\ufeb4\014\ufeb4\015\ufeb4\016\ufeb4\017" +
    "\ufeb4\020\ufeb4\021\ufeb4\022\ufeb4\023\ufeb4\024\ufeb4\025\ufeb4" +
    "\026\ufeb4\027\ufeb4\030\ufeb4\031\ufeb4\033\ufeb4\034\ufeb4\035" +
    "\ufeb4\037\ufeb4\040\ufeb4\041\ufeb4\042\ufeb4\043\ufeb4\044\ufeb4" +
    "\045\ufeb4\046\ufeb4\047\ufeb4\050\ufeb4\051\ufeb4\052\ufeb4\053" +
    "\ufeb4\054\ufeb4\055\ufeb4\056\ufeb4\057\ufeb4\060\ufeb4\061\ufeb4" +
    "\062\ufeb4\063\ufeb4\064\ufeb4\065\ufeb4\066\ufeb4\067\ufeb4\070" +
    "\ufeb4\071\ufeb4\072\ufeb4\073\ufeb4\001\002\000\156\004\ufebc" +
    "\005\ufebc\006\ufebc\007\ufebc\010\ufebc\011\ufebc\012\ufebc\013" +
    "\ufebc\014\ufebc\015\ufebc\016\ufebc\017\ufebc\020\ufebc\021\ufebc" +
    "\022\ufebc\023\ufebc\024\ufebc\025\ufebc\026\ufebc\027\ufebc\030" +
    "\ufebc\031\ufebc\033\ufebc\034\ufebc\035\ufebc\037\ufebc\040\ufebc" +
    "\041\ufebc\042\ufebc\043\ufebc\044\ufebc\045\ufebc\046\ufebc\047" +
    "\ufebc\050\ufebc\051\ufebc\052\ufebc\053\ufebc\054\ufebc\055\ufebc" +
    "\056\ufebc\057\ufebc\060\ufebc\061\ufebc\062\ufebc\063\ufebc\064" +
    "\ufebc\065\ufebc\066\ufebc\067\ufebc\070\ufebc\071\ufebc\072\ufebc" +
    "\073\ufebc\001\002\000\156\004\ufed6\005\ufed6\006\ufed6\007" +
    "\ufed6\010\ufed6\011\ufed6\012\ufed6\013\ufed6\014\ufed6\015\ufed6" +
    "\016\ufed6\017\ufed6\020\ufed6\021\ufed6\022\ufed6\023\ufed6\024" +
    "\ufed6\025\ufed6\026\ufed6\027\ufed6\030\ufed6\031\ufed6\033\ufed6" +
    "\034\ufed6\035\ufed6\037\ufed6\040\ufed6\041\ufed6\042\ufed6\043" +
    "\ufed6\044\ufed6\045\ufed6\046\ufed6\047\ufed6\050\ufed6\051\ufed6" +
    "\052\ufed6\053\ufed6\054\ufed6\055\ufed6\056\ufed6\057\ufed6\060" +
    "\ufed6\061\ufed6\062\ufed6\063\ufed6\064\ufed6\065\ufed6\066\ufed6" +
    "\067\ufed6\070\ufed6\071\ufed6\072\ufed6\073\ufed6\001\002\000" +
    "\156\004\ufec6\005\ufec6\006\ufec6\007\ufec6\010\ufec6\011\ufec6" +
    "\012\ufec6\013\ufec6\014\ufec6\015\ufec6\016\ufec6\017\ufec6\020" +
    "\ufec6\021\ufec6\022\ufec6\023\ufec6\024\ufec6\025\ufec6\026\ufec6" +
    "\027\ufec6\030\ufec6\031\ufec6\033\ufec6\034\ufec6\035\ufec6\037" +
    "\ufec6\040\ufec6\041\ufec6\042\ufec6\043\ufec6\044\ufec6\045\ufec6" +
    "\046\ufec6\047\ufec6\050\ufec6\051\ufec6\052\ufec6\053\ufec6\054" +
    "\ufec6\055\ufec6\056\ufec6\057\ufec6\060\ufec6\061\ufec6\062\ufec6" +
    "\063\ufec6\064\ufec6\065\ufec6\066\ufec6\067\ufec6\070\ufec6\071" +
    "\ufec6\072\ufec6\073\ufec6\001\002\000\156\004\ufeda\005\ufeda" +
    "\006\ufeda\007\ufeda\010\ufeda\011\ufeda\012\ufeda\013\ufeda\014" +
    "\ufeda\015\ufeda\016\ufeda\017\ufeda\020\ufeda\021\ufeda\022\ufeda" +
    "\023\ufeda\024\ufeda\025\ufeda\026\ufeda\027\ufeda\030\ufeda\031" +
    "\ufeda\033\ufeda\034\ufeda\035\ufeda\037\ufeda\040\ufeda\041\ufeda" +
    "\042\ufeda\043\ufeda\044\ufeda\045\ufeda\046\ufeda\047\ufeda\050" +
    "\ufeda\051\ufeda\052\ufeda\053\ufeda\054\ufeda\055\ufeda\056\ufeda" +
    "\057\ufeda\060\ufeda\061\ufeda\062\ufeda\063\ufeda\064\ufeda\065" +
    "\ufeda\066\ufeda\067\ufeda\070\ufeda\071\ufeda\072\ufeda\073\ufeda" +
    "\001\002\000\156\004\ufedd\005\ufedd\006\ufedd\007\ufedd\010" +
    "\ufedd\011\ufedd\012\ufedd\013\ufedd\014\ufedd\015\ufedd\016\ufedd" +
    "\017\ufedd\020\ufedd\021\ufedd\022\ufedd\023\ufedd\024\ufedd\025" +
    "\ufedd\026\ufedd\027\ufedd\030\ufedd\031\ufedd\033\ufedd\034\ufedd" +
    "\035\ufedd\037\ufedd\040\ufedd\041\ufedd\042\ufedd\043\ufedd\044" +
    "\ufedd\045\ufedd\046\ufedd\047\ufedd\050\ufedd\051\ufedd\052\ufedd" +
    "\053\ufedd\054\ufedd\055\ufedd\056\ufedd\057\ufedd\060\ufedd\061" +
    "\ufedd\062\ufedd\063\ufedd\064\ufedd\065\ufedd\066\ufedd\067\ufedd" +
    "\070\ufedd\071\ufedd\072\ufedd\073\ufedd\001\002\000\156\004" +
    "\ufede\005\ufede\006\ufede\007\ufede\010\ufede\011\ufede\012\ufede" +
    "\013\ufede\014\ufede\015\ufede\016\ufede\017\ufede\020\ufede\021" +
    "\ufede\022\ufede\023\ufede\024\ufede\025\ufede\026\ufede\027\ufede" +
    "\030\ufede\031\ufede\033\ufede\034\ufede\035\ufede\037\ufede\040" +
    "\ufede\041\ufede\042\ufede\043\ufede\044\ufede\045\ufede\046\ufede" +
    "\047\ufede\050\ufede\051\ufede\052\ufede\053\ufede\054\ufede\055" +
    "\ufede\056\ufede\057\ufede\060\ufede\061\ufede\062\ufede\063\ufede" +
    "\064\ufede\065\ufede\066\ufede\067\ufede\070\ufede\071\ufede\072" +
    "\ufede\073\ufede\001\002\000\156\004\ufebe\005\ufebe\006\ufebe" +
    "\007\ufebe\010\ufebe\011\ufebe\012\ufebe\013\ufebe\014\ufebe\015" +
    "\ufebe\016\ufebe\017\ufebe\020\ufebe\021\ufebe\022\ufebe\023\ufebe" +
    "\024\ufebe\025\ufebe\026\ufebe\027\ufebe\030\ufebe\031\ufebe\033" +
    "\ufebe\034\ufebe\035\ufebe\037\ufebe\040\ufebe\041\ufebe\042\ufebe" +
    "\043\ufebe\044\ufebe\045\ufebe\046\ufebe\047\ufebe\050\ufebe\051" +
    "\ufebe\052\ufebe\053\ufebe\054\ufebe\055\ufebe\056\ufebe\057\ufebe" +
    "\060\ufebe\061\ufebe\062\ufebe\063\ufebe\064\ufebe\065\ufebe\066" +
    "\ufebe\067\ufebe\070\ufebe\071\ufebe\072\ufebe\073\ufebe\001\002" +
    "\000\156\004\ufecd\005\ufecd\006\ufecd\007\ufecd\010\ufecd\011" +
    "\ufecd\012\ufecd\013\ufecd\014\ufecd\015\ufecd\016\ufecd\017\ufecd" +
    "\020\ufecd\021\ufecd\022\ufecd\023\ufecd\024\ufecd\025\ufecd\026" +
    "\ufecd\027\ufecd\030\ufecd\031\ufecd\033\ufecd\034\ufecd\035\ufecd" +
    "\037\ufecd\040\ufecd\041\ufecd\042\ufecd\043\ufecd\044\ufecd\045" +
    "\ufecd\046\ufecd\047\ufecd\050\ufecd\051\ufecd\052\ufecd\053\ufecd" +
    "\054\ufecd\055\ufecd\056\ufecd\057\ufecd\060\ufecd\061\ufecd\062" +
    "\ufecd\063\ufecd\064\ufecd\065\ufecd\066\ufecd\067\ufecd\070\ufecd" +
    "\071\ufecd\072\ufecd\073\ufecd\001\002\000\156\004\ufeba\005" +
    "\ufeba\006\ufeba\007\ufeba\010\ufeba\011\ufeba\012\ufeba\013\ufeba" +
    "\014\ufeba\015\ufeba\016\ufeba\017\ufeba\020\ufeba\021\ufeba\022" +
    "\ufeba\023\ufeba\024\ufeba\025\ufeba\026\ufeba\027\ufeba\030\ufeba" +
    "\031\ufeba\033\ufeba\034\ufeba\035\ufeba\037\ufeba\040\ufeba\041" +
    "\ufeba\042\ufeba\043\ufeba\044\ufeba\045\ufeba\046\ufeba\047\ufeba" +
    "\050\ufeba\051\ufeba\052\ufeba\053\ufeba\054\ufeba\055\ufeba\056" +
    "\ufeba\057\ufeba\060\ufeba\061\ufeba\062\ufeba\063\ufeba\064\ufeba" +
    "\065\ufeba\066\ufeba\067\ufeba\070\ufeba\071\ufeba\072\ufeba\073" +
    "\ufeba\001\002\000\004\013\u0277\001\002\000\020\020\035" +
    "\021\047\022\037\024\u026c\045\u026e\066\u026d\067\u0268\001" +
    "\002\000\010\004\uff27\013\uff27\014\uffc7\001\002\000\006" +
    "\004\uff25\013\uff25\001\002\000\006\004\u0267\013\uff2e\001" +
    "\002\000\006\004\uff23\013\uff23\001\002\000\156\004\ufeb3" +
    "\005\ufeb3\006\ufeb3\007\ufeb3\010\ufeb3\011\ufeb3\012\ufeb3\013" +
    "\ufeb3\014\ufeb3\015\ufeb3\016\ufeb3\017\ufeb3\020\ufeb3\021\ufeb3" +
    "\022\ufeb3\023\ufeb3\024\ufeb3\025\ufeb3\026\ufeb3\027\ufeb3\030" +
    "\ufeb3\031\ufeb3\033\ufeb3\034\ufeb3\035\ufeb3\037\ufeb3\040\ufeb3" +
    "\041\ufeb3\042\ufeb3\043\ufeb3\044\ufeb3\045\ufeb3\046\ufeb3\047" +
    "\ufeb3\050\ufeb3\051\ufeb3\052\ufeb3\053\ufeb3\054\ufeb3\055\ufeb3" +
    "\056\ufeb3\057\ufeb3\060\ufeb3\061\ufeb3\062\ufeb3\063\ufeb3\064" +
    "\ufeb3\065\ufeb3\066\ufeb3\067\ufeb3\070\ufeb3\071\ufeb3\072\ufeb3" +
    "\073\ufeb3\001\002\000\010\004\uff22\005\u0271\013\uff22\001" +
    "\002\000\004\067\u0270\001\002\000\006\004\uff24\013\uff24" +
    "\001\002\000\010\004\uff26\013\uff26\014\uffc7\001\002\000" +
    "\004\066\u0272\001\002\000\006\004\uff21\013\uff21\001\002" +
    "\000\156\004\u023d\005\u024e\006\u0252\007\u0239\010\u023c\011" +
    "\u023b\012\u0255\013\u0254\014\u0262\015\u0261\016\u0232\017\u0260" +
    "\020\u0233\021\u0259\022\u0256\023\u025e\024\u0274\025\u0258\026" +
    "\u0249\027\u0247\030\u024d\031\u025a\033\u025b\034\u0241\035\u0246" +
    "\037\u0264\040\u0237\041\u024b\042\u0248\043\u023e\044\u025f\045" +
    "\u0236\046\u0250\047\u0242\050\u024f\051\u023f\052\u0238\053\u024c" +
    "\054\u0263\055\u023a\056\u025d\057\u0234\060\u0265\061\264\062" +
    "\235\063\261\064\u0243\065\u0245\066\u0244\067\u0251\070\u025c" +
    "\071\u0240\072\u024a\073\u0253\001\002\000\006\004\u0267\013" +
    "\uff2e\001\002\000\004\013\uff30\001\002\000\004\013\uff2f" +
    "\001\002\000\004\006\u0278\001\002\000\060\011\uff1a\016" +
    "\uff1a\020\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a\036\uff1a" +
    "\047\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056" +
    "\uff1a\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074\uff1a" +
    "\075\142\076\uff1a\001\002\000\056\011\uff33\016\uff33\020" +
    "\uff33\021\uff33\022\uff33\034\uff33\035\uff33\036\uff33\047\uff33" +
    "\051\uff33\052\uff33\053\uff33\054\uff33\055\uff33\056\uff33\057" +
    "\uff33\060\uff33\064\uff33\065\uff33\067\uff33\074\uff33\076\uff33" +
    "\001\002\000\006\004\u0267\013\uff2e\001\002\000\004\013" +
    "\u027c\001\002\000\004\006\u027d\001\002\000\060\011\uff1a" +
    "\016\uff1a\020\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a\036" +
    "\uff1a\047\uff1a\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a" +
    "\056\uff1a\057\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074" +
    "\uff1a\075\142\076\uff1a\001\002\000\056\011\uff31\016\uff31" +
    "\020\uff31\021\uff31\022\uff31\034\uff31\035\uff31\036\uff31\047" +
    "\uff31\051\uff31\052\uff31\053\uff31\054\uff31\055\uff31\056\uff31" +
    "\057\uff31\060\uff31\064\uff31\065\uff31\067\uff31\074\uff31\076" +
    "\uff31\001\002\000\004\067\u0280\001\002\000\004\012\u0281" +
    "\001\002\000\024\012\uffa4\013\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\025\uffa4\027\uffa4\066\uffa4\067\uffa4\001\002\000\024" +
    "\012\uffa0\013\uff9e\020\uffa0\021\uffa0\022\uffa0\025\uffa0\027" +
    "\uffa0\066\uffa0\067\uffa0\001\002\000\004\013\u0284\001\002" +
    "\000\004\006\u0285\001\002\000\060\011\uff1a\016\uff1a\020" +
    "\uff1a\021\uff1a\022\uff1a\034\uff1a\035\uff1a\036\uff1a\047\uff1a" +
    "\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056\uff1a\057" +
    "\uff1a\060\uff1a\064\uff1a\065\uff1a\067\uff1a\074\uff1a\075\142" +
    "\076\uff1a\001\002\000\056\011\uffa3\016\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\034\uffa3\035\uffa3\036\uffa3\047\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060" +
    "\uffa3\064\uffa3\065\uffa3\067\uffa3\074\uffa3\076\uffa3\001\002" +
    "\000\004\067\uffef\001\002\000\004\067\u0289\001\002\000" +
    "\004\043\u028a\001\002\000\022\012\046\020\035\021\047" +
    "\022\037\025\050\027\042\066\045\067\036\001\002\000" +
    "\016\006\u028c\026\064\027\067\030\063\031\071\032\065" +
    "\001\002\000\022\022\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\067\uffee\075\uffee\001\002\000\022\022\uff1a" +
    "\033\uff1a\034\uff1a\035\uff1a\036\uff1a\037\uff1a\067\uff1a\075" +
    "\142\001\002\000\020\022\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\067\uffed\001\002\000\004\067\u0290\001" +
    "\002\000\004\067\u0160\001\002\000\022\012\046\020\035" +
    "\021\047\022\037\025\050\027\042\066\045\067\036\001" +
    "\002\000\022\012\uffea\020\uffea\021\uffea\022\uffea\025\uffea" +
    "\027\uffea\066\uffea\067\uffea\001\002\000\006\024\u0295\042" +
    "\u0294\001\002\000\004\067\u02a6\001\002\000\010\020\u0297" +
    "\021\u0298\022\u0296\001\002\000\004\005\u029f\001\002\000" +
    "\004\024\u029c\001\002\000\004\024\u0299\001\002\000\024" +
    "\022\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\067" +
    "\ufffd\071\ufffd\075\ufffd\001\002\000\024\022\uff1a\033\uff1a" +
    "\034\uff1a\035\uff1a\036\uff1a\037\uff1a\067\uff1a\071\uff1a\075" +
    "\142\001\002\000\022\022\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\067\ufffc\071\ufffc\001\002\000\024\022" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\067\uffff" +
    "\071\uffff\075\uffff\001\002\000\024\022\uff1a\033\uff1a\034" +
    "\uff1a\035\uff1a\036\uff1a\037\uff1a\067\uff1a\071\uff1a\075\142" +
    "\001\002\000\022\022\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\067\ufffe\071\ufffe\001\002\000\006\030\u02a0" +
    "\067\u02a2\001\002\000\004\024\ufff6\001\002\000\004\024" +
    "\u02a3\001\002\000\004\024\ufff5\001\002\000\024\022\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\067\ufffb\071" +
    "\ufffb\075\ufffb\001\002\000\024\022\uff1a\033\uff1a\034\uff1a" +
    "\035\uff1a\036\uff1a\037\uff1a\067\uff1a\071\uff1a\075\142\001" +
    "\002\000\022\022\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\067\ufffa\071\ufffa\001\002\000\006\005\u02a7\041" +
    "\u02a8\001\002\000\004\067\u02aa\001\002\000\024\022\uff1a" +
    "\033\uff1a\034\uff1a\035\uff1a\036\uff1a\037\uff1a\067\uff1a\071" +
    "\uff1a\075\142\001\002\000\022\022\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\037\ufff9\067\ufff9\071\ufff9\001\002\000" +
    "\004\041\u02ab\001\002\000\024\022\uff1a\033\uff1a\034\uff1a" +
    "\035\uff1a\036\uff1a\037\uff1a\067\uff1a\071\uff1a\075\142\001" +
    "\002\000\022\022\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\067\ufff8\071\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02aa\000\006\002\004\003\003\001\001\000\004\004" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\013\006\024\007\022\011\014\014" +
    "\017\052\025\060\011\001\001\000\004\117\u0180\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\u0286\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\065\030\066\027\113\031\001\001\000" +
    "\002\001\001\000\004\115\150\001\001\000\004\062\032" +
    "\001\001\000\004\114\133\001\001\000\012\055\037\056" +
    "\042\057\043\061\040\001\001\000\002\001\001\000\004" +
    "\120\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\057\107\061\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\055" +
    "\101\056\042\057\043\061\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\123\055\001\001" +
    "\000\006\067\057\131\056\001\001\000\012\055\061\056" +
    "\042\057\043\061\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\065\001\001\000\012\055\100\056" +
    "\042\057\043\061\040\001\001\000\012\055\077\056\042" +
    "\057\043\061\040\001\001\000\012\055\076\056\042\057" +
    "\043\061\040\001\001\000\002\001\001\000\012\055\075" +
    "\056\042\057\043\061\040\001\001\000\004\132\072\001" +
    "\001\000\012\055\071\056\042\057\043\061\040\001\001" +
    "\000\002\001\001\000\012\055\073\056\042\057\043\061" +
    "\040\001\001\000\004\070\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\120\111\001\001\000\006" +
    "\065\112\066\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\125\122\001" +
    "\001\000\006\067\123\131\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\124\130\001\001\000\006\067\131\131\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\140" +
    "\044\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\062\144\065\145" +
    "\066\027\001\001\000\004\116\146\001\001\000\002\001" +
    "\001\000\004\041\147\001\001\000\002\001\001\000\004" +
    "\041\151\001\001\000\002\001\001\000\006\043\140\044" +
    "\153\001\001\000\002\001\001\000\012\055\155\056\042" +
    "\057\043\061\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\140" +
    "\044\162\001\001\000\004\121\163\001\001\000\002\001" +
    "\001\000\006\043\140\044\165\001\001\000\004\012\166" +
    "\001\001\000\046\006\215\007\172\013\200\014\204\017" +
    "\205\022\175\023\223\024\177\025\217\027\220\031\171" +
    "\033\213\034\214\042\212\045\211\052\025\060\216\064" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\122" +
    "\u021f\001\001\000\002\001\001\000\004\161\u01fd\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u019c\001\001\000\004\047\u0198\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\u0180\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\140\044\u013b\001\001\000\004" +
    "\151\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\232\001\001\000\004\053\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\167\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\325\063\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\111\001\001\000\002\001\001\000\006\043\140\044\332" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\152\347\001\001\000\014\073\362\074" +
    "\355\075\363\076\351\077\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\065\u011b\066\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\075\u0118\076\u0119\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u010b\001\001\000\002" +
    "\001\001\000\012\073\377\074\355\075\363\076\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\142\374\001\001\000\006\067\375\131\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\073\u010a\074\355\075\363\076\351" +
    "\001\001\000\012\073\u0109\074\355\075\363\076\351\001" +
    "\001\000\012\073\u0108\074\355\075\363\076\351\001\001" +
    "\000\012\073\u0107\074\355\075\363\076\351\001\001\000" +
    "\012\073\u0106\074\355\075\363\076\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\073\u0114\074\355\075\363" +
    "\076\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\065\u011b\066" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\u0123\001\001\000\002" +
    "\001\001\000\004\153\u0125\001\001\000\006\043\140\044" +
    "\u0126\001\001\000\002\001\001\000\006\043\140\044\u0128" +
    "\001\001\000\004\012\u0129\001\001\000\046\006\215\007" +
    "\172\013\200\014\204\017\205\022\175\023\223\024\177" +
    "\025\217\027\220\031\171\033\213\034\214\042\212\045" +
    "\211\052\025\060\216\064\210\001\001\000\004\154\u012b" +
    "\001\001\000\006\043\140\044\u012c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\144\u0132\001\001\000\006\067" +
    "\u0133\131\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\143\u0138\001" +
    "\001\000\006\067\u0139\131\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\157\u013c\001\001\000\002\001" +
    "\001\000\006\043\140\044\u013e\001\001\000\004\012\u013f" +
    "\001\001\000\046\006\215\007\172\013\200\014\204\017" +
    "\205\022\175\023\223\024\177\025\217\027\220\031\171" +
    "\033\213\034\214\042\212\045\211\052\025\060\216\064" +
    "\210\001\001\000\006\043\140\044\u0141\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\071\u0146\073\362\074" +
    "\355\075\363\076\351\077\u0144\001\001\000\002\001\001" +
    "\000\014\073\362\074\355\075\363\076\351\077\u014f\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\071\u014b" +
    "\073\362\074\355\075\363\076\351\077\u0144\001\001\000" +
    "\016\071\u014a\073\362\074\355\075\363\076\351\077\u0144" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\160" +
    "\u014d\001\001\000\006\043\140\044\u014e\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\073\u0152\074\355\075" +
    "\363\076\351\077\u0151\001\001\000\002\001\001\000\004" +
    "\020\u010b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\126\u0157\001\001\000\006\067\u0158" +
    "\131\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\140\044\u015b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\133" +
    "\u0161\135\u0160\001\001\000\004\016\u0175\001\001\000\004" +
    "\102\u0162\001\001\000\004\134\u016a\001\001\000\006\100" +
    "\u0166\101\u0165\001\001\000\002\001\001\000\012\073\u0168" +
    "\074\355\075\363\076\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u016c\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\140\044\u016e\001\001\000\002\001\001\000\006" +
    "\102\u0170\137\u0171\001\001\000\004\136\u0173\001\001\000" +
    "\004\016\u0172\001\001\000\002\001\001\000\004\016\u0174" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\140\044\u0177\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\130\u017a\001\001\000\006\067\u017b\131\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\140" +
    "\044\u017e\001\001\000\002\001\001\000\004\110\u0182\001" +
    "\001\000\006\065\u0181\066\027\001\001\000\002\001\001" +
    "\000\012\055\u0189\056\042\057\043\061\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\172\u0187\001\001\000\006\043\140\044\u0188\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\111\u018b\001\001" +
    "\000\006\043\140\044\u018c\001\001\000\002\001\001\000" +
    "\012\055\u018e\056\042\057\043\061\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\173\u0193\001\001\000\006\043\140\044\u0194" +
    "\001\001\000\002\001\001\000\004\112\u0196\001\001\000" +
    "\006\043\140\044\u0197\001\001\000\002\001\001\000\004" +
    "\043\u0199\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\u01c2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\140\044\u01d2\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\140\044\u01d6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\140\044\u01da\001\001\000\002\001\001\000\016\071\u01dc" +
    "\073\362\074\355\075\363\076\351\077\u0144\001\001\000" +
    "\002\001\001\000\006\043\140\044\u01de\001\001\000\004" +
    "\140\u01df\001\001\000\002\001\001\000\006\043\140\044" +
    "\u01e1\001\001\000\004\012\u01e2\001\001\000\046\006\215" +
    "\007\172\013\200\014\204\017\205\022\175\023\223\024" +
    "\177\025\217\027\220\031\171\033\213\034\214\042\212" +
    "\045\211\052\025\060\216\064\210\001\001\000\004\141" +
    "\u01e4\001\001\000\006\043\140\044\u01e5\001\001\000\004" +
    "\021\u01e6\001\001\000\002\001\001\000\006\043\140\044" +
    "\u01e9\001\001\000\002\001\001\000\004\147\u01ea\001\001" +
    "\000\002\001\001\000\006\043\140\044\u01ec\001\001\000" +
    "\004\012\u01ed\001\001\000\046\006\215\007\172\013\200" +
    "\014\204\017\205\022\175\023\223\024\177\025\217\027" +
    "\220\031\171\033\213\034\214\042\212\045\211\052\025" +
    "\060\216\064\210\001\001\000\004\150\u01ef\001\001\000" +
    "\006\043\140\044\u01f0\001\001\000\002\001\001\000\016" +
    "\071\u01f2\073\362\074\355\075\363\076\351\077\u0144\001" +
    "\001\000\002\001\001\000\006\043\140\044\u01f4\001\001" +
    "\000\004\145\u01f5\001\001\000\002\001\001\000\006\043" +
    "\140\044\u01f7\001\001\000\004\012\u01f8\001\001\000\046" +
    "\006\215\007\172\013\200\014\204\017\205\022\175\023" +
    "\223\024\177\025\217\027\220\031\171\033\213\034\214" +
    "\042\212\045\211\052\025\060\216\064\210\001\001\000" +
    "\004\146\u01fa\001\001\000\006\043\140\044\u01fb\001\001" +
    "\000\004\021\u01fc\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\061\325\063\u01ff\001\001\000\002\001\001" +
    "\000\006\043\140\044\u0201\001\001\000\004\162\u0202\001" +
    "\001\000\002\001\001\000\006\043\140\044\u0204\001\001" +
    "\000\004\026\u0205\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u0208\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\164\u020e\001\001\000\004\043\u020f\001\001" +
    "\000\004\012\u0210\001\001\000\050\006\215\007\172\010" +
    "\u0212\013\200\014\204\017\205\022\175\023\223\024\177" +
    "\025\217\027\220\031\171\033\213\034\214\042\212\045" +
    "\211\052\025\060\216\064\210\001\001\000\002\001\001" +
    "\000\004\165\u0213\001\001\000\004\026\u0214\001\001\000" +
    "\002\001\001\000\006\043\140\044\u0216\001\001\000\002" +
    "\001\001\000\004\166\u0218\001\001\000\004\043\u0219\001" +
    "\001\000\004\012\u021a\001\001\000\050\006\215\007\172" +
    "\010\u021b\013\200\014\204\017\205\022\175\023\223\024" +
    "\177\025\217\027\220\031\171\033\213\034\214\042\212" +
    "\045\211\052\025\060\216\064\210\001\001\000\002\001" +
    "\001\000\004\163\u021d\001\001\000\006\043\140\044\u021e" +
    "\001\001\000\002\001\001\000\006\043\140\044\u0220\001" +
    "\001\000\002\001\001\000\016\071\u0222\073\362\074\355" +
    "\075\363\076\351\077\u0144\001\001\000\002\001\001\000" +
    "\006\043\140\044\u0224\001\001\000\004\155\u0225\001\001" +
    "\000\002\001\001\000\006\043\140\044\u0227\001\001\000" +
    "\004\012\u0228\001\001\000\046\006\215\007\172\013\200" +
    "\014\204\017\205\022\175\023\223\024\177\025\217\027" +
    "\220\031\171\033\213\034\214\042\212\045\211\052\025" +
    "\060\216\064\210\001\001\000\004\156\u022a\001\001\000" +
    "\006\043\140\044\u022b\001\001\000\002\001\001\000\006" +
    "\170\u022e\171\u022d\001\001\000\010\035\u0279\057\u026a\060" +
    "\u0268\001\001\000\002\001\001\000\004\050\u0230\001\001" +
    "\000\004\053\u0256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u0265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\035\u0269\057\u026a\060\u0268\001\001\000\004\117\u0180" +
    "\001\001\000\002\001\001\000\004\032\u0275\001\001\000" +
    "\002\001\001\000\004\050\u0272\001\001\000\002\001\001" +
    "\000\004\060\u026e\001\001\000\002\001\001\000\004\117" +
    "\u0180\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\u0256\001\001\000\004\032\u0274\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\140" +
    "\044\u0278\001\001\000\002\001\001\000\004\032\u027a\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\140" +
    "\044\u027d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\127\u0281\001\001\000\006\067\u0282" +
    "\131\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\140\044\u0285\001\001\000\002\001\001\000\004" +
    "\106\u0287\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\055\u028a\056\042\057\043\061\040\001\001\000\002" +
    "\001\001\000\004\107\u028c\001\001\000\006\043\140\044" +
    "\u028d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\055\u018e\056\042\057\043\061\040\001" +
    "\001\000\004\110\u0182\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\104\u0299\001\001\000\006" +
    "\043\140\044\u029a\001\001\000\002\001\001\000\004\103" +
    "\u029c\001\001\000\006\043\140\044\u029d\001\001\000\002" +
    "\001\001\000\004\051\u02a0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\105\u02a3\001\001" +
    "\000\006\043\140\044\u02a4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\140\044\u02a8" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\140\044\u02ab\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public int jerarquia = 0;
    public String tipoActual = "";
    public OperacionesC op = new OperacionesC();
    public VerifC verif = new VerifC();
    public TablaSimbolos tabla;
    public static Integer itMetodo = null;
    public String auxTipo = "";
    /*variables exclusiva para la comprobacion de parametros, Produccion -> METODO*/
    public boolean metodoCorrecto = false;
    public Clase claseUsar = null;
    public String len = "";
    public int it = 0;
    public String idClase = "";

    public boolean auxFor = false;

    public SintaxC(AnalizadorLexico4 lexer, TablaSimbolos tabla){
        super(lexer);
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+"   "+mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis linea: "+s.left+" columna: "+s.right,"");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxC$actions {
  private final SintaxC parser;

  /** Constructor */
  CUP$SintaxC$actions(SintaxC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxC$do_action(
    int                        CUP$SintaxC$act_num,
    java_cup.runtime.lr_parser CUP$SintaxC$parser,
    java.util.Stack            CUP$SintaxC$stack,
    int                        CUP$SintaxC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxC$result;

      /* select the action based on the action number */
      switch (CUP$SintaxC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // TEXTO_COM ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // TEXTO_COM ::= TEXTO_COM resto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // TEXTO_COM ::= TEXTO_COM enter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 RESULT = a + "\n";  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // TEXTO_COM ::= TEXTO_COM MODULOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // TEXTO_COM ::= TEXTO_COM id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // TEXTO_COM ::= TEXTO_COM numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // TEXTO_COM ::= TEXTO_COM getch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // TEXTO_COM ::= TEXTO_COM clscr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // TEXTO_COM ::= TEXTO_COM scanf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // TEXTO_COM ::= TEXTO_COM printf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // TEXTO_COM ::= TEXTO_COM condDo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // TEXTO_COM ::= TEXTO_COM condWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // TEXTO_COM ::= TEXTO_COM condFor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // TEXTO_COM ::= TEXTO_COM condDef 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // TEXTO_COM ::= TEXTO_COM condCase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // TEXTO_COM ::= TEXTO_COM condSwitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // TEXTO_COM ::= TEXTO_COM condElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // TEXTO_COM ::= TEXTO_COM condIf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // TEXTO_COM ::= TEXTO_COM pleca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // TEXTO_COM ::= TEXTO_COM ampersand 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // TEXTO_COM ::= TEXTO_COM admiracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // TEXTO_COM ::= TEXTO_COM igual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // TEXTO_COM ::= TEXTO_COM menor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // TEXTO_COM ::= TEXTO_COM mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // TEXTO_COM ::= TEXTO_COM main 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // TEXTO_COM ::= TEXTO_COM falso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // TEXTO_COM ::= TEXTO_COM verdadero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // TEXTO_COM ::= TEXTO_COM tipoConst 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // TEXTO_COM ::= TEXTO_COM tipoChar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // TEXTO_COM ::= TEXTO_COM tipoInteger 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // TEXTO_COM ::= TEXTO_COM tipoVoid 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // TEXTO_COM ::= TEXTO_COM numeral 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TEXTO_COM ::= TEXTO_COM div 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TEXTO_COM ::= TEXTO_COM por 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // TEXTO_COM ::= TEXTO_COM menos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TEXTO_COM ::= TEXTO_COM mas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TEXTO_COM ::= TEXTO_COM principal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // TEXTO_COM ::= TEXTO_COM java 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // TEXTO_COM ::= TEXTO_COM python 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // TEXTO_COM ::= TEXTO_COM visual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // TEXTO_COM ::= TEXTO_COM condInclude 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // TEXTO_COM ::= TEXTO_COM condBreak 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // TEXTO_COM ::= TEXTO_COM comillaSimple 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // TEXTO_COM ::= TEXTO_COM agrupacion_b 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // TEXTO_COM ::= TEXTO_COM agrupacion_a 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // TEXTO_COM ::= TEXTO_COM parentesis_b 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // TEXTO_COM ::= TEXTO_COM parentesis_a 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // TEXTO_COM ::= TEXTO_COM llave_b 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // TEXTO_COM ::= TEXTO_COM llave_a 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TEXTO_COM ::= TEXTO_COM dosPuntos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TEXTO_COM ::= TEXTO_COM puntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TEXTO_COM ::= TEXTO_COM punto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TEXTO_COM ::= TEXTO_COM coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TEXTO2 ::= 
            {
              String RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TEXTO2 ::= TEXTO2 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TEXTO2 ::= TEXTO2 MODULOS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TEXTO2 ::= TEXTO2 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TEXTO2 ::= TEXTO2 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TEXTO2 ::= TEXTO2 getch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TEXTO2 ::= TEXTO2 clscr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TEXTO2 ::= TEXTO2 scanf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TEXTO2 ::= TEXTO2 printf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TEXTO2 ::= TEXTO2 condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TEXTO2 ::= TEXTO2 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // TEXTO2 ::= TEXTO2 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // TEXTO2 ::= TEXTO2 condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // TEXTO2 ::= TEXTO2 condCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // TEXTO2 ::= TEXTO2 condSwitch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // TEXTO2 ::= TEXTO2 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // TEXTO2 ::= TEXTO2 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TEXTO2 ::= TEXTO2 pleca 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TEXTO2 ::= TEXTO2 ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TEXTO2 ::= TEXTO2 admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TEXTO2 ::= TEXTO2 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TEXTO2 ::= TEXTO2 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TEXTO2 ::= TEXTO2 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TEXTO2 ::= TEXTO2 main 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TEXTO2 ::= TEXTO2 falso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TEXTO2 ::= TEXTO2 verdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TEXTO2 ::= TEXTO2 tipoConst 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TEXTO2 ::= TEXTO2 tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TEXTO2 ::= TEXTO2 tipoInteger 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TEXTO2 ::= TEXTO2 tipoVoid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // TEXTO2 ::= TEXTO2 numeral 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TEXTO2 ::= TEXTO2 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TEXTO2 ::= TEXTO2 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // TEXTO2 ::= TEXTO2 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // TEXTO2 ::= TEXTO2 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // TEXTO2 ::= TEXTO2 principal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TEXTO2 ::= TEXTO2 java 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TEXTO2 ::= TEXTO2 python 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // TEXTO2 ::= TEXTO2 visual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TEXTO2 ::= TEXTO2 condInclude 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TEXTO2 ::= TEXTO2 condBreak 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TEXTO2 ::= TEXTO2 comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TEXTO2 ::= TEXTO2 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TEXTO2 ::= TEXTO2 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TEXTO2 ::= TEXTO2 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // TEXTO2 ::= TEXTO2 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // TEXTO2 ::= TEXTO2 llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // TEXTO2 ::= TEXTO2 llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // TEXTO2 ::= TEXTO2 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // TEXTO2 ::= TEXTO2 puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // TEXTO2 ::= TEXTO2 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // TEXTO2 ::= TEXTO2 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // TEXTO ::= 
            {
              String RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // TEXTO ::= TEXTO resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // TEXTO ::= TEXTO id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // TEXTO ::= TEXTO numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // TEXTO ::= TEXTO getch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // TEXTO ::= TEXTO clscr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // TEXTO ::= TEXTO scanf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // TEXTO ::= TEXTO printf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // TEXTO ::= TEXTO condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // TEXTO ::= TEXTO condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // TEXTO ::= TEXTO condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // TEXTO ::= TEXTO condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // TEXTO ::= TEXTO condCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // TEXTO ::= TEXTO condSwitch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // TEXTO ::= TEXTO condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // TEXTO ::= TEXTO condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // TEXTO ::= TEXTO pleca 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // TEXTO ::= TEXTO ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // TEXTO ::= TEXTO admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // TEXTO ::= TEXTO igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TEXTO ::= TEXTO menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // TEXTO ::= TEXTO mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // TEXTO ::= TEXTO main 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // TEXTO ::= TEXTO falso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // TEXTO ::= TEXTO verdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // TEXTO ::= TEXTO tipoConst 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // TEXTO ::= TEXTO tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TEXTO ::= TEXTO tipoInteger 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // TEXTO ::= TEXTO tipoVoid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // TEXTO ::= TEXTO numeral 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // TEXTO ::= TEXTO div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // TEXTO ::= TEXTO por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // TEXTO ::= TEXTO menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // TEXTO ::= TEXTO mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // TEXTO ::= TEXTO principal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // TEXTO ::= TEXTO java 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // TEXTO ::= TEXTO python 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TEXTO ::= TEXTO visual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TEXTO ::= TEXTO condInclude 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TEXTO ::= TEXTO condBreak 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TEXTO ::= TEXTO comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TEXTO ::= TEXTO agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TEXTO ::= TEXTO agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TEXTO ::= TEXTO parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TEXTO ::= TEXTO parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TEXTO ::= TEXTO llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TEXTO ::= TEXTO llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TEXTO ::= TEXTO dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TEXTO ::= TEXTO puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TEXTO ::= TEXTO punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TEXTO ::= TEXTO coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // ENTER2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER2",34, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // ENTER2 ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER2",34, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // ENTER2 ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER2",34, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // ENTER ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER",33, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ENTER ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER",33, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // COMENTARIO_B ::= comentario_b TEXTO_COM comentario_c ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",35, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // COMENTARIO_A ::= comentario_a TEXTO ENTER 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("COMENTARIO_A",32, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // VAR_TEXTO ::= numero punto numero 
            {
              Object RESULT =null;
		 RESULT=true; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // VAR_TEXTO ::= numero 
            {
              Object RESULT =null;
		 RESULT=true; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // VAR_TEXTO ::= METODOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // VAR_TEXTO ::= ampersand VECTOR 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // VAR_TEXTO ::= VECTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // VAR_TEXTO ::= ampersand id 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // VAR_TEXTO ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",27, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // GETCH ::= getch parentesis_a parentesis_b puntoComa ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("GETCH",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // GETCH ::= VECTOR igual getch parentesis_a parentesis_b puntoComa NT$56 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("GETCH",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // NT$56 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
 if(a){ if(!parser.tipoActual.equals("Integer") || !parser.tipoActual.equals("Char")){ System.out.println("arreglo "+a.toString()+" con valor incorrecto para asignacion de getch");  } } else { System.out.println("Variable no existe para poder asignar getch"); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$56",121, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // GETCH ::= id igual getch parentesis_a parentesis_b puntoComa NT$55 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("GETCH",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // NT$55 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
 parser.tipoActual=parser.verif.devolverTipoVar(parser.tabla.getObC(), parser.jerarquia, a.toString());  if(parser.tipoActual.equals("Integer") || parser.tipoActual.equals("Char")){} else { System.out.println("var "+a.toString()+" con valor incorrecto para asignacion de getch"); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$55",120, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CLSCR ::= clscr parentesis_a parentesis_b puntoComa ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLSCR",25, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // RESTO_MENSAJE ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",24, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // RESTO_MENSAJE ::= coma VAR_TEXTO RESTO_MENSAJE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",24, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // RESTO_MENSAJE ::= coma comilla TEXTO2 comilla RESTO_MENSAJE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",24, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // MENSAJE ::= printf parentesis_a NT$54 VAR_TEXTO RESTO_MENSAJE parentesis_b puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MENSAJE",23, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NT$54 ::= 
            {
              Object RESULT =null;
 parser.tipoActual="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$54",119, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // MENSAJE ::= printf parentesis_a NT$53 comilla TEXTO2 comilla RESTO_MENSAJE parentesis_b puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MENSAJE",23, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$53 ::= 
            {
              Object RESULT =null;
 parser.tipoActual="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$53",118, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // VAR_LECTURA ::= VECTOR_OP 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_LECTURA",49, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // VAR_LECTURA ::= id 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual);   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_LECTURA",49, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // MODULOS ::= scanfChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT="Char"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MODULOS",41, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // MODULOS ::= scanfFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MODULOS",41, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // MODULOS ::= scanfInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT="Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MODULOS",41, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // LECTURA_DATOS ::= scanf parentesis_a comilla TEXTO MODULOS NT$52 comilla coma ampersand VAR_LECTURA parentesis_b puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$52 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.tipoActual=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$52",117, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // VAR_CASE ::= comillaSimple id comillaSimple 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",30, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // VAR_CASE ::= numero 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",30, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // BREAK ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BREAK",6, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // BREAK ::= condBreak puntoComa ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BREAK",6, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CASES",20, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CASES ::= condDef dosPuntos NT$51 ENTER CUERPO_MAIN BREAK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		 parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CASES",20, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NT$51 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$51",116, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CASES ::= condCase VAR_CASE dosPuntos NT$49 ENTER CUERPO_MAIN BREAK NT$50 CASES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CASES",20, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$50 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
 parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$50",115, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$49 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$49",114, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SWITCH ::= condSwitch NT$46 parentesis_a VAR_LECTURA parentesis_b ENTER2 NT$47 llave_a ENTER2 CASES llave_b NT$48 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("SWITCH",19, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$48 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
 parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$48",113, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$47 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$47",112, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$46 ::= 
            {
              Object RESULT =null;
 parser.tipoActual="Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$46",111, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // DO_WHILE ::= condDo ENTER2 NT$44 llave_a ENTER2 CUERPO_MAIN llave_b ENTER2 condWhile parentesis_a EXT parentesis_b puntoComa NT$45 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DO_WHILE",18, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-14)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$45 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;
 parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$45",110, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$44 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$44",109, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // WHILE ::= condWhile parentesis_a EXT parentesis_b ENTER2 NT$42 llave_a ENTER2 CUERPO_MAIN llave_b NT$43 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$43 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
 parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$43",108, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$42 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$42",107, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // VAR_FOR ::= id 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, "Integer");   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_FOR",56, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // VAR_FOR ::= numero 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.verif.verificarNumero(parser.tabla.getObC(), "Integer", "Integer", a.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_FOR",56, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPO_VAR_FOR ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",42, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TIPO_VAR_FOR ::= tipoChar 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",42, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TIPO_VAR_FOR ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",42, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TIPO_VAR_FOR ::= tipoInteger 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",42, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // FOR ::= condFor NT$38 parentesis_a TIPO_VAR_FOR id igual VAR_FOR puntoComa NT$39 BOOLEAN puntoComa id igual id mas VAR_FOR parentesis_b NT$40 ENTER2 llave_a ENTER2 CUERPO_MAIN llave_b NT$41 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-21)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-21)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-21)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-20)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-20)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-20)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).right;
		Boolean h = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-15)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-15)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-15)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-24)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-19)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-19)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-19)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-16)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-16)).right;
		Boolean h = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-16)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
 parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$41",106, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$40 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).right;
		Boolean h = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.verif.verificarFor(parser.tabla.getObC(), parser.jerarquia, parser.auxFor, c, d.toString(), e.toString(), parser.tipoActual, f, a, b.toString());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$40",105, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$39 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean h = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 if(h){ parser.auxFor= parser.verif.verifVarFor(parser.tabla.getObC(), b.toString(), a, "Integer", parser.jerarquia); } else { parser.auxFor=false; } parser.tipoActual="Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$39",104, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$38 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$38",103, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ELSE ::= condElse ENTER2 NT$36 llave_a ENTER2 CUERPO_MAIN llave_b NT$37 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$37 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
 parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$37",102, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$36 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$36",101, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ELSE ::= condElse condIf parentesis_a EXT parentesis_b ENTER2 NT$34 llave_a ENTER2 CUERPO_MAIN llave_b NT$35 ENTER2 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ELSE",15, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$35 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
 parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$35",100, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$34 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$34",99, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // METODO_COND ::= java punto id punto id parentesis_a NT$33 PARAMETROS parentesis_b 
            {
              String RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 if(parser.metodoCorrecto){ if(d){ RESULT=parser.claseUsar.getMisMetodos().get(parser.itMetodo).getRetorno(); } else { RESULT=""; } } else { RESULT=""; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODO_COND",59, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$33 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), b.toString(), parser.jerarquia, c.toString()); parser.claseUsar = parser.verif.devolverClaseJava(b.toString(), parser.tabla.getObJava()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$33",98, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // METODO_COND ::= visual punto id parentesis_a NT$32 PARAMETROS parentesis_b 
            {
              String RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 if(parser.metodoCorrecto){ if(c){ RESULT=parser.tabla.getObVb().getMisMetodos().get(parser.itMetodo).getRetorno();  } else { RESULT=""; } } else { RESULT=""; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODO_COND",59, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$32 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$32",97, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // METODO_COND ::= python punto id parentesis_a NT$31 PARAMETROS parentesis_b 
            {
              String RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 if(parser.metodoCorrecto){ if(c){ RESULT=parser.tabla.getObPython().getMisMetodos().get(parser.itMetodo).getRetorno(); } else { RESULT="";  } } else { RESULT=""; }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODO_COND",59, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$31 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$31",96, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // VECTOR_COND ::= id DIM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.op.devolverTipoArreglo(parser.tabla.getObC(), a.toString(), b, parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VECTOR_COND",60, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // VAL_COND ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.op.devolverTipoVar(parser.tabla.getObC(), a.toString(), parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // VAL_COND ::= menos METODO_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // VAL_COND ::= menos VECTOR_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // VAL_COND ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // VAL_COND ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = "Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // VAL_COND ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.op.devolverTipoVar(parser.tabla.getObC(), a.toString(), parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // VAL_COND ::= METODO_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // VAL_COND ::= VECTOR_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VAL_COND ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VAL_COND ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = "Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VAL_COND ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP_COND ::= VAL_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP_COND ::= OP_COND modulo OP_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(!a.equals("") && !b.equals("")){ RESULT=parser.verif.verifOpCondicional(parser.tabla.getObC(), a , b); } else { RESULT=""; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP_COND ::= OP_COND div OP_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(!a.equals("") && !b.equals("")){ RESULT=parser.verif.verifOpCondicional(parser.tabla.getObC(), a, b); } else { RESULT=""; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP_COND ::= OP_COND por OP_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(!a.equals("") && !b.equals("")){ RESULT=parser.verif.verifOpCondicional(parser.tabla.getObC(), a, b); } else { RESULT=""; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_COND ::= OP_COND menos OP_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(!a.equals("") && !b.equals("")){ RESULT=parser.verif.verifOpCondicional(parser.tabla.getObC(), a, b); } else { RESULT=""; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_COND ::= OP_COND mas OP_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(!a.equals("") && !b.equals("")){ RESULT=parser.verif.verifOpCondicional(parser.tabla.getObC(), a, b); } else { RESULT=""; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP_COND ::= parentesis_a OP_COND parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXT ::= admiracion BOOLEAN 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(!a.equals("")){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXT ::= admiracion parentesis_a BOOLEAN parentesis_b 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 if(!a.equals("")){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXT ::= BOOLEAN 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(!a.equals("")){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXT ::= EXT or EXT 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(a && b){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXT ::= EXT and EXT 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(a && b){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP ::= admiracion igual 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP ::= igual igual 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP ::= menor igual 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP ::= mayor igual 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP ::= menor 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP ::= mayor 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // BOOLEAN ::= falso 
            {
              String RESULT =null;
		 RESULT="true"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BOOLEAN",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BOOLEAN ::= verdadero 
            {
              String RESULT =null;
		 RESULT="true"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BOOLEAN",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BOOLEAN ::= OP_COND OP OP_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(!a.equals("") && !b.equals("")){ RESULT=parser.verif.verifOpCondicional(parser.tabla.getObC(), a, b); } else { RESULT=""; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BOOLEAN",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IF ::= condIf parentesis_a EXT parentesis_b ENTER2 NT$29 llave_a ENTER2 CUERPO_MAIN llave_b NT$30 ENTER2 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
 parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$30",95, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$29 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$29",94, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CLASES2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES2",12, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CLASES2 ::= coma id NT$28 CLASES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES2",12, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$28 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.op.agregarClase(parser.tabla.getObC(), a.toString(), parser.idClase, parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$28",93, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CLASES2 ::= coma id CONSTRUCTOR NT$27 CLASES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES2",12, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$27 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.op.crearClase(parser.tabla, b, parser.idClase, a.toString(), parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$27",92, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAM2 ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM2",63, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAM2 ::= PARAM2 OP_COND coma 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 if(a!=null){ if(!b.equals("")) { a.add(b); RESULT=a; } else { RESULT=null; } } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM2",63, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAM ::= PARAM2 OP_COND 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(a!=null){ if(!b.equals("")){ a.add(b); RESULT=a; } else { RESULT=null; } } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONSTRUCTOR ::= parentesis_a parentesis_b 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",64, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONSTRUCTOR ::= parentesis_a PARAM parentesis_b 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",64, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CLASES ::= java punto id id NT$26 CLASES2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES",10, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$26 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.idClase = b.toString(); parser.op.agregarClase(parser.tabla.getObC(), c.toString(), b.toString(), parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$26",91, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CLASES ::= java punto id id NT$24 CONSTRUCTOR NT$25 CLASES2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		ArrayList<String> d = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES",10, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<String> d = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.op.crearClase(parser.tabla, d, b.toString(), c.toString(), parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$25",90, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$24 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.idClase = b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$24",89, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMETROS2 ::= 
            {
              Boolean RESULT =null;
		  RESULT=parser.verif.verUltimoParametro(parser.tabla, parser.it, parser.len, parser.claseUsar); parser.it = 0;   parser.len=""; parser.claseUsar=null; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMETROS2 ::= coma NT$23 OPERACION PARAMETROS2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  if(a && b){ RESULT=true; } else { RESULT=false; }   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$23 ::= 
            {
              Boolean RESULT =null;
 parser.tipoActual = parser.verif.verifParametrosMetodo(parser.tabla, parser.it, parser.len, parser.claseUsar); parser.it++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$23",88, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMETROS ::= 
            {
              Boolean RESULT =null;
		RESULT=parser.verif.verUltimoParametro(parser.tabla, parser.it, parser.len, parser.claseUsar); parser.it = 0;   parser.len = ""; parser.claseUsar = null; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAMETROS",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMETROS ::= NT$22 OPERACION PARAMETROS2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(a && b){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAMETROS",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$22 ::= 
            {
              Boolean RESULT =null;
 parser.tipoActual = parser.verif.verifParametrosMetodo(parser.tabla, parser.it, parser.len, parser.claseUsar); parser.it++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$22",87, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // METODOS_MAIN ::= java punto id punto id parentesis_a NT$21 PARAMETROS parentesis_b puntoComa ENTER2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Boolean d = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS_MAIN",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$21 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodo(parser.tabla, a.toString(), b.toString(), parser.jerarquia, c.toString()); parser.claseUsar = parser.verif.devolverClaseJava(b.toString(), parser.tabla.getObJava()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$21",86, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // METODOS_MAIN ::= visual punto id parentesis_a NT$20 PARAMETROS parentesis_b puntoComa ENTER2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS_MAIN",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$20 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodo(parser.tabla, a.toString(), null, parser.jerarquia, b.toString());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$20",85, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // METODOS_MAIN ::= python punto id parentesis_a NT$19 PARAMETROS parentesis_b puntoComa ENTER2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS_MAIN",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$19 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString();   parser.metodoCorrecto=parser.verif.verificarMetodo(parser.tabla, a.toString(), null, parser.jerarquia, b.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$19",84, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // METODOS ::= java punto id punto id parentesis_a NT$18 PARAMETROS parentesis_b 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		 if(parser.metodoCorrecto){  } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS",45, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$18 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), b.toString(), parser.jerarquia, c.toString()); parser.claseUsar = parser.verif.devolverClaseJava(b.toString(), parser.tabla.getObJava()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$18",83, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // METODOS ::= visual punto id parentesis_a NT$17 PARAMETROS parentesis_b 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 if(parser.metodoCorrecto){ if(c){ RESULT=true;  } else { RESULT=false; } } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS",45, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$17 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$17",82, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // METODOS ::= python punto id parentesis_a NT$16 PARAMETROS parentesis_b 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 if(parser.metodoCorrecto){ if(c){ RESULT=true; } else { RESULT=false;  } } else { RESULT=false; }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS",45, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$16 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$16",81, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIABLES_MAIN ::= CLASES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARIABLES_MAIN ::= METODOS_MAIN 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARIABLES_MAIN ::= VARS 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARIABLES_MAIN ::= ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CUERPO_MAIN ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CUERPO_MAIN ::= CUERPO_MAIN COMENTARIO_B 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CUERPO_MAIN ::= CUERPO_MAIN COMENTARIO_A 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CUERPO_MAIN ::= CUERPO_MAIN GETCH 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CUERPO_MAIN ::= CUERPO_MAIN CLSCR 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPO_MAIN ::= CUERPO_MAIN MENSAJE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPO_MAIN ::= CUERPO_MAIN LECTURA_DATOS 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUERPO_MAIN ::= CUERPO_MAIN SWITCH 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CUERPO_MAIN ::= CUERPO_MAIN DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPO_MAIN ::= CUERPO_MAIN WHILE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPO_MAIN ::= CUERPO_MAIN FOR 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPO_MAIN ::= CUERPO_MAIN IF 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPO_MAIN ::= CUERPO_MAIN VARIABLES_MAIN 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MAIN ::= tipoVoid main parentesis_a parentesis_b ENTER2 NT$14 llave_a ENTER2 CUERPO_MAIN llave_b NT$15 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MAIN",7, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
 parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$15",80, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$14 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$14",79, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DIM2 ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM2",52, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DIM2 ::= DIM2 agrupacion_a OPERACION agrupacion_b 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 if(b != null){ if(b){ Integer suma = a + 1; RESULT=suma; } else { RESULT=null; } } else { RESULT=null; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM2",52, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DIM ::= DIM2 agrupacion_a OPERACION agrupacion_b 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 if(b!= null){ if(b){Integer suma = a + 1; RESULT=suma;} else { RESULT=null; } } else { RESULT=null; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VECTOR_OP ::= id NT$13 DIM 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 parser.tipoActual = parser.auxTipo; parser.auxTipo = ""; if(b != null){ RESULT=parser.verif.verifVectorOperacion(parser.tabla.getObC(), a.toString(), b, parser.jerarquia, parser.tipoActual); }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VECTOR_OP",47, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$13 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.auxTipo = parser.tipoActual; parser.tipoActual = "Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$13",78, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VECTOR ::= id NT$12 DIM 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  if(parser.verif.verifExistenciaArreglo(parser.tabla.getObC(), parser.jerarquia, a.toString())){ parser.tipoActual = parser.tabla.getObC().getListArreglos().get(VerifObjetos.iterador).getTipo(); RESULT=true; } else {  RESULT=false; }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VECTOR",46, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$12 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.tipoActual="Integer";  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$12",77, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VAR ::= menos id 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VAR ::= menos METODOS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VAR ::= menos VECTOR_OP 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VAR ::= menos numero punto numero 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.verif.verificarNumero(parser.tabla.getObC(), "Float", parser.tipoActual, a.toString()+b.toString()+c.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VAR ::= menos numero 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.verif.verificarNumero(parser.tabla.getObC(), "Integer", parser.tipoActual, a.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VAR ::= id 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VAR ::= METODOS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VAR ::= VECTOR_OP 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VAR ::= numero punto numero 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.verif.verificarNumero(parser.tabla.getObC(), "Float", parser.tipoActual, a.toString()+b.toString()+c.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VAR ::= numero 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.verif.verificarNumero(parser.tabla.getObC(), "Integer", parser.tipoActual, a.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VAR ::= comillaSimple id comillaSimple 
            {
              Boolean RESULT =null;
		 /*Verificar si en verdad es un char */ RESULT=true;   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= VAR 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION ::= OPERACION modulo OPERACION 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(a && b){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= OPERACION div OPERACION 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(a && b){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= OPERACION por OPERACION 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(a && b){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION ::= OPERACION menos OPERACION 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(a && b){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION ::= OPERACION mas OPERACION 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(a && b){ RESULT=true; } else { RESULT=false; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_VAR ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",40, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_VAR ::= tipoChar 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",40, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_VAR ::= tipoInteger 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",40, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARS2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS2",31, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARS2 ::= coma id DIM 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(b != null){ parser.op.agregarNuevaVar(parser.tabla.getObC(), a.toString(), parser.tipoActual, "Arreglo", parser.jerarquia, true, "", b); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS2",31, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARS2 ::= coma id VALOR NT$11 VARS2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS2",31, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 if(b != null){ if(b){ parser.op.agregarNuevaVar(parser.tabla.getObC(), a.toString(), parser.tipoActual, "Variable", parser.jerarquia, b, "", null); } } else { parser.op.agregarNuevaVar(parser.tabla.getObC(), a.toString(), parser.tipoActual, "Variable", parser.jerarquia, false, "", null); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$11",76, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VARS ::= TIPO_VAR id DIM NT$10 VARS2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS",5, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.tipoActual=a; if(a!=null){ parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Arreglo", parser.jerarquia, true, "", c); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$10",75, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARS ::= TIPO_VAR id NT$8 VALOR NT$9 VARS2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS",5, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 if(c!=null){ if(c){parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Variable", parser.jerarquia, c, "", null); } else { System.out.println("soy falso"); } } else { parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Variable", parser.jerarquia, false, "", null); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$9",74, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.tipoActual=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$8",73, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACIONES ::= VECTOR igual OPERACION puntoComa NT$7 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 if(a && b){ /*VER LO DE LAS ASIGNACIONES*/ } else { System.out.println("no es posible asignar en el arreglo"); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$7",72, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACIONES ::= id igual NT$5 OPERACION puntoComa NT$6 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 if(b){  parser.tabla.getObC().getListVariables().get(VerifObjetos.iterador).getListAsignaciones().add(parser.jerarquia); parser.tabla.getObC().getListVariables().get(VerifObjetos.iterador).setValor(true);      } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$6",71, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.tipoActual = parser.verif.devolverTipoVar(parser.tabla.getObC(), parser.jerarquia, a.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$5",70, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR ::= 
            {
              Boolean RESULT =null;
		 RESULT=null; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VALOR",48, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALOR ::= igual OPERACION 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VALOR",48, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONSTANTES ::= tipoConst TIPO_VAR NT$3 id igual OPERACION puntoComa NT$4 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CONSTANTES",3, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Constante", parser.jerarquia, true, "", null); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$4",69, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.tipoActual = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$3",68, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLES ::= VARIABLES CLASES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLES ::= VARIABLES VARS 
            {
              Object RESULT =null;
		 /*LISTO*/ 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLES ::= VARIABLES ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLES ::= VARIABLES CONSTANTES 
            {
              Object RESULT =null;
		 /*LISTO*/ 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // JAVA_CLASES ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("JAVA_CLASES",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // JAVA_CLASES ::= por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("JAVA_CLASES",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LIBRERIAS ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LIBRERIAS ::= LIBRERIAS numeral condInclude menor id punto id mayor ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LIBRERIAS ::= LIBRERIAS numeral condInclude menor id mayor ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIBRERIAS ::= LIBRERIAS numeral condInclude comilla java punto JAVA_CLASES comilla NT$2 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.op.activarLenguaje(a.toString(), parser.tabla, ""); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$2",67, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIBRERIAS ::= LIBRERIAS numeral condInclude comilla python comilla NT$1 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.op.activarLenguaje(a.toString(), parser.tabla, ""); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$1",66, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIAS ::= LIBRERIAS numeral condInclude comilla visual comilla NT$0 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.op.activarLenguaje(a.toString(), parser.tabla, ""); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$0",65, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LIBRERIAS VARIABLES MAIN 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		RESULT = start_val;
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxC$parser.done_parsing();
          return CUP$SintaxC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

