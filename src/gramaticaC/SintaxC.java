
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 15 15:10:14 CST 2020
//----------------------------------------------------

package gramaticaC;

import java_cup.runtime.*;
import Operaciones.*;
import Tablas.*;
import verificaciones.VerifC;
import objetos.*;
import ObjetosC.*;
import java.util.*;
import manejoCuartetos.*;
import objetosApoyo.*;
import cuartetos.*;
import interfaz.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 15 15:10:14 CST 2020
  */
public class SintaxC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxC() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\002\002\004\000\002\002\006\000\002\103" +
    "\002\000\002\003\012\000\002\104\002\000\002\003\012" +
    "\000\002\105\002\000\002\003\014\000\002\003\011\000" +
    "\002\003\013\000\002\003\002\000\002\052\003\000\002" +
    "\052\003\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\004\004\000\002\106\002\000" +
    "\002\107\002\000\002\005\013\000\002\066\004\000\002" +
    "\066\002\000\002\110\002\000\002\111\002\000\002\006" +
    "\011\000\002\112\002\000\002\006\010\000\002\113\002" +
    "\000\002\114\002\000\002\007\012\000\002\115\002\000" +
    "\002\007\011\000\002\116\002\000\002\041\007\000\002" +
    "\041\005\000\002\041\002\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\064\005\000\002\064\005" +
    "\000\002\064\005\000\002\064\005\000\002\064\005\000" +
    "\002\064\005\000\002\064\003\000\002\065\005\000\002" +
    "\065\005\000\002\065\003\000\002\065\005\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\004" +
    "\000\002\065\006\000\002\065\004\000\002\065\004\000" +
    "\002\065\004\000\002\065\006\000\002\065\006\000\002" +
    "\117\002\000\002\057\005\000\002\120\002\000\002\060" +
    "\005\000\002\062\006\000\002\063\006\000\002\063\002" +
    "\000\002\121\002\000\002\122\002\000\002\011\016\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\002\000" +
    "\002\012\004\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\123\002\000\002\047" +
    "\011\000\002\124\002\000\002\047\011\000\002\125\002" +
    "\000\002\047\013\000\002\126\002\000\002\127\002\000" +
    "\002\061\014\000\002\130\002\000\002\131\002\000\002" +
    "\061\014\000\002\132\002\000\002\133\002\000\002\061" +
    "\016\000\002\134\002\000\002\135\002\000\002\035\006" +
    "\000\002\035\002\000\002\136\002\000\002\137\002\000" +
    "\002\036\007\000\002\036\002\000\002\140\002\000\002" +
    "\141\002\000\002\014\014\000\002\142\002\000\002\014" +
    "\012\000\002\102\005\000\002\102\004\000\002\100\004" +
    "\000\002\101\005\000\002\101\002\000\002\143\002\000" +
    "\002\016\007\000\002\144\002\000\002\016\006\000\002" +
    "\016\002\000\002\145\002\000\002\146\002\000\002\147" +
    "\002\000\002\017\020\000\002\150\002\000\002\151\002" +
    "\000\002\152\002\000\002\020\021\000\002\153\002\000" +
    "\002\154\002\000\002\020\013\000\002\020\002\000\002" +
    "\056\003\000\002\056\003\000\002\056\004\000\002\056" +
    "\004\000\002\056\004\000\002\056\004\000\002\071\005" +
    "\000\002\155\002\000\002\071\006\000\002\071\003\000" +
    "\002\071\006\000\002\071\004\000\002\070\005\000\002" +
    "\070\003\000\002\070\003\000\002\072\005\000\002\072" +
    "\005\000\002\072\005\000\002\072\005\000\002\072\005" +
    "\000\002\072\005\000\002\072\003\000\002\073\005\000" +
    "\002\073\005\000\002\073\006\000\002\073\006\000\002" +
    "\073\003\000\002\073\005\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\004\000\002\073\006" +
    "\000\002\073\004\000\002\073\004\000\002\073\004\000" +
    "\002\075\004\000\002\156\002\000\002\074\011\000\002" +
    "\157\002\000\002\074\011\000\002\160\002\000\002\074" +
    "\013\000\002\161\002\000\002\162\002\000\002\163\002" +
    "\000\002\164\002\000\002\021\033\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\002\000\002" +
    "\067\003\000\002\067\004\000\002\067\003\000\002\067" +
    "\004\000\002\165\002\000\002\166\002\000\002\167\002" +
    "\000\002\022\017\000\002\170\002\000\002\171\002\000" +
    "\002\023\021\000\002\172\002\000\002\173\002\000\002" +
    "\174\002\000\002\024\017\000\002\175\002\000\002\176" +
    "\002\000\002\025\013\000\002\177\002\000\002\025\010" +
    "\000\002\025\002\000\002\010\005\000\002\010\002\000" +
    "\002\077\003\000\002\077\005\000\002\077\003\000\002" +
    "\077\004\000\002\077\004\000\002\200\002\000\002\201" +
    "\002\000\002\026\020\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\005\000\002\076\003\000\002\202\002\000\002" +
    "\030\014\000\002\203\002\000\002\030\012\000\002\031" +
    "\007\000\002\031\005\000\002\031\002\000\002\204\002" +
    "\000\002\032\010\000\002\205\002\000\002\033\012\000" +
    "\002\206\002\000\002\033\012\000\002\207\002\000\002" +
    "\033\010\000\002\034\003\000\002\034\004\000\002\034" +
    "\003\000\002\034\004\000\002\034\003\000\002\034\003" +
    "\000\002\034\005\000\002\042\005\000\002\045\006\000" +
    "\002\043\004\000\002\043\003\000\002\044\004\000\002" +
    "\044\003\000\002\044\002\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\002\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\004\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\051\002\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\004\000\002\046\004\000\002\046" +
    "\004\000\002\046\004\000\002\046\004\000\002\046\004" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\046\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02d4\000\032\003\ufefd\022\ufefd\033\ufefd\034\ufefd\035" +
    "\ufefd\036\ufefd\037\ufefd\067\ufefd\071\ufefd\074\ufefd\075\006" +
    "\076\ufefd\001\002\000\030\003\ufff7\022\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\067\ufff7\071\ufff7\074\ufff7" +
    "\076\ufff7\001\002\000\004\002\011\001\002\000\076\002" +
    "\ufefe\003\ufefe\010\ufefe\011\ufefe\016\ufefe\020\ufefe\021\ufefe" +
    "\022\ufefe\033\ufefe\034\ufefe\035\ufefe\036\ufefe\037\ufefe\047" +
    "\ufefe\050\ufefe\051\ufefe\052\ufefe\053\ufefe\054\ufefe\055\ufefe" +
    "\056\ufefe\057\ufefe\060\ufefe\064\ufefe\065\ufefe\067\ufefe\071" +
    "\ufefe\074\ufefe\075\uff00\076\ufefe\001\002\000\004\075\010" +
    "\001\002\000\076\002\ufeff\003\ufeff\010\ufeff\011\ufeff\016" +
    "\ufeff\020\ufeff\021\ufeff\022\ufeff\033\ufeff\034\ufeff\035\ufeff" +
    "\036\ufeff\037\ufeff\047\ufeff\050\ufeff\051\ufeff\052\ufeff\053" +
    "\ufeff\054\ufeff\055\ufeff\056\ufeff\057\ufeff\060\ufeff\064\ufeff" +
    "\065\ufeff\067\ufeff\071\ufeff\074\ufeff\075\uff01\076\ufeff\001" +
    "\002\000\004\002\001\001\002\000\030\003\uffee\022\uffee" +
    "\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\067\uffee\071" +
    "\013\074\uffee\076\uffee\001\002\000\004\017\u02bd\001\002" +
    "\000\026\003\031\022\025\033\016\034\022\035\036\036" +
    "\017\037\024\067\030\074\021\076\020\001\002\000\026" +
    "\003\ufff4\022\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\067\ufff4\074\ufff4\076\ufff4\001\002\000\004\040\u015c" +
    "\001\002\000\004\067\uffd7\001\002\000\160\004\ufe61\005" +
    "\ufe61\006\ufe61\007\ufe61\010\ufe61\011\ufe61\012\ufe61\013\ufe61" +
    "\014\ufe61\015\ufe61\016\ufe61\017\ufe61\020\ufe61\021\ufe61\022" +
    "\ufe61\023\ufe61\025\ufe61\026\ufe61\027\ufe61\030\ufe61\031\ufe61" +
    "\033\ufe61\034\ufe61\035\ufe61\037\ufe61\040\ufe61\041\ufe61\042" +
    "\ufe61\043\ufe61\044\ufe61\045\ufe61\046\ufe61\047\ufe61\050\ufe61" +
    "\051\ufe61\052\ufe61\053\ufe61\054\ufe61\055\ufe61\056\ufe61\057" +
    "\ufe61\060\ufe61\061\ufe61\062\ufe61\063\ufe61\064\ufe61\065\ufe61" +
    "\066\ufe61\067\ufe61\070\ufe61\071\ufe61\072\ufe61\073\ufe61\075" +
    "\ufe61\077\ufe61\001\002\000\150\004\ufeca\005\ufeca\006\ufeca" +
    "\007\ufeca\010\ufeca\011\ufeca\012\ufeca\013\ufeca\014\ufeca\015" +
    "\ufeca\016\ufeca\017\ufeca\020\ufeca\021\ufeca\022\ufeca\023\ufeca" +
    "\025\ufeca\026\ufeca\027\ufeca\030\ufeca\031\ufeca\033\ufeca\034" +
    "\ufeca\035\ufeca\037\ufeca\040\ufeca\041\ufeca\042\ufeca\043\ufeca" +
    "\044\ufeca\045\ufeca\046\ufeca\047\ufeca\050\ufeca\051\ufeca\052" +
    "\ufeca\053\ufeca\054\ufeca\055\ufeca\056\ufeca\057\ufeca\060\ufeca" +
    "\064\ufeca\065\ufeca\066\ufeca\067\ufeca\070\ufeca\071\ufeca\072" +
    "\ufeca\073\ufeca\075\ufeca\001\002\000\004\067\uffd8\001\002" +
    "\000\026\003\ufff3\022\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\037\ufff3\067\ufff3\074\ufff3\076\ufff3\001\002\000\010" +
    "\034\022\035\036\036\017\001\002\000\004\005\214\001" +
    "\002\000\004\043\207\001\002\000\004\002\000\001\002" +
    "\000\006\014\uffc1\043\177\001\002\000\026\003\uffed\022" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\067\uffed" +
    "\074\uffed\076\uffed\001\002\000\026\003\uffef\022\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\067\uffef\074\uffef" +
    "\076\uffef\001\002\000\026\003\ufff0\022\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\067\ufff0\074\ufff0\076\ufff0" +
    "\001\002\000\004\067\040\001\002\000\026\003\ufff1\022" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\067\ufff1" +
    "\074\ufff1\076\ufff1\001\002\000\004\067\uffd9\001\002\000" +
    "\026\003\ufff2\022\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\067\ufff2\074\ufff2\076\ufff2\001\002\000\012\004" +
    "\uffe2\006\uffe2\014\uffbb\043\uffe2\001\002\000\004\014\174" +
    "\001\002\000\006\004\uffdf\006\uffdf\001\002\000\010\004" +
    "\uffe8\006\uffe8\043\045\001\002\000\006\004\uffe1\006\uffe1" +
    "\001\002\000\022\012\057\020\046\021\060\022\050\025" +
    "\061\027\053\066\056\067\047\001\002\000\004\005\150" +
    "\001\002\000\026\004\uffc9\006\uffc9\013\uffc9\014\uffbf\015" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\001\002" +
    "\000\004\005\140\001\002\000\024\004\uffcb\006\uffcb\013" +
    "\uffcb\015\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\001\002\000\020\004\uffe9\006\uffe9\026\076\027\100\030" +
    "\075\031\102\032\077\001\002\000\016\020\046\021\060" +
    "\022\050\025\125\066\123\067\127\001\002\000\024\004" +
    "\uffd0\006\uffd0\013\uffd0\015\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\001\002\000\024\004\uffca\006\uffca\013" +
    "\uffca\015\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\001\002\000\026\004\uffcd\005\121\006\uffcd\013\uffcd\015" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\001\002" +
    "\000\022\012\057\020\046\021\060\022\050\025\061\027" +
    "\053\066\056\067\047\001\002\000\004\005\066\001\002" +
    "\000\006\066\062\067\063\001\002\000\004\025\065\001" +
    "\002\000\004\025\064\001\002\000\024\004\uffcf\006\uffcf" +
    "\013\uffcf\015\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\001\002\000\024\004\uffce\006\uffce\013\uffce\015\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\001\002\000" +
    "\004\067\067\001\002\000\004\012\070\001\002\000\024" +
    "\012\uffa5\013\uffa5\020\uffa5\021\uffa5\022\uffa5\025\uffa5\027" +
    "\uffa5\066\uffa5\067\uffa5\001\002\000\024\012\uff96\013\uff93" +
    "\020\uff96\021\uff96\022\uff96\025\uff96\027\uff96\066\uff96\067" +
    "\uff96\001\002\000\004\013\116\001\002\000\022\012\057" +
    "\020\046\021\060\022\050\025\061\027\053\066\056\067" +
    "\047\001\002\000\020\004\uff95\013\uff95\026\076\027\100" +
    "\030\075\031\102\032\077\001\002\000\022\012\057\020" +
    "\046\021\060\022\050\025\061\027\053\066\056\067\047" +
    "\001\002\000\022\012\057\020\046\021\060\022\050\025" +
    "\061\027\053\066\056\067\047\001\002\000\022\012\057" +
    "\020\046\021\060\022\050\025\061\027\053\066\056\067" +
    "\047\001\002\000\022\012\057\020\046\021\060\022\050" +
    "\025\061\027\053\066\056\067\047\001\002\000\006\004" +
    "\105\013\uff8f\001\002\000\022\012\057\020\046\021\060" +
    "\022\050\025\061\027\053\066\056\067\047\001\002\000" +
    "\024\004\uffd2\006\uffd2\013\uffd2\015\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\001\002\000\004\013\uff94\001" +
    "\002\000\022\012\uff92\020\uff92\021\uff92\022\uff92\025\uff92" +
    "\027\uff92\066\uff92\067\uff92\001\002\000\022\012\057\020" +
    "\046\021\060\022\050\025\061\027\053\066\056\067\047" +
    "\001\002\000\020\004\uff91\013\uff91\026\076\027\100\030" +
    "\075\031\102\032\077\001\002\000\006\004\105\013\uff8f" +
    "\001\002\000\004\013\uff90\001\002\000\024\004\uffd4\006" +
    "\uffd4\013\uffd4\015\uffd4\026\uffd4\027\uffd4\030\075\031\102" +
    "\032\077\001\002\000\024\004\uffd1\006\uffd1\013\uffd1\015" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\001\002" +
    "\000\024\004\uffd5\006\uffd5\013\uffd5\015\uffd5\026\uffd5\027" +
    "\uffd5\030\075\031\102\032\077\001\002\000\024\004\uffd3" +
    "\006\uffd3\013\uffd3\015\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\001\002\000\024\004\uffa4\006\uffa4\013\uffa4" +
    "\015\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\001" +
    "\002\000\016\013\120\026\076\027\100\030\075\031\102" +
    "\032\077\001\002\000\024\004\uffd6\006\uffd6\013\uffd6\015" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\001\002" +
    "\000\004\066\122\001\002\000\024\004\uffcc\006\uffcc\013" +
    "\uffcc\015\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\001\002\000\026\004\uffc8\005\136\006\uffc8\013\uffc8\015" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\001\002" +
    "\000\024\004\uffc6\006\uffc6\013\uffc6\015\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\001\002\000\006\066\132" +
    "\067\133\001\002\000\024\004\uffc5\006\uffc5\013\uffc5\015" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\001\002" +
    "\000\026\004\uffc4\006\uffc4\013\uffc4\014\uffbf\015\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\001\002\000\004" +
    "\014\uffbb\001\002\000\024\004\uffbe\006\uffbe\013\uffbe\015" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\001\002" +
    "\000\004\025\135\001\002\000\004\025\134\001\002\000" +
    "\024\004\uffc3\006\uffc3\013\uffc3\015\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\001\002\000\024\004\uffc2\006" +
    "\uffc2\013\uffc2\015\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\001\002\000\004\066\137\001\002\000\024\004" +
    "\uffc7\006\uffc7\013\uffc7\015\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\001\002\000\004\067\141\001\002\000" +
    "\004\005\142\001\002\000\004\067\143\001\002\000\004" +
    "\012\144\001\002\000\024\012\uffa1\013\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\025\uffa1\027\uffa1\066\uffa1\067\uffa1\001\002" +
    "\000\024\012\uff96\013\uff93\020\uff96\021\uff96\022\uff96\025" +
    "\uff96\027\uff96\066\uff96\067\uff96\001\002\000\004\013\147" +
    "\001\002\000\024\004\uffa0\006\uffa0\013\uffa0\015\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\001\002\000\004" +
    "\067\151\001\002\000\004\012\152\001\002\000\024\012" +
    "\uffa3\013\uffa3\020\uffa3\021\uffa3\022\uffa3\025\uffa3\027\uffa3" +
    "\066\uffa3\067\uffa3\001\002\000\024\012\uff96\013\uff93\020" +
    "\uff96\021\uff96\022\uff96\025\uff96\027\uff96\066\uff96\067\uff96" +
    "\001\002\000\004\013\155\001\002\000\024\004\uffa2\006" +
    "\uffa2\013\uffa2\015\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\001\002\000\006\004\157\006\uffda\001\002\000" +
    "\004\067\163\001\002\000\004\006\161\001\002\000\066" +
    "\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd\033" +
    "\ufefd\034\ufefd\035\ufefd\036\ufefd\037\ufefd\047\ufefd\051\ufefd" +
    "\052\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060" +
    "\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd" +
    "\001\002\000\064\003\uffe0\011\uffe0\016\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\047\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\064\uffe0\065\uffe0\067\uffe0\074\uffe0" +
    "\076\uffe0\001\002\000\012\004\uffe8\006\uffe8\014\uffbb\043" +
    "\045\001\002\000\006\004\uffdd\006\uffdd\001\002\000\004" +
    "\006\uffdb\001\002\000\006\004\157\006\uffda\001\002\000" +
    "\004\006\uffdc\001\002\000\006\004\157\006\uffda\001\002" +
    "\000\004\006\172\001\002\000\066\003\ufefd\011\ufefd\016" +
    "\ufefd\020\ufefd\021\ufefd\022\ufefd\033\ufefd\034\ufefd\035\ufefd" +
    "\036\ufefd\037\ufefd\047\ufefd\051\ufefd\052\ufefd\053\ufefd\054" +
    "\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd\065\ufefd" +
    "\067\ufefd\074\ufefd\075\006\076\ufefd\001\002\000\064\003" +
    "\uffde\011\uffde\016\uffde\020\uffde\021\uffde\022\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\047\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\064\uffde\065\uffde\067\uffde\074\uffde\076\uffde\001\002\000" +
    "\022\012\057\020\046\021\060\022\050\025\061\027\053" +
    "\066\056\067\047\001\002\000\016\015\176\026\076\027" +
    "\100\030\075\031\102\032\077\001\002\000\042\004\uffbd" +
    "\006\uffbd\013\uffbd\014\uffbc\015\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\100\uffbd\101\uffbd\001\002\000\022\012\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\025\uffe7\027\uffe7\066\uffe7\067\uffe7\001\002" +
    "\000\004\014\uffbb\001\002\000\010\004\uffc0\013\uffc0\043" +
    "\uffc0\001\002\000\022\012\057\020\046\021\060\022\050" +
    "\025\061\027\053\066\056\067\047\001\002\000\016\006" +
    "\204\026\076\027\100\030\075\031\102\032\077\001\002" +
    "\000\066\003\uffe6\011\uffe6\016\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\047\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\064\uffe6\065\uffe6\067\uffe6\074\uffe6\075\uffe6" +
    "\076\uffe6\001\002\000\066\003\ufefd\011\ufefd\016\ufefd\020" +
    "\ufefd\021\ufefd\022\ufefd\033\ufefd\034\ufefd\035\ufefd\036\ufefd" +
    "\037\ufefd\047\ufefd\051\ufefd\052\ufefd\053\ufefd\054\ufefd\055" +
    "\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd" +
    "\074\ufefd\075\006\076\ufefd\001\002\000\064\003\uffe5\011" +
    "\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\047\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\064\uffe5" +
    "\065\uffe5\067\uffe5\074\uffe5\076\uffe5\001\002\000\022\012" +
    "\057\020\046\021\060\022\050\025\061\027\053\066\056" +
    "\067\047\001\002\000\016\006\211\026\076\027\100\030" +
    "\075\031\102\032\077\001\002\000\066\003\uffe4\011\uffe4" +
    "\016\uffe4\020\uffe4\021\uffe4\022\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\064\uffe4\065" +
    "\uffe4\067\uffe4\074\uffe4\075\uffe4\076\uffe4\001\002\000\066" +
    "\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd\033" +
    "\ufefd\034\ufefd\035\ufefd\036\ufefd\037\ufefd\047\ufefd\051\ufefd" +
    "\052\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060" +
    "\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd" +
    "\001\002\000\064\003\uffe3\011\uffe3\016\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\064\uffe3\065\uffe3\067\uffe3\074\uffe3" +
    "\076\uffe3\001\002\000\004\067\215\001\002\000\004\067" +
    "\216\001\002\000\010\004\uff8b\006\uff8b\012\uff8e\001\002" +
    "\000\006\004\330\006\uff80\001\002\000\004\012\222\001" +
    "\002\000\006\004\uff8d\006\uff8d\001\002\000\024\012\uff85" +
    "\013\223\020\uff85\021\uff85\022\uff85\025\uff85\027\uff85\066" +
    "\uff85\067\uff85\001\002\000\006\004\uff88\006\uff88\001\002" +
    "\000\022\012\240\020\227\021\241\022\232\025\242\027" +
    "\234\066\235\067\231\001\002\000\004\013\226\001\002" +
    "\000\006\004\uff89\006\uff89\001\002\000\004\005\320\001" +
    "\002\000\036\004\uff57\006\uff57\013\uff57\026\uff57\027\uff57" +
    "\030\uff57\031\uff57\032\uff57\041\uff57\042\uff57\043\uff57\044" +
    "\uff57\100\uff57\101\uff57\001\002\000\040\004\uff55\006\uff55" +
    "\013\uff55\014\uffbb\026\uff55\027\uff55\030\uff55\031\uff55\032" +
    "\uff55\041\uff55\042\uff55\043\uff55\044\uff55\100\uff55\101\uff55" +
    "\001\002\000\004\005\310\001\002\000\036\004\uff5e\006" +
    "\uff5e\013\uff5e\026\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e" +
    "\041\uff5e\042\uff5e\043\uff5e\044\uff5e\100\uff5e\101\uff5e\001" +
    "\002\000\016\020\227\021\241\022\232\025\275\066\274" +
    "\067\300\001\002\000\040\004\uff59\005\272\006\uff59\013" +
    "\uff59\026\uff59\027\uff59\030\uff59\031\uff59\032\uff59\041\uff59" +
    "\042\uff59\043\uff59\044\uff59\100\uff59\101\uff59\001\002\000" +
    "\020\004\271\013\uff87\026\261\027\262\030\257\031\263" +
    "\032\260\001\002\000\036\004\uff56\006\uff56\013\uff56\026" +
    "\uff56\027\uff56\030\uff56\031\uff56\032\uff56\041\uff56\042\uff56" +
    "\043\uff56\044\uff56\100\uff56\101\uff56\001\002\000\022\012" +
    "\240\020\227\021\241\022\232\025\242\027\234\066\235" +
    "\067\231\001\002\000\004\005\247\001\002\000\006\066" +
    "\243\067\244\001\002\000\004\025\246\001\002\000\004" +
    "\025\245\001\002\000\036\004\uff5d\006\uff5d\013\uff5d\026" +
    "\uff5d\027\uff5d\030\uff5d\031\uff5d\032\uff5d\041\uff5d\042\uff5d" +
    "\043\uff5d\044\uff5d\100\uff5d\101\uff5d\001\002\000\036\004" +
    "\uff5c\006\uff5c\013\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c" +
    "\032\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\100\uff5c\101" +
    "\uff5c\001\002\000\004\067\250\001\002\000\004\012\251" +
    "\001\002\000\024\012\uff4e\013\uff4e\020\uff4e\021\uff4e\022" +
    "\uff4e\025\uff4e\027\uff4e\066\uff4e\067\uff4e\001\002\000\024" +
    "\012\uff96\013\uff93\020\uff96\021\uff96\022\uff96\025\uff96\027" +
    "\uff96\066\uff96\067\uff96\001\002\000\004\013\254\001\002" +
    "\000\036\004\uff4d\006\uff4d\013\uff4d\026\uff4d\027\uff4d\030" +
    "\uff4d\031\uff4d\032\uff4d\041\uff4d\042\uff4d\043\uff4d\044\uff4d" +
    "\100\uff4d\101\uff4d\001\002\000\016\013\256\026\261\027" +
    "\262\030\257\031\263\032\260\001\002\000\036\004\uff64" +
    "\006\uff64\013\uff64\026\uff64\027\uff64\030\uff64\031\uff64\032" +
    "\uff64\041\uff64\042\uff64\043\uff64\044\uff64\100\uff64\101\uff64" +
    "\001\002\000\022\012\240\020\227\021\241\022\232\025" +
    "\242\027\234\066\235\067\231\001\002\000\022\012\240" +
    "\020\227\021\241\022\232\025\242\027\234\066\235\067" +
    "\231\001\002\000\022\012\240\020\227\021\241\022\232" +
    "\025\242\027\234\066\235\067\231\001\002\000\022\012" +
    "\240\020\227\021\241\022\232\025\242\027\234\066\235" +
    "\067\231\001\002\000\022\012\240\020\227\021\241\022" +
    "\232\025\242\027\234\066\235\067\231\001\002\000\036" +
    "\004\uff60\006\uff60\013\uff60\026\uff60\027\uff60\030\uff60\031" +
    "\uff60\032\uff60\041\uff60\042\uff60\043\uff60\044\uff60\100\uff60" +
    "\101\uff60\001\002\000\036\004\uff62\006\uff62\013\uff62\026" +
    "\uff62\027\uff62\030\257\031\263\032\260\041\uff62\042\uff62" +
    "\043\uff62\044\uff62\100\uff62\101\uff62\001\002\000\036\004" +
    "\uff63\006\uff63\013\uff63\026\uff63\027\uff63\030\257\031\263" +
    "\032\260\041\uff63\042\uff63\043\uff63\044\uff63\100\uff63\101" +
    "\uff63\001\002\000\036\004\uff5f\006\uff5f\013\uff5f\026\uff5f" +
    "\027\uff5f\030\uff5f\031\uff5f\032\uff5f\041\uff5f\042\uff5f\043" +
    "\uff5f\044\uff5f\100\uff5f\101\uff5f\001\002\000\036\004\uff61" +
    "\006\uff61\013\uff61\026\uff61\027\uff61\030\uff61\031\uff61\032" +
    "\uff61\041\uff61\042\uff61\043\uff61\044\uff61\100\uff61\101\uff61" +
    "\001\002\000\022\012\uff86\020\uff86\021\uff86\022\uff86\025" +
    "\uff86\027\uff86\066\uff86\067\uff86\001\002\000\004\066\273" +
    "\001\002\000\036\004\uff58\006\uff58\013\uff58\026\uff58\027" +
    "\uff58\030\uff58\031\uff58\032\uff58\041\uff58\042\uff58\043\uff58" +
    "\044\uff58\100\uff58\101\uff58\001\002\000\040\004\uff54\005" +
    "\306\006\uff54\013\uff54\026\uff54\027\uff54\030\uff54\031\uff54" +
    "\032\uff54\041\uff54\042\uff54\043\uff54\044\uff54\100\uff54\101" +
    "\uff54\001\002\000\006\066\302\067\303\001\002\000\036" +
    "\004\uff51\006\uff51\013\uff51\026\uff51\027\uff51\030\uff51\031" +
    "\uff51\032\uff51\041\uff51\042\uff51\043\uff51\044\uff51\100\uff51" +
    "\101\uff51\001\002\000\036\004\uff52\006\uff52\013\uff52\026" +
    "\uff52\027\uff52\030\uff52\031\uff52\032\uff52\041\uff52\042\uff52" +
    "\043\uff52\044\uff52\100\uff52\101\uff52\001\002\000\040\004" +
    "\uff50\006\uff50\013\uff50\014\uffbb\026\uff50\027\uff50\030\uff50" +
    "\031\uff50\032\uff50\041\uff50\042\uff50\043\uff50\044\uff50\100" +
    "\uff50\101\uff50\001\002\000\036\004\uff4f\006\uff4f\013\uff4f" +
    "\026\uff4f\027\uff4f\030\uff4f\031\uff4f\032\uff4f\041\uff4f\042" +
    "\uff4f\043\uff4f\044\uff4f\100\uff4f\101\uff4f\001\002\000\004" +
    "\025\305\001\002\000\004\025\304\001\002\000\036\004" +
    "\uff5b\006\uff5b\013\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b" +
    "\032\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b\100\uff5b\101" +
    "\uff5b\001\002\000\036\004\uff5a\006\uff5a\013\uff5a\026\uff5a" +
    "\027\uff5a\030\uff5a\031\uff5a\032\uff5a\041\uff5a\042\uff5a\043" +
    "\uff5a\044\uff5a\100\uff5a\101\uff5a\001\002\000\004\066\307" +
    "\001\002\000\036\004\uff53\006\uff53\013\uff53\026\uff53\027" +
    "\uff53\030\uff53\031\uff53\032\uff53\041\uff53\042\uff53\043\uff53" +
    "\044\uff53\100\uff53\101\uff53\001\002\000\004\067\311\001" +
    "\002\000\004\005\312\001\002\000\004\067\313\001\002" +
    "\000\004\012\314\001\002\000\024\012\uff4a\013\uff4a\020" +
    "\uff4a\021\uff4a\022\uff4a\025\uff4a\027\uff4a\066\uff4a\067\uff4a" +
    "\001\002\000\024\012\uff96\013\uff93\020\uff96\021\uff96\022" +
    "\uff96\025\uff96\027\uff96\066\uff96\067\uff96\001\002\000\004" +
    "\013\317\001\002\000\036\004\uff49\006\uff49\013\uff49\026" +
    "\uff49\027\uff49\030\uff49\031\uff49\032\uff49\041\uff49\042\uff49" +
    "\043\uff49\044\uff49\100\uff49\101\uff49\001\002\000\004\067" +
    "\321\001\002\000\004\012\322\001\002\000\024\012\uff4c" +
    "\013\uff4c\020\uff4c\021\uff4c\022\uff4c\025\uff4c\027\uff4c\066" +
    "\uff4c\067\uff4c\001\002\000\024\012\uff96\013\uff93\020\uff96" +
    "\021\uff96\022\uff96\025\uff96\027\uff96\066\uff96\067\uff96\001" +
    "\002\000\004\013\325\001\002\000\036\004\uff4b\006\uff4b" +
    "\013\uff4b\026\uff4b\027\uff4b\030\uff4b\031\uff4b\032\uff4b\041" +
    "\uff4b\042\uff4b\043\uff4b\044\uff4b\100\uff4b\101\uff4b\001\002" +
    "\000\006\004\330\006\uff80\001\002\000\004\006\337\001" +
    "\002\000\004\067\331\001\002\000\010\004\uff82\006\uff82" +
    "\012\222\001\002\000\006\004\uff84\006\uff84\001\002\000" +
    "\006\004\330\006\uff80\001\002\000\004\006\uff81\001\002" +
    "\000\006\004\330\006\uff80\001\002\000\004\006\uff83\001" +
    "\002\000\066\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd" +
    "\022\ufefd\033\ufefd\034\ufefd\035\ufefd\036\ufefd\037\ufefd\047" +
    "\ufefd\051\ufefd\052\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd" +
    "\057\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075" +
    "\006\076\ufefd\001\002\000\064\003\uff8c\011\uff8c\016\uff8c" +
    "\020\uff8c\021\uff8c\022\uff8c\033\uff8c\034\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\047\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\064\uff8c\065\uff8c\067" +
    "\uff8c\074\uff8c\076\uff8c\001\002\000\004\006\342\001\002" +
    "\000\066\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022" +
    "\ufefd\033\ufefd\034\ufefd\035\ufefd\036\ufefd\037\ufefd\047\ufefd" +
    "\051\ufefd\052\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057" +
    "\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006" +
    "\076\ufefd\001\002\000\064\003\uff8a\011\uff8a\016\uff8a\020" +
    "\uff8a\021\uff8a\022\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a" +
    "\037\uff8a\047\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\064\uff8a\065\uff8a\067\uff8a" +
    "\074\uff8a\076\uff8a\001\002\000\004\067\uffec\001\002\000" +
    "\004\067\346\001\002\000\004\043\347\001\002\000\022" +
    "\012\057\020\046\021\060\022\050\025\061\027\053\066" +
    "\056\067\047\001\002\000\016\006\351\026\076\027\100" +
    "\030\075\031\102\032\077\001\002\000\030\003\uffeb\022" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\067\uffeb" +
    "\074\uffeb\075\uffeb\076\uffeb\001\002\000\030\003\ufefd\022" +
    "\ufefd\033\ufefd\034\ufefd\035\ufefd\036\ufefd\037\ufefd\067\ufefd" +
    "\074\ufefd\075\006\076\ufefd\001\002\000\026\003\uffea\022" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\067\uffea" +
    "\074\uffea\076\uffea\001\002\000\150\004\367\005\u0109\006" +
    "\u010d\007\364\010\370\011\366\012\u0110\013\u010f\014\u011d" +
    "\015\u011c\016\355\017\u011b\020\356\021\u0113\022\u0111\023" +
    "\u011a\025\u0112\026\u0104\027\u0102\030\u0108\031\u0114\033\u0115" +
    "\034\374\035\u0101\037\u011f\040\362\041\u0106\042\u0103\043" +
    "\371\044\u0119\045\361\046\u010b\047\375\050\u010a\051\372" +
    "\052\363\053\u0107\054\u011e\055\365\056\u0118\057\360\060" +
    "\u0120\064\376\065\u0100\066\377\067\u010c\070\u0117\071\373" +
    "\072\u0105\073\u010e\075\u0116\001\002\000\156\004\ufef1\005" +
    "\ufef1\006\ufef1\007\ufef1\010\ufef1\011\ufef1\012\ufef1\013\ufef1" +
    "\014\ufef1\015\ufef1\016\ufef1\017\ufef1\020\ufef1\021\ufef1\022" +
    "\ufef1\023\ufef1\025\ufef1\026\ufef1\027\ufef1\030\ufef1\031\ufef1" +
    "\033\ufef1\034\ufef1\035\ufef1\037\ufef1\040\ufef1\041\ufef1\042" +
    "\ufef1\043\ufef1\044\ufef1\045\ufef1\046\ufef1\047\ufef1\050\ufef1" +
    "\051\ufef1\052\ufef1\053\ufef1\054\ufef1\055\ufef1\056\ufef1\057" +
    "\ufef1\060\ufef1\061\ufef1\062\ufef1\063\ufef1\064\ufef1\065\ufef1" +
    "\066\ufef1\067\ufef1\070\ufef1\071\ufef1\072\ufef1\073\ufef1\075" +
    "\ufef1\001\002\000\156\004\ufeef\005\ufeef\006\ufeef\007\ufeef" +
    "\010\ufeef\011\ufeef\012\ufeef\013\ufeef\014\ufeef\015\ufeef\016" +
    "\ufeef\017\ufeef\020\ufeef\021\ufeef\022\ufeef\023\ufeef\025\ufeef" +
    "\026\ufeef\027\ufeef\030\ufeef\031\ufeef\033\ufeef\034\ufeef\035" +
    "\ufeef\037\ufeef\040\ufeef\041\ufeef\042\ufeef\043\ufeef\044\ufeef" +
    "\045\ufeef\046\ufeef\047\ufeef\050\ufeef\051\ufeef\052\ufeef\053" +
    "\ufeef\054\ufeef\055\ufeef\056\ufeef\057\ufeef\060\ufeef\061\ufeef" +
    "\062\ufeef\063\ufeef\064\ufeef\065\ufeef\066\ufeef\067\ufeef\070" +
    "\ufeef\071\ufeef\072\ufeef\073\ufeef\075\ufeef\001\002\000\066" +
    "\003\uff03\011\uff03\016\uff03\020\uff03\021\uff03\022\uff03\033" +
    "\uff03\034\uff03\035\uff03\036\uff03\037\uff03\047\uff03\051\uff03" +
    "\052\uff03\053\uff03\054\uff03\055\uff03\056\uff03\057\uff03\060" +
    "\uff03\064\uff03\065\uff03\067\uff03\074\uff03\075\u0121\076\uff03" +
    "\001\002\000\156\004\ufed1\005\ufed1\006\ufed1\007\ufed1\010" +
    "\ufed1\011\ufed1\012\ufed1\013\ufed1\014\ufed1\015\ufed1\016\ufed1" +
    "\017\ufed1\020\ufed1\021\ufed1\022\ufed1\023\ufed1\025\ufed1\026" +
    "\ufed1\027\ufed1\030\ufed1\031\ufed1\033\ufed1\034\ufed1\035\ufed1" +
    "\037\ufed1\040\ufed1\041\ufed1\042\ufed1\043\ufed1\044\ufed1\045" +
    "\ufed1\046\ufed1\047\ufed1\050\ufed1\051\ufed1\052\ufed1\053\ufed1" +
    "\054\ufed1\055\ufed1\056\ufed1\057\ufed1\060\ufed1\061\ufed1\062" +
    "\ufed1\063\ufed1\064\ufed1\065\ufed1\066\ufed1\067\ufed1\070\ufed1" +
    "\071\ufed1\072\ufed1\073\ufed1\075\ufed1\001\002\000\156\004" +
    "\ufedb\005\ufedb\006\ufedb\007\ufedb\010\ufedb\011\ufedb\012\ufedb" +
    "\013\ufedb\014\ufedb\015\ufedb\016\ufedb\017\ufedb\020\ufedb\021" +
    "\ufedb\022\ufedb\023\ufedb\025\ufedb\026\ufedb\027\ufedb\030\ufedb" +
    "\031\ufedb\033\ufedb\034\ufedb\035\ufedb\037\ufedb\040\ufedb\041" +
    "\ufedb\042\ufedb\043\ufedb\044\ufedb\045\ufedb\046\ufedb\047\ufedb" +
    "\050\ufedb\051\ufedb\052\ufedb\053\ufedb\054\ufedb\055\ufedb\056" +
    "\ufedb\057\ufedb\060\ufedb\061\ufedb\062\ufedb\063\ufedb\064\ufedb" +
    "\065\ufedb\066\ufedb\067\ufedb\070\ufedb\071\ufedb\072\ufedb\073" +
    "\ufedb\075\ufedb\001\002\000\156\004\ufee0\005\ufee0\006\ufee0" +
    "\007\ufee0\010\ufee0\011\ufee0\012\ufee0\013\ufee0\014\ufee0\015" +
    "\ufee0\016\ufee0\017\ufee0\020\ufee0\021\ufee0\022\ufee0\023\ufee0" +
    "\025\ufee0\026\ufee0\027\ufee0\030\ufee0\031\ufee0\033\ufee0\034" +
    "\ufee0\035\ufee0\037\ufee0\040\ufee0\041\ufee0\042\ufee0\043\ufee0" +
    "\044\ufee0\045\ufee0\046\ufee0\047\ufee0\050\ufee0\051\ufee0\052" +
    "\ufee0\053\ufee0\054\ufee0\055\ufee0\056\ufee0\057\ufee0\060\ufee0" +
    "\061\ufee0\062\ufee0\063\ufee0\064\ufee0\065\ufee0\066\ufee0\067" +
    "\ufee0\070\ufee0\071\ufee0\072\ufee0\073\ufee0\075\ufee0\001\002" +
    "\000\156\004\ufed6\005\ufed6\006\ufed6\007\ufed6\010\ufed6\011" +
    "\ufed6\012\ufed6\013\ufed6\014\ufed6\015\ufed6\016\ufed6\017\ufed6" +
    "\020\ufed6\021\ufed6\022\ufed6\023\ufed6\025\ufed6\026\ufed6\027" +
    "\ufed6\030\ufed6\031\ufed6\033\ufed6\034\ufed6\035\ufed6\037\ufed6" +
    "\040\ufed6\041\ufed6\042\ufed6\043\ufed6\044\ufed6\045\ufed6\046" +
    "\ufed6\047\ufed6\050\ufed6\051\ufed6\052\ufed6\053\ufed6\054\ufed6" +
    "\055\ufed6\056\ufed6\057\ufed6\060\ufed6\061\ufed6\062\ufed6\063" +
    "\ufed6\064\ufed6\065\ufed6\066\ufed6\067\ufed6\070\ufed6\071\ufed6" +
    "\072\ufed6\073\ufed6\075\ufed6\001\002\000\156\004\ufef9\005" +
    "\ufef9\006\ufef9\007\ufef9\010\ufef9\011\ufef9\012\ufef9\013\ufef9" +
    "\014\ufef9\015\ufef9\016\ufef9\017\ufef9\020\ufef9\021\ufef9\022" +
    "\ufef9\023\ufef9\025\ufef9\026\ufef9\027\ufef9\030\ufef9\031\ufef9" +
    "\033\ufef9\034\ufef9\035\ufef9\037\ufef9\040\ufef9\041\ufef9\042" +
    "\ufef9\043\ufef9\044\ufef9\045\ufef9\046\ufef9\047\ufef9\050\ufef9" +
    "\051\ufef9\052\ufef9\053\ufef9\054\ufef9\055\ufef9\056\ufef9\057" +
    "\ufef9\060\ufef9\061\ufef9\062\ufef9\063\ufef9\064\ufef9\065\ufef9" +
    "\066\ufef9\067\ufef9\070\ufef9\071\ufef9\072\ufef9\073\ufef9\075" +
    "\ufef9\001\002\000\156\004\ufed3\005\ufed3\006\ufed3\007\ufed3" +
    "\010\ufed3\011\ufed3\012\ufed3\013\ufed3\014\ufed3\015\ufed3\016" +
    "\ufed3\017\ufed3\020\ufed3\021\ufed3\022\ufed3\023\ufed3\025\ufed3" +
    "\026\ufed3\027\ufed3\030\ufed3\031\ufed3\033\ufed3\034\ufed3\035" +
    "\ufed3\037\ufed3\040\ufed3\041\ufed3\042\ufed3\043\ufed3\044\ufed3" +
    "\045\ufed3\046\ufed3\047\ufed3\050\ufed3\051\ufed3\052\ufed3\053" +
    "\ufed3\054\ufed3\055\ufed3\056\ufed3\057\ufed3\060\ufed3\061\ufed3" +
    "\062\ufed3\063\ufed3\064\ufed3\065\ufed3\066\ufed3\067\ufed3\070" +
    "\ufed3\071\ufed3\072\ufed3\073\ufed3\075\ufed3\001\002\000\156" +
    "\004\ufef7\005\ufef7\006\ufef7\007\ufef7\010\ufef7\011\ufef7\012" +
    "\ufef7\013\ufef7\014\ufef7\015\ufef7\016\ufef7\017\ufef7\020\ufef7" +
    "\021\ufef7\022\ufef7\023\ufef7\025\ufef7\026\ufef7\027\ufef7\030" +
    "\ufef7\031\ufef7\033\ufef7\034\ufef7\035\ufef7\037\ufef7\040\ufef7" +
    "\041\ufef7\042\ufef7\043\ufef7\044\ufef7\045\ufef7\046\ufef7\047" +
    "\ufef7\050\ufef7\051\ufef7\052\ufef7\053\ufef7\054\ufef7\055\ufef7" +
    "\056\ufef7\057\ufef7\060\ufef7\061\ufef7\062\ufef7\063\ufef7\064" +
    "\ufef7\065\ufef7\066\ufef7\067\ufef7\070\ufef7\071\ufef7\072\ufef7" +
    "\073\ufef7\075\ufef7\001\002\000\156\004\ufefc\005\ufefc\006" +
    "\ufefc\007\ufefc\010\ufefc\011\ufefc\012\ufefc\013\ufefc\014\ufefc" +
    "\015\ufefc\016\ufefc\017\ufefc\020\ufefc\021\ufefc\022\ufefc\023" +
    "\ufefc\025\ufefc\026\ufefc\027\ufefc\030\ufefc\031\ufefc\033\ufefc" +
    "\034\ufefc\035\ufefc\037\ufefc\040\ufefc\041\ufefc\042\ufefc\043" +
    "\ufefc\044\ufefc\045\ufefc\046\ufefc\047\ufefc\050\ufefc\051\ufefc" +
    "\052\ufefc\053\ufefc\054\ufefc\055\ufefc\056\ufefc\057\ufefc\060" +
    "\ufefc\061\ufefc\062\ufefc\063\ufefc\064\ufefc\065\ufefc\066\ufefc" +
    "\067\ufefc\070\ufefc\071\ufefc\072\ufefc\073\ufefc\075\ufefc\001" +
    "\002\000\156\004\ufef8\005\ufef8\006\ufef8\007\ufef8\010\ufef8" +
    "\011\ufef8\012\ufef8\013\ufef8\014\ufef8\015\ufef8\016\ufef8\017" +
    "\ufef8\020\ufef8\021\ufef8\022\ufef8\023\ufef8\025\ufef8\026\ufef8" +
    "\027\ufef8\030\ufef8\031\ufef8\033\ufef8\034\ufef8\035\ufef8\037" +
    "\ufef8\040\ufef8\041\ufef8\042\ufef8\043\ufef8\044\ufef8\045\ufef8" +
    "\046\ufef8\047\ufef8\050\ufef8\051\ufef8\052\ufef8\053\ufef8\054" +
    "\ufef8\055\ufef8\056\ufef8\057\ufef8\060\ufef8\061\ufef8\062\ufef8" +
    "\063\ufef8\064\ufef8\065\ufef8\066\ufef8\067\ufef8\070\ufef8\071" +
    "\ufef8\072\ufef8\073\ufef8\075\ufef8\001\002\000\156\004\ufedd" +
    "\005\ufedd\006\ufedd\007\ufedd\010\ufedd\011\ufedd\012\ufedd\013" +
    "\ufedd\014\ufedd\015\ufedd\016\ufedd\017\ufedd\020\ufedd\021\ufedd" +
    "\022\ufedd\023\ufedd\025\ufedd\026\ufedd\027\ufedd\030\ufedd\031" +
    "\ufedd\033\ufedd\034\ufedd\035\ufedd\037\ufedd\040\ufedd\041\ufedd" +
    "\042\ufedd\043\ufedd\044\ufedd\045\ufedd\046\ufedd\047\ufedd\050" +
    "\ufedd\051\ufedd\052\ufedd\053\ufedd\054\ufedd\055\ufedd\056\ufedd" +
    "\057\ufedd\060\ufedd\061\ufedd\062\ufedd\063\ufedd\064\ufedd\065" +
    "\ufedd\066\ufedd\067\ufedd\070\ufedd\071\ufedd\072\ufedd\073\ufedd" +
    "\075\ufedd\001\002\000\156\004\ufed7\005\ufed7\006\ufed7\007" +
    "\ufed7\010\ufed7\011\ufed7\012\ufed7\013\ufed7\014\ufed7\015\ufed7" +
    "\016\ufed7\017\ufed7\020\ufed7\021\ufed7\022\ufed7\023\ufed7\025" +
    "\ufed7\026\ufed7\027\ufed7\030\ufed7\031\ufed7\033\ufed7\034\ufed7" +
    "\035\ufed7\037\ufed7\040\ufed7\041\ufed7\042\ufed7\043\ufed7\044" +
    "\ufed7\045\ufed7\046\ufed7\047\ufed7\050\ufed7\051\ufed7\052\ufed7" +
    "\053\ufed7\054\ufed7\055\ufed7\056\ufed7\057\ufed7\060\ufed7\061" +
    "\ufed7\062\ufed7\063\ufed7\064\ufed7\065\ufed7\066\ufed7\067\ufed7" +
    "\070\ufed7\071\ufed7\072\ufed7\073\ufed7\075\ufed7\001\002\000" +
    "\156\004\ufee7\005\ufee7\006\ufee7\007\ufee7\010\ufee7\011\ufee7" +
    "\012\ufee7\013\ufee7\014\ufee7\015\ufee7\016\ufee7\017\ufee7\020" +
    "\ufee7\021\ufee7\022\ufee7\023\ufee7\025\ufee7\026\ufee7\027\ufee7" +
    "\030\ufee7\031\ufee7\033\ufee7\034\ufee7\035\ufee7\037\ufee7\040" +
    "\ufee7\041\ufee7\042\ufee7\043\ufee7\044\ufee7\045\ufee7\046\ufee7" +
    "\047\ufee7\050\ufee7\051\ufee7\052\ufee7\053\ufee7\054\ufee7\055" +
    "\ufee7\056\ufee7\057\ufee7\060\ufee7\061\ufee7\062\ufee7\063\ufee7" +
    "\064\ufee7\065\ufee7\066\ufee7\067\ufee7\070\ufee7\071\ufee7\072" +
    "\ufee7\073\ufee7\075\ufee7\001\002\000\156\004\ufee4\005\ufee4" +
    "\006\ufee4\007\ufee4\010\ufee4\011\ufee4\012\ufee4\013\ufee4\014" +
    "\ufee4\015\ufee4\016\ufee4\017\ufee4\020\ufee4\021\ufee4\022\ufee4" +
    "\023\ufee4\025\ufee4\026\ufee4\027\ufee4\030\ufee4\031\ufee4\033" +
    "\ufee4\034\ufee4\035\ufee4\037\ufee4\040\ufee4\041\ufee4\042\ufee4" +
    "\043\ufee4\044\ufee4\045\ufee4\046\ufee4\047\ufee4\050\ufee4\051" +
    "\ufee4\052\ufee4\053\ufee4\054\ufee4\055\ufee4\056\ufee4\057\ufee4" +
    "\060\ufee4\061\ufee4\062\ufee4\063\ufee4\064\ufee4\065\ufee4\066" +
    "\ufee4\067\ufee4\070\ufee4\071\ufee4\072\ufee4\073\ufee4\075\ufee4" +
    "\001\002\000\156\004\ufed9\005\ufed9\006\ufed9\007\ufed9\010" +
    "\ufed9\011\ufed9\012\ufed9\013\ufed9\014\ufed9\015\ufed9\016\ufed9" +
    "\017\ufed9\020\ufed9\021\ufed9\022\ufed9\023\ufed9\025\ufed9\026" +
    "\ufed9\027\ufed9\030\ufed9\031\ufed9\033\ufed9\034\ufed9\035\ufed9" +
    "\037\ufed9\040\ufed9\041\ufed9\042\ufed9\043\ufed9\044\ufed9\045" +
    "\ufed9\046\ufed9\047\ufed9\050\ufed9\051\ufed9\052\ufed9\053\ufed9" +
    "\054\ufed9\055\ufed9\056\ufed9\057\ufed9\060\ufed9\061\ufed9\062" +
    "\ufed9\063\ufed9\064\ufed9\065\ufed9\066\ufed9\067\ufed9\070\ufed9" +
    "\071\ufed9\072\ufed9\073\ufed9\075\ufed9\001\002\000\156\004" +
    "\ufecf\005\ufecf\006\ufecf\007\ufecf\010\ufecf\011\ufecf\012\ufecf" +
    "\013\ufecf\014\ufecf\015\ufecf\016\ufecf\017\ufecf\020\ufecf\021" +
    "\ufecf\022\ufecf\023\ufecf\025\ufecf\026\ufecf\027\ufecf\030\ufecf" +
    "\031\ufecf\033\ufecf\034\ufecf\035\ufecf\037\ufecf\040\ufecf\041" +
    "\ufecf\042\ufecf\043\ufecf\044\ufecf\045\ufecf\046\ufecf\047\ufecf" +
    "\050\ufecf\051\ufecf\052\ufecf\053\ufecf\054\ufecf\055\ufecf\056" +
    "\ufecf\057\ufecf\060\ufecf\061\ufecf\062\ufecf\063\ufecf\064\ufecf" +
    "\065\ufecf\066\ufecf\067\ufecf\070\ufecf\071\ufecf\072\ufecf\073" +
    "\ufecf\075\ufecf\001\002\000\156\004\ufecd\005\ufecd\006\ufecd" +
    "\007\ufecd\010\ufecd\011\ufecd\012\ufecd\013\ufecd\014\ufecd\015" +
    "\ufecd\016\ufecd\017\ufecd\020\ufecd\021\ufecd\022\ufecd\023\ufecd" +
    "\025\ufecd\026\ufecd\027\ufecd\030\ufecd\031\ufecd\033\ufecd\034" +
    "\ufecd\035\ufecd\037\ufecd\040\ufecd\041\ufecd\042\ufecd\043\ufecd" +
    "\044\ufecd\045\ufecd\046\ufecd\047\ufecd\050\ufecd\051\ufecd\052" +
    "\ufecd\053\ufecd\054\ufecd\055\ufecd\056\ufecd\057\ufecd\060\ufecd" +
    "\061\ufecd\062\ufecd\063\ufecd\064\ufecd\065\ufecd\066\ufecd\067" +
    "\ufecd\070\ufecd\071\ufecd\072\ufecd\073\ufecd\075\ufecd\001\002" +
    "\000\156\004\ufece\005\ufece\006\ufece\007\ufece\010\ufece\011" +
    "\ufece\012\ufece\013\ufece\014\ufece\015\ufece\016\ufece\017\ufece" +
    "\020\ufece\021\ufece\022\ufece\023\ufece\025\ufece\026\ufece\027" +
    "\ufece\030\ufece\031\ufece\033\ufece\034\ufece\035\ufece\037\ufece" +
    "\040\ufece\041\ufece\042\ufece\043\ufece\044\ufece\045\ufece\046" +
    "\ufece\047\ufece\050\ufece\051\ufece\052\ufece\053\ufece\054\ufece" +
    "\055\ufece\056\ufece\057\ufece\060\ufece\061\ufece\062\ufece\063" +
    "\ufece\064\ufece\065\ufece\066\ufece\067\ufece\070\ufece\071\ufece" +
    "\072\ufece\073\ufece\075\ufece\001\002\000\156\004\ufee5\005" +
    "\ufee5\006\ufee5\007\ufee5\010\ufee5\011\ufee5\012\ufee5\013\ufee5" +
    "\014\ufee5\015\ufee5\016\ufee5\017\ufee5\020\ufee5\021\ufee5\022" +
    "\ufee5\023\ufee5\025\ufee5\026\ufee5\027\ufee5\030\ufee5\031\ufee5" +
    "\033\ufee5\034\ufee5\035\ufee5\037\ufee5\040\ufee5\041\ufee5\042" +
    "\ufee5\043\ufee5\044\ufee5\045\ufee5\046\ufee5\047\ufee5\050\ufee5" +
    "\051\ufee5\052\ufee5\053\ufee5\054\ufee5\055\ufee5\056\ufee5\057" +
    "\ufee5\060\ufee5\061\ufee5\062\ufee5\063\ufee5\064\ufee5\065\ufee5" +
    "\066\ufee5\067\ufee5\070\ufee5\071\ufee5\072\ufee5\073\ufee5\075" +
    "\ufee5\001\002\000\156\004\ufeea\005\ufeea\006\ufeea\007\ufeea" +
    "\010\ufeea\011\ufeea\012\ufeea\013\ufeea\014\ufeea\015\ufeea\016" +
    "\ufeea\017\ufeea\020\ufeea\021\ufeea\022\ufeea\023\ufeea\025\ufeea" +
    "\026\ufeea\027\ufeea\030\ufeea\031\ufeea\033\ufeea\034\ufeea\035" +
    "\ufeea\037\ufeea\040\ufeea\041\ufeea\042\ufeea\043\ufeea\044\ufeea" +
    "\045\ufeea\046\ufeea\047\ufeea\050\ufeea\051\ufeea\052\ufeea\053" +
    "\ufeea\054\ufeea\055\ufeea\056\ufeea\057\ufeea\060\ufeea\061\ufeea" +
    "\062\ufeea\063\ufeea\064\ufeea\065\ufeea\066\ufeea\067\ufeea\070" +
    "\ufeea\071\ufeea\072\ufeea\073\ufeea\075\ufeea\001\002\000\156" +
    "\004\ufede\005\ufede\006\ufede\007\ufede\010\ufede\011\ufede\012" +
    "\ufede\013\ufede\014\ufede\015\ufede\016\ufede\017\ufede\020\ufede" +
    "\021\ufede\022\ufede\023\ufede\025\ufede\026\ufede\027\ufede\030" +
    "\ufede\031\ufede\033\ufede\034\ufede\035\ufede\037\ufede\040\ufede" +
    "\041\ufede\042\ufede\043\ufede\044\ufede\045\ufede\046\ufede\047" +
    "\ufede\050\ufede\051\ufede\052\ufede\053\ufede\054\ufede\055\ufede" +
    "\056\ufede\057\ufede\060\ufede\061\ufede\062\ufede\063\ufede\064" +
    "\ufede\065\ufede\066\ufede\067\ufede\070\ufede\071\ufede\072\ufede" +
    "\073\ufede\075\ufede\001\002\000\156\004\ufeeb\005\ufeeb\006" +
    "\ufeeb\007\ufeeb\010\ufeeb\011\ufeeb\012\ufeeb\013\ufeeb\014\ufeeb" +
    "\015\ufeeb\016\ufeeb\017\ufeeb\020\ufeeb\021\ufeeb\022\ufeeb\023" +
    "\ufeeb\025\ufeeb\026\ufeeb\027\ufeeb\030\ufeeb\031\ufeeb\033\ufeeb" +
    "\034\ufeeb\035\ufeeb\037\ufeeb\040\ufeeb\041\ufeeb\042\ufeeb\043" +
    "\ufeeb\044\ufeeb\045\ufeeb\046\ufeeb\047\ufeeb\050\ufeeb\051\ufeeb" +
    "\052\ufeeb\053\ufeeb\054\ufeeb\055\ufeeb\056\ufeeb\057\ufeeb\060" +
    "\ufeeb\061\ufeeb\062\ufeeb\063\ufeeb\064\ufeeb\065\ufeeb\066\ufeeb" +
    "\067\ufeeb\070\ufeeb\071\ufeeb\072\ufeeb\073\ufeeb\075\ufeeb\001" +
    "\002\000\156\004\ufee2\005\ufee2\006\ufee2\007\ufee2\010\ufee2" +
    "\011\ufee2\012\ufee2\013\ufee2\014\ufee2\015\ufee2\016\ufee2\017" +
    "\ufee2\020\ufee2\021\ufee2\022\ufee2\023\ufee2\025\ufee2\026\ufee2" +
    "\027\ufee2\030\ufee2\031\ufee2\033\ufee2\034\ufee2\035\ufee2\037" +
    "\ufee2\040\ufee2\041\ufee2\042\ufee2\043\ufee2\044\ufee2\045\ufee2" +
    "\046\ufee2\047\ufee2\050\ufee2\051\ufee2\052\ufee2\053\ufee2\054" +
    "\ufee2\055\ufee2\056\ufee2\057\ufee2\060\ufee2\061\ufee2\062\ufee2" +
    "\063\ufee2\064\ufee2\065\ufee2\066\ufee2\067\ufee2\070\ufee2\071" +
    "\ufee2\072\ufee2\073\ufee2\075\ufee2\001\002\000\156\004\ufedf" +
    "\005\ufedf\006\ufedf\007\ufedf\010\ufedf\011\ufedf\012\ufedf\013" +
    "\ufedf\014\ufedf\015\ufedf\016\ufedf\017\ufedf\020\ufedf\021\ufedf" +
    "\022\ufedf\023\ufedf\025\ufedf\026\ufedf\027\ufedf\030\ufedf\031" +
    "\ufedf\033\ufedf\034\ufedf\035\ufedf\037\ufedf\040\ufedf\041\ufedf" +
    "\042\ufedf\043\ufedf\044\ufedf\045\ufedf\046\ufedf\047\ufedf\050" +
    "\ufedf\051\ufedf\052\ufedf\053\ufedf\054\ufedf\055\ufedf\056\ufedf" +
    "\057\ufedf\060\ufedf\061\ufedf\062\ufedf\063\ufedf\064\ufedf\065" +
    "\ufedf\066\ufedf\067\ufedf\070\ufedf\071\ufedf\072\ufedf\073\ufedf" +
    "\075\ufedf\001\002\000\156\004\ufed5\005\ufed5\006\ufed5\007" +
    "\ufed5\010\ufed5\011\ufed5\012\ufed5\013\ufed5\014\ufed5\015\ufed5" +
    "\016\ufed5\017\ufed5\020\ufed5\021\ufed5\022\ufed5\023\ufed5\025" +
    "\ufed5\026\ufed5\027\ufed5\030\ufed5\031\ufed5\033\ufed5\034\ufed5" +
    "\035\ufed5\037\ufed5\040\ufed5\041\ufed5\042\ufed5\043\ufed5\044" +
    "\ufed5\045\ufed5\046\ufed5\047\ufed5\050\ufed5\051\ufed5\052\ufed5" +
    "\053\ufed5\054\ufed5\055\ufed5\056\ufed5\057\ufed5\060\ufed5\061" +
    "\ufed5\062\ufed5\063\ufed5\064\ufed5\065\ufed5\066\ufed5\067\ufed5" +
    "\070\ufed5\071\ufed5\072\ufed5\073\ufed5\075\ufed5\001\002\000" +
    "\156\004\ufee9\005\ufee9\006\ufee9\007\ufee9\010\ufee9\011\ufee9" +
    "\012\ufee9\013\ufee9\014\ufee9\015\ufee9\016\ufee9\017\ufee9\020" +
    "\ufee9\021\ufee9\022\ufee9\023\ufee9\025\ufee9\026\ufee9\027\ufee9" +
    "\030\ufee9\031\ufee9\033\ufee9\034\ufee9\035\ufee9\037\ufee9\040" +
    "\ufee9\041\ufee9\042\ufee9\043\ufee9\044\ufee9\045\ufee9\046\ufee9" +
    "\047\ufee9\050\ufee9\051\ufee9\052\ufee9\053\ufee9\054\ufee9\055" +
    "\ufee9\056\ufee9\057\ufee9\060\ufee9\061\ufee9\062\ufee9\063\ufee9" +
    "\064\ufee9\065\ufee9\066\ufee9\067\ufee9\070\ufee9\071\ufee9\072" +
    "\ufee9\073\ufee9\075\ufee9\001\002\000\156\004\ufefb\005\ufefb" +
    "\006\ufefb\007\ufefb\010\ufefb\011\ufefb\012\ufefb\013\ufefb\014" +
    "\ufefb\015\ufefb\016\ufefb\017\ufefb\020\ufefb\021\ufefb\022\ufefb" +
    "\023\ufefb\025\ufefb\026\ufefb\027\ufefb\030\ufefb\031\ufefb\033" +
    "\ufefb\034\ufefb\035\ufefb\037\ufefb\040\ufefb\041\ufefb\042\ufefb" +
    "\043\ufefb\044\ufefb\045\ufefb\046\ufefb\047\ufefb\050\ufefb\051" +
    "\ufefb\052\ufefb\053\ufefb\054\ufefb\055\ufefb\056\ufefb\057\ufefb" +
    "\060\ufefb\061\ufefb\062\ufefb\063\ufefb\064\ufefb\065\ufefb\066" +
    "\ufefb\067\ufefb\070\ufefb\071\ufefb\072\ufefb\073\ufefb\075\ufefb" +
    "\001\002\000\156\004\ufed8\005\ufed8\006\ufed8\007\ufed8\010" +
    "\ufed8\011\ufed8\012\ufed8\013\ufed8\014\ufed8\015\ufed8\016\ufed8" +
    "\017\ufed8\020\ufed8\021\ufed8\022\ufed8\023\ufed8\025\ufed8\026" +
    "\ufed8\027\ufed8\030\ufed8\031\ufed8\033\ufed8\034\ufed8\035\ufed8" +
    "\037\ufed8\040\ufed8\041\ufed8\042\ufed8\043\ufed8\044\ufed8\045" +
    "\ufed8\046\ufed8\047\ufed8\050\ufed8\051\ufed8\052\ufed8\053\ufed8" +
    "\054\ufed8\055\ufed8\056\ufed8\057\ufed8\060\ufed8\061\ufed8\062" +
    "\ufed8\063\ufed8\064\ufed8\065\ufed8\066\ufed8\067\ufed8\070\ufed8" +
    "\071\ufed8\072\ufed8\073\ufed8\075\ufed8\001\002\000\156\004" +
    "\ufeda\005\ufeda\006\ufeda\007\ufeda\010\ufeda\011\ufeda\012\ufeda" +
    "\013\ufeda\014\ufeda\015\ufeda\016\ufeda\017\ufeda\020\ufeda\021" +
    "\ufeda\022\ufeda\023\ufeda\025\ufeda\026\ufeda\027\ufeda\030\ufeda" +
    "\031\ufeda\033\ufeda\034\ufeda\035\ufeda\037\ufeda\040\ufeda\041" +
    "\ufeda\042\ufeda\043\ufeda\044\ufeda\045\ufeda\046\ufeda\047\ufeda" +
    "\050\ufeda\051\ufeda\052\ufeda\053\ufeda\054\ufeda\055\ufeda\056" +
    "\ufeda\057\ufeda\060\ufeda\061\ufeda\062\ufeda\063\ufeda\064\ufeda" +
    "\065\ufeda\066\ufeda\067\ufeda\070\ufeda\071\ufeda\072\ufeda\073" +
    "\ufeda\075\ufeda\001\002\000\156\004\ufecc\005\ufecc\006\ufecc" +
    "\007\ufecc\010\ufecc\011\ufecc\012\ufecc\013\ufecc\014\ufecc\015" +
    "\ufecc\016\ufecc\017\ufecc\020\ufecc\021\ufecc\022\ufecc\023\ufecc" +
    "\025\ufecc\026\ufecc\027\ufecc\030\ufecc\031\ufecc\033\ufecc\034" +
    "\ufecc\035\ufecc\037\ufecc\040\ufecc\041\ufecc\042\ufecc\043\ufecc" +
    "\044\ufecc\045\ufecc\046\ufecc\047\ufecc\050\ufecc\051\ufecc\052" +
    "\ufecc\053\ufecc\054\ufecc\055\ufecc\056\ufecc\057\ufecc\060\ufecc" +
    "\061\ufecc\062\ufecc\063\ufecc\064\ufecc\065\ufecc\066\ufecc\067" +
    "\ufecc\070\ufecc\071\ufecc\072\ufecc\073\ufecc\075\ufecc\001\002" +
    "\000\156\004\ufefa\005\ufefa\006\ufefa\007\ufefa\010\ufefa\011" +
    "\ufefa\012\ufefa\013\ufefa\014\ufefa\015\ufefa\016\ufefa\017\ufefa" +
    "\020\ufefa\021\ufefa\022\ufefa\023\ufefa\025\ufefa\026\ufefa\027" +
    "\ufefa\030\ufefa\031\ufefa\033\ufefa\034\ufefa\035\ufefa\037\ufefa" +
    "\040\ufefa\041\ufefa\042\ufefa\043\ufefa\044\ufefa\045\ufefa\046" +
    "\ufefa\047\ufefa\050\ufefa\051\ufefa\052\ufefa\053\ufefa\054\ufefa" +
    "\055\ufefa\056\ufefa\057\ufefa\060\ufefa\061\ufefa\062\ufefa\063" +
    "\ufefa\064\ufefa\065\ufefa\066\ufefa\067\ufefa\070\ufefa\071\ufefa" +
    "\072\ufefa\073\ufefa\075\ufefa\001\002\000\156\004\ufee1\005" +
    "\ufee1\006\ufee1\007\ufee1\010\ufee1\011\ufee1\012\ufee1\013\ufee1" +
    "\014\ufee1\015\ufee1\016\ufee1\017\ufee1\020\ufee1\021\ufee1\022" +
    "\ufee1\023\ufee1\025\ufee1\026\ufee1\027\ufee1\030\ufee1\031\ufee1" +
    "\033\ufee1\034\ufee1\035\ufee1\037\ufee1\040\ufee1\041\ufee1\042" +
    "\ufee1\043\ufee1\044\ufee1\045\ufee1\046\ufee1\047\ufee1\050\ufee1" +
    "\051\ufee1\052\ufee1\053\ufee1\054\ufee1\055\ufee1\056\ufee1\057" +
    "\ufee1\060\ufee1\061\ufee1\062\ufee1\063\ufee1\064\ufee1\065\ufee1" +
    "\066\ufee1\067\ufee1\070\ufee1\071\ufee1\072\ufee1\073\ufee1\075" +
    "\ufee1\001\002\000\156\004\ufef5\005\ufef5\006\ufef5\007\ufef5" +
    "\010\ufef5\011\ufef5\012\ufef5\013\ufef5\014\ufef5\015\ufef5\016" +
    "\ufef5\017\ufef5\020\ufef5\021\ufef5\022\ufef5\023\ufef5\025\ufef5" +
    "\026\ufef5\027\ufef5\030\ufef5\031\ufef5\033\ufef5\034\ufef5\035" +
    "\ufef5\037\ufef5\040\ufef5\041\ufef5\042\ufef5\043\ufef5\044\ufef5" +
    "\045\ufef5\046\ufef5\047\ufef5\050\ufef5\051\ufef5\052\ufef5\053" +
    "\ufef5\054\ufef5\055\ufef5\056\ufef5\057\ufef5\060\ufef5\061\ufef5" +
    "\062\ufef5\063\ufef5\064\ufef5\065\ufef5\066\ufef5\067\ufef5\070" +
    "\ufef5\071\ufef5\072\ufef5\073\ufef5\075\ufef5\001\002\000\156" +
    "\004\ufef6\005\ufef6\006\ufef6\007\ufef6\010\ufef6\011\ufef6\012" +
    "\ufef6\013\ufef6\014\ufef6\015\ufef6\016\ufef6\017\ufef6\020\ufef6" +
    "\021\ufef6\022\ufef6\023\ufef6\025\ufef6\026\ufef6\027\ufef6\030" +
    "\ufef6\031\ufef6\033\ufef6\034\ufef6\035\ufef6\037\ufef6\040\ufef6" +
    "\041\ufef6\042\ufef6\043\ufef6\044\ufef6\045\ufef6\046\ufef6\047" +
    "\ufef6\050\ufef6\051\ufef6\052\ufef6\053\ufef6\054\ufef6\055\ufef6" +
    "\056\ufef6\057\ufef6\060\ufef6\061\ufef6\062\ufef6\063\ufef6\064" +
    "\ufef6\065\ufef6\066\ufef6\067\ufef6\070\ufef6\071\ufef6\072\ufef6" +
    "\073\ufef6\075\ufef6\001\002\000\156\004\ufeed\005\ufeed\006" +
    "\ufeed\007\ufeed\010\ufeed\011\ufeed\012\ufeed\013\ufeed\014\ufeed" +
    "\015\ufeed\016\ufeed\017\ufeed\020\ufeed\021\ufeed\022\ufeed\023" +
    "\ufeed\025\ufeed\026\ufeed\027\ufeed\030\ufeed\031\ufeed\033\ufeed" +
    "\034\ufeed\035\ufeed\037\ufeed\040\ufeed\041\ufeed\042\ufeed\043" +
    "\ufeed\044\ufeed\045\ufeed\046\ufeed\047\ufeed\050\ufeed\051\ufeed" +
    "\052\ufeed\053\ufeed\054\ufeed\055\ufeed\056\ufeed\057\ufeed\060" +
    "\ufeed\061\ufeed\062\ufeed\063\ufeed\064\ufeed\065\ufeed\066\ufeed" +
    "\067\ufeed\070\ufeed\071\ufeed\072\ufeed\073\ufeed\075\ufeed\001" +
    "\002\000\156\004\ufef2\005\ufef2\006\ufef2\007\ufef2\010\ufef2" +
    "\011\ufef2\012\ufef2\013\ufef2\014\ufef2\015\ufef2\016\ufef2\017" +
    "\ufef2\020\ufef2\021\ufef2\022\ufef2\023\ufef2\025\ufef2\026\ufef2" +
    "\027\ufef2\030\ufef2\031\ufef2\033\ufef2\034\ufef2\035\ufef2\037" +
    "\ufef2\040\ufef2\041\ufef2\042\ufef2\043\ufef2\044\ufef2\045\ufef2" +
    "\046\ufef2\047\ufef2\050\ufef2\051\ufef2\052\ufef2\053\ufef2\054" +
    "\ufef2\055\ufef2\056\ufef2\057\ufef2\060\ufef2\061\ufef2\062\ufef2" +
    "\063\ufef2\064\ufef2\065\ufef2\066\ufef2\067\ufef2\070\ufef2\071" +
    "\ufef2\072\ufef2\073\ufef2\075\ufef2\001\002\000\156\004\ufeee" +
    "\005\ufeee\006\ufeee\007\ufeee\010\ufeee\011\ufeee\012\ufeee\013" +
    "\ufeee\014\ufeee\015\ufeee\016\ufeee\017\ufeee\020\ufeee\021\ufeee" +
    "\022\ufeee\023\ufeee\025\ufeee\026\ufeee\027\ufeee\030\ufeee\031" +
    "\ufeee\033\ufeee\034\ufeee\035\ufeee\037\ufeee\040\ufeee\041\ufeee" +
    "\042\ufeee\043\ufeee\044\ufeee\045\ufeee\046\ufeee\047\ufeee\050" +
    "\ufeee\051\ufeee\052\ufeee\053\ufeee\054\ufeee\055\ufeee\056\ufeee" +
    "\057\ufeee\060\ufeee\061\ufeee\062\ufeee\063\ufeee\064\ufeee\065" +
    "\ufeee\066\ufeee\067\ufeee\070\ufeee\071\ufeee\072\ufeee\073\ufeee" +
    "\075\ufeee\001\002\000\156\004\ufee8\005\ufee8\006\ufee8\007" +
    "\ufee8\010\ufee8\011\ufee8\012\ufee8\013\ufee8\014\ufee8\015\ufee8" +
    "\016\ufee8\017\ufee8\020\ufee8\021\ufee8\022\ufee8\023\ufee8\025" +
    "\ufee8\026\ufee8\027\ufee8\030\ufee8\031\ufee8\033\ufee8\034\ufee8" +
    "\035\ufee8\037\ufee8\040\ufee8\041\ufee8\042\ufee8\043\ufee8\044" +
    "\ufee8\045\ufee8\046\ufee8\047\ufee8\050\ufee8\051\ufee8\052\ufee8" +
    "\053\ufee8\054\ufee8\055\ufee8\056\ufee8\057\ufee8\060\ufee8\061" +
    "\ufee8\062\ufee8\063\ufee8\064\ufee8\065\ufee8\066\ufee8\067\ufee8" +
    "\070\ufee8\071\ufee8\072\ufee8\073\ufee8\075\ufee8\001\002\000" +
    "\156\004\ufee6\005\ufee6\006\ufee6\007\ufee6\010\ufee6\011\ufee6" +
    "\012\ufee6\013\ufee6\014\ufee6\015\ufee6\016\ufee6\017\ufee6\020" +
    "\ufee6\021\ufee6\022\ufee6\023\ufee6\025\ufee6\026\ufee6\027\ufee6" +
    "\030\ufee6\031\ufee6\033\ufee6\034\ufee6\035\ufee6\037\ufee6\040" +
    "\ufee6\041\ufee6\042\ufee6\043\ufee6\044\ufee6\045\ufee6\046\ufee6" +
    "\047\ufee6\050\ufee6\051\ufee6\052\ufee6\053\ufee6\054\ufee6\055" +
    "\ufee6\056\ufee6\057\ufee6\060\ufee6\061\ufee6\062\ufee6\063\ufee6" +
    "\064\ufee6\065\ufee6\066\ufee6\067\ufee6\070\ufee6\071\ufee6\072" +
    "\ufee6\073\ufee6\075\ufee6\001\002\000\066\003\uff00\011\uff00" +
    "\016\uff00\020\uff00\021\uff00\022\uff00\033\uff00\034\uff00\035" +
    "\uff00\036\uff00\037\uff00\047\uff00\051\uff00\052\uff00\053\uff00" +
    "\054\uff00\055\uff00\056\uff00\057\uff00\060\uff00\064\uff00\065" +
    "\uff00\067\uff00\074\uff00\075\uff00\076\uff00\001\002\000\156" +
    "\004\ufecb\005\ufecb\006\ufecb\007\ufecb\010\ufecb\011\ufecb\012" +
    "\ufecb\013\ufecb\014\ufecb\015\ufecb\016\ufecb\017\ufecb\020\ufecb" +
    "\021\ufecb\022\ufecb\023\ufecb\025\ufecb\026\ufecb\027\ufecb\030" +
    "\ufecb\031\ufecb\033\ufecb\034\ufecb\035\ufecb\037\ufecb\040\ufecb" +
    "\041\ufecb\042\ufecb\043\ufecb\044\ufecb\045\ufecb\046\ufecb\047" +
    "\ufecb\050\ufecb\051\ufecb\052\ufecb\053\ufecb\054\ufecb\055\ufecb" +
    "\056\ufecb\057\ufecb\060\ufecb\061\ufecb\062\ufecb\063\ufecb\064" +
    "\ufecb\065\ufecb\066\ufecb\067\ufecb\070\ufecb\071\ufecb\072\ufecb" +
    "\073\ufecb\075\ufecb\001\002\000\156\004\ufed2\005\ufed2\006" +
    "\ufed2\007\ufed2\010\ufed2\011\ufed2\012\ufed2\013\ufed2\014\ufed2" +
    "\015\ufed2\016\ufed2\017\ufed2\020\ufed2\021\ufed2\022\ufed2\023" +
    "\ufed2\025\ufed2\026\ufed2\027\ufed2\030\ufed2\031\ufed2\033\ufed2" +
    "\034\ufed2\035\ufed2\037\ufed2\040\ufed2\041\ufed2\042\ufed2\043" +
    "\ufed2\044\ufed2\045\ufed2\046\ufed2\047\ufed2\050\ufed2\051\ufed2" +
    "\052\ufed2\053\ufed2\054\ufed2\055\ufed2\056\ufed2\057\ufed2\060" +
    "\ufed2\061\ufed2\062\ufed2\063\ufed2\064\ufed2\065\ufed2\066\ufed2" +
    "\067\ufed2\070\ufed2\071\ufed2\072\ufed2\073\ufed2\075\ufed2\001" +
    "\002\000\156\004\ufedc\005\ufedc\006\ufedc\007\ufedc\010\ufedc" +
    "\011\ufedc\012\ufedc\013\ufedc\014\ufedc\015\ufedc\016\ufedc\017" +
    "\ufedc\020\ufedc\021\ufedc\022\ufedc\023\ufedc\025\ufedc\026\ufedc" +
    "\027\ufedc\030\ufedc\031\ufedc\033\ufedc\034\ufedc\035\ufedc\037" +
    "\ufedc\040\ufedc\041\ufedc\042\ufedc\043\ufedc\044\ufedc\045\ufedc" +
    "\046\ufedc\047\ufedc\050\ufedc\051\ufedc\052\ufedc\053\ufedc\054" +
    "\ufedc\055\ufedc\056\ufedc\057\ufedc\060\ufedc\061\ufedc\062\ufedc" +
    "\063\ufedc\064\ufedc\065\ufedc\066\ufedc\067\ufedc\070\ufedc\071" +
    "\ufedc\072\ufedc\073\ufedc\075\ufedc\001\002\000\156\004\ufeec" +
    "\005\ufeec\006\ufeec\007\ufeec\010\ufeec\011\ufeec\012\ufeec\013" +
    "\ufeec\014\ufeec\015\ufeec\016\ufeec\017\ufeec\020\ufeec\021\ufeec" +
    "\022\ufeec\023\ufeec\025\ufeec\026\ufeec\027\ufeec\030\ufeec\031" +
    "\ufeec\033\ufeec\034\ufeec\035\ufeec\037\ufeec\040\ufeec\041\ufeec" +
    "\042\ufeec\043\ufeec\044\ufeec\045\ufeec\046\ufeec\047\ufeec\050" +
    "\ufeec\051\ufeec\052\ufeec\053\ufeec\054\ufeec\055\ufeec\056\ufeec" +
    "\057\ufeec\060\ufeec\061\ufeec\062\ufeec\063\ufeec\064\ufeec\065" +
    "\ufeec\066\ufeec\067\ufeec\070\ufeec\071\ufeec\072\ufeec\073\ufeec" +
    "\075\ufeec\001\002\000\156\004\ufef0\005\ufef0\006\ufef0\007" +
    "\ufef0\010\ufef0\011\ufef0\012\ufef0\013\ufef0\014\ufef0\015\ufef0" +
    "\016\ufef0\017\ufef0\020\ufef0\021\ufef0\022\ufef0\023\ufef0\025" +
    "\ufef0\026\ufef0\027\ufef0\030\ufef0\031\ufef0\033\ufef0\034\ufef0" +
    "\035\ufef0\037\ufef0\040\ufef0\041\ufef0\042\ufef0\043\ufef0\044" +
    "\ufef0\045\ufef0\046\ufef0\047\ufef0\050\ufef0\051\ufef0\052\ufef0" +
    "\053\ufef0\054\ufef0\055\ufef0\056\ufef0\057\ufef0\060\ufef0\061" +
    "\ufef0\062\ufef0\063\ufef0\064\ufef0\065\ufef0\066\ufef0\067\ufef0" +
    "\070\ufef0\071\ufef0\072\ufef0\073\ufef0\075\ufef0\001\002\000" +
    "\156\004\ufef3\005\ufef3\006\ufef3\007\ufef3\010\ufef3\011\ufef3" +
    "\012\ufef3\013\ufef3\014\ufef3\015\ufef3\016\ufef3\017\ufef3\020" +
    "\ufef3\021\ufef3\022\ufef3\023\ufef3\025\ufef3\026\ufef3\027\ufef3" +
    "\030\ufef3\031\ufef3\033\ufef3\034\ufef3\035\ufef3\037\ufef3\040" +
    "\ufef3\041\ufef3\042\ufef3\043\ufef3\044\ufef3\045\ufef3\046\ufef3" +
    "\047\ufef3\050\ufef3\051\ufef3\052\ufef3\053\ufef3\054\ufef3\055" +
    "\ufef3\056\ufef3\057\ufef3\060\ufef3\061\ufef3\062\ufef3\063\ufef3" +
    "\064\ufef3\065\ufef3\066\ufef3\067\ufef3\070\ufef3\071\ufef3\072" +
    "\ufef3\073\ufef3\075\ufef3\001\002\000\156\004\ufef4\005\ufef4" +
    "\006\ufef4\007\ufef4\010\ufef4\011\ufef4\012\ufef4\013\ufef4\014" +
    "\ufef4\015\ufef4\016\ufef4\017\ufef4\020\ufef4\021\ufef4\022\ufef4" +
    "\023\ufef4\025\ufef4\026\ufef4\027\ufef4\030\ufef4\031\ufef4\033" +
    "\ufef4\034\ufef4\035\ufef4\037\ufef4\040\ufef4\041\ufef4\042\ufef4" +
    "\043\ufef4\044\ufef4\045\ufef4\046\ufef4\047\ufef4\050\ufef4\051" +
    "\ufef4\052\ufef4\053\ufef4\054\ufef4\055\ufef4\056\ufef4\057\ufef4" +
    "\060\ufef4\061\ufef4\062\ufef4\063\ufef4\064\ufef4\065\ufef4\066" +
    "\ufef4\067\ufef4\070\ufef4\071\ufef4\072\ufef4\073\ufef4\075\ufef4" +
    "\001\002\000\156\004\ufed4\005\ufed4\006\ufed4\007\ufed4\010" +
    "\ufed4\011\ufed4\012\ufed4\013\ufed4\014\ufed4\015\ufed4\016\ufed4" +
    "\017\ufed4\020\ufed4\021\ufed4\022\ufed4\023\ufed4\025\ufed4\026" +
    "\ufed4\027\ufed4\030\ufed4\031\ufed4\033\ufed4\034\ufed4\035\ufed4" +
    "\037\ufed4\040\ufed4\041\ufed4\042\ufed4\043\ufed4\044\ufed4\045" +
    "\ufed4\046\ufed4\047\ufed4\050\ufed4\051\ufed4\052\ufed4\053\ufed4" +
    "\054\ufed4\055\ufed4\056\ufed4\057\ufed4\060\ufed4\061\ufed4\062" +
    "\ufed4\063\ufed4\064\ufed4\065\ufed4\066\ufed4\067\ufed4\070\ufed4" +
    "\071\ufed4\072\ufed4\073\ufed4\075\ufed4\001\002\000\156\004" +
    "\ufee3\005\ufee3\006\ufee3\007\ufee3\010\ufee3\011\ufee3\012\ufee3" +
    "\013\ufee3\014\ufee3\015\ufee3\016\ufee3\017\ufee3\020\ufee3\021" +
    "\ufee3\022\ufee3\023\ufee3\025\ufee3\026\ufee3\027\ufee3\030\ufee3" +
    "\031\ufee3\033\ufee3\034\ufee3\035\ufee3\037\ufee3\040\ufee3\041" +
    "\ufee3\042\ufee3\043\ufee3\044\ufee3\045\ufee3\046\ufee3\047\ufee3" +
    "\050\ufee3\051\ufee3\052\ufee3\053\ufee3\054\ufee3\055\ufee3\056" +
    "\ufee3\057\ufee3\060\ufee3\061\ufee3\062\ufee3\063\ufee3\064\ufee3" +
    "\065\ufee3\066\ufee3\067\ufee3\070\ufee3\071\ufee3\072\ufee3\073" +
    "\ufee3\075\ufee3\001\002\000\156\004\ufed0\005\ufed0\006\ufed0" +
    "\007\ufed0\010\ufed0\011\ufed0\012\ufed0\013\ufed0\014\ufed0\015" +
    "\ufed0\016\ufed0\017\ufed0\020\ufed0\021\ufed0\022\ufed0\023\ufed0" +
    "\025\ufed0\026\ufed0\027\ufed0\030\ufed0\031\ufed0\033\ufed0\034" +
    "\ufed0\035\ufed0\037\ufed0\040\ufed0\041\ufed0\042\ufed0\043\ufed0" +
    "\044\ufed0\045\ufed0\046\ufed0\047\ufed0\050\ufed0\051\ufed0\052" +
    "\ufed0\053\ufed0\054\ufed0\055\ufed0\056\ufed0\057\ufed0\060\ufed0" +
    "\061\ufed0\062\ufed0\063\ufed0\064\ufed0\065\ufed0\066\ufed0\067" +
    "\ufed0\070\ufed0\071\ufed0\072\ufed0\073\ufed0\075\ufed0\001\002" +
    "\000\066\003\uff01\011\uff01\016\uff01\020\uff01\021\uff01\022" +
    "\uff01\033\uff01\034\uff01\035\uff01\036\uff01\037\uff01\047\uff01" +
    "\051\uff01\052\uff01\053\uff01\054\uff01\055\uff01\056\uff01\057" +
    "\uff01\060\uff01\064\uff01\065\uff01\067\uff01\074\uff01\075\uff01" +
    "\076\uff01\001\002\000\160\004\u012e\005\u0142\006\u0146\007" +
    "\u012a\010\u012d\011\u012c\012\u0149\013\u0147\014\u0157\015\u0156" +
    "\016\u0124\017\u0155\020\u0125\021\u014d\022\u014a\023\u0152\025" +
    "\u014c\026\u013d\027\u013a\030\u0141\031\u014e\033\u014f\034\u0132" +
    "\035\u0136\037\u0158\040\u0128\041\u013f\042\u013b\043\u012f\044" +
    "\u0154\045\u0127\046\u0144\047\u0133\050\u0143\051\u0130\052\u0129" +
    "\053\u0140\054\u0159\055\u012b\056\u0153\057\u0126\060\u015a\061" +
    "\u013c\062\u0123\063\u0139\064\u0134\065\u0138\066\u0135\067\u0145" +
    "\070\u0150\071\u0131\072\u013e\073\u0148\075\u0151\077\u0137\001" +
    "\002\000\162\004\uff1f\005\uff1f\006\uff1f\007\uff1f\010\uff1f" +
    "\011\uff1f\012\uff1f\013\uff1f\014\uff1f\015\uff1f\016\uff1f\017" +
    "\uff1f\020\uff1f\021\uff1f\022\uff1f\023\uff1f\024\uff1f\025\uff1f" +
    "\026\uff1f\027\uff1f\030\uff1f\031\uff1f\033\uff1f\034\uff1f\035" +
    "\uff1f\037\uff1f\040\uff1f\041\uff1f\042\uff1f\043\uff1f\044\uff1f" +
    "\045\uff1f\046\uff1f\047\uff1f\050\uff1f\051\uff1f\052\uff1f\053" +
    "\uff1f\054\uff1f\055\uff1f\056\uff1f\057\uff1f\060\uff1f\061\uff1f" +
    "\062\uff1f\063\uff1f\064\uff1f\065\uff1f\066\uff1f\067\uff1f\070" +
    "\uff1f\071\uff1f\072\uff1f\073\uff1f\075\uff1f\077\uff1f\001\002" +
    "\000\160\004\ufe8a\005\ufe8a\006\ufe8a\007\ufe8a\010\ufe8a\011" +
    "\ufe8a\012\ufe8a\013\ufe8a\014\ufe8a\015\ufe8a\016\ufe8a\017\ufe8a" +
    "\020\ufe8a\021\ufe8a\022\ufe8a\023\ufe8a\025\ufe8a\026\ufe8a\027" +
    "\ufe8a\030\ufe8a\031\ufe8a\033\ufe8a\034\ufe8a\035\ufe8a\037\ufe8a" +
    "\040\ufe8a\041\ufe8a\042\ufe8a\043\ufe8a\044\ufe8a\045\ufe8a\046" +
    "\ufe8a\047\ufe8a\050\ufe8a\051\ufe8a\052\ufe8a\053\ufe8a\054\ufe8a" +
    "\055\ufe8a\056\ufe8a\057\ufe8a\060\ufe8a\061\ufe8a\062\ufe8a\063" +
    "\ufe8a\064\ufe8a\065\ufe8a\066\ufe8a\067\ufe8a\070\ufe8a\071\ufe8a" +
    "\072\ufe8a\073\ufe8a\075\ufe8a\077\ufe8a\001\002\000\160\004" +
    "\ufe88\005\ufe88\006\ufe88\007\ufe88\010\ufe88\011\ufe88\012\ufe88" +
    "\013\ufe88\014\ufe88\015\ufe88\016\ufe88\017\ufe88\020\ufe88\021" +
    "\ufe88\022\ufe88\023\ufe88\025\ufe88\026\ufe88\027\ufe88\030\ufe88" +
    "\031\ufe88\033\ufe88\034\ufe88\035\ufe88\037\ufe88\040\ufe88\041" +
    "\ufe88\042\ufe88\043\ufe88\044\ufe88\045\ufe88\046\ufe88\047\ufe88" +
    "\050\ufe88\051\ufe88\052\ufe88\053\ufe88\054\ufe88\055\ufe88\056" +
    "\ufe88\057\ufe88\060\ufe88\061\ufe88\062\ufe88\063\ufe88\064\ufe88" +
    "\065\ufe88\066\ufe88\067\ufe88\070\ufe88\071\ufe88\072\ufe88\073" +
    "\ufe88\075\ufe88\077\ufe88\001\002\000\160\004\ufe6a\005\ufe6a" +
    "\006\ufe6a\007\ufe6a\010\ufe6a\011\ufe6a\012\ufe6a\013\ufe6a\014" +
    "\ufe6a\015\ufe6a\016\ufe6a\017\ufe6a\020\ufe6a\021\ufe6a\022\ufe6a" +
    "\023\ufe6a\025\ufe6a\026\ufe6a\027\ufe6a\030\ufe6a\031\ufe6a\033" +
    "\ufe6a\034\ufe6a\035\ufe6a\037\ufe6a\040\ufe6a\041\ufe6a\042\ufe6a" +
    "\043\ufe6a\044\ufe6a\045\ufe6a\046\ufe6a\047\ufe6a\050\ufe6a\051" +
    "\ufe6a\052\ufe6a\053\ufe6a\054\ufe6a\055\ufe6a\056\ufe6a\057\ufe6a" +
    "\060\ufe6a\061\ufe6a\062\ufe6a\063\ufe6a\064\ufe6a\065\ufe6a\066" +
    "\ufe6a\067\ufe6a\070\ufe6a\071\ufe6a\072\ufe6a\073\ufe6a\075\ufe6a" +
    "\077\ufe6a\001\002\000\160\004\ufe74\005\ufe74\006\ufe74\007" +
    "\ufe74\010\ufe74\011\ufe74\012\ufe74\013\ufe74\014\ufe74\015\ufe74" +
    "\016\ufe74\017\ufe74\020\ufe74\021\ufe74\022\ufe74\023\ufe74\025" +
    "\ufe74\026\ufe74\027\ufe74\030\ufe74\031\ufe74\033\ufe74\034\ufe74" +
    "\035\ufe74\037\ufe74\040\ufe74\041\ufe74\042\ufe74\043\ufe74\044" +
    "\ufe74\045\ufe74\046\ufe74\047\ufe74\050\ufe74\051\ufe74\052\ufe74" +
    "\053\ufe74\054\ufe74\055\ufe74\056\ufe74\057\ufe74\060\ufe74\061" +
    "\ufe74\062\ufe74\063\ufe74\064\ufe74\065\ufe74\066\ufe74\067\ufe74" +
    "\070\ufe74\071\ufe74\072\ufe74\073\ufe74\075\ufe74\077\ufe74\001" +
    "\002\000\160\004\ufe79\005\ufe79\006\ufe79\007\ufe79\010\ufe79" +
    "\011\ufe79\012\ufe79\013\ufe79\014\ufe79\015\ufe79\016\ufe79\017" +
    "\ufe79\020\ufe79\021\ufe79\022\ufe79\023\ufe79\025\ufe79\026\ufe79" +
    "\027\ufe79\030\ufe79\031\ufe79\033\ufe79\034\ufe79\035\ufe79\037" +
    "\ufe79\040\ufe79\041\ufe79\042\ufe79\043\ufe79\044\ufe79\045\ufe79" +
    "\046\ufe79\047\ufe79\050\ufe79\051\ufe79\052\ufe79\053\ufe79\054" +
    "\ufe79\055\ufe79\056\ufe79\057\ufe79\060\ufe79\061\ufe79\062\ufe79" +
    "\063\ufe79\064\ufe79\065\ufe79\066\ufe79\067\ufe79\070\ufe79\071" +
    "\ufe79\072\ufe79\073\ufe79\075\ufe79\077\ufe79\001\002\000\160" +
    "\004\ufe6f\005\ufe6f\006\ufe6f\007\ufe6f\010\ufe6f\011\ufe6f\012" +
    "\ufe6f\013\ufe6f\014\ufe6f\015\ufe6f\016\ufe6f\017\ufe6f\020\ufe6f" +
    "\021\ufe6f\022\ufe6f\023\ufe6f\025\ufe6f\026\ufe6f\027\ufe6f\030" +
    "\ufe6f\031\ufe6f\033\ufe6f\034\ufe6f\035\ufe6f\037\ufe6f\040\ufe6f" +
    "\041\ufe6f\042\ufe6f\043\ufe6f\044\ufe6f\045\ufe6f\046\ufe6f\047" +
    "\ufe6f\050\ufe6f\051\ufe6f\052\ufe6f\053\ufe6f\054\ufe6f\055\ufe6f" +
    "\056\ufe6f\057\ufe6f\060\ufe6f\061\ufe6f\062\ufe6f\063\ufe6f\064" +
    "\ufe6f\065\ufe6f\066\ufe6f\067\ufe6f\070\ufe6f\071\ufe6f\072\ufe6f" +
    "\073\ufe6f\075\ufe6f\077\ufe6f\001\002\000\160\004\ufe92\005" +
    "\ufe92\006\ufe92\007\ufe92\010\ufe92\011\ufe92\012\ufe92\013\ufe92" +
    "\014\ufe92\015\ufe92\016\ufe92\017\ufe92\020\ufe92\021\ufe92\022" +
    "\ufe92\023\ufe92\025\ufe92\026\ufe92\027\ufe92\030\ufe92\031\ufe92" +
    "\033\ufe92\034\ufe92\035\ufe92\037\ufe92\040\ufe92\041\ufe92\042" +
    "\ufe92\043\ufe92\044\ufe92\045\ufe92\046\ufe92\047\ufe92\050\ufe92" +
    "\051\ufe92\052\ufe92\053\ufe92\054\ufe92\055\ufe92\056\ufe92\057" +
    "\ufe92\060\ufe92\061\ufe92\062\ufe92\063\ufe92\064\ufe92\065\ufe92" +
    "\066\ufe92\067\ufe92\070\ufe92\071\ufe92\072\ufe92\073\ufe92\075" +
    "\ufe92\077\ufe92\001\002\000\160\004\ufe6c\005\ufe6c\006\ufe6c" +
    "\007\ufe6c\010\ufe6c\011\ufe6c\012\ufe6c\013\ufe6c\014\ufe6c\015" +
    "\ufe6c\016\ufe6c\017\ufe6c\020\ufe6c\021\ufe6c\022\ufe6c\023\ufe6c" +
    "\025\ufe6c\026\ufe6c\027\ufe6c\030\ufe6c\031\ufe6c\033\ufe6c\034" +
    "\ufe6c\035\ufe6c\037\ufe6c\040\ufe6c\041\ufe6c\042\ufe6c\043\ufe6c" +
    "\044\ufe6c\045\ufe6c\046\ufe6c\047\ufe6c\050\ufe6c\051\ufe6c\052" +
    "\ufe6c\053\ufe6c\054\ufe6c\055\ufe6c\056\ufe6c\057\ufe6c\060\ufe6c" +
    "\061\ufe6c\062\ufe6c\063\ufe6c\064\ufe6c\065\ufe6c\066\ufe6c\067" +
    "\ufe6c\070\ufe6c\071\ufe6c\072\ufe6c\073\ufe6c\075\ufe6c\077\ufe6c" +
    "\001\002\000\160\004\ufe90\005\ufe90\006\ufe90\007\ufe90\010" +
    "\ufe90\011\ufe90\012\ufe90\013\ufe90\014\ufe90\015\ufe90\016\ufe90" +
    "\017\ufe90\020\ufe90\021\ufe90\022\ufe90\023\ufe90\025\ufe90\026" +
    "\ufe90\027\ufe90\030\ufe90\031\ufe90\033\ufe90\034\ufe90\035\ufe90" +
    "\037\ufe90\040\ufe90\041\ufe90\042\ufe90\043\ufe90\044\ufe90\045" +
    "\ufe90\046\ufe90\047\ufe90\050\ufe90\051\ufe90\052\ufe90\053\ufe90" +
    "\054\ufe90\055\ufe90\056\ufe90\057\ufe90\060\ufe90\061\ufe90\062" +
    "\ufe90\063\ufe90\064\ufe90\065\ufe90\066\ufe90\067\ufe90\070\ufe90" +
    "\071\ufe90\072\ufe90\073\ufe90\075\ufe90\077\ufe90\001\002\000" +
    "\160\004\ufe91\005\ufe91\006\ufe91\007\ufe91\010\ufe91\011\ufe91" +
    "\012\ufe91\013\ufe91\014\ufe91\015\ufe91\016\ufe91\017\ufe91\020" +
    "\ufe91\021\ufe91\022\ufe91\023\ufe91\025\ufe91\026\ufe91\027\ufe91" +
    "\030\ufe91\031\ufe91\033\ufe91\034\ufe91\035\ufe91\037\ufe91\040" +
    "\ufe91\041\ufe91\042\ufe91\043\ufe91\044\ufe91\045\ufe91\046\ufe91" +
    "\047\ufe91\050\ufe91\051\ufe91\052\ufe91\053\ufe91\054\ufe91\055" +
    "\ufe91\056\ufe91\057\ufe91\060\ufe91\061\ufe91\062\ufe91\063\ufe91" +
    "\064\ufe91\065\ufe91\066\ufe91\067\ufe91\070\ufe91\071\ufe91\072" +
    "\ufe91\073\ufe91\075\ufe91\077\ufe91\001\002\000\160\004\ufe95" +
    "\005\ufe95\006\ufe95\007\ufe95\010\ufe95\011\ufe95\012\ufe95\013" +
    "\ufe95\014\ufe95\015\ufe95\016\ufe95\017\ufe95\020\ufe95\021\ufe95" +
    "\022\ufe95\023\ufe95\025\ufe95\026\ufe95\027\ufe95\030\ufe95\031" +
    "\ufe95\033\ufe95\034\ufe95\035\ufe95\037\ufe95\040\ufe95\041\ufe95" +
    "\042\ufe95\043\ufe95\044\ufe95\045\ufe95\046\ufe95\047\ufe95\050" +
    "\ufe95\051\ufe95\052\ufe95\053\ufe95\054\ufe95\055\ufe95\056\ufe95" +
    "\057\ufe95\060\ufe95\061\ufe95\062\ufe95\063\ufe95\064\ufe95\065" +
    "\ufe95\066\ufe95\067\ufe95\070\ufe95\071\ufe95\072\ufe95\073\ufe95" +
    "\075\ufe95\077\ufe95\001\002\000\160\004\ufe76\005\ufe76\006" +
    "\ufe76\007\ufe76\010\ufe76\011\ufe76\012\ufe76\013\ufe76\014\ufe76" +
    "\015\ufe76\016\ufe76\017\ufe76\020\ufe76\021\ufe76\022\ufe76\023" +
    "\ufe76\025\ufe76\026\ufe76\027\ufe76\030\ufe76\031\ufe76\033\ufe76" +
    "\034\ufe76\035\ufe76\037\ufe76\040\ufe76\041\ufe76\042\ufe76\043" +
    "\ufe76\044\ufe76\045\ufe76\046\ufe76\047\ufe76\050\ufe76\051\ufe76" +
    "\052\ufe76\053\ufe76\054\ufe76\055\ufe76\056\ufe76\057\ufe76\060" +
    "\ufe76\061\ufe76\062\ufe76\063\ufe76\064\ufe76\065\ufe76\066\ufe76" +
    "\067\ufe76\070\ufe76\071\ufe76\072\ufe76\073\ufe76\075\ufe76\077" +
    "\ufe76\001\002\000\160\004\ufe70\005\ufe70\006\ufe70\007\ufe70" +
    "\010\ufe70\011\ufe70\012\ufe70\013\ufe70\014\ufe70\015\ufe70\016" +
    "\ufe70\017\ufe70\020\ufe70\021\ufe70\022\ufe70\023\ufe70\025\ufe70" +
    "\026\ufe70\027\ufe70\030\ufe70\031\ufe70\033\ufe70\034\ufe70\035" +
    "\ufe70\037\ufe70\040\ufe70\041\ufe70\042\ufe70\043\ufe70\044\ufe70" +
    "\045\ufe70\046\ufe70\047\ufe70\050\ufe70\051\ufe70\052\ufe70\053" +
    "\ufe70\054\ufe70\055\ufe70\056\ufe70\057\ufe70\060\ufe70\061\ufe70" +
    "\062\ufe70\063\ufe70\064\ufe70\065\ufe70\066\ufe70\067\ufe70\070" +
    "\ufe70\071\ufe70\072\ufe70\073\ufe70\075\ufe70\077\ufe70\001\002" +
    "\000\160\004\ufe80\005\ufe80\006\ufe80\007\ufe80\010\ufe80\011" +
    "\ufe80\012\ufe80\013\ufe80\014\ufe80\015\ufe80\016\ufe80\017\ufe80" +
    "\020\ufe80\021\ufe80\022\ufe80\023\ufe80\025\ufe80\026\ufe80\027" +
    "\ufe80\030\ufe80\031\ufe80\033\ufe80\034\ufe80\035\ufe80\037\ufe80" +
    "\040\ufe80\041\ufe80\042\ufe80\043\ufe80\044\ufe80\045\ufe80\046" +
    "\ufe80\047\ufe80\050\ufe80\051\ufe80\052\ufe80\053\ufe80\054\ufe80" +
    "\055\ufe80\056\ufe80\057\ufe80\060\ufe80\061\ufe80\062\ufe80\063" +
    "\ufe80\064\ufe80\065\ufe80\066\ufe80\067\ufe80\070\ufe80\071\ufe80" +
    "\072\ufe80\073\ufe80\075\ufe80\077\ufe80\001\002\000\160\004" +
    "\ufe7d\005\ufe7d\006\ufe7d\007\ufe7d\010\ufe7d\011\ufe7d\012\ufe7d" +
    "\013\ufe7d\014\ufe7d\015\ufe7d\016\ufe7d\017\ufe7d\020\ufe7d\021" +
    "\ufe7d\022\ufe7d\023\ufe7d\025\ufe7d\026\ufe7d\027\ufe7d\030\ufe7d" +
    "\031\ufe7d\033\ufe7d\034\ufe7d\035\ufe7d\037\ufe7d\040\ufe7d\041" +
    "\ufe7d\042\ufe7d\043\ufe7d\044\ufe7d\045\ufe7d\046\ufe7d\047\ufe7d" +
    "\050\ufe7d\051\ufe7d\052\ufe7d\053\ufe7d\054\ufe7d\055\ufe7d\056" +
    "\ufe7d\057\ufe7d\060\ufe7d\061\ufe7d\062\ufe7d\063\ufe7d\064\ufe7d" +
    "\065\ufe7d\066\ufe7d\067\ufe7d\070\ufe7d\071\ufe7d\072\ufe7d\073" +
    "\ufe7d\075\ufe7d\077\ufe7d\001\002\000\160\004\ufe72\005\ufe72" +
    "\006\ufe72\007\ufe72\010\ufe72\011\ufe72\012\ufe72\013\ufe72\014" +
    "\ufe72\015\ufe72\016\ufe72\017\ufe72\020\ufe72\021\ufe72\022\ufe72" +
    "\023\ufe72\025\ufe72\026\ufe72\027\ufe72\030\ufe72\031\ufe72\033" +
    "\ufe72\034\ufe72\035\ufe72\037\ufe72\040\ufe72\041\ufe72\042\ufe72" +
    "\043\ufe72\044\ufe72\045\ufe72\046\ufe72\047\ufe72\050\ufe72\051" +
    "\ufe72\052\ufe72\053\ufe72\054\ufe72\055\ufe72\056\ufe72\057\ufe72" +
    "\060\ufe72\061\ufe72\062\ufe72\063\ufe72\064\ufe72\065\ufe72\066" +
    "\ufe72\067\ufe72\070\ufe72\071\ufe72\072\ufe72\073\ufe72\075\ufe72" +
    "\077\ufe72\001\002\000\160\004\ufe68\005\ufe68\006\ufe68\007" +
    "\ufe68\010\ufe68\011\ufe68\012\ufe68\013\ufe68\014\ufe68\015\ufe68" +
    "\016\ufe68\017\ufe68\020\ufe68\021\ufe68\022\ufe68\023\ufe68\025" +
    "\ufe68\026\ufe68\027\ufe68\030\ufe68\031\ufe68\033\ufe68\034\ufe68" +
    "\035\ufe68\037\ufe68\040\ufe68\041\ufe68\042\ufe68\043\ufe68\044" +
    "\ufe68\045\ufe68\046\ufe68\047\ufe68\050\ufe68\051\ufe68\052\ufe68" +
    "\053\ufe68\054\ufe68\055\ufe68\056\ufe68\057\ufe68\060\ufe68\061" +
    "\ufe68\062\ufe68\063\ufe68\064\ufe68\065\ufe68\066\ufe68\067\ufe68" +
    "\070\ufe68\071\ufe68\072\ufe68\073\ufe68\075\ufe68\077\ufe68\001" +
    "\002\000\160\004\ufe66\005\ufe66\006\ufe66\007\ufe66\010\ufe66" +
    "\011\ufe66\012\ufe66\013\ufe66\014\ufe66\015\ufe66\016\ufe66\017" +
    "\ufe66\020\ufe66\021\ufe66\022\ufe66\023\ufe66\025\ufe66\026\ufe66" +
    "\027\ufe66\030\ufe66\031\ufe66\033\ufe66\034\ufe66\035\ufe66\037" +
    "\ufe66\040\ufe66\041\ufe66\042\ufe66\043\ufe66\044\ufe66\045\ufe66" +
    "\046\ufe66\047\ufe66\050\ufe66\051\ufe66\052\ufe66\053\ufe66\054" +
    "\ufe66\055\ufe66\056\ufe66\057\ufe66\060\ufe66\061\ufe66\062\ufe66" +
    "\063\ufe66\064\ufe66\065\ufe66\066\ufe66\067\ufe66\070\ufe66\071" +
    "\ufe66\072\ufe66\073\ufe66\075\ufe66\077\ufe66\001\002\000\160" +
    "\004\ufe7e\005\ufe7e\006\ufe7e\007\ufe7e\010\ufe7e\011\ufe7e\012" +
    "\ufe7e\013\ufe7e\014\ufe7e\015\ufe7e\016\ufe7e\017\ufe7e\020\ufe7e" +
    "\021\ufe7e\022\ufe7e\023\ufe7e\025\ufe7e\026\ufe7e\027\ufe7e\030" +
    "\ufe7e\031\ufe7e\033\ufe7e\034\ufe7e\035\ufe7e\037\ufe7e\040\ufe7e" +
    "\041\ufe7e\042\ufe7e\043\ufe7e\044\ufe7e\045\ufe7e\046\ufe7e\047" +
    "\ufe7e\050\ufe7e\051\ufe7e\052\ufe7e\053\ufe7e\054\ufe7e\055\ufe7e" +
    "\056\ufe7e\057\ufe7e\060\ufe7e\061\ufe7e\062\ufe7e\063\ufe7e\064" +
    "\ufe7e\065\ufe7e\066\ufe7e\067\ufe7e\070\ufe7e\071\ufe7e\072\ufe7e" +
    "\073\ufe7e\075\ufe7e\077\ufe7e\001\002\000\066\003\ufefd\011" +
    "\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd\033\ufefd\034\ufefd" +
    "\035\ufefd\036\ufefd\037\ufefd\047\ufefd\051\ufefd\052\ufefd\053" +
    "\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd" +
    "\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd\001\002\000" +
    "\160\004\ufe67\005\ufe67\006\ufe67\007\ufe67\010\ufe67\011\ufe67" +
    "\012\ufe67\013\ufe67\014\ufe67\015\ufe67\016\ufe67\017\ufe67\020" +
    "\ufe67\021\ufe67\022\ufe67\023\ufe67\025\ufe67\026\ufe67\027\ufe67" +
    "\030\ufe67\031\ufe67\033\ufe67\034\ufe67\035\ufe67\037\ufe67\040" +
    "\ufe67\041\ufe67\042\ufe67\043\ufe67\044\ufe67\045\ufe67\046\ufe67" +
    "\047\ufe67\050\ufe67\051\ufe67\052\ufe67\053\ufe67\054\ufe67\055" +
    "\ufe67\056\ufe67\057\ufe67\060\ufe67\061\ufe67\062\ufe67\063\ufe67" +
    "\064\ufe67\065\ufe67\066\ufe67\067\ufe67\070\ufe67\071\ufe67\072" +
    "\ufe67\073\ufe67\075\ufe67\077\ufe67\001\002\000\162\004\uff1e" +
    "\005\uff1e\006\uff1e\007\uff1e\010\uff1e\011\uff1e\012\uff1e\013" +
    "\uff1e\014\uff1e\015\uff1e\016\uff1e\017\uff1e\020\uff1e\021\uff1e" +
    "\022\uff1e\023\uff1e\024\uff1e\025\uff1e\026\uff1e\027\uff1e\030" +
    "\uff1e\031\uff1e\033\uff1e\034\uff1e\035\uff1e\037\uff1e\040\uff1e" +
    "\041\uff1e\042\uff1e\043\uff1e\044\uff1e\045\uff1e\046\uff1e\047" +
    "\uff1e\050\uff1e\051\uff1e\052\uff1e\053\uff1e\054\uff1e\055\uff1e" +
    "\056\uff1e\057\uff1e\060\uff1e\061\uff1e\062\uff1e\063\uff1e\064" +
    "\uff1e\065\uff1e\066\uff1e\067\uff1e\070\uff1e\071\uff1e\072\uff1e" +
    "\073\uff1e\075\uff1e\077\uff1e\001\002\000\160\004\ufe83\005" +
    "\ufe83\006\ufe83\007\ufe83\010\ufe83\011\ufe83\012\ufe83\013\ufe83" +
    "\014\ufe83\015\ufe83\016\ufe83\017\ufe83\020\ufe83\021\ufe83\022" +
    "\ufe83\023\ufe83\025\ufe83\026\ufe83\027\ufe83\030\ufe83\031\ufe83" +
    "\033\ufe83\034\ufe83\035\ufe83\037\ufe83\040\ufe83\041\ufe83\042" +
    "\ufe83\043\ufe83\044\ufe83\045\ufe83\046\ufe83\047\ufe83\050\ufe83" +
    "\051\ufe83\052\ufe83\053\ufe83\054\ufe83\055\ufe83\056\ufe83\057" +
    "\ufe83\060\ufe83\061\ufe83\062\ufe83\063\ufe83\064\ufe83\065\ufe83" +
    "\066\ufe83\067\ufe83\070\ufe83\071\ufe83\072\ufe83\073\ufe83\075" +
    "\ufe83\077\ufe83\001\002\000\160\004\ufe77\005\ufe77\006\ufe77" +
    "\007\ufe77\010\ufe77\011\ufe77\012\ufe77\013\ufe77\014\ufe77\015" +
    "\ufe77\016\ufe77\017\ufe77\020\ufe77\021\ufe77\022\ufe77\023\ufe77" +
    "\025\ufe77\026\ufe77\027\ufe77\030\ufe77\031\ufe77\033\ufe77\034" +
    "\ufe77\035\ufe77\037\ufe77\040\ufe77\041\ufe77\042\ufe77\043\ufe77" +
    "\044\ufe77\045\ufe77\046\ufe77\047\ufe77\050\ufe77\051\ufe77\052" +
    "\ufe77\053\ufe77\054\ufe77\055\ufe77\056\ufe77\057\ufe77\060\ufe77" +
    "\061\ufe77\062\ufe77\063\ufe77\064\ufe77\065\ufe77\066\ufe77\067" +
    "\ufe77\070\ufe77\071\ufe77\072\ufe77\073\ufe77\075\ufe77\077\ufe77" +
    "\001\002\000\162\004\uff20\005\uff20\006\uff20\007\uff20\010" +
    "\uff20\011\uff20\012\uff20\013\uff20\014\uff20\015\uff20\016\uff20" +
    "\017\uff20\020\uff20\021\uff20\022\uff20\023\uff20\024\uff20\025" +
    "\uff20\026\uff20\027\uff20\030\uff20\031\uff20\033\uff20\034\uff20" +
    "\035\uff20\037\uff20\040\uff20\041\uff20\042\uff20\043\uff20\044" +
    "\uff20\045\uff20\046\uff20\047\uff20\050\uff20\051\uff20\052\uff20" +
    "\053\uff20\054\uff20\055\uff20\056\uff20\057\uff20\060\uff20\061" +
    "\uff20\062\uff20\063\uff20\064\uff20\065\uff20\066\uff20\067\uff20" +
    "\070\uff20\071\uff20\072\uff20\073\uff20\075\uff20\077\uff20\001" +
    "\002\000\160\004\ufe84\005\ufe84\006\ufe84\007\ufe84\010\ufe84" +
    "\011\ufe84\012\ufe84\013\ufe84\014\ufe84\015\ufe84\016\ufe84\017" +
    "\ufe84\020\ufe84\021\ufe84\022\ufe84\023\ufe84\025\ufe84\026\ufe84" +
    "\027\ufe84\030\ufe84\031\ufe84\033\ufe84\034\ufe84\035\ufe84\037" +
    "\ufe84\040\ufe84\041\ufe84\042\ufe84\043\ufe84\044\ufe84\045\ufe84" +
    "\046\ufe84\047\ufe84\050\ufe84\051\ufe84\052\ufe84\053\ufe84\054" +
    "\ufe84\055\ufe84\056\ufe84\057\ufe84\060\ufe84\061\ufe84\062\ufe84" +
    "\063\ufe84\064\ufe84\065\ufe84\066\ufe84\067\ufe84\070\ufe84\071" +
    "\ufe84\072\ufe84\073\ufe84\075\ufe84\077\ufe84\001\002\000\160" +
    "\004\ufe7b\005\ufe7b\006\ufe7b\007\ufe7b\010\ufe7b\011\ufe7b\012" +
    "\ufe7b\013\ufe7b\014\ufe7b\015\ufe7b\016\ufe7b\017\ufe7b\020\ufe7b" +
    "\021\ufe7b\022\ufe7b\023\ufe7b\025\ufe7b\026\ufe7b\027\ufe7b\030" +
    "\ufe7b\031\ufe7b\033\ufe7b\034\ufe7b\035\ufe7b\037\ufe7b\040\ufe7b" +
    "\041\ufe7b\042\ufe7b\043\ufe7b\044\ufe7b\045\ufe7b\046\ufe7b\047" +
    "\ufe7b\050\ufe7b\051\ufe7b\052\ufe7b\053\ufe7b\054\ufe7b\055\ufe7b" +
    "\056\ufe7b\057\ufe7b\060\ufe7b\061\ufe7b\062\ufe7b\063\ufe7b\064" +
    "\ufe7b\065\ufe7b\066\ufe7b\067\ufe7b\070\ufe7b\071\ufe7b\072\ufe7b" +
    "\073\ufe7b\075\ufe7b\077\ufe7b\001\002\000\160\004\ufe78\005" +
    "\ufe78\006\ufe78\007\ufe78\010\ufe78\011\ufe78\012\ufe78\013\ufe78" +
    "\014\ufe78\015\ufe78\016\ufe78\017\ufe78\020\ufe78\021\ufe78\022" +
    "\ufe78\023\ufe78\025\ufe78\026\ufe78\027\ufe78\030\ufe78\031\ufe78" +
    "\033\ufe78\034\ufe78\035\ufe78\037\ufe78\040\ufe78\041\ufe78\042" +
    "\ufe78\043\ufe78\044\ufe78\045\ufe78\046\ufe78\047\ufe78\050\ufe78" +
    "\051\ufe78\052\ufe78\053\ufe78\054\ufe78\055\ufe78\056\ufe78\057" +
    "\ufe78\060\ufe78\061\ufe78\062\ufe78\063\ufe78\064\ufe78\065\ufe78" +
    "\066\ufe78\067\ufe78\070\ufe78\071\ufe78\072\ufe78\073\ufe78\075" +
    "\ufe78\077\ufe78\001\002\000\160\004\ufe6e\005\ufe6e\006\ufe6e" +
    "\007\ufe6e\010\ufe6e\011\ufe6e\012\ufe6e\013\ufe6e\014\ufe6e\015" +
    "\ufe6e\016\ufe6e\017\ufe6e\020\ufe6e\021\ufe6e\022\ufe6e\023\ufe6e" +
    "\025\ufe6e\026\ufe6e\027\ufe6e\030\ufe6e\031\ufe6e\033\ufe6e\034" +
    "\ufe6e\035\ufe6e\037\ufe6e\040\ufe6e\041\ufe6e\042\ufe6e\043\ufe6e" +
    "\044\ufe6e\045\ufe6e\046\ufe6e\047\ufe6e\050\ufe6e\051\ufe6e\052" +
    "\ufe6e\053\ufe6e\054\ufe6e\055\ufe6e\056\ufe6e\057\ufe6e\060\ufe6e" +
    "\061\ufe6e\062\ufe6e\063\ufe6e\064\ufe6e\065\ufe6e\066\ufe6e\067" +
    "\ufe6e\070\ufe6e\071\ufe6e\072\ufe6e\073\ufe6e\075\ufe6e\077\ufe6e" +
    "\001\002\000\160\004\ufe82\005\ufe82\006\ufe82\007\ufe82\010" +
    "\ufe82\011\ufe82\012\ufe82\013\ufe82\014\ufe82\015\ufe82\016\ufe82" +
    "\017\ufe82\020\ufe82\021\ufe82\022\ufe82\023\ufe82\025\ufe82\026" +
    "\ufe82\027\ufe82\030\ufe82\031\ufe82\033\ufe82\034\ufe82\035\ufe82" +
    "\037\ufe82\040\ufe82\041\ufe82\042\ufe82\043\ufe82\044\ufe82\045" +
    "\ufe82\046\ufe82\047\ufe82\050\ufe82\051\ufe82\052\ufe82\053\ufe82" +
    "\054\ufe82\055\ufe82\056\ufe82\057\ufe82\060\ufe82\061\ufe82\062" +
    "\ufe82\063\ufe82\064\ufe82\065\ufe82\066\ufe82\067\ufe82\070\ufe82" +
    "\071\ufe82\072\ufe82\073\ufe82\075\ufe82\077\ufe82\001\002\000" +
    "\160\004\ufe94\005\ufe94\006\ufe94\007\ufe94\010\ufe94\011\ufe94" +
    "\012\ufe94\013\ufe94\014\ufe94\015\ufe94\016\ufe94\017\ufe94\020" +
    "\ufe94\021\ufe94\022\ufe94\023\ufe94\025\ufe94\026\ufe94\027\ufe94" +
    "\030\ufe94\031\ufe94\033\ufe94\034\ufe94\035\ufe94\037\ufe94\040" +
    "\ufe94\041\ufe94\042\ufe94\043\ufe94\044\ufe94\045\ufe94\046\ufe94" +
    "\047\ufe94\050\ufe94\051\ufe94\052\ufe94\053\ufe94\054\ufe94\055" +
    "\ufe94\056\ufe94\057\ufe94\060\ufe94\061\ufe94\062\ufe94\063\ufe94" +
    "\064\ufe94\065\ufe94\066\ufe94\067\ufe94\070\ufe94\071\ufe94\072" +
    "\ufe94\073\ufe94\075\ufe94\077\ufe94\001\002\000\160\004\ufe71" +
    "\005\ufe71\006\ufe71\007\ufe71\010\ufe71\011\ufe71\012\ufe71\013" +
    "\ufe71\014\ufe71\015\ufe71\016\ufe71\017\ufe71\020\ufe71\021\ufe71" +
    "\022\ufe71\023\ufe71\025\ufe71\026\ufe71\027\ufe71\030\ufe71\031" +
    "\ufe71\033\ufe71\034\ufe71\035\ufe71\037\ufe71\040\ufe71\041\ufe71" +
    "\042\ufe71\043\ufe71\044\ufe71\045\ufe71\046\ufe71\047\ufe71\050" +
    "\ufe71\051\ufe71\052\ufe71\053\ufe71\054\ufe71\055\ufe71\056\ufe71" +
    "\057\ufe71\060\ufe71\061\ufe71\062\ufe71\063\ufe71\064\ufe71\065" +
    "\ufe71\066\ufe71\067\ufe71\070\ufe71\071\ufe71\072\ufe71\073\ufe71" +
    "\075\ufe71\077\ufe71\001\002\000\160\004\ufe73\005\ufe73\006" +
    "\ufe73\007\ufe73\010\ufe73\011\ufe73\012\ufe73\013\ufe73\014\ufe73" +
    "\015\ufe73\016\ufe73\017\ufe73\020\ufe73\021\ufe73\022\ufe73\023" +
    "\ufe73\025\ufe73\026\ufe73\027\ufe73\030\ufe73\031\ufe73\033\ufe73" +
    "\034\ufe73\035\ufe73\037\ufe73\040\ufe73\041\ufe73\042\ufe73\043" +
    "\ufe73\044\ufe73\045\ufe73\046\ufe73\047\ufe73\050\ufe73\051\ufe73" +
    "\052\ufe73\053\ufe73\054\ufe73\055\ufe73\056\ufe73\057\ufe73\060" +
    "\ufe73\061\ufe73\062\ufe73\063\ufe73\064\ufe73\065\ufe73\066\ufe73" +
    "\067\ufe73\070\ufe73\071\ufe73\072\ufe73\073\ufe73\075\ufe73\077" +
    "\ufe73\001\002\000\160\004\ufe65\005\ufe65\006\ufe65\007\ufe65" +
    "\010\ufe65\011\ufe65\012\ufe65\013\ufe65\014\ufe65\015\ufe65\016" +
    "\ufe65\017\ufe65\020\ufe65\021\ufe65\022\ufe65\023\ufe65\025\ufe65" +
    "\026\ufe65\027\ufe65\030\ufe65\031\ufe65\033\ufe65\034\ufe65\035" +
    "\ufe65\037\ufe65\040\ufe65\041\ufe65\042\ufe65\043\ufe65\044\ufe65" +
    "\045\ufe65\046\ufe65\047\ufe65\050\ufe65\051\ufe65\052\ufe65\053" +
    "\ufe65\054\ufe65\055\ufe65\056\ufe65\057\ufe65\060\ufe65\061\ufe65" +
    "\062\ufe65\063\ufe65\064\ufe65\065\ufe65\066\ufe65\067\ufe65\070" +
    "\ufe65\071\ufe65\072\ufe65\073\ufe65\075\ufe65\077\ufe65\001\002" +
    "\000\160\004\ufe93\005\ufe93\006\ufe93\007\ufe93\010\ufe93\011" +
    "\ufe93\012\ufe93\013\ufe93\014\ufe93\015\ufe93\016\ufe93\017\ufe93" +
    "\020\ufe93\021\ufe93\022\ufe93\023\ufe93\025\ufe93\026\ufe93\027" +
    "\ufe93\030\ufe93\031\ufe93\033\ufe93\034\ufe93\035\ufe93\037\ufe93" +
    "\040\ufe93\041\ufe93\042\ufe93\043\ufe93\044\ufe93\045\ufe93\046" +
    "\ufe93\047\ufe93\050\ufe93\051\ufe93\052\ufe93\053\ufe93\054\ufe93" +
    "\055\ufe93\056\ufe93\057\ufe93\060\ufe93\061\ufe93\062\ufe93\063" +
    "\ufe93\064\ufe93\065\ufe93\066\ufe93\067\ufe93\070\ufe93\071\ufe93" +
    "\072\ufe93\073\ufe93\075\ufe93\077\ufe93\001\002\000\160\004" +
    "\ufe8e\005\ufe8e\006\ufe8e\007\ufe8e\010\ufe8e\011\ufe8e\012\ufe8e" +
    "\013\ufe8e\014\ufe8e\015\ufe8e\016\ufe8e\017\ufe8e\020\ufe8e\021" +
    "\ufe8e\022\ufe8e\023\ufe8e\025\ufe8e\026\ufe8e\027\ufe8e\030\ufe8e" +
    "\031\ufe8e\033\ufe8e\034\ufe8e\035\ufe8e\037\ufe8e\040\ufe8e\041" +
    "\ufe8e\042\ufe8e\043\ufe8e\044\ufe8e\045\ufe8e\046\ufe8e\047\ufe8e" +
    "\050\ufe8e\051\ufe8e\052\ufe8e\053\ufe8e\054\ufe8e\055\ufe8e\056" +
    "\ufe8e\057\ufe8e\060\ufe8e\061\ufe8e\062\ufe8e\063\ufe8e\064\ufe8e" +
    "\065\ufe8e\066\ufe8e\067\ufe8e\070\ufe8e\071\ufe8e\072\ufe8e\073" +
    "\ufe8e\075\ufe8e\077\ufe8e\001\002\000\160\004\ufe7a\005\ufe7a" +
    "\006\ufe7a\007\ufe7a\010\ufe7a\011\ufe7a\012\ufe7a\013\ufe7a\014" +
    "\ufe7a\015\ufe7a\016\ufe7a\017\ufe7a\020\ufe7a\021\ufe7a\022\ufe7a" +
    "\023\ufe7a\025\ufe7a\026\ufe7a\027\ufe7a\030\ufe7a\031\ufe7a\033" +
    "\ufe7a\034\ufe7a\035\ufe7a\037\ufe7a\040\ufe7a\041\ufe7a\042\ufe7a" +
    "\043\ufe7a\044\ufe7a\045\ufe7a\046\ufe7a\047\ufe7a\050\ufe7a\051" +
    "\ufe7a\052\ufe7a\053\ufe7a\054\ufe7a\055\ufe7a\056\ufe7a\057\ufe7a" +
    "\060\ufe7a\061\ufe7a\062\ufe7a\063\ufe7a\064\ufe7a\065\ufe7a\066" +
    "\ufe7a\067\ufe7a\070\ufe7a\071\ufe7a\072\ufe7a\073\ufe7a\075\ufe7a" +
    "\077\ufe7a\001\002\000\160\004\ufe8f\005\ufe8f\006\ufe8f\007" +
    "\ufe8f\010\ufe8f\011\ufe8f\012\ufe8f\013\ufe8f\014\ufe8f\015\ufe8f" +
    "\016\ufe8f\017\ufe8f\020\ufe8f\021\ufe8f\022\ufe8f\023\ufe8f\025" +
    "\ufe8f\026\ufe8f\027\ufe8f\030\ufe8f\031\ufe8f\033\ufe8f\034\ufe8f" +
    "\035\ufe8f\037\ufe8f\040\ufe8f\041\ufe8f\042\ufe8f\043\ufe8f\044" +
    "\ufe8f\045\ufe8f\046\ufe8f\047\ufe8f\050\ufe8f\051\ufe8f\052\ufe8f" +
    "\053\ufe8f\054\ufe8f\055\ufe8f\056\ufe8f\057\ufe8f\060\ufe8f\061" +
    "\ufe8f\062\ufe8f\063\ufe8f\064\ufe8f\065\ufe8f\066\ufe8f\067\ufe8f" +
    "\070\ufe8f\071\ufe8f\072\ufe8f\073\ufe8f\075\ufe8f\077\ufe8f\001" +
    "\002\000\160\004\ufe86\005\ufe86\006\ufe86\007\ufe86\010\ufe86" +
    "\011\ufe86\012\ufe86\013\ufe86\014\ufe86\015\ufe86\016\ufe86\017" +
    "\ufe86\020\ufe86\021\ufe86\022\ufe86\023\ufe86\025\ufe86\026\ufe86" +
    "\027\ufe86\030\ufe86\031\ufe86\033\ufe86\034\ufe86\035\ufe86\037" +
    "\ufe86\040\ufe86\041\ufe86\042\ufe86\043\ufe86\044\ufe86\045\ufe86" +
    "\046\ufe86\047\ufe86\050\ufe86\051\ufe86\052\ufe86\053\ufe86\054" +
    "\ufe86\055\ufe86\056\ufe86\057\ufe86\060\ufe86\061\ufe86\062\ufe86" +
    "\063\ufe86\064\ufe86\065\ufe86\066\ufe86\067\ufe86\070\ufe86\071" +
    "\ufe86\072\ufe86\073\ufe86\075\ufe86\077\ufe86\001\002\000\160" +
    "\004\ufe64\005\ufe64\006\ufe64\007\ufe64\010\ufe64\011\ufe64\012" +
    "\ufe64\013\ufe64\014\ufe64\015\ufe64\016\ufe64\017\ufe64\020\ufe64" +
    "\021\ufe64\022\ufe64\023\ufe64\025\ufe64\026\ufe64\027\ufe64\030" +
    "\ufe64\031\ufe64\033\ufe64\034\ufe64\035\ufe64\037\ufe64\040\ufe64" +
    "\041\ufe64\042\ufe64\043\ufe64\044\ufe64\045\ufe64\046\ufe64\047" +
    "\ufe64\050\ufe64\051\ufe64\052\ufe64\053\ufe64\054\ufe64\055\ufe64" +
    "\056\ufe64\057\ufe64\060\ufe64\061\ufe64\062\ufe64\063\ufe64\064" +
    "\ufe64\065\ufe64\066\ufe64\067\ufe64\070\ufe64\071\ufe64\072\ufe64" +
    "\073\ufe64\075\ufe64\077\ufe64\001\002\000\160\004\ufe8b\005" +
    "\ufe8b\006\ufe8b\007\ufe8b\010\ufe8b\011\ufe8b\012\ufe8b\013\ufe8b" +
    "\014\ufe8b\015\ufe8b\016\ufe8b\017\ufe8b\020\ufe8b\021\ufe8b\022" +
    "\ufe8b\023\ufe8b\025\ufe8b\026\ufe8b\027\ufe8b\030\ufe8b\031\ufe8b" +
    "\033\ufe8b\034\ufe8b\035\ufe8b\037\ufe8b\040\ufe8b\041\ufe8b\042" +
    "\ufe8b\043\ufe8b\044\ufe8b\045\ufe8b\046\ufe8b\047\ufe8b\050\ufe8b" +
    "\051\ufe8b\052\ufe8b\053\ufe8b\054\ufe8b\055\ufe8b\056\ufe8b\057" +
    "\ufe8b\060\ufe8b\061\ufe8b\062\ufe8b\063\ufe8b\064\ufe8b\065\ufe8b" +
    "\066\ufe8b\067\ufe8b\070\ufe8b\071\ufe8b\072\ufe8b\073\ufe8b\075" +
    "\ufe8b\077\ufe8b\001\002\000\160\004\ufe87\005\ufe87\006\ufe87" +
    "\007\ufe87\010\ufe87\011\ufe87\012\ufe87\013\ufe87\014\ufe87\015" +
    "\ufe87\016\ufe87\017\ufe87\020\ufe87\021\ufe87\022\ufe87\023\ufe87" +
    "\025\ufe87\026\ufe87\027\ufe87\030\ufe87\031\ufe87\033\ufe87\034" +
    "\ufe87\035\ufe87\037\ufe87\040\ufe87\041\ufe87\042\ufe87\043\ufe87" +
    "\044\ufe87\045\ufe87\046\ufe87\047\ufe87\050\ufe87\051\ufe87\052" +
    "\ufe87\053\ufe87\054\ufe87\055\ufe87\056\ufe87\057\ufe87\060\ufe87" +
    "\061\ufe87\062\ufe87\063\ufe87\064\ufe87\065\ufe87\066\ufe87\067" +
    "\ufe87\070\ufe87\071\ufe87\072\ufe87\073\ufe87\075\ufe87\077\ufe87" +
    "\001\002\000\160\004\ufe81\005\ufe81\006\ufe81\007\ufe81\010" +
    "\ufe81\011\ufe81\012\ufe81\013\ufe81\014\ufe81\015\ufe81\016\ufe81" +
    "\017\ufe81\020\ufe81\021\ufe81\022\ufe81\023\ufe81\025\ufe81\026" +
    "\ufe81\027\ufe81\030\ufe81\031\ufe81\033\ufe81\034\ufe81\035\ufe81" +
    "\037\ufe81\040\ufe81\041\ufe81\042\ufe81\043\ufe81\044\ufe81\045" +
    "\ufe81\046\ufe81\047\ufe81\050\ufe81\051\ufe81\052\ufe81\053\ufe81" +
    "\054\ufe81\055\ufe81\056\ufe81\057\ufe81\060\ufe81\061\ufe81\062" +
    "\ufe81\063\ufe81\064\ufe81\065\ufe81\066\ufe81\067\ufe81\070\ufe81" +
    "\071\ufe81\072\ufe81\073\ufe81\075\ufe81\077\ufe81\001\002\000" +
    "\160\004\ufe7f\005\ufe7f\006\ufe7f\007\ufe7f\010\ufe7f\011\ufe7f" +
    "\012\ufe7f\013\ufe7f\014\ufe7f\015\ufe7f\016\ufe7f\017\ufe7f\020" +
    "\ufe7f\021\ufe7f\022\ufe7f\023\ufe7f\025\ufe7f\026\ufe7f\027\ufe7f" +
    "\030\ufe7f\031\ufe7f\033\ufe7f\034\ufe7f\035\ufe7f\037\ufe7f\040" +
    "\ufe7f\041\ufe7f\042\ufe7f\043\ufe7f\044\ufe7f\045\ufe7f\046\ufe7f" +
    "\047\ufe7f\050\ufe7f\051\ufe7f\052\ufe7f\053\ufe7f\054\ufe7f\055" +
    "\ufe7f\056\ufe7f\057\ufe7f\060\ufe7f\061\ufe7f\062\ufe7f\063\ufe7f" +
    "\064\ufe7f\065\ufe7f\066\ufe7f\067\ufe7f\070\ufe7f\071\ufe7f\072" +
    "\ufe7f\073\ufe7f\075\ufe7f\077\ufe7f\001\002\000\160\004\ufe62" +
    "\005\ufe62\006\ufe62\007\ufe62\010\ufe62\011\ufe62\012\ufe62\013" +
    "\ufe62\014\ufe62\015\ufe62\016\ufe62\017\ufe62\020\ufe62\021\ufe62" +
    "\022\ufe62\023\ufe62\025\ufe62\026\ufe62\027\ufe62\030\ufe62\031" +
    "\ufe62\033\ufe62\034\ufe62\035\ufe62\037\ufe62\040\ufe62\041\ufe62" +
    "\042\ufe62\043\ufe62\044\ufe62\045\ufe62\046\ufe62\047\ufe62\050" +
    "\ufe62\051\ufe62\052\ufe62\053\ufe62\054\ufe62\055\ufe62\056\ufe62" +
    "\057\ufe62\060\ufe62\061\ufe62\062\ufe62\063\ufe62\064\ufe62\065" +
    "\ufe62\066\ufe62\067\ufe62\070\ufe62\071\ufe62\072\ufe62\073\ufe62" +
    "\075\ufe62\077\ufe62\001\002\000\160\004\ufe63\005\ufe63\006" +
    "\ufe63\007\ufe63\010\ufe63\011\ufe63\012\ufe63\013\ufe63\014\ufe63" +
    "\015\ufe63\016\ufe63\017\ufe63\020\ufe63\021\ufe63\022\ufe63\023" +
    "\ufe63\025\ufe63\026\ufe63\027\ufe63\030\ufe63\031\ufe63\033\ufe63" +
    "\034\ufe63\035\ufe63\037\ufe63\040\ufe63\041\ufe63\042\ufe63\043" +
    "\ufe63\044\ufe63\045\ufe63\046\ufe63\047\ufe63\050\ufe63\051\ufe63" +
    "\052\ufe63\053\ufe63\054\ufe63\055\ufe63\056\ufe63\057\ufe63\060" +
    "\ufe63\061\ufe63\062\ufe63\063\ufe63\064\ufe63\065\ufe63\066\ufe63" +
    "\067\ufe63\070\ufe63\071\ufe63\072\ufe63\073\ufe63\075\ufe63\077" +
    "\ufe63\001\002\000\160\004\ufe85\005\ufe85\006\ufe85\007\ufe85" +
    "\010\ufe85\011\ufe85\012\ufe85\013\ufe85\014\ufe85\015\ufe85\016" +
    "\ufe85\017\ufe85\020\ufe85\021\ufe85\022\ufe85\023\ufe85\025\ufe85" +
    "\026\ufe85\027\ufe85\030\ufe85\031\ufe85\033\ufe85\034\ufe85\035" +
    "\ufe85\037\ufe85\040\ufe85\041\ufe85\042\ufe85\043\ufe85\044\ufe85" +
    "\045\ufe85\046\ufe85\047\ufe85\050\ufe85\051\ufe85\052\ufe85\053" +
    "\ufe85\054\ufe85\055\ufe85\056\ufe85\057\ufe85\060\ufe85\061\ufe85" +
    "\062\ufe85\063\ufe85\064\ufe85\065\ufe85\066\ufe85\067\ufe85\070" +
    "\ufe85\071\ufe85\072\ufe85\073\ufe85\075\ufe85\077\ufe85\001\002" +
    "\000\160\004\ufe6b\005\ufe6b\006\ufe6b\007\ufe6b\010\ufe6b\011" +
    "\ufe6b\012\ufe6b\013\ufe6b\014\ufe6b\015\ufe6b\016\ufe6b\017\ufe6b" +
    "\020\ufe6b\021\ufe6b\022\ufe6b\023\ufe6b\025\ufe6b\026\ufe6b\027" +
    "\ufe6b\030\ufe6b\031\ufe6b\033\ufe6b\034\ufe6b\035\ufe6b\037\ufe6b" +
    "\040\ufe6b\041\ufe6b\042\ufe6b\043\ufe6b\044\ufe6b\045\ufe6b\046" +
    "\ufe6b\047\ufe6b\050\ufe6b\051\ufe6b\052\ufe6b\053\ufe6b\054\ufe6b" +
    "\055\ufe6b\056\ufe6b\057\ufe6b\060\ufe6b\061\ufe6b\062\ufe6b\063" +
    "\ufe6b\064\ufe6b\065\ufe6b\066\ufe6b\067\ufe6b\070\ufe6b\071\ufe6b" +
    "\072\ufe6b\073\ufe6b\075\ufe6b\077\ufe6b\001\002\000\160\004" +
    "\ufe75\005\ufe75\006\ufe75\007\ufe75\010\ufe75\011\ufe75\012\ufe75" +
    "\013\ufe75\014\ufe75\015\ufe75\016\ufe75\017\ufe75\020\ufe75\021" +
    "\ufe75\022\ufe75\023\ufe75\025\ufe75\026\ufe75\027\ufe75\030\ufe75" +
    "\031\ufe75\033\ufe75\034\ufe75\035\ufe75\037\ufe75\040\ufe75\041" +
    "\ufe75\042\ufe75\043\ufe75\044\ufe75\045\ufe75\046\ufe75\047\ufe75" +
    "\050\ufe75\051\ufe75\052\ufe75\053\ufe75\054\ufe75\055\ufe75\056" +
    "\ufe75\057\ufe75\060\ufe75\061\ufe75\062\ufe75\063\ufe75\064\ufe75" +
    "\065\ufe75\066\ufe75\067\ufe75\070\ufe75\071\ufe75\072\ufe75\073" +
    "\ufe75\075\ufe75\077\ufe75\001\002\000\160\004\ufe89\005\ufe89" +
    "\006\ufe89\007\ufe89\010\ufe89\011\ufe89\012\ufe89\013\ufe89\014" +
    "\ufe89\015\ufe89\016\ufe89\017\ufe89\020\ufe89\021\ufe89\022\ufe89" +
    "\023\ufe89\025\ufe89\026\ufe89\027\ufe89\030\ufe89\031\ufe89\033" +
    "\ufe89\034\ufe89\035\ufe89\037\ufe89\040\ufe89\041\ufe89\042\ufe89" +
    "\043\ufe89\044\ufe89\045\ufe89\046\ufe89\047\ufe89\050\ufe89\051" +
    "\ufe89\052\ufe89\053\ufe89\054\ufe89\055\ufe89\056\ufe89\057\ufe89" +
    "\060\ufe89\061\ufe89\062\ufe89\063\ufe89\064\ufe89\065\ufe89\066" +
    "\ufe89\067\ufe89\070\ufe89\071\ufe89\072\ufe89\073\ufe89\075\ufe89" +
    "\077\ufe89\001\002\000\160\004\ufe8c\005\ufe8c\006\ufe8c\007" +
    "\ufe8c\010\ufe8c\011\ufe8c\012\ufe8c\013\ufe8c\014\ufe8c\015\ufe8c" +
    "\016\ufe8c\017\ufe8c\020\ufe8c\021\ufe8c\022\ufe8c\023\ufe8c\025" +
    "\ufe8c\026\ufe8c\027\ufe8c\030\ufe8c\031\ufe8c\033\ufe8c\034\ufe8c" +
    "\035\ufe8c\037\ufe8c\040\ufe8c\041\ufe8c\042\ufe8c\043\ufe8c\044" +
    "\ufe8c\045\ufe8c\046\ufe8c\047\ufe8c\050\ufe8c\051\ufe8c\052\ufe8c" +
    "\053\ufe8c\054\ufe8c\055\ufe8c\056\ufe8c\057\ufe8c\060\ufe8c\061" +
    "\ufe8c\062\ufe8c\063\ufe8c\064\ufe8c\065\ufe8c\066\ufe8c\067\ufe8c" +
    "\070\ufe8c\071\ufe8c\072\ufe8c\073\ufe8c\075\ufe8c\077\ufe8c\001" +
    "\002\000\160\004\ufe8d\005\ufe8d\006\ufe8d\007\ufe8d\010\ufe8d" +
    "\011\ufe8d\012\ufe8d\013\ufe8d\014\ufe8d\015\ufe8d\016\ufe8d\017" +
    "\ufe8d\020\ufe8d\021\ufe8d\022\ufe8d\023\ufe8d\025\ufe8d\026\ufe8d" +
    "\027\ufe8d\030\ufe8d\031\ufe8d\033\ufe8d\034\ufe8d\035\ufe8d\037" +
    "\ufe8d\040\ufe8d\041\ufe8d\042\ufe8d\043\ufe8d\044\ufe8d\045\ufe8d" +
    "\046\ufe8d\047\ufe8d\050\ufe8d\051\ufe8d\052\ufe8d\053\ufe8d\054" +
    "\ufe8d\055\ufe8d\056\ufe8d\057\ufe8d\060\ufe8d\061\ufe8d\062\ufe8d" +
    "\063\ufe8d\064\ufe8d\065\ufe8d\066\ufe8d\067\ufe8d\070\ufe8d\071" +
    "\ufe8d\072\ufe8d\073\ufe8d\075\ufe8d\077\ufe8d\001\002\000\160" +
    "\004\ufe7c\005\ufe7c\006\ufe7c\007\ufe7c\010\ufe7c\011\ufe7c\012" +
    "\ufe7c\013\ufe7c\014\ufe7c\015\ufe7c\016\ufe7c\017\ufe7c\020\ufe7c" +
    "\021\ufe7c\022\ufe7c\023\ufe7c\025\ufe7c\026\ufe7c\027\ufe7c\030" +
    "\ufe7c\031\ufe7c\033\ufe7c\034\ufe7c\035\ufe7c\037\ufe7c\040\ufe7c" +
    "\041\ufe7c\042\ufe7c\043\ufe7c\044\ufe7c\045\ufe7c\046\ufe7c\047" +
    "\ufe7c\050\ufe7c\051\ufe7c\052\ufe7c\053\ufe7c\054\ufe7c\055\ufe7c" +
    "\056\ufe7c\057\ufe7c\060\ufe7c\061\ufe7c\062\ufe7c\063\ufe7c\064" +
    "\ufe7c\065\ufe7c\066\ufe7c\067\ufe7c\070\ufe7c\071\ufe7c\072\ufe7c" +
    "\073\ufe7c\075\ufe7c\077\ufe7c\001\002\000\160\004\ufe6d\005" +
    "\ufe6d\006\ufe6d\007\ufe6d\010\ufe6d\011\ufe6d\012\ufe6d\013\ufe6d" +
    "\014\ufe6d\015\ufe6d\016\ufe6d\017\ufe6d\020\ufe6d\021\ufe6d\022" +
    "\ufe6d\023\ufe6d\025\ufe6d\026\ufe6d\027\ufe6d\030\ufe6d\031\ufe6d" +
    "\033\ufe6d\034\ufe6d\035\ufe6d\037\ufe6d\040\ufe6d\041\ufe6d\042" +
    "\ufe6d\043\ufe6d\044\ufe6d\045\ufe6d\046\ufe6d\047\ufe6d\050\ufe6d" +
    "\051\ufe6d\052\ufe6d\053\ufe6d\054\ufe6d\055\ufe6d\056\ufe6d\057" +
    "\ufe6d\060\ufe6d\061\ufe6d\062\ufe6d\063\ufe6d\064\ufe6d\065\ufe6d" +
    "\066\ufe6d\067\ufe6d\070\ufe6d\071\ufe6d\072\ufe6d\073\ufe6d\075" +
    "\ufe6d\077\ufe6d\001\002\000\160\004\ufe69\005\ufe69\006\ufe69" +
    "\007\ufe69\010\ufe69\011\ufe69\012\ufe69\013\ufe69\014\ufe69\015" +
    "\ufe69\016\ufe69\017\ufe69\020\ufe69\021\ufe69\022\ufe69\023\ufe69" +
    "\025\ufe69\026\ufe69\027\ufe69\030\ufe69\031\ufe69\033\ufe69\034" +
    "\ufe69\035\ufe69\037\ufe69\040\ufe69\041\ufe69\042\ufe69\043\ufe69" +
    "\044\ufe69\045\ufe69\046\ufe69\047\ufe69\050\ufe69\051\ufe69\052" +
    "\ufe69\053\ufe69\054\ufe69\055\ufe69\056\ufe69\057\ufe69\060\ufe69" +
    "\061\ufe69\062\ufe69\063\ufe69\064\ufe69\065\ufe69\066\ufe69\067" +
    "\ufe69\070\ufe69\071\ufe69\072\ufe69\073\ufe69\075\ufe69\077\ufe69" +
    "\001\002\000\064\003\uff02\011\uff02\016\uff02\020\uff02\021" +
    "\uff02\022\uff02\033\uff02\034\uff02\035\uff02\036\uff02\037\uff02" +
    "\047\uff02\051\uff02\052\uff02\053\uff02\054\uff02\055\uff02\056" +
    "\uff02\057\uff02\060\uff02\064\uff02\065\uff02\067\uff02\074\uff02" +
    "\076\uff02\001\002\000\004\012\u015d\001\002\000\004\013" +
    "\u015e\001\002\000\006\010\ufefd\075\006\001\002\000\004" +
    "\010\uffba\001\002\000\004\010\u0161\001\002\000\054\003" +
    "\ufefd\011\ufefd\020\ufefd\021\ufefd\022\ufefd\034\ufefd\035\ufefd" +
    "\036\ufefd\047\ufefd\051\ufefd\054\ufefd\055\ufefd\056\ufefd\057" +
    "\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006" +
    "\076\ufefd\001\002\000\052\003\uffab\011\uffab\020\uffab\021" +
    "\uffab\022\uffab\034\uffab\035\uffab\036\uffab\047\uffab\051\uffab" +
    "\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\064\uffab\065" +
    "\uffab\067\uffab\074\uffab\076\uffab\001\002\000\052\003\u0177" +
    "\011\u0169\020\u0164\021\u0180\022\u017e\034\022\035\036\036" +
    "\017\047\u016e\051\u016a\054\u0182\055\u0168\056\u0181\057\u0165" +
    "\060\u0183\064\u016f\065\u0172\067\u017d\074\021\076\020\001" +
    "\002\000\004\005\u02b4\001\002\000\004\012\u0262\001\002" +
    "\000\060\003\uffb0\011\uffb0\016\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\047\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\064" +
    "\uffb0\065\uffb0\067\uffb0\074\uffb0\076\uffb0\001\002\000\060" +
    "\003\uffa8\011\uffa8\016\uffa8\020\uffa8\021\uffa8\022\uffa8\034" +
    "\uffa8\035\uffa8\036\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\064\uffa8\065" +
    "\uffa8\067\uffa8\074\uffa8\076\uffa8\001\002\000\004\012\u0256" +
    "\001\002\000\006\002\uffb9\075\uffb9\001\002\000\004\012" +
    "\uff34\001\002\000\060\003\uffb5\011\uffb5\016\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\034\uffb5\035\uffb5\036\uffb5\047\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\064\uffb5\065\uffb5\067\uffb5\074\uffb5\076\uffb5\001" +
    "\002\000\060\003\uffb3\011\uffb3\016\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\034\uffb3\035\uffb3\036\uffb3\047\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\064\uffb3\065\uffb3\067\uffb3\074\uffb3\076\uffb3\001\002\000" +
    "\060\003\uffb7\011\uffb7\016\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\047\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\064\uffb7" +
    "\065\uffb7\067\uffb7\074\uffb7\076\uffb7\001\002\000\004\012" +
    "\u020a\001\002\000\004\012\u0205\001\002\000\060\003\uffa6" +
    "\011\uffa6\016\uffa6\020\uffa6\021\uffa6\022\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\047\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\055\uffa6\056\uffa6\057\uffa6\060\uffa6\064\uffa6\065\uffa6\067" +
    "\uffa6\074\uffa6\076\uffa6\001\002\000\060\003\uffb6\011\uffb6" +
    "\016\uffb6\020\uffb6\021\uffb6\022\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\060\uffb6\064\uffb6\065\uffb6\067\uffb6\074" +
    "\uffb6\076\uffb6\001\002\000\004\012\u0200\001\002\000\060" +
    "\003\uffa7\011\uffa7\016\uffa7\020\uffa7\021\uffa7\022\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\047\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\064\uffa7\065" +
    "\uffa7\067\uffa7\074\uffa7\076\uffa7\001\002\000\060\003\uffac" +
    "\011\uffac\016\uffac\020\uffac\021\uffac\022\uffac\034\uffac\035" +
    "\uffac\036\uffac\047\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\064\uffac\065\uffac\067" +
    "\uffac\074\uffac\076\uffac\001\002\000\060\003\uffad\011\uffad" +
    "\016\uffad\020\uffad\021\uffad\022\uffad\034\uffad\035\uffad\036" +
    "\uffad\047\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\064\uffad\065\uffad\067\uffad\074" +
    "\uffad\076\uffad\001\002\000\060\003\uffaf\011\uffaf\016\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\034\uffaf\035\uffaf\036\uffaf\047" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\064\uffaf\065\uffaf\067\uffaf\074\uffaf\076" +
    "\uffaf\001\002\000\060\003\uffaa\011\uffaa\016\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\034\uffaa\035\uffaa\036\uffaa\047\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\064\uffaa\065\uffaa\067\uffaa\074\uffaa\076\uffaa\001" +
    "\002\000\060\003\uffae\011\uffae\016\uffae\020\uffae\021\uffae" +
    "\022\uffae\034\uffae\035\uffae\036\uffae\047\uffae\051\uffae\052" +
    "\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae" +
    "\064\uffae\065\uffae\067\uffae\074\uffae\076\uffae\001\002\000" +
    "\060\003\uffa9\011\uffa9\016\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\047\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\064\uffa9" +
    "\065\uffa9\067\uffa9\074\uffa9\076\uffa9\001\002\000\004\043" +
    "\u01f9\001\002\000\060\003\uffb2\011\uffb2\016\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\034\uffb2\035\uffb2\036\uffb2\047\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\064\uffb2\065\uffb2\067\uffb2\074\uffb2\076\uffb2\001" +
    "\002\000\060\003\uffb1\011\uffb1\016\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\034\uffb1\035\uffb1\036\uffb1\047\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1" +
    "\064\uffb1\065\uffb1\067\uffb1\074\uffb1\076\uffb1\001\002\000" +
    "\006\014\uffc1\043\u01f2\001\002\000\004\005\u01e7\001\002" +
    "\000\060\003\uffb4\011\uffb4\016\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\047\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\064" +
    "\uffb4\065\uffb4\067\uffb4\074\uffb4\076\uffb4\001\002\000\004" +
    "\005\u01de\001\002\000\006\010\ufefd\075\006\001\002\000" +
    "\004\012\uff48\001\002\000\004\012\u0184\001\002\000\004" +
    "\024\u0185\001\002\000\154\004\ufeca\005\ufeca\006\ufeca\007" +
    "\ufeca\010\ufeca\011\ufeca\012\ufeca\013\ufeca\014\ufeca\015\ufeca" +
    "\016\ufeca\017\ufeca\020\ufeca\021\ufeca\022\ufeca\023\ufeca\025" +
    "\ufeca\026\ufeca\027\ufeca\030\ufeca\031\ufeca\033\ufeca\034\ufeca" +
    "\035\ufeca\037\ufeca\040\ufeca\041\ufeca\042\ufeca\043\ufeca\044" +
    "\ufeca\045\ufeca\046\ufeca\047\ufeca\050\ufeca\051\ufeca\052\ufeca" +
    "\053\ufeca\054\ufeca\055\ufeca\056\ufeca\057\ufeca\060\ufeca\061" +
    "\ufeca\062\ufeca\063\ufeca\064\ufeca\065\ufeca\066\ufeca\067\ufeca" +
    "\070\ufeca\071\ufeca\072\ufeca\073\ufeca\001\002\000\154\004" +
    "\367\005\u0109\006\u010d\007\364\010\370\011\366\012\u0110" +
    "\013\u010f\014\u011d\015\u011c\016\355\017\u011b\020\356\021" +
    "\u0113\022\u0111\023\u011a\025\u0112\026\u0104\027\u0102\030\u0108" +
    "\031\u0114\033\u0115\034\374\035\u0101\037\u011f\040\362\041" +
    "\u0106\042\u0103\043\371\044\u0119\045\361\046\u010b\047\375" +
    "\050\u010a\051\372\052\363\053\u0107\054\u011e\055\365\056" +
    "\u0118\057\360\060\u0120\061\u013c\062\u0123\063\u0139\064\376" +
    "\065\u0100\066\377\067\u010c\070\u0117\071\373\072\u0105\073" +
    "\u010e\001\002\000\004\024\uff23\001\002\000\004\024\u0189" +
    "\001\002\000\004\004\u018a\001\002\000\004\045\u018b\001" +
    "\002\000\010\025\u018e\066\u018c\067\u0190\001\002\000\004" +
    "\013\uff1c\001\002\000\004\013\uff1a\001\002\000\004\067" +
    "\u0195\001\002\000\004\013\u0191\001\002\000\006\013\uff1d" +
    "\014\uffbf\001\002\000\004\006\u0192\001\002\000\062\003" +
    "\uff22\011\uff22\016\uff22\020\uff22\021\uff22\022\uff22\034\uff22" +
    "\035\uff22\036\uff22\047\uff22\051\uff22\052\uff22\053\uff22\054" +
    "\uff22\055\uff22\056\uff22\057\uff22\060\uff22\064\uff22\065\uff22" +
    "\067\uff22\074\uff22\075\uff22\076\uff22\001\002\000\062\003" +
    "\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd\034\ufefd" +
    "\035\ufefd\036\ufefd\047\ufefd\051\ufefd\052\ufefd\053\ufefd\054" +
    "\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd\065\ufefd" +
    "\067\ufefd\074\ufefd\075\006\076\ufefd\001\002\000\060\003" +
    "\uff21\011\uff21\016\uff21\020\uff21\021\uff21\022\uff21\034\uff21" +
    "\035\uff21\036\uff21\047\uff21\051\uff21\052\uff21\053\uff21\054" +
    "\uff21\055\uff21\056\uff21\057\uff21\060\uff21\064\uff21\065\uff21" +
    "\067\uff21\074\uff21\076\uff21\001\002\000\004\025\u0196\001" +
    "\002\000\004\013\uff1b\001\002\000\004\012\u0198\001\002" +
    "\000\012\034\u019c\035\u0199\036\u019a\067\uff40\001\002\000" +
    "\004\067\uff43\001\002\000\004\067\uff42\001\002\000\004" +
    "\067\u019d\001\002\000\004\067\uff41\001\002\000\004\043" +
    "\u019e\001\002\000\010\027\u01a1\066\u019f\067\u01a2\001\002" +
    "\000\006\006\uff3f\013\uff3f\001\002\000\004\006\u01a5\001" +
    "\002\000\006\066\u01a3\067\u01a4\001\002\000\006\006\uff3d" +
    "\013\uff3d\001\002\000\006\006\uff3e\013\uff3e\001\002\000" +
    "\006\006\uff3c\013\uff3c\001\002\000\026\012\uff47\020\uff47" +
    "\021\uff47\022\uff47\025\uff47\027\uff47\066\uff47\067\uff47\072" +
    "\uff47\073\uff47\001\002\000\026\012\240\020\227\021\241" +
    "\022\232\025\242\027\234\066\235\067\231\072\u01a8\073" +
    "\u01a9\001\002\000\004\006\u01b5\001\002\000\012\006\uff66" +
    "\013\uff66\100\uff66\101\uff66\001\002\000\012\006\uff65\013" +
    "\uff65\100\uff65\101\uff65\001\002\000\024\026\261\027\262" +
    "\030\257\031\263\032\260\041\u01ae\042\u01ac\043\u01af\044" +
    "\u01ad\001\002\000\022\012\240\020\227\021\241\022\232" +
    "\025\242\027\234\066\235\067\231\001\002\000\024\012" +
    "\uff72\020\uff72\021\uff72\022\uff72\025\uff72\027\uff72\043\u01b3" +
    "\066\uff72\067\uff72\001\002\000\004\043\u01b2\001\002\000" +
    "\024\012\uff73\020\uff73\021\uff73\022\uff73\025\uff73\027\uff73" +
    "\043\u01b1\066\uff73\067\uff73\001\002\000\004\043\u01b0\001" +
    "\002\000\022\012\uff6f\020\uff6f\021\uff6f\022\uff6f\025\uff6f" +
    "\027\uff6f\066\uff6f\067\uff6f\001\002\000\022\012\uff71\020" +
    "\uff71\021\uff71\022\uff71\025\uff71\027\uff71\066\uff71\067\uff71" +
    "\001\002\000\022\012\uff6e\020\uff6e\021\uff6e\022\uff6e\025" +
    "\uff6e\027\uff6e\066\uff6e\067\uff6e\001\002\000\022\012\uff70" +
    "\020\uff70\021\uff70\022\uff70\025\uff70\027\uff70\066\uff70\067" +
    "\uff70\001\002\000\024\006\uff67\013\uff67\026\261\027\262" +
    "\030\257\031\263\032\260\100\uff67\101\uff67\001\002\000" +
    "\004\067\u01b6\001\002\000\004\043\u01b7\001\002\000\004" +
    "\067\u01b8\001\002\000\004\026\u01b9\001\002\000\010\027" +
    "\u01a1\066\u019f\067\u01a2\001\002\000\004\013\u01bb\001\002" +
    "\000\006\010\uff46\075\uff46\001\002\000\006\010\ufefd\075" +
    "\006\001\002\000\004\010\u01be\001\002\000\054\003\ufefd" +
    "\011\ufefd\020\ufefd\021\ufefd\022\ufefd\034\ufefd\035\ufefd\036" +
    "\ufefd\047\ufefd\051\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd" +
    "\060\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076" +
    "\ufefd\001\002\000\052\003\uffab\011\uffab\020\uffab\021\uffab" +
    "\022\uffab\034\uffab\035\uffab\036\uffab\047\uffab\051\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\064\uffab\065\uffab" +
    "\067\uffab\074\uffab\076\uffab\001\002\000\052\003\u0177\011" +
    "\u01c1\020\u0164\021\u0180\022\u017e\034\022\035\036\036\017" +
    "\047\u016e\051\u016a\054\u0182\055\u0168\056\u0181\057\u0165\060" +
    "\u0183\064\u016f\065\u0172\067\u017d\074\021\076\020\001\002" +
    "\000\062\003\uff45\011\uff45\016\uff45\020\uff45\021\uff45\022" +
    "\uff45\034\uff45\035\uff45\036\uff45\047\uff45\051\uff45\052\uff45" +
    "\053\uff45\054\uff45\055\uff45\056\uff45\057\uff45\060\uff45\064" +
    "\uff45\065\uff45\067\uff45\074\uff45\075\uff45\076\uff45\001\002" +
    "\000\062\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022" +
    "\ufefd\034\ufefd\035\ufefd\036\ufefd\047\ufefd\051\ufefd\052\ufefd" +
    "\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\064" +
    "\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd\001\002" +
    "\000\060\003\uff44\011\uff44\016\uff44\020\uff44\021\uff44\022" +
    "\uff44\034\uff44\035\uff44\036\uff44\047\uff44\051\uff44\052\uff44" +
    "\053\uff44\054\uff44\055\uff44\056\uff44\057\uff44\060\uff44\064" +
    "\uff44\065\uff44\067\uff44\074\uff44\076\uff44\001\002\000\004" +
    "\010\uff37\001\002\000\004\010\u01c6\001\002\000\054\003" +
    "\ufefd\011\ufefd\020\ufefd\021\ufefd\022\ufefd\034\ufefd\035\ufefd" +
    "\036\ufefd\047\ufefd\051\ufefd\054\ufefd\055\ufefd\056\ufefd\057" +
    "\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006" +
    "\076\ufefd\001\002\000\052\003\uffab\011\uffab\020\uffab\021" +
    "\uffab\022\uffab\034\uffab\035\uffab\036\uffab\047\uffab\051\uffab" +
    "\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\064\uffab\065" +
    "\uffab\067\uffab\074\uffab\076\uffab\001\002\000\052\003\u0177" +
    "\011\u01c9\020\u0164\021\u0180\022\u017e\034\022\035\036\036" +
    "\017\047\u016e\051\u016a\054\u0182\055\u0168\056\u0181\057\u0165" +
    "\060\u0183\064\u016f\065\u0172\067\u017d\074\021\076\020\001" +
    "\002\000\006\055\ufefd\075\006\001\002\000\004\055\u01cb" +
    "\001\002\000\004\012\u01cc\001\002\000\030\012\240\020" +
    "\227\021\241\022\232\025\242\027\234\044\u01ce\066\235" +
    "\067\231\072\u01a8\073\u01a9\001\002\000\010\013\uff6a\100" +
    "\uff6a\101\uff6a\001\002\000\026\012\u01da\020\227\021\241" +
    "\022\232\025\242\027\234\066\235\067\231\072\u01a8\073" +
    "\u01a9\001\002\000\010\013\u01d0\100\u01d1\101\u01d2\001\002" +
    "\000\004\006\u01d6\001\002\000\030\012\240\020\227\021" +
    "\241\022\232\025\242\027\234\044\u01ce\066\235\067\231" +
    "\072\u01a8\073\u01a9\001\002\000\030\012\uff6c\020\uff6c\021" +
    "\uff6c\022\uff6c\025\uff6c\027\uff6c\044\uff6c\066\uff6c\067\uff6c" +
    "\072\uff6c\073\uff6c\001\002\000\030\012\240\020\227\021" +
    "\241\022\232\025\242\027\234\044\u01ce\066\235\067\231" +
    "\072\u01a8\073\u01a9\001\002\000\010\013\uff6b\100\u01d1\101" +
    "\uff6b\001\002\000\010\013\uff6d\100\uff6d\101\uff6d\001\002" +
    "\000\062\003\uff36\011\uff36\016\uff36\020\uff36\021\uff36\022" +
    "\uff36\034\uff36\035\uff36\036\uff36\047\uff36\051\uff36\052\uff36" +
    "\053\uff36\054\uff36\055\uff36\056\uff36\057\uff36\060\uff36\064" +
    "\uff36\065\uff36\067\uff36\074\uff36\075\uff36\076\uff36\001\002" +
    "\000\062\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022" +
    "\ufefd\034\ufefd\035\ufefd\036\ufefd\047\ufefd\051\ufefd\052\ufefd" +
    "\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\064" +
    "\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd\001\002" +
    "\000\060\003\uff35\011\uff35\016\uff35\020\uff35\021\uff35\022" +
    "\uff35\034\uff35\035\uff35\036\uff35\047\uff35\051\uff35\052\uff35" +
    "\053\uff35\054\uff35\055\uff35\056\uff35\057\uff35\060\uff35\064" +
    "\uff35\065\uff35\067\uff35\074\uff35\076\uff35\001\002\000\010" +
    "\013\uff68\100\uff68\101\uff68\001\002\000\026\012\240\020" +
    "\227\021\241\022\232\025\242\027\234\066\235\067\231" +
    "\072\u01a8\073\u01a9\001\002\000\004\013\u01dd\001\002\000" +
    "\026\013\256\026\261\027\262\030\257\031\263\032\260" +
    "\041\u01ae\042\u01ac\043\u01af\044\u01ad\001\002\000\010\013" +
    "\uff69\100\uff69\101\uff69\001\002\000\004\067\u01df\001\002" +
    "\000\004\012\u01e0\001\002\000\024\012\uff9f\013\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\025\uff9f\027\uff9f\066\uff9f\067\uff9f" +
    "\001\002\000\024\012\uff96\013\uff93\020\uff96\021\uff96\022" +
    "\uff96\025\uff96\027\uff96\066\uff96\067\uff96\001\002\000\004" +
    "\013\u01e3\001\002\000\004\006\u01e4\001\002\000\062\003" +
    "\uff9e\011\uff9e\016\uff9e\020\uff9e\021\uff9e\022\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\047\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\064\uff9e\065\uff9e" +
    "\067\uff9e\074\uff9e\075\uff9e\076\uff9e\001\002\000\062\003" +
    "\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd\034\ufefd" +
    "\035\ufefd\036\ufefd\047\ufefd\051\ufefd\052\ufefd\053\ufefd\054" +
    "\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd\065\ufefd" +
    "\067\ufefd\074\ufefd\075\006\076\ufefd\001\002\000\060\003" +
    "\uff9d\011\uff9d\016\uff9d\020\uff9d\021\uff9d\022\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\047\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\064\uff9d\065\uff9d" +
    "\067\uff9d\074\uff9d\076\uff9d\001\002\000\004\067\u01e8\001" +
    "\002\000\006\005\u01e9\067\216\001\002\000\004\067\u01ea" +
    "\001\002\000\004\012\u01eb\001\002\000\024\012\uff99\013" +
    "\uff99\020\uff99\021\uff99\022\uff99\025\uff99\027\uff99\066\uff99" +
    "\067\uff99\001\002\000\024\012\uff96\013\uff93\020\uff96\021" +
    "\uff96\022\uff96\025\uff96\027\uff96\066\uff96\067\uff96\001\002" +
    "\000\004\013\u01ee\001\002\000\004\006\u01ef\001\002\000" +
    "\062\003\uff98\011\uff98\016\uff98\020\uff98\021\uff98\022\uff98" +
    "\034\uff98\035\uff98\036\uff98\047\uff98\051\uff98\052\uff98\053" +
    "\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\064\uff98" +
    "\065\uff98\067\uff98\074\uff98\075\uff98\076\uff98\001\002\000" +
    "\062\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd" +
    "\034\ufefd\035\ufefd\036\ufefd\047\ufefd\051\ufefd\052\ufefd\053" +
    "\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd" +
    "\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd\001\002\000" +
    "\060\003\uff97\011\uff97\016\uff97\020\uff97\021\uff97\022\uff97" +
    "\034\uff97\035\uff97\036\uff97\047\uff97\051\uff97\052\uff97\053" +
    "\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\064\uff97" +
    "\065\uff97\067\uff97\074\uff97\076\uff97\001\002\000\024\012" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\025\uffe7\027\uffe7\065\u01f3" +
    "\066\uffe7\067\uffe7\001\002\000\004\012\u01f4\001\002\000" +
    "\004\013\u01f5\001\002\000\004\006\u01f6\001\002\000\062" +
    "\003\uff10\011\uff10\016\uff10\020\uff10\021\uff10\022\uff10\034" +
    "\uff10\035\uff10\036\uff10\047\uff10\051\uff10\052\uff10\053\uff10" +
    "\054\uff10\055\uff10\056\uff10\057\uff10\060\uff10\064\uff10\065" +
    "\uff10\067\uff10\074\uff10\075\uff10\076\uff10\001\002\000\062" +
    "\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd\034" +
    "\ufefd\035\ufefd\036\ufefd\047\ufefd\051\ufefd\052\ufefd\053\ufefd" +
    "\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd\065" +
    "\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd\001\002\000\060" +
    "\003\uff0f\011\uff0f\016\uff0f\020\uff0f\021\uff0f\022\uff0f\034" +
    "\uff0f\035\uff0f\036\uff0f\047\uff0f\051\uff0f\052\uff0f\053\uff0f" +
    "\054\uff0f\055\uff0f\056\uff0f\057\uff0f\060\uff0f\064\uff0f\065" +
    "\uff0f\067\uff0f\074\uff0f\076\uff0f\001\002\000\024\012\057" +
    "\020\046\021\060\022\050\025\061\027\053\065\u01fa\066" +
    "\056\067\047\001\002\000\004\012\u01fb\001\002\000\004" +
    "\013\u01fc\001\002\000\004\006\u01fd\001\002\000\062\003" +
    "\uff0e\011\uff0e\016\uff0e\020\uff0e\021\uff0e\022\uff0e\034\uff0e" +
    "\035\uff0e\036\uff0e\047\uff0e\051\uff0e\052\uff0e\053\uff0e\054" +
    "\uff0e\055\uff0e\056\uff0e\057\uff0e\060\uff0e\064\uff0e\065\uff0e" +
    "\067\uff0e\074\uff0e\075\uff0e\076\uff0e\001\002\000\062\003" +
    "\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd\034\ufefd" +
    "\035\ufefd\036\ufefd\047\ufefd\051\ufefd\052\ufefd\053\ufefd\054" +
    "\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd\065\ufefd" +
    "\067\ufefd\074\ufefd\075\006\076\ufefd\001\002\000\060\003" +
    "\uff0d\011\uff0d\016\uff0d\020\uff0d\021\uff0d\022\uff0d\034\uff0d" +
    "\035\uff0d\036\uff0d\047\uff0d\051\uff0d\052\uff0d\053\uff0d\054" +
    "\uff0d\055\uff0d\056\uff0d\057\uff0d\060\uff0d\064\uff0d\065\uff0d" +
    "\067\uff0d\074\uff0d\076\uff0d\001\002\000\004\013\u0201\001" +
    "\002\000\004\006\u0202\001\002\000\062\003\uff0c\011\uff0c" +
    "\016\uff0c\020\uff0c\021\uff0c\022\uff0c\034\uff0c\035\uff0c\036" +
    "\uff0c\047\uff0c\051\uff0c\052\uff0c\053\uff0c\054\uff0c\055\uff0c" +
    "\056\uff0c\057\uff0c\060\uff0c\064\uff0c\065\uff0c\067\uff0c\074" +
    "\uff0c\075\uff0c\076\uff0c\001\002\000\062\003\ufefd\011\ufefd" +
    "\016\ufefd\020\ufefd\021\ufefd\022\ufefd\034\ufefd\035\ufefd\036" +
    "\ufefd\047\ufefd\051\ufefd\052\ufefd\053\ufefd\054\ufefd\055\ufefd" +
    "\056\ufefd\057\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd\074" +
    "\ufefd\075\006\076\ufefd\001\002\000\060\003\uff0b\011\uff0b" +
    "\016\uff0b\020\uff0b\021\uff0b\022\uff0b\034\uff0b\035\uff0b\036" +
    "\uff0b\047\uff0b\051\uff0b\052\uff0b\053\uff0b\054\uff0b\055\uff0b" +
    "\056\uff0b\057\uff0b\060\uff0b\064\uff0b\065\uff0b\067\uff0b\074" +
    "\uff0b\076\uff0b\001\002\000\004\013\u0206\001\002\000\004" +
    "\006\u0207\001\002\000\062\003\uff12\011\uff12\016\uff12\020" +
    "\uff12\021\uff12\022\uff12\034\uff12\035\uff12\036\uff12\047\uff12" +
    "\051\uff12\052\uff12\053\uff12\054\uff12\055\uff12\056\uff12\057" +
    "\uff12\060\uff12\064\uff12\065\uff12\067\uff12\074\uff12\075\uff12" +
    "\076\uff12\001\002\000\062\003\ufefd\011\ufefd\016\ufefd\020" +
    "\ufefd\021\ufefd\022\ufefd\034\ufefd\035\ufefd\036\ufefd\047\ufefd" +
    "\051\ufefd\052\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057" +
    "\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006" +
    "\076\ufefd\001\002\000\060\003\uff11\011\uff11\016\uff11\020" +
    "\uff11\021\uff11\022\uff11\034\uff11\035\uff11\036\uff11\047\uff11" +
    "\051\uff11\052\uff11\053\uff11\054\uff11\055\uff11\056\uff11\057" +
    "\uff11\060\uff11\064\uff11\065\uff11\067\uff11\074\uff11\076\uff11" +
    "\001\002\000\030\012\uff7f\020\uff7f\021\uff7f\022\uff7f\025" +
    "\uff7f\027\uff7f\044\uff7f\066\uff7f\067\uff7f\072\uff7f\073\uff7f" +
    "\001\002\000\030\012\240\020\227\021\241\022\232\025" +
    "\242\027\234\044\u01ce\066\235\067\231\072\u01a8\073\u01a9" +
    "\001\002\000\010\013\uff7e\100\u01d1\101\u01d2\001\002\000" +
    "\004\013\u020e\001\002\000\006\010\ufefd\075\006\001\002" +
    "\000\004\010\u0210\001\002\000\054\003\ufefd\011\ufefd\020" +
    "\ufefd\021\ufefd\022\ufefd\034\ufefd\035\ufefd\036\ufefd\047\ufefd" +
    "\051\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd\064" +
    "\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd\001\002" +
    "\000\052\003\uffab\011\uffab\020\uffab\021\uffab\022\uffab\034" +
    "\uffab\035\uffab\036\uffab\047\uffab\051\uffab\054\uffab\055\uffab" +
    "\056\uffab\057\uffab\060\uffab\064\uffab\065\uffab\067\uffab\074" +
    "\uffab\076\uffab\001\002\000\052\003\u0177\011\u0213\020\u0164" +
    "\021\u0180\022\u017e\034\022\035\036\036\017\047\u016e\051" +
    "\u016a\054\u0182\055\u0168\056\u0181\057\u0165\060\u0183\064\u016f" +
    "\065\u0172\067\u017d\074\021\076\020\001\002\000\064\003" +
    "\uff7d\011\uff7d\016\uff7d\020\uff7d\021\uff7d\022\uff7d\034\uff7d" +
    "\035\uff7d\036\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053" +
    "\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\064\uff7d" +
    "\065\uff7d\067\uff7d\074\uff7d\075\uff7d\076\uff7d\001\002\000" +
    "\064\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd" +
    "\034\ufefd\035\ufefd\036\ufefd\047\ufefd\050\ufefd\051\ufefd\052" +
    "\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd" +
    "\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd\001" +
    "\002\000\062\003\uff74\011\uff74\016\uff74\020\uff74\021\uff74" +
    "\022\uff74\034\uff74\035\uff74\036\uff74\047\uff74\050\u0217\051" +
    "\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74" +
    "\060\uff74\064\uff74\065\uff74\067\uff74\074\uff74\076\uff74\001" +
    "\002\000\060\003\uff7c\011\uff7c\016\uff7c\020\uff7c\021\uff7c" +
    "\022\uff7c\034\uff7c\035\uff7c\036\uff7c\047\uff7c\051\uff7c\052" +
    "\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c" +
    "\064\uff7c\065\uff7c\067\uff7c\074\uff7c\076\uff7c\001\002\000" +
    "\010\010\ufefd\047\u0218\075\006\001\002\000\004\012\u0221" +
    "\001\002\000\004\010\uff77\001\002\000\004\010\u021b\001" +
    "\002\000\054\003\ufefd\011\ufefd\020\ufefd\021\ufefd\022\ufefd" +
    "\034\ufefd\035\ufefd\036\ufefd\047\ufefd\051\ufefd\054\ufefd\055" +
    "\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd" +
    "\074\ufefd\075\006\076\ufefd\001\002\000\052\003\uffab\011" +
    "\uffab\020\uffab\021\uffab\022\uffab\034\uffab\035\uffab\036\uffab" +
    "\047\uffab\051\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060" +
    "\uffab\064\uffab\065\uffab\067\uffab\074\uffab\076\uffab\001\002" +
    "\000\052\003\u0177\011\u021e\020\u0164\021\u0180\022\u017e\034" +
    "\022\035\036\036\017\047\u016e\051\u016a\054\u0182\055\u0168" +
    "\056\u0181\057\u0165\060\u0183\064\u016f\065\u0172\067\u017d\074" +
    "\021\076\020\001\002\000\062\003\uff76\011\uff76\016\uff76" +
    "\020\uff76\021\uff76\022\uff76\034\uff76\035\uff76\036\uff76\047" +
    "\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056\uff76" +
    "\057\uff76\060\uff76\064\uff76\065\uff76\067\uff76\074\uff76\075" +
    "\uff76\076\uff76\001\002\000\062\003\ufefd\011\ufefd\016\ufefd" +
    "\020\ufefd\021\ufefd\022\ufefd\034\ufefd\035\ufefd\036\ufefd\047" +
    "\ufefd\051\ufefd\052\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd" +
    "\057\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075" +
    "\006\076\ufefd\001\002\000\060\003\uff75\011\uff75\016\uff75" +
    "\020\uff75\021\uff75\022\uff75\034\uff75\035\uff75\036\uff75\047" +
    "\uff75\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75" +
    "\057\uff75\060\uff75\064\uff75\065\uff75\067\uff75\074\uff75\076" +
    "\uff75\001\002\000\030\012\uff7b\020\uff7b\021\uff7b\022\uff7b" +
    "\025\uff7b\027\uff7b\044\uff7b\066\uff7b\067\uff7b\072\uff7b\073" +
    "\uff7b\001\002\000\030\012\240\020\227\021\241\022\232" +
    "\025\242\027\234\044\u01ce\066\235\067\231\072\u01a8\073" +
    "\u01a9\001\002\000\010\013\uff7a\100\u01d1\101\u01d2\001\002" +
    "\000\004\013\u0225\001\002\000\006\010\ufefd\075\006\001" +
    "\002\000\004\010\u0227\001\002\000\054\003\ufefd\011\ufefd" +
    "\020\ufefd\021\ufefd\022\ufefd\034\ufefd\035\ufefd\036\ufefd\047" +
    "\ufefd\051\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd" +
    "\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd\001" +
    "\002\000\052\003\uffab\011\uffab\020\uffab\021\uffab\022\uffab" +
    "\034\uffab\035\uffab\036\uffab\047\uffab\051\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\064\uffab\065\uffab\067\uffab" +
    "\074\uffab\076\uffab\001\002\000\052\003\u0177\011\u022a\020" +
    "\u0164\021\u0180\022\u017e\034\022\035\036\036\017\047\u016e" +
    "\051\u016a\054\u0182\055\u0168\056\u0181\057\u0165\060\u0183\064" +
    "\u016f\065\u0172\067\u017d\074\021\076\020\001\002\000\064" +
    "\003\uff79\011\uff79\016\uff79\020\uff79\021\uff79\022\uff79\034" +
    "\uff79\035\uff79\036\uff79\047\uff79\050\uff79\051\uff79\052\uff79" +
    "\053\uff79\054\uff79\055\uff79\056\uff79\057\uff79\060\uff79\064" +
    "\uff79\065\uff79\067\uff79\074\uff79\075\uff79\076\uff79\001\002" +
    "\000\064\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022" +
    "\ufefd\034\ufefd\035\ufefd\036\ufefd\047\ufefd\050\ufefd\051\ufefd" +
    "\052\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060" +
    "\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd" +
    "\001\002\000\062\003\uff74\011\uff74\016\uff74\020\uff74\021" +
    "\uff74\022\uff74\034\uff74\035\uff74\036\uff74\047\uff74\050\u0217" +
    "\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057" +
    "\uff74\060\uff74\064\uff74\065\uff74\067\uff74\074\uff74\076\uff74" +
    "\001\002\000\060\003\uff78\011\uff78\016\uff78\020\uff78\021" +
    "\uff78\022\uff78\034\uff78\035\uff78\036\uff78\047\uff78\051\uff78" +
    "\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78\060" +
    "\uff78\064\uff78\065\uff78\067\uff78\074\uff78\076\uff78\001\002" +
    "\000\004\012\u022f\001\002\000\010\025\u018e\066\u018c\067" +
    "\u0190\001\002\000\004\013\uff33\001\002\000\004\013\u0232" +
    "\001\002\000\006\010\ufefd\075\006\001\002\000\004\010" +
    "\u0234\001\002\000\012\011\ufefd\052\ufefd\053\ufefd\075\006" +
    "\001\002\000\010\011\uff2b\052\u0238\053\u0237\001\002\000" +
    "\004\011\u0251\001\002\000\004\007\u024c\001\002\000\012" +
    "\025\u023b\027\u023c\066\u023a\067\u023d\001\002\000\004\007" +
    "\u0242\001\002\000\004\007\uff28\001\002\000\004\067\u0240" +
    "\001\002\000\006\066\u023e\067\u023f\001\002\000\004\007" +
    "\uff26\001\002\000\004\007\uff24\001\002\000\004\007\uff25" +
    "\001\002\000\004\025\u0241\001\002\000\004\007\uff27\001" +
    "\002\000\004\075\uff30\001\002\000\004\075\u0116\001\002" +
    "\000\062\003\uffab\011\uffab\016\uffab\020\uffab\021\uffab\022" +
    "\uffab\034\uffab\035\uffab\036\uffab\047\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\064" +
    "\uffab\065\uffab\067\uffab\074\uffab\075\u0121\076\uffab\001\002" +
    "\000\060\003\u0177\011\uff29\016\u0246\020\u0164\021\u0180\022" +
    "\u017e\034\022\035\036\036\017\047\u016e\051\u016a\052\uff29" +
    "\053\uff29\054\u0182\055\u0168\056\u0181\057\u0165\060\u0183\064" +
    "\u016f\065\u0172\067\u017d\074\021\076\020\001\002\000\004" +
    "\006\u024a\001\002\000\010\011\uff2f\052\uff2f\053\uff2f\001" +
    "\002\000\010\011\uff2b\052\u0238\053\u0237\001\002\000\004" +
    "\011\uff2e\001\002\000\012\011\ufefd\052\ufefd\053\ufefd\075" +
    "\006\001\002\000\010\011\uff2a\052\uff2a\053\uff2a\001\002" +
    "\000\004\075\uff2d\001\002\000\004\075\u0116\001\002\000" +
    "\056\003\uffab\011\uffab\016\uffab\020\uffab\021\uffab\022\uffab" +
    "\034\uffab\035\uffab\036\uffab\047\uffab\051\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\064\uffab\065\uffab\067\uffab" +
    "\074\uffab\075\u0121\076\uffab\001\002\000\054\003\u0177\011" +
    "\uff29\016\u0246\020\u0164\021\u0180\022\u017e\034\022\035\036" +
    "\036\017\047\u016e\051\u016a\054\u0182\055\u0168\056\u0181\057" +
    "\u0165\060\u0183\064\u016f\065\u0172\067\u017d\074\021\076\020" +
    "\001\002\000\004\011\uff2c\001\002\000\062\003\uff32\011" +
    "\uff32\016\uff32\020\uff32\021\uff32\022\uff32\034\uff32\035\uff32" +
    "\036\uff32\047\uff32\051\uff32\052\uff32\053\uff32\054\uff32\055" +
    "\uff32\056\uff32\057\uff32\060\uff32\064\uff32\065\uff32\067\uff32" +
    "\074\uff32\075\uff32\076\uff32\001\002\000\062\003\ufefd\011" +
    "\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd\034\ufefd\035\ufefd" +
    "\036\ufefd\047\ufefd\051\ufefd\052\ufefd\053\ufefd\054\ufefd\055" +
    "\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd" +
    "\074\ufefd\075\006\076\ufefd\001\002\000\060\003\uff31\011" +
    "\uff31\016\uff31\020\uff31\021\uff31\022\uff31\034\uff31\035\uff31" +
    "\036\uff31\047\uff31\051\uff31\052\uff31\053\uff31\054\uff31\055" +
    "\uff31\056\uff31\057\uff31\060\uff31\064\uff31\065\uff31\067\uff31" +
    "\074\uff31\076\uff31\001\002\000\006\002\ufefd\075\006\001" +
    "\002\000\004\002\uffb8\001\002\000\030\012\uff3b\020\uff3b" +
    "\021\uff3b\022\uff3b\025\uff3b\027\uff3b\044\uff3b\066\uff3b\067" +
    "\uff3b\072\uff3b\073\uff3b\001\002\000\030\012\240\020\227" +
    "\021\241\022\232\025\242\027\234\044\u01ce\066\235\067" +
    "\231\072\u01a8\073\u01a9\001\002\000\010\013\uff3a\100\u01d1" +
    "\101\u01d2\001\002\000\004\013\u025a\001\002\000\006\010" +
    "\ufefd\075\006\001\002\000\004\010\u025c\001\002\000\054" +
    "\003\ufefd\011\ufefd\020\ufefd\021\ufefd\022\ufefd\034\ufefd\035" +
    "\ufefd\036\ufefd\047\ufefd\051\ufefd\054\ufefd\055\ufefd\056\ufefd" +
    "\057\ufefd\060\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075" +
    "\006\076\ufefd\001\002\000\052\003\uffab\011\uffab\020\uffab" +
    "\021\uffab\022\uffab\034\uffab\035\uffab\036\uffab\047\uffab\051" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\064\uffab" +
    "\065\uffab\067\uffab\074\uffab\076\uffab\001\002\000\052\003" +
    "\u0177\011\u025f\020\u0164\021\u0180\022\u017e\034\022\035\036" +
    "\036\017\047\u016e\051\u016a\054\u0182\055\u0168\056\u0181\057" +
    "\u0165\060\u0183\064\u016f\065\u0172\067\u017d\074\021\076\020" +
    "\001\002\000\062\003\uff39\011\uff39\016\uff39\020\uff39\021" +
    "\uff39\022\uff39\034\uff39\035\uff39\036\uff39\047\uff39\051\uff39" +
    "\052\uff39\053\uff39\054\uff39\055\uff39\056\uff39\057\uff39\060" +
    "\uff39\064\uff39\065\uff39\067\uff39\074\uff39\075\uff39\076\uff39" +
    "\001\002\000\062\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021" +
    "\ufefd\022\ufefd\034\ufefd\035\ufefd\036\ufefd\047\ufefd\051\ufefd" +
    "\052\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060" +
    "\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd" +
    "\001\002\000\060\003\uff38\011\uff38\016\uff38\020\uff38\021" +
    "\uff38\022\uff38\034\uff38\035\uff38\036\uff38\047\uff38\051\uff38" +
    "\052\uff38\053\uff38\054\uff38\055\uff38\056\uff38\057\uff38\060" +
    "\uff38\064\uff38\065\uff38\067\uff38\074\uff38\076\uff38\001\002" +
    "\000\020\020\uff17\021\uff17\022\uff17\024\uff19\045\uff17\066" +
    "\uff17\067\uff17\001\002\000\016\020\046\021\060\022\050" +
    "\045\u02a3\066\u02a2\067\u029d\001\002\000\004\024\u0265\001" +
    "\002\000\156\004\ufe96\005\ufe96\006\ufe96\007\ufe96\010\ufe96" +
    "\011\ufe96\012\ufe96\013\ufe96\014\ufe96\015\ufe96\016\ufe96\017" +
    "\ufe96\020\ufe96\021\ufe96\022\ufe96\023\ufe96\024\ufe96\025\ufe96" +
    "\026\ufe96\027\ufe96\030\ufe96\031\ufe96\033\ufe96\034\ufe96\035" +
    "\ufe96\037\ufe96\040\ufe96\041\ufe96\042\ufe96\043\ufe96\044\ufe96" +
    "\045\ufe96\046\ufe96\047\ufe96\050\ufe96\051\ufe96\052\ufe96\053" +
    "\ufe96\054\ufe96\055\ufe96\056\ufe96\057\ufe96\060\ufe96\061\ufe96" +
    "\062\ufe96\063\ufe96\064\ufe96\065\ufe96\066\ufe96\067\ufe96\070" +
    "\ufe96\071\ufe96\072\ufe96\073\ufe96\001\002\000\156\004\u0271" +
    "\005\u0283\006\u0287\007\u026e\010\u0272\011\u0270\012\u028a\013" +
    "\u0289\014\u0297\015\u0292\016\u0267\017\u0295\020\u0268\021\u028d" +
    "\022\u028b\023\u0293\024\u026a\025\u028e\026\u027e\027\u027c\030" +
    "\u0282\031\u0290\033\u028f\034\u0276\035\u027a\037\u0299\040\u026b" +
    "\041\u0280\042\u027d\043\u0273\044\u0294\045\u026c\046\u0285\047" +
    "\u0277\050\u0284\051\u0274\052\u026d\053\u0281\054\u0298\055\u026f" +
    "\056\u0296\057\u0269\060\u029a\061\u013c\062\u0123\063\u0139\064" +
    "\u0278\065\u027b\066\u0279\067\u0286\070\u0291\071\u0275\072\u027f" +
    "\073\u0288\001\002\000\156\004\ufebe\005\ufebe\006\ufebe\007" +
    "\ufebe\010\ufebe\011\ufebe\012\ufebe\013\ufebe\014\ufebe\015\ufebe" +
    "\016\ufebe\017\ufebe\020\ufebe\021\ufebe\022\ufebe\023\ufebe\024" +
    "\ufebe\025\ufebe\026\ufebe\027\ufebe\030\ufebe\031\ufebe\033\ufebe" +
    "\034\ufebe\035\ufebe\037\ufebe\040\ufebe\041\ufebe\042\ufebe\043" +
    "\ufebe\044\ufebe\045\ufebe\046\ufebe\047\ufebe\050\ufebe\051\ufebe" +
    "\052\ufebe\053\ufebe\054\ufebe\055\ufebe\056\ufebe\057\ufebe\060" +
    "\ufebe\061\ufebe\062\ufebe\063\ufebe\064\ufebe\065\ufebe\066\ufebe" +
    "\067\ufebe\070\ufebe\071\ufebe\072\ufebe\073\ufebe\001\002\000" +
    "\156\004\ufebc\005\ufebc\006\ufebc\007\ufebc\010\ufebc\011\ufebc" +
    "\012\ufebc\013\ufebc\014\ufebc\015\ufebc\016\ufebc\017\ufebc\020" +
    "\ufebc\021\ufebc\022\ufebc\023\ufebc\024\ufebc\025\ufebc\026\ufebc" +
    "\027\ufebc\030\ufebc\031\ufebc\033\ufebc\034\ufebc\035\ufebc\037" +
    "\ufebc\040\ufebc\041\ufebc\042\ufebc\043\ufebc\044\ufebc\045\ufebc" +
    "\046\ufebc\047\ufebc\050\ufebc\051\ufebc\052\ufebc\053\ufebc\054" +
    "\ufebc\055\ufebc\056\ufebc\057\ufebc\060\ufebc\061\ufebc\062\ufebc" +
    "\063\ufebc\064\ufebc\065\ufebc\066\ufebc\067\ufebc\070\ufebc\071" +
    "\ufebc\072\ufebc\073\ufebc\001\002\000\156\004\ufe9e\005\ufe9e" +
    "\006\ufe9e\007\ufe9e\010\ufe9e\011\ufe9e\012\ufe9e\013\ufe9e\014" +
    "\ufe9e\015\ufe9e\016\ufe9e\017\ufe9e\020\ufe9e\021\ufe9e\022\ufe9e" +
    "\023\ufe9e\024\ufe9e\025\ufe9e\026\ufe9e\027\ufe9e\030\ufe9e\031" +
    "\ufe9e\033\ufe9e\034\ufe9e\035\ufe9e\037\ufe9e\040\ufe9e\041\ufe9e" +
    "\042\ufe9e\043\ufe9e\044\ufe9e\045\ufe9e\046\ufe9e\047\ufe9e\050" +
    "\ufe9e\051\ufe9e\052\ufe9e\053\ufe9e\054\ufe9e\055\ufe9e\056\ufe9e" +
    "\057\ufe9e\060\ufe9e\061\ufe9e\062\ufe9e\063\ufe9e\064\ufe9e\065" +
    "\ufe9e\066\ufe9e\067\ufe9e\070\ufe9e\071\ufe9e\072\ufe9e\073\ufe9e" +
    "\001\002\000\006\004\u029c\013\uff13\001\002\000\156\004" +
    "\ufead\005\ufead\006\ufead\007\ufead\010\ufead\011\ufead\012\ufead" +
    "\013\ufead\014\ufead\015\ufead\016\ufead\017\ufead\020\ufead\021" +
    "\ufead\022\ufead\023\ufead\024\ufead\025\ufead\026\ufead\027\ufead" +
    "\030\ufead\031\ufead\033\ufead\034\ufead\035\ufead\037\ufead\040" +
    "\ufead\041\ufead\042\ufead\043\ufead\044\ufead\045\ufead\046\ufead" +
    "\047\ufead\050\ufead\051\ufead\052\ufead\053\ufead\054\ufead\055" +
    "\ufead\056\ufead\057\ufead\060\ufead\061\ufead\062\ufead\063\ufead" +
    "\064\ufead\065\ufead\066\ufead\067\ufead\070\ufead\071\ufead\072" +
    "\ufead\073\ufead\001\002\000\156\004\ufea8\005\ufea8\006\ufea8" +
    "\007\ufea8\010\ufea8\011\ufea8\012\ufea8\013\ufea8\014\ufea8\015" +
    "\ufea8\016\ufea8\017\ufea8\020\ufea8\021\ufea8\022\ufea8\023\ufea8" +
    "\024\ufea8\025\ufea8\026\ufea8\027\ufea8\030\ufea8\031\ufea8\033" +
    "\ufea8\034\ufea8\035\ufea8\037\ufea8\040\ufea8\041\ufea8\042\ufea8" +
    "\043\ufea8\044\ufea8\045\ufea8\046\ufea8\047\ufea8\050\ufea8\051" +
    "\ufea8\052\ufea8\053\ufea8\054\ufea8\055\ufea8\056\ufea8\057\ufea8" +
    "\060\ufea8\061\ufea8\062\ufea8\063\ufea8\064\ufea8\065\ufea8\066" +
    "\ufea8\067\ufea8\070\ufea8\071\ufea8\072\ufea8\073\ufea8\001\002" +
    "\000\156\004\ufea3\005\ufea3\006\ufea3\007\ufea3\010\ufea3\011" +
    "\ufea3\012\ufea3\013\ufea3\014\ufea3\015\ufea3\016\ufea3\017\ufea3" +
    "\020\ufea3\021\ufea3\022\ufea3\023\ufea3\024\ufea3\025\ufea3\026" +
    "\ufea3\027\ufea3\030\ufea3\031\ufea3\033\ufea3\034\ufea3\035\ufea3" +
    "\037\ufea3\040\ufea3\041\ufea3\042\ufea3\043\ufea3\044\ufea3\045" +
    "\ufea3\046\ufea3\047\ufea3\050\ufea3\051\ufea3\052\ufea3\053\ufea3" +
    "\054\ufea3\055\ufea3\056\ufea3\057\ufea3\060\ufea3\061\ufea3\062" +
    "\ufea3\063\ufea3\064\ufea3\065\ufea3\066\ufea3\067\ufea3\070\ufea3" +
    "\071\ufea3\072\ufea3\073\ufea3\001\002\000\156\004\ufec6\005" +
    "\ufec6\006\ufec6\007\ufec6\010\ufec6\011\ufec6\012\ufec6\013\ufec6" +
    "\014\ufec6\015\ufec6\016\ufec6\017\ufec6\020\ufec6\021\ufec6\022" +
    "\ufec6\023\ufec6\024\ufec6\025\ufec6\026\ufec6\027\ufec6\030\ufec6" +
    "\031\ufec6\033\ufec6\034\ufec6\035\ufec6\037\ufec6\040\ufec6\041" +
    "\ufec6\042\ufec6\043\ufec6\044\ufec6\045\ufec6\046\ufec6\047\ufec6" +
    "\050\ufec6\051\ufec6\052\ufec6\053\ufec6\054\ufec6\055\ufec6\056" +
    "\ufec6\057\ufec6\060\ufec6\061\ufec6\062\ufec6\063\ufec6\064\ufec6" +
    "\065\ufec6\066\ufec6\067\ufec6\070\ufec6\071\ufec6\072\ufec6\073" +
    "\ufec6\001\002\000\156\004\ufea0\005\ufea0\006\ufea0\007\ufea0" +
    "\010\ufea0\011\ufea0\012\ufea0\013\ufea0\014\ufea0\015\ufea0\016" +
    "\ufea0\017\ufea0\020\ufea0\021\ufea0\022\ufea0\023\ufea0\024\ufea0" +
    "\025\ufea0\026\ufea0\027\ufea0\030\ufea0\031\ufea0\033\ufea0\034" +
    "\ufea0\035\ufea0\037\ufea0\040\ufea0\041\ufea0\042\ufea0\043\ufea0" +
    "\044\ufea0\045\ufea0\046\ufea0\047\ufea0\050\ufea0\051\ufea0\052" +
    "\ufea0\053\ufea0\054\ufea0\055\ufea0\056\ufea0\057\ufea0\060\ufea0" +
    "\061\ufea0\062\ufea0\063\ufea0\064\ufea0\065\ufea0\066\ufea0\067" +
    "\ufea0\070\ufea0\071\ufea0\072\ufea0\073\ufea0\001\002\000\156" +
    "\004\ufec4\005\ufec4\006\ufec4\007\ufec4\010\ufec4\011\ufec4\012" +
    "\ufec4\013\ufec4\014\ufec4\015\ufec4\016\ufec4\017\ufec4\020\ufec4" +
    "\021\ufec4\022\ufec4\023\ufec4\024\ufec4\025\ufec4\026\ufec4\027" +
    "\ufec4\030\ufec4\031\ufec4\033\ufec4\034\ufec4\035\ufec4\037\ufec4" +
    "\040\ufec4\041\ufec4\042\ufec4\043\ufec4\044\ufec4\045\ufec4\046" +
    "\ufec4\047\ufec4\050\ufec4\051\ufec4\052\ufec4\053\ufec4\054\ufec4" +
    "\055\ufec4\056\ufec4\057\ufec4\060\ufec4\061\ufec4\062\ufec4\063" +
    "\ufec4\064\ufec4\065\ufec4\066\ufec4\067\ufec4\070\ufec4\071\ufec4" +
    "\072\ufec4\073\ufec4\001\002\000\156\004\ufec9\005\ufec9\006" +
    "\ufec9\007\ufec9\010\ufec9\011\ufec9\012\ufec9\013\ufec9\014\ufec9" +
    "\015\ufec9\016\ufec9\017\ufec9\020\ufec9\021\ufec9\022\ufec9\023" +
    "\ufec9\024\ufec9\025\ufec9\026\ufec9\027\ufec9\030\ufec9\031\ufec9" +
    "\033\ufec9\034\ufec9\035\ufec9\037\ufec9\040\ufec9\041\ufec9\042" +
    "\ufec9\043\ufec9\044\ufec9\045\ufec9\046\ufec9\047\ufec9\050\ufec9" +
    "\051\ufec9\052\ufec9\053\ufec9\054\ufec9\055\ufec9\056\ufec9\057" +
    "\ufec9\060\ufec9\061\ufec9\062\ufec9\063\ufec9\064\ufec9\065\ufec9" +
    "\066\ufec9\067\ufec9\070\ufec9\071\ufec9\072\ufec9\073\ufec9\001" +
    "\002\000\156\004\ufec5\005\ufec5\006\ufec5\007\ufec5\010\ufec5" +
    "\011\ufec5\012\ufec5\013\ufec5\014\ufec5\015\ufec5\016\ufec5\017" +
    "\ufec5\020\ufec5\021\ufec5\022\ufec5\023\ufec5\024\ufec5\025\ufec5" +
    "\026\ufec5\027\ufec5\030\ufec5\031\ufec5\033\ufec5\034\ufec5\035" +
    "\ufec5\037\ufec5\040\ufec5\041\ufec5\042\ufec5\043\ufec5\044\ufec5" +
    "\045\ufec5\046\ufec5\047\ufec5\050\ufec5\051\ufec5\052\ufec5\053" +
    "\ufec5\054\ufec5\055\ufec5\056\ufec5\057\ufec5\060\ufec5\061\ufec5" +
    "\062\ufec5\063\ufec5\064\ufec5\065\ufec5\066\ufec5\067\ufec5\070" +
    "\ufec5\071\ufec5\072\ufec5\073\ufec5\001\002\000\156\004\ufeaa" +
    "\005\ufeaa\006\ufeaa\007\ufeaa\010\ufeaa\011\ufeaa\012\ufeaa\013" +
    "\ufeaa\014\ufeaa\015\ufeaa\016\ufeaa\017\ufeaa\020\ufeaa\021\ufeaa" +
    "\022\ufeaa\023\ufeaa\024\ufeaa\025\ufeaa\026\ufeaa\027\ufeaa\030" +
    "\ufeaa\031\ufeaa\033\ufeaa\034\ufeaa\035\ufeaa\037\ufeaa\040\ufeaa" +
    "\041\ufeaa\042\ufeaa\043\ufeaa\044\ufeaa\045\ufeaa\046\ufeaa\047" +
    "\ufeaa\050\ufeaa\051\ufeaa\052\ufeaa\053\ufeaa\054\ufeaa\055\ufeaa" +
    "\056\ufeaa\057\ufeaa\060\ufeaa\061\ufeaa\062\ufeaa\063\ufeaa\064" +
    "\ufeaa\065\ufeaa\066\ufeaa\067\ufeaa\070\ufeaa\071\ufeaa\072\ufeaa" +
    "\073\ufeaa\001\002\000\156\004\ufea4\005\ufea4\006\ufea4\007" +
    "\ufea4\010\ufea4\011\ufea4\012\ufea4\013\ufea4\014\ufea4\015\ufea4" +
    "\016\ufea4\017\ufea4\020\ufea4\021\ufea4\022\ufea4\023\ufea4\024" +
    "\ufea4\025\ufea4\026\ufea4\027\ufea4\030\ufea4\031\ufea4\033\ufea4" +
    "\034\ufea4\035\ufea4\037\ufea4\040\ufea4\041\ufea4\042\ufea4\043" +
    "\ufea4\044\ufea4\045\ufea4\046\ufea4\047\ufea4\050\ufea4\051\ufea4" +
    "\052\ufea4\053\ufea4\054\ufea4\055\ufea4\056\ufea4\057\ufea4\060" +
    "\ufea4\061\ufea4\062\ufea4\063\ufea4\064\ufea4\065\ufea4\066\ufea4" +
    "\067\ufea4\070\ufea4\071\ufea4\072\ufea4\073\ufea4\001\002\000" +
    "\156\004\ufeb4\005\ufeb4\006\ufeb4\007\ufeb4\010\ufeb4\011\ufeb4" +
    "\012\ufeb4\013\ufeb4\014\ufeb4\015\ufeb4\016\ufeb4\017\ufeb4\020" +
    "\ufeb4\021\ufeb4\022\ufeb4\023\ufeb4\024\ufeb4\025\ufeb4\026\ufeb4" +
    "\027\ufeb4\030\ufeb4\031\ufeb4\033\ufeb4\034\ufeb4\035\ufeb4\037" +
    "\ufeb4\040\ufeb4\041\ufeb4\042\ufeb4\043\ufeb4\044\ufeb4\045\ufeb4" +
    "\046\ufeb4\047\ufeb4\050\ufeb4\051\ufeb4\052\ufeb4\053\ufeb4\054" +
    "\ufeb4\055\ufeb4\056\ufeb4\057\ufeb4\060\ufeb4\061\ufeb4\062\ufeb4" +
    "\063\ufeb4\064\ufeb4\065\ufeb4\066\ufeb4\067\ufeb4\070\ufeb4\071" +
    "\ufeb4\072\ufeb4\073\ufeb4\001\002\000\156\004\ufeb1\005\ufeb1" +
    "\006\ufeb1\007\ufeb1\010\ufeb1\011\ufeb1\012\ufeb1\013\ufeb1\014" +
    "\ufeb1\015\ufeb1\016\ufeb1\017\ufeb1\020\ufeb1\021\ufeb1\022\ufeb1" +
    "\023\ufeb1\024\ufeb1\025\ufeb1\026\ufeb1\027\ufeb1\030\ufeb1\031" +
    "\ufeb1\033\ufeb1\034\ufeb1\035\ufeb1\037\ufeb1\040\ufeb1\041\ufeb1" +
    "\042\ufeb1\043\ufeb1\044\ufeb1\045\ufeb1\046\ufeb1\047\ufeb1\050" +
    "\ufeb1\051\ufeb1\052\ufeb1\053\ufeb1\054\ufeb1\055\ufeb1\056\ufeb1" +
    "\057\ufeb1\060\ufeb1\061\ufeb1\062\ufeb1\063\ufeb1\064\ufeb1\065" +
    "\ufeb1\066\ufeb1\067\ufeb1\070\ufeb1\071\ufeb1\072\ufeb1\073\ufeb1" +
    "\001\002\000\156\004\ufea6\005\ufea6\006\ufea6\007\ufea6\010" +
    "\ufea6\011\ufea6\012\ufea6\013\ufea6\014\ufea6\015\ufea6\016\ufea6" +
    "\017\ufea6\020\ufea6\021\ufea6\022\ufea6\023\ufea6\024\ufea6\025" +
    "\ufea6\026\ufea6\027\ufea6\030\ufea6\031\ufea6\033\ufea6\034\ufea6" +
    "\035\ufea6\037\ufea6\040\ufea6\041\ufea6\042\ufea6\043\ufea6\044" +
    "\ufea6\045\ufea6\046\ufea6\047\ufea6\050\ufea6\051\ufea6\052\ufea6" +
    "\053\ufea6\054\ufea6\055\ufea6\056\ufea6\057\ufea6\060\ufea6\061" +
    "\ufea6\062\ufea6\063\ufea6\064\ufea6\065\ufea6\066\ufea6\067\ufea6" +
    "\070\ufea6\071\ufea6\072\ufea6\073\ufea6\001\002\000\156\004" +
    "\ufe9c\005\ufe9c\006\ufe9c\007\ufe9c\010\ufe9c\011\ufe9c\012\ufe9c" +
    "\013\ufe9c\014\ufe9c\015\ufe9c\016\ufe9c\017\ufe9c\020\ufe9c\021" +
    "\ufe9c\022\ufe9c\023\ufe9c\024\ufe9c\025\ufe9c\026\ufe9c\027\ufe9c" +
    "\030\ufe9c\031\ufe9c\033\ufe9c\034\ufe9c\035\ufe9c\037\ufe9c\040" +
    "\ufe9c\041\ufe9c\042\ufe9c\043\ufe9c\044\ufe9c\045\ufe9c\046\ufe9c" +
    "\047\ufe9c\050\ufe9c\051\ufe9c\052\ufe9c\053\ufe9c\054\ufe9c\055" +
    "\ufe9c\056\ufe9c\057\ufe9c\060\ufe9c\061\ufe9c\062\ufe9c\063\ufe9c" +
    "\064\ufe9c\065\ufe9c\066\ufe9c\067\ufe9c\070\ufe9c\071\ufe9c\072" +
    "\ufe9c\073\ufe9c\001\002\000\156\004\ufe9a\005\ufe9a\006\ufe9a" +
    "\007\ufe9a\010\ufe9a\011\ufe9a\012\ufe9a\013\ufe9a\014\ufe9a\015" +
    "\ufe9a\016\ufe9a\017\ufe9a\020\ufe9a\021\ufe9a\022\ufe9a\023\ufe9a" +
    "\024\ufe9a\025\ufe9a\026\ufe9a\027\ufe9a\030\ufe9a\031\ufe9a\033" +
    "\ufe9a\034\ufe9a\035\ufe9a\037\ufe9a\040\ufe9a\041\ufe9a\042\ufe9a" +
    "\043\ufe9a\044\ufe9a\045\ufe9a\046\ufe9a\047\ufe9a\050\ufe9a\051" +
    "\ufe9a\052\ufe9a\053\ufe9a\054\ufe9a\055\ufe9a\056\ufe9a\057\ufe9a" +
    "\060\ufe9a\061\ufe9a\062\ufe9a\063\ufe9a\064\ufe9a\065\ufe9a\066" +
    "\ufe9a\067\ufe9a\070\ufe9a\071\ufe9a\072\ufe9a\073\ufe9a\001\002" +
    "\000\156\004\ufeb2\005\ufeb2\006\ufeb2\007\ufeb2\010\ufeb2\011" +
    "\ufeb2\012\ufeb2\013\ufeb2\014\ufeb2\015\ufeb2\016\ufeb2\017\ufeb2" +
    "\020\ufeb2\021\ufeb2\022\ufeb2\023\ufeb2\024\ufeb2\025\ufeb2\026" +
    "\ufeb2\027\ufeb2\030\ufeb2\031\ufeb2\033\ufeb2\034\ufeb2\035\ufeb2" +
    "\037\ufeb2\040\ufeb2\041\ufeb2\042\ufeb2\043\ufeb2\044\ufeb2\045" +
    "\ufeb2\046\ufeb2\047\ufeb2\050\ufeb2\051\ufeb2\052\ufeb2\053\ufeb2" +
    "\054\ufeb2\055\ufeb2\056\ufeb2\057\ufeb2\060\ufeb2\061\ufeb2\062" +
    "\ufeb2\063\ufeb2\064\ufeb2\065\ufeb2\066\ufeb2\067\ufeb2\070\ufeb2" +
    "\071\ufeb2\072\ufeb2\073\ufeb2\001\002\000\156\004\ufe9b\005" +
    "\ufe9b\006\ufe9b\007\ufe9b\010\ufe9b\011\ufe9b\012\ufe9b\013\ufe9b" +
    "\014\ufe9b\015\ufe9b\016\ufe9b\017\ufe9b\020\ufe9b\021\ufe9b\022" +
    "\ufe9b\023\ufe9b\024\ufe9b\025\ufe9b\026\ufe9b\027\ufe9b\030\ufe9b" +
    "\031\ufe9b\033\ufe9b\034\ufe9b\035\ufe9b\037\ufe9b\040\ufe9b\041" +
    "\ufe9b\042\ufe9b\043\ufe9b\044\ufe9b\045\ufe9b\046\ufe9b\047\ufe9b" +
    "\050\ufe9b\051\ufe9b\052\ufe9b\053\ufe9b\054\ufe9b\055\ufe9b\056" +
    "\ufe9b\057\ufe9b\060\ufe9b\061\ufe9b\062\ufe9b\063\ufe9b\064\ufe9b" +
    "\065\ufe9b\066\ufe9b\067\ufe9b\070\ufe9b\071\ufe9b\072\ufe9b\073" +
    "\ufe9b\001\002\000\156\004\ufeb7\005\ufeb7\006\ufeb7\007\ufeb7" +
    "\010\ufeb7\011\ufeb7\012\ufeb7\013\ufeb7\014\ufeb7\015\ufeb7\016" +
    "\ufeb7\017\ufeb7\020\ufeb7\021\ufeb7\022\ufeb7\023\ufeb7\024\ufeb7" +
    "\025\ufeb7\026\ufeb7\027\ufeb7\030\ufeb7\031\ufeb7\033\ufeb7\034" +
    "\ufeb7\035\ufeb7\037\ufeb7\040\ufeb7\041\ufeb7\042\ufeb7\043\ufeb7" +
    "\044\ufeb7\045\ufeb7\046\ufeb7\047\ufeb7\050\ufeb7\051\ufeb7\052" +
    "\ufeb7\053\ufeb7\054\ufeb7\055\ufeb7\056\ufeb7\057\ufeb7\060\ufeb7" +
    "\061\ufeb7\062\ufeb7\063\ufeb7\064\ufeb7\065\ufeb7\066\ufeb7\067" +
    "\ufeb7\070\ufeb7\071\ufeb7\072\ufeb7\073\ufeb7\001\002\000\156" +
    "\004\ufeab\005\ufeab\006\ufeab\007\ufeab\010\ufeab\011\ufeab\012" +
    "\ufeab\013\ufeab\014\ufeab\015\ufeab\016\ufeab\017\ufeab\020\ufeab" +
    "\021\ufeab\022\ufeab\023\ufeab\024\ufeab\025\ufeab\026\ufeab\027" +
    "\ufeab\030\ufeab\031\ufeab\033\ufeab\034\ufeab\035\ufeab\037\ufeab" +
    "\040\ufeab\041\ufeab\042\ufeab\043\ufeab\044\ufeab\045\ufeab\046" +
    "\ufeab\047\ufeab\050\ufeab\051\ufeab\052\ufeab\053\ufeab\054\ufeab" +
    "\055\ufeab\056\ufeab\057\ufeab\060\ufeab\061\ufeab\062\ufeab\063" +
    "\ufeab\064\ufeab\065\ufeab\066\ufeab\067\ufeab\070\ufeab\071\ufeab" +
    "\072\ufeab\073\ufeab\001\002\000\156\004\ufeb8\005\ufeb8\006" +
    "\ufeb8\007\ufeb8\010\ufeb8\011\ufeb8\012\ufeb8\013\ufeb8\014\ufeb8" +
    "\015\ufeb8\016\ufeb8\017\ufeb8\020\ufeb8\021\ufeb8\022\ufeb8\023" +
    "\ufeb8\024\ufeb8\025\ufeb8\026\ufeb8\027\ufeb8\030\ufeb8\031\ufeb8" +
    "\033\ufeb8\034\ufeb8\035\ufeb8\037\ufeb8\040\ufeb8\041\ufeb8\042" +
    "\ufeb8\043\ufeb8\044\ufeb8\045\ufeb8\046\ufeb8\047\ufeb8\050\ufeb8" +
    "\051\ufeb8\052\ufeb8\053\ufeb8\054\ufeb8\055\ufeb8\056\ufeb8\057" +
    "\ufeb8\060\ufeb8\061\ufeb8\062\ufeb8\063\ufeb8\064\ufeb8\065\ufeb8" +
    "\066\ufeb8\067\ufeb8\070\ufeb8\071\ufeb8\072\ufeb8\073\ufeb8\001" +
    "\002\000\156\004\ufeaf\005\ufeaf\006\ufeaf\007\ufeaf\010\ufeaf" +
    "\011\ufeaf\012\ufeaf\013\ufeaf\014\ufeaf\015\ufeaf\016\ufeaf\017" +
    "\ufeaf\020\ufeaf\021\ufeaf\022\ufeaf\023\ufeaf\024\ufeaf\025\ufeaf" +
    "\026\ufeaf\027\ufeaf\030\ufeaf\031\ufeaf\033\ufeaf\034\ufeaf\035" +
    "\ufeaf\037\ufeaf\040\ufeaf\041\ufeaf\042\ufeaf\043\ufeaf\044\ufeaf" +
    "\045\ufeaf\046\ufeaf\047\ufeaf\050\ufeaf\051\ufeaf\052\ufeaf\053" +
    "\ufeaf\054\ufeaf\055\ufeaf\056\ufeaf\057\ufeaf\060\ufeaf\061\ufeaf" +
    "\062\ufeaf\063\ufeaf\064\ufeaf\065\ufeaf\066\ufeaf\067\ufeaf\070" +
    "\ufeaf\071\ufeaf\072\ufeaf\073\ufeaf\001\002\000\156\004\ufeac" +
    "\005\ufeac\006\ufeac\007\ufeac\010\ufeac\011\ufeac\012\ufeac\013" +
    "\ufeac\014\ufeac\015\ufeac\016\ufeac\017\ufeac\020\ufeac\021\ufeac" +
    "\022\ufeac\023\ufeac\024\ufeac\025\ufeac\026\ufeac\027\ufeac\030" +
    "\ufeac\031\ufeac\033\ufeac\034\ufeac\035\ufeac\037\ufeac\040\ufeac" +
    "\041\ufeac\042\ufeac\043\ufeac\044\ufeac\045\ufeac\046\ufeac\047" +
    "\ufeac\050\ufeac\051\ufeac\052\ufeac\053\ufeac\054\ufeac\055\ufeac" +
    "\056\ufeac\057\ufeac\060\ufeac\061\ufeac\062\ufeac\063\ufeac\064" +
    "\ufeac\065\ufeac\066\ufeac\067\ufeac\070\ufeac\071\ufeac\072\ufeac" +
    "\073\ufeac\001\002\000\156\004\ufea2\005\ufea2\006\ufea2\007" +
    "\ufea2\010\ufea2\011\ufea2\012\ufea2\013\ufea2\014\ufea2\015\ufea2" +
    "\016\ufea2\017\ufea2\020\ufea2\021\ufea2\022\ufea2\023\ufea2\024" +
    "\ufea2\025\ufea2\026\ufea2\027\ufea2\030\ufea2\031\ufea2\033\ufea2" +
    "\034\ufea2\035\ufea2\037\ufea2\040\ufea2\041\ufea2\042\ufea2\043" +
    "\ufea2\044\ufea2\045\ufea2\046\ufea2\047\ufea2\050\ufea2\051\ufea2" +
    "\052\ufea2\053\ufea2\054\ufea2\055\ufea2\056\ufea2\057\ufea2\060" +
    "\ufea2\061\ufea2\062\ufea2\063\ufea2\064\ufea2\065\ufea2\066\ufea2" +
    "\067\ufea2\070\ufea2\071\ufea2\072\ufea2\073\ufea2\001\002\000" +
    "\156\004\ufeb6\005\ufeb6\006\ufeb6\007\ufeb6\010\ufeb6\011\ufeb6" +
    "\012\ufeb6\013\ufeb6\014\ufeb6\015\ufeb6\016\ufeb6\017\ufeb6\020" +
    "\ufeb6\021\ufeb6\022\ufeb6\023\ufeb6\024\ufeb6\025\ufeb6\026\ufeb6" +
    "\027\ufeb6\030\ufeb6\031\ufeb6\033\ufeb6\034\ufeb6\035\ufeb6\037" +
    "\ufeb6\040\ufeb6\041\ufeb6\042\ufeb6\043\ufeb6\044\ufeb6\045\ufeb6" +
    "\046\ufeb6\047\ufeb6\050\ufeb6\051\ufeb6\052\ufeb6\053\ufeb6\054" +
    "\ufeb6\055\ufeb6\056\ufeb6\057\ufeb6\060\ufeb6\061\ufeb6\062\ufeb6" +
    "\063\ufeb6\064\ufeb6\065\ufeb6\066\ufeb6\067\ufeb6\070\ufeb6\071" +
    "\ufeb6\072\ufeb6\073\ufeb6\001\002\000\156\004\ufec8\005\ufec8" +
    "\006\ufec8\007\ufec8\010\ufec8\011\ufec8\012\ufec8\013\ufec8\014" +
    "\ufec8\015\ufec8\016\ufec8\017\ufec8\020\ufec8\021\ufec8\022\ufec8" +
    "\023\ufec8\024\ufec8\025\ufec8\026\ufec8\027\ufec8\030\ufec8\031" +
    "\ufec8\033\ufec8\034\ufec8\035\ufec8\037\ufec8\040\ufec8\041\ufec8" +
    "\042\ufec8\043\ufec8\044\ufec8\045\ufec8\046\ufec8\047\ufec8\050" +
    "\ufec8\051\ufec8\052\ufec8\053\ufec8\054\ufec8\055\ufec8\056\ufec8" +
    "\057\ufec8\060\ufec8\061\ufec8\062\ufec8\063\ufec8\064\ufec8\065" +
    "\ufec8\066\ufec8\067\ufec8\070\ufec8\071\ufec8\072\ufec8\073\ufec8" +
    "\001\002\000\156\004\ufea5\005\ufea5\006\ufea5\007\ufea5\010" +
    "\ufea5\011\ufea5\012\ufea5\013\ufea5\014\ufea5\015\ufea5\016\ufea5" +
    "\017\ufea5\020\ufea5\021\ufea5\022\ufea5\023\ufea5\024\ufea5\025" +
    "\ufea5\026\ufea5\027\ufea5\030\ufea5\031\ufea5\033\ufea5\034\ufea5" +
    "\035\ufea5\037\ufea5\040\ufea5\041\ufea5\042\ufea5\043\ufea5\044" +
    "\ufea5\045\ufea5\046\ufea5\047\ufea5\050\ufea5\051\ufea5\052\ufea5" +
    "\053\ufea5\054\ufea5\055\ufea5\056\ufea5\057\ufea5\060\ufea5\061" +
    "\ufea5\062\ufea5\063\ufea5\064\ufea5\065\ufea5\066\ufea5\067\ufea5" +
    "\070\ufea5\071\ufea5\072\ufea5\073\ufea5\001\002\000\156\004" +
    "\ufea7\005\ufea7\006\ufea7\007\ufea7\010\ufea7\011\ufea7\012\ufea7" +
    "\013\ufea7\014\ufea7\015\ufea7\016\ufea7\017\ufea7\020\ufea7\021" +
    "\ufea7\022\ufea7\023\ufea7\024\ufea7\025\ufea7\026\ufea7\027\ufea7" +
    "\030\ufea7\031\ufea7\033\ufea7\034\ufea7\035\ufea7\037\ufea7\040" +
    "\ufea7\041\ufea7\042\ufea7\043\ufea7\044\ufea7\045\ufea7\046\ufea7" +
    "\047\ufea7\050\ufea7\051\ufea7\052\ufea7\053\ufea7\054\ufea7\055" +
    "\ufea7\056\ufea7\057\ufea7\060\ufea7\061\ufea7\062\ufea7\063\ufea7" +
    "\064\ufea7\065\ufea7\066\ufea7\067\ufea7\070\ufea7\071\ufea7\072" +
    "\ufea7\073\ufea7\001\002\000\156\004\ufe99\005\ufe99\006\ufe99" +
    "\007\ufe99\010\ufe99\011\ufe99\012\ufe99\013\ufe99\014\ufe99\015" +
    "\ufe99\016\ufe99\017\ufe99\020\ufe99\021\ufe99\022\ufe99\023\ufe99" +
    "\024\ufe99\025\ufe99\026\ufe99\027\ufe99\030\ufe99\031\ufe99\033" +
    "\ufe99\034\ufe99\035\ufe99\037\ufe99\040\ufe99\041\ufe99\042\ufe99" +
    "\043\ufe99\044\ufe99\045\ufe99\046\ufe99\047\ufe99\050\ufe99\051" +
    "\ufe99\052\ufe99\053\ufe99\054\ufe99\055\ufe99\056\ufe99\057\ufe99" +
    "\060\ufe99\061\ufe99\062\ufe99\063\ufe99\064\ufe99\065\ufe99\066" +
    "\ufe99\067\ufe99\070\ufe99\071\ufe99\072\ufe99\073\ufe99\001\002" +
    "\000\156\004\ufec7\005\ufec7\006\ufec7\007\ufec7\010\ufec7\011" +
    "\ufec7\012\ufec7\013\ufec7\014\ufec7\015\ufec7\016\ufec7\017\ufec7" +
    "\020\ufec7\021\ufec7\022\ufec7\023\ufec7\024\ufec7\025\ufec7\026" +
    "\ufec7\027\ufec7\030\ufec7\031\ufec7\033\ufec7\034\ufec7\035\ufec7" +
    "\037\ufec7\040\ufec7\041\ufec7\042\ufec7\043\ufec7\044\ufec7\045" +
    "\ufec7\046\ufec7\047\ufec7\050\ufec7\051\ufec7\052\ufec7\053\ufec7" +
    "\054\ufec7\055\ufec7\056\ufec7\057\ufec7\060\ufec7\061\ufec7\062" +
    "\ufec7\063\ufec7\064\ufec7\065\ufec7\066\ufec7\067\ufec7\070\ufec7" +
    "\071\ufec7\072\ufec7\073\ufec7\001\002\000\156\004\ufeae\005" +
    "\ufeae\006\ufeae\007\ufeae\010\ufeae\011\ufeae\012\ufeae\013\ufeae" +
    "\014\ufeae\015\ufeae\016\ufeae\017\ufeae\020\ufeae\021\ufeae\022" +
    "\ufeae\023\ufeae\024\ufeae\025\ufeae\026\ufeae\027\ufeae\030\ufeae" +
    "\031\ufeae\033\ufeae\034\ufeae\035\ufeae\037\ufeae\040\ufeae\041" +
    "\ufeae\042\ufeae\043\ufeae\044\ufeae\045\ufeae\046\ufeae\047\ufeae" +
    "\050\ufeae\051\ufeae\052\ufeae\053\ufeae\054\ufeae\055\ufeae\056" +
    "\ufeae\057\ufeae\060\ufeae\061\ufeae\062\ufeae\063\ufeae\064\ufeae" +
    "\065\ufeae\066\ufeae\067\ufeae\070\ufeae\071\ufeae\072\ufeae\073" +
    "\ufeae\001\002\000\156\004\ufec2\005\ufec2\006\ufec2\007\ufec2" +
    "\010\ufec2\011\ufec2\012\ufec2\013\ufec2\014\ufec2\015\ufec2\016" +
    "\ufec2\017\ufec2\020\ufec2\021\ufec2\022\ufec2\023\ufec2\024\ufec2" +
    "\025\ufec2\026\ufec2\027\ufec2\030\ufec2\031\ufec2\033\ufec2\034" +
    "\ufec2\035\ufec2\037\ufec2\040\ufec2\041\ufec2\042\ufec2\043\ufec2" +
    "\044\ufec2\045\ufec2\046\ufec2\047\ufec2\050\ufec2\051\ufec2\052" +
    "\ufec2\053\ufec2\054\ufec2\055\ufec2\056\ufec2\057\ufec2\060\ufec2" +
    "\061\ufec2\062\ufec2\063\ufec2\064\ufec2\065\ufec2\066\ufec2\067" +
    "\ufec2\070\ufec2\071\ufec2\072\ufec2\073\ufec2\001\002\000\156" +
    "\004\ufec3\005\ufec3\006\ufec3\007\ufec3\010\ufec3\011\ufec3\012" +
    "\ufec3\013\ufec3\014\ufec3\015\ufec3\016\ufec3\017\ufec3\020\ufec3" +
    "\021\ufec3\022\ufec3\023\ufec3\024\ufec3\025\ufec3\026\ufec3\027" +
    "\ufec3\030\ufec3\031\ufec3\033\ufec3\034\ufec3\035\ufec3\037\ufec3" +
    "\040\ufec3\041\ufec3\042\ufec3\043\ufec3\044\ufec3\045\ufec3\046" +
    "\ufec3\047\ufec3\050\ufec3\051\ufec3\052\ufec3\053\ufec3\054\ufec3" +
    "\055\ufec3\056\ufec3\057\ufec3\060\ufec3\061\ufec3\062\ufec3\063" +
    "\ufec3\064\ufec3\065\ufec3\066\ufec3\067\ufec3\070\ufec3\071\ufec3" +
    "\072\ufec3\073\ufec3\001\002\000\156\004\ufeba\005\ufeba\006" +
    "\ufeba\007\ufeba\010\ufeba\011\ufeba\012\ufeba\013\ufeba\014\ufeba" +
    "\015\ufeba\016\ufeba\017\ufeba\020\ufeba\021\ufeba\022\ufeba\023" +
    "\ufeba\024\ufeba\025\ufeba\026\ufeba\027\ufeba\030\ufeba\031\ufeba" +
    "\033\ufeba\034\ufeba\035\ufeba\037\ufeba\040\ufeba\041\ufeba\042" +
    "\ufeba\043\ufeba\044\ufeba\045\ufeba\046\ufeba\047\ufeba\050\ufeba" +
    "\051\ufeba\052\ufeba\053\ufeba\054\ufeba\055\ufeba\056\ufeba\057" +
    "\ufeba\060\ufeba\061\ufeba\062\ufeba\063\ufeba\064\ufeba\065\ufeba" +
    "\066\ufeba\067\ufeba\070\ufeba\071\ufeba\072\ufeba\073\ufeba\001" +
    "\002\000\156\004\ufe98\005\ufe98\006\ufe98\007\ufe98\010\ufe98" +
    "\011\ufe98\012\ufe98\013\ufe98\014\ufe98\015\ufe98\016\ufe98\017" +
    "\ufe98\020\ufe98\021\ufe98\022\ufe98\023\ufe98\024\ufe98\025\ufe98" +
    "\026\ufe98\027\ufe98\030\ufe98\031\ufe98\033\ufe98\034\ufe98\035" +
    "\ufe98\037\ufe98\040\ufe98\041\ufe98\042\ufe98\043\ufe98\044\ufe98" +
    "\045\ufe98\046\ufe98\047\ufe98\050\ufe98\051\ufe98\052\ufe98\053" +
    "\ufe98\054\ufe98\055\ufe98\056\ufe98\057\ufe98\060\ufe98\061\ufe98" +
    "\062\ufe98\063\ufe98\064\ufe98\065\ufe98\066\ufe98\067\ufe98\070" +
    "\ufe98\071\ufe98\072\ufe98\073\ufe98\001\002\000\156\004\ufebb" +
    "\005\ufebb\006\ufebb\007\ufebb\010\ufebb\011\ufebb\012\ufebb\013" +
    "\ufebb\014\ufebb\015\ufebb\016\ufebb\017\ufebb\020\ufebb\021\ufebb" +
    "\022\ufebb\023\ufebb\024\ufebb\025\ufebb\026\ufebb\027\ufebb\030" +
    "\ufebb\031\ufebb\033\ufebb\034\ufebb\035\ufebb\037\ufebb\040\ufebb" +
    "\041\ufebb\042\ufebb\043\ufebb\044\ufebb\045\ufebb\046\ufebb\047" +
    "\ufebb\050\ufebb\051\ufebb\052\ufebb\053\ufebb\054\ufebb\055\ufebb" +
    "\056\ufebb\057\ufebb\060\ufebb\061\ufebb\062\ufebb\063\ufebb\064" +
    "\ufebb\065\ufebb\066\ufebb\067\ufebb\070\ufebb\071\ufebb\072\ufebb" +
    "\073\ufebb\001\002\000\156\004\ufebf\005\ufebf\006\ufebf\007" +
    "\ufebf\010\ufebf\011\ufebf\012\ufebf\013\ufebf\014\ufebf\015\ufebf" +
    "\016\ufebf\017\ufebf\020\ufebf\021\ufebf\022\ufebf\023\ufebf\024" +
    "\ufebf\025\ufebf\026\ufebf\027\ufebf\030\ufebf\031\ufebf\033\ufebf" +
    "\034\ufebf\035\ufebf\037\ufebf\040\ufebf\041\ufebf\042\ufebf\043" +
    "\ufebf\044\ufebf\045\ufebf\046\ufebf\047\ufebf\050\ufebf\051\ufebf" +
    "\052\ufebf\053\ufebf\054\ufebf\055\ufebf\056\ufebf\057\ufebf\060" +
    "\ufebf\061\ufebf\062\ufebf\063\ufebf\064\ufebf\065\ufebf\066\ufebf" +
    "\067\ufebf\070\ufebf\071\ufebf\072\ufebf\073\ufebf\001\002\000" +
    "\156\004\ufeb3\005\ufeb3\006\ufeb3\007\ufeb3\010\ufeb3\011\ufeb3" +
    "\012\ufeb3\013\ufeb3\014\ufeb3\015\ufeb3\016\ufeb3\017\ufeb3\020" +
    "\ufeb3\021\ufeb3\022\ufeb3\023\ufeb3\024\ufeb3\025\ufeb3\026\ufeb3" +
    "\027\ufeb3\030\ufeb3\031\ufeb3\033\ufeb3\034\ufeb3\035\ufeb3\037" +
    "\ufeb3\040\ufeb3\041\ufeb3\042\ufeb3\043\ufeb3\044\ufeb3\045\ufeb3" +
    "\046\ufeb3\047\ufeb3\050\ufeb3\051\ufeb3\052\ufeb3\053\ufeb3\054" +
    "\ufeb3\055\ufeb3\056\ufeb3\057\ufeb3\060\ufeb3\061\ufeb3\062\ufeb3" +
    "\063\ufeb3\064\ufeb3\065\ufeb3\066\ufeb3\067\ufeb3\070\ufeb3\071" +
    "\ufeb3\072\ufeb3\073\ufeb3\001\002\000\156\004\ufeb5\005\ufeb5" +
    "\006\ufeb5\007\ufeb5\010\ufeb5\011\ufeb5\012\ufeb5\013\ufeb5\014" +
    "\ufeb5\015\ufeb5\016\ufeb5\017\ufeb5\020\ufeb5\021\ufeb5\022\ufeb5" +
    "\023\ufeb5\024\ufeb5\025\ufeb5\026\ufeb5\027\ufeb5\030\ufeb5\031" +
    "\ufeb5\033\ufeb5\034\ufeb5\035\ufeb5\037\ufeb5\040\ufeb5\041\ufeb5" +
    "\042\ufeb5\043\ufeb5\044\ufeb5\045\ufeb5\046\ufeb5\047\ufeb5\050" +
    "\ufeb5\051\ufeb5\052\ufeb5\053\ufeb5\054\ufeb5\055\ufeb5\056\ufeb5" +
    "\057\ufeb5\060\ufeb5\061\ufeb5\062\ufeb5\063\ufeb5\064\ufeb5\065" +
    "\ufeb5\066\ufeb5\067\ufeb5\070\ufeb5\071\ufeb5\072\ufeb5\073\ufeb5" +
    "\001\002\000\156\004\ufe97\005\ufe97\006\ufe97\007\ufe97\010" +
    "\ufe97\011\ufe97\012\ufe97\013\ufe97\014\ufe97\015\ufe97\016\ufe97" +
    "\017\ufe97\020\ufe97\021\ufe97\022\ufe97\023\ufe97\024\ufe97\025" +
    "\ufe97\026\ufe97\027\ufe97\030\ufe97\031\ufe97\033\ufe97\034\ufe97" +
    "\035\ufe97\037\ufe97\040\ufe97\041\ufe97\042\ufe97\043\ufe97\044" +
    "\ufe97\045\ufe97\046\ufe97\047\ufe97\050\ufe97\051\ufe97\052\ufe97" +
    "\053\ufe97\054\ufe97\055\ufe97\056\ufe97\057\ufe97\060\ufe97\061" +
    "\ufe97\062\ufe97\063\ufe97\064\ufe97\065\ufe97\066\ufe97\067\ufe97" +
    "\070\ufe97\071\ufe97\072\ufe97\073\ufe97\001\002\000\156\004" +
    "\ufec0\005\ufec0\006\ufec0\007\ufec0\010\ufec0\011\ufec0\012\ufec0" +
    "\013\ufec0\014\ufec0\015\ufec0\016\ufec0\017\ufec0\020\ufec0\021" +
    "\ufec0\022\ufec0\023\ufec0\024\ufec0\025\ufec0\026\ufec0\027\ufec0" +
    "\030\ufec0\031\ufec0\033\ufec0\034\ufec0\035\ufec0\037\ufec0\040" +
    "\ufec0\041\ufec0\042\ufec0\043\ufec0\044\ufec0\045\ufec0\046\ufec0" +
    "\047\ufec0\050\ufec0\051\ufec0\052\ufec0\053\ufec0\054\ufec0\055" +
    "\ufec0\056\ufec0\057\ufec0\060\ufec0\061\ufec0\062\ufec0\063\ufec0" +
    "\064\ufec0\065\ufec0\066\ufec0\067\ufec0\070\ufec0\071\ufec0\072" +
    "\ufec0\073\ufec0\001\002\000\156\004\ufeb9\005\ufeb9\006\ufeb9" +
    "\007\ufeb9\010\ufeb9\011\ufeb9\012\ufeb9\013\ufeb9\014\ufeb9\015" +
    "\ufeb9\016\ufeb9\017\ufeb9\020\ufeb9\021\ufeb9\022\ufeb9\023\ufeb9" +
    "\024\ufeb9\025\ufeb9\026\ufeb9\027\ufeb9\030\ufeb9\031\ufeb9\033" +
    "\ufeb9\034\ufeb9\035\ufeb9\037\ufeb9\040\ufeb9\041\ufeb9\042\ufeb9" +
    "\043\ufeb9\044\ufeb9\045\ufeb9\046\ufeb9\047\ufeb9\050\ufeb9\051" +
    "\ufeb9\052\ufeb9\053\ufeb9\054\ufeb9\055\ufeb9\056\ufeb9\057\ufeb9" +
    "\060\ufeb9\061\ufeb9\062\ufeb9\063\ufeb9\064\ufeb9\065\ufeb9\066" +
    "\ufeb9\067\ufeb9\070\ufeb9\071\ufeb9\072\ufeb9\073\ufeb9\001\002" +
    "\000\156\004\ufea9\005\ufea9\006\ufea9\007\ufea9\010\ufea9\011" +
    "\ufea9\012\ufea9\013\ufea9\014\ufea9\015\ufea9\016\ufea9\017\ufea9" +
    "\020\ufea9\021\ufea9\022\ufea9\023\ufea9\024\ufea9\025\ufea9\026" +
    "\ufea9\027\ufea9\030\ufea9\031\ufea9\033\ufea9\034\ufea9\035\ufea9" +
    "\037\ufea9\040\ufea9\041\ufea9\042\ufea9\043\ufea9\044\ufea9\045" +
    "\ufea9\046\ufea9\047\ufea9\050\ufea9\051\ufea9\052\ufea9\053\ufea9" +
    "\054\ufea9\055\ufea9\056\ufea9\057\ufea9\060\ufea9\061\ufea9\062" +
    "\ufea9\063\ufea9\064\ufea9\065\ufea9\066\ufea9\067\ufea9\070\ufea9" +
    "\071\ufea9\072\ufea9\073\ufea9\001\002\000\156\004\ufebd\005" +
    "\ufebd\006\ufebd\007\ufebd\010\ufebd\011\ufebd\012\ufebd\013\ufebd" +
    "\014\ufebd\015\ufebd\016\ufebd\017\ufebd\020\ufebd\021\ufebd\022" +
    "\ufebd\023\ufebd\024\ufebd\025\ufebd\026\ufebd\027\ufebd\030\ufebd" +
    "\031\ufebd\033\ufebd\034\ufebd\035\ufebd\037\ufebd\040\ufebd\041" +
    "\ufebd\042\ufebd\043\ufebd\044\ufebd\045\ufebd\046\ufebd\047\ufebd" +
    "\050\ufebd\051\ufebd\052\ufebd\053\ufebd\054\ufebd\055\ufebd\056" +
    "\ufebd\057\ufebd\060\ufebd\061\ufebd\062\ufebd\063\ufebd\064\ufebd" +
    "\065\ufebd\066\ufebd\067\ufebd\070\ufebd\071\ufebd\072\ufebd\073" +
    "\ufebd\001\002\000\156\004\ufe9f\005\ufe9f\006\ufe9f\007\ufe9f" +
    "\010\ufe9f\011\ufe9f\012\ufe9f\013\ufe9f\014\ufe9f\015\ufe9f\016" +
    "\ufe9f\017\ufe9f\020\ufe9f\021\ufe9f\022\ufe9f\023\ufe9f\024\ufe9f" +
    "\025\ufe9f\026\ufe9f\027\ufe9f\030\ufe9f\031\ufe9f\033\ufe9f\034" +
    "\ufe9f\035\ufe9f\037\ufe9f\040\ufe9f\041\ufe9f\042\ufe9f\043\ufe9f" +
    "\044\ufe9f\045\ufe9f\046\ufe9f\047\ufe9f\050\ufe9f\051\ufe9f\052" +
    "\ufe9f\053\ufe9f\054\ufe9f\055\ufe9f\056\ufe9f\057\ufe9f\060\ufe9f" +
    "\061\ufe9f\062\ufe9f\063\ufe9f\064\ufe9f\065\ufe9f\066\ufe9f\067" +
    "\ufe9f\070\ufe9f\071\ufe9f\072\ufe9f\073\ufe9f\001\002\000\156" +
    "\004\ufec1\005\ufec1\006\ufec1\007\ufec1\010\ufec1\011\ufec1\012" +
    "\ufec1\013\ufec1\014\ufec1\015\ufec1\016\ufec1\017\ufec1\020\ufec1" +
    "\021\ufec1\022\ufec1\023\ufec1\024\ufec1\025\ufec1\026\ufec1\027" +
    "\ufec1\030\ufec1\031\ufec1\033\ufec1\034\ufec1\035\ufec1\037\ufec1" +
    "\040\ufec1\041\ufec1\042\ufec1\043\ufec1\044\ufec1\045\ufec1\046" +
    "\ufec1\047\ufec1\050\ufec1\051\ufec1\052\ufec1\053\ufec1\054\ufec1" +
    "\055\ufec1\056\ufec1\057\ufec1\060\ufec1\061\ufec1\062\ufec1\063" +
    "\ufec1\064\ufec1\065\ufec1\066\ufec1\067\ufec1\070\ufec1\071\ufec1" +
    "\072\ufec1\073\ufec1\001\002\000\156\004\ufea1\005\ufea1\006" +
    "\ufea1\007\ufea1\010\ufea1\011\ufea1\012\ufea1\013\ufea1\014\ufea1" +
    "\015\ufea1\016\ufea1\017\ufea1\020\ufea1\021\ufea1\022\ufea1\023" +
    "\ufea1\024\ufea1\025\ufea1\026\ufea1\027\ufea1\030\ufea1\031\ufea1" +
    "\033\ufea1\034\ufea1\035\ufea1\037\ufea1\040\ufea1\041\ufea1\042" +
    "\ufea1\043\ufea1\044\ufea1\045\ufea1\046\ufea1\047\ufea1\050\ufea1" +
    "\051\ufea1\052\ufea1\053\ufea1\054\ufea1\055\ufea1\056\ufea1\057" +
    "\ufea1\060\ufea1\061\ufea1\062\ufea1\063\ufea1\064\ufea1\065\ufea1" +
    "\066\ufea1\067\ufea1\070\ufea1\071\ufea1\072\ufea1\073\ufea1\001" +
    "\002\000\156\004\ufeb0\005\ufeb0\006\ufeb0\007\ufeb0\010\ufeb0" +
    "\011\ufeb0\012\ufeb0\013\ufeb0\014\ufeb0\015\ufeb0\016\ufeb0\017" +
    "\ufeb0\020\ufeb0\021\ufeb0\022\ufeb0\023\ufeb0\024\ufeb0\025\ufeb0" +
    "\026\ufeb0\027\ufeb0\030\ufeb0\031\ufeb0\033\ufeb0\034\ufeb0\035" +
    "\ufeb0\037\ufeb0\040\ufeb0\041\ufeb0\042\ufeb0\043\ufeb0\044\ufeb0" +
    "\045\ufeb0\046\ufeb0\047\ufeb0\050\ufeb0\051\ufeb0\052\ufeb0\053" +
    "\ufeb0\054\ufeb0\055\ufeb0\056\ufeb0\057\ufeb0\060\ufeb0\061\ufeb0" +
    "\062\ufeb0\063\ufeb0\064\ufeb0\065\ufeb0\066\ufeb0\067\ufeb0\070" +
    "\ufeb0\071\ufeb0\072\ufeb0\073\ufeb0\001\002\000\156\004\ufe9d" +
    "\005\ufe9d\006\ufe9d\007\ufe9d\010\ufe9d\011\ufe9d\012\ufe9d\013" +
    "\ufe9d\014\ufe9d\015\ufe9d\016\ufe9d\017\ufe9d\020\ufe9d\021\ufe9d" +
    "\022\ufe9d\023\ufe9d\024\ufe9d\025\ufe9d\026\ufe9d\027\ufe9d\030" +
    "\ufe9d\031\ufe9d\033\ufe9d\034\ufe9d\035\ufe9d\037\ufe9d\040\ufe9d" +
    "\041\ufe9d\042\ufe9d\043\ufe9d\044\ufe9d\045\ufe9d\046\ufe9d\047" +
    "\ufe9d\050\ufe9d\051\ufe9d\052\ufe9d\053\ufe9d\054\ufe9d\055\ufe9d" +
    "\056\ufe9d\057\ufe9d\060\ufe9d\061\ufe9d\062\ufe9d\063\ufe9d\064" +
    "\ufe9d\065\ufe9d\066\ufe9d\067\ufe9d\070\ufe9d\071\ufe9d\072\ufe9d" +
    "\073\ufe9d\001\002\000\004\013\u02ac\001\002\000\020\020" +
    "\046\021\060\022\050\024\u02a0\045\u02a3\066\u02a2\067\u029d" +
    "\001\002\000\010\004\uff0a\013\uff0a\014\uffc1\001\002\000" +
    "\006\004\uff08\013\uff08\001\002\000\006\004\u029c\013\uff13" +
    "\001\002\000\156\004\ufe96\005\ufe96\006\ufe96\007\ufe96\010" +
    "\ufe96\011\ufe96\012\ufe96\013\ufe96\014\ufe96\015\ufe96\016\ufe96" +
    "\017\ufe96\020\ufe96\021\ufe96\022\ufe96\023\ufe96\024\ufe96\025" +
    "\ufe96\026\ufe96\027\ufe96\030\ufe96\031\ufe96\033\ufe96\034\ufe96" +
    "\035\ufe96\037\ufe96\040\ufe96\041\ufe96\042\ufe96\043\ufe96\044" +
    "\ufe96\045\ufe96\046\ufe96\047\ufe96\050\ufe96\051\ufe96\052\ufe96" +
    "\053\ufe96\054\ufe96\055\ufe96\056\ufe96\057\ufe96\060\ufe96\061" +
    "\ufe96\062\ufe96\063\ufe96\064\ufe96\065\ufe96\066\ufe96\067\ufe96" +
    "\070\ufe96\071\ufe96\072\ufe96\073\ufe96\001\002\000\006\004" +
    "\uff06\013\uff06\001\002\000\010\004\uff05\005\u02a6\013\uff05" +
    "\001\002\000\004\067\u02a5\001\002\000\006\004\uff07\013" +
    "\uff07\001\002\000\010\004\uff09\013\uff09\014\uffc1\001\002" +
    "\000\004\066\u02a7\001\002\000\006\004\uff04\013\uff04\001" +
    "\002\000\156\004\u0271\005\u0283\006\u0287\007\u026e\010\u0272" +
    "\011\u0270\012\u028a\013\u0289\014\u0297\015\u0292\016\u0267\017" +
    "\u0295\020\u0268\021\u028d\022\u028b\023\u0293\024\u02a9\025\u028e" +
    "\026\u027e\027\u027c\030\u0282\031\u0290\033\u028f\034\u0276\035" +
    "\u027a\037\u0299\040\u026b\041\u0280\042\u027d\043\u0273\044\u0294" +
    "\045\u026c\046\u0285\047\u0277\050\u0284\051\u0274\052\u026d\053" +
    "\u0281\054\u0298\055\u026f\056\u0296\057\u0269\060\u029a\061\u013c" +
    "\062\u0123\063\u0139\064\u0278\065\u027b\066\u0279\067\u0286\070" +
    "\u0291\071\u0275\072\u027f\073\u0288\001\002\000\006\004\u029c" +
    "\013\uff13\001\002\000\004\013\uff15\001\002\000\004\013" +
    "\uff14\001\002\000\004\006\u02ad\001\002\000\062\003\ufefd" +
    "\011\ufefd\016\ufefd\020\ufefd\021\ufefd\022\ufefd\034\ufefd\035" +
    "\ufefd\036\ufefd\047\ufefd\051\ufefd\052\ufefd\053\ufefd\054\ufefd" +
    "\055\ufefd\056\ufefd\057\ufefd\060\ufefd\064\ufefd\065\ufefd\067" +
    "\ufefd\074\ufefd\075\006\076\ufefd\001\002\000\060\003\uff18" +
    "\011\uff18\016\uff18\020\uff18\021\uff18\022\uff18\034\uff18\035" +
    "\uff18\036\uff18\047\uff18\051\uff18\052\uff18\053\uff18\054\uff18" +
    "\055\uff18\056\uff18\057\uff18\060\uff18\064\uff18\065\uff18\067" +
    "\uff18\074\uff18\076\uff18\001\002\000\006\004\u029c\013\uff13" +
    "\001\002\000\004\013\u02b1\001\002\000\004\006\u02b2\001" +
    "\002\000\062\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021\ufefd" +
    "\022\ufefd\034\ufefd\035\ufefd\036\ufefd\047\ufefd\051\ufefd\052" +
    "\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd" +
    "\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd\001" +
    "\002\000\060\003\uff16\011\uff16\016\uff16\020\uff16\021\uff16" +
    "\022\uff16\034\uff16\035\uff16\036\uff16\047\uff16\051\uff16\052" +
    "\uff16\053\uff16\054\uff16\055\uff16\056\uff16\057\uff16\060\uff16" +
    "\064\uff16\065\uff16\067\uff16\074\uff16\076\uff16\001\002\000" +
    "\004\067\u02b5\001\002\000\004\012\u02b6\001\002\000\024" +
    "\012\uff9c\013\uff9c\020\uff9c\021\uff9c\022\uff9c\025\uff9c\027" +
    "\uff9c\066\uff9c\067\uff9c\001\002\000\024\012\uff96\013\uff93" +
    "\020\uff96\021\uff96\022\uff96\025\uff96\027\uff96\066\uff96\067" +
    "\uff96\001\002\000\004\013\u02b9\001\002\000\004\006\u02ba" +
    "\001\002\000\062\003\uff9b\011\uff9b\016\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\034\uff9b\035\uff9b\036\uff9b\047\uff9b\051\uff9b" +
    "\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060" +
    "\uff9b\064\uff9b\065\uff9b\067\uff9b\074\uff9b\075\uff9b\076\uff9b" +
    "\001\002\000\062\003\ufefd\011\ufefd\016\ufefd\020\ufefd\021" +
    "\ufefd\022\ufefd\034\ufefd\035\ufefd\036\ufefd\047\ufefd\051\ufefd" +
    "\052\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060" +
    "\ufefd\064\ufefd\065\ufefd\067\ufefd\074\ufefd\075\006\076\ufefd" +
    "\001\002\000\060\003\uff9a\011\uff9a\016\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\034\uff9a\035\uff9a\036\uff9a\047\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060" +
    "\uff9a\064\uff9a\065\uff9a\067\uff9a\074\uff9a\076\uff9a\001\002" +
    "\000\006\024\u02bf\042\u02be\001\002\000\004\067\u02d0\001" +
    "\002\000\010\020\u02c1\021\u02c2\022\u02c0\001\002\000\004" +
    "\005\u02c9\001\002\000\004\024\u02c6\001\002\000\004\024" +
    "\u02c3\001\002\000\032\003\ufffd\022\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\067\ufffd\071\ufffd\074\ufffd\075" +
    "\ufffd\076\ufffd\001\002\000\032\003\ufefd\022\ufefd\033\ufefd" +
    "\034\ufefd\035\ufefd\036\ufefd\037\ufefd\067\ufefd\071\ufefd\074" +
    "\ufefd\075\006\076\ufefd\001\002\000\030\003\ufffc\022\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\067\ufffc\071" +
    "\ufffc\074\ufffc\076\ufffc\001\002\000\032\003\uffff\022\uffff" +
    "\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\067\uffff\071" +
    "\uffff\074\uffff\075\uffff\076\uffff\001\002\000\032\003\ufefd" +
    "\022\ufefd\033\ufefd\034\ufefd\035\ufefd\036\ufefd\037\ufefd\067" +
    "\ufefd\071\ufefd\074\ufefd\075\006\076\ufefd\001\002\000\030" +
    "\003\ufffe\022\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\067\ufffe\071\ufffe\074\ufffe\076\ufffe\001\002\000\006" +
    "\030\u02ca\067\u02cc\001\002\000\004\024\ufff6\001\002\000" +
    "\004\024\u02cd\001\002\000\004\024\ufff5\001\002\000\032" +
    "\003\ufffb\022\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\067\ufffb\071\ufffb\074\ufffb\075\ufffb\076\ufffb\001\002" +
    "\000\032\003\ufefd\022\ufefd\033\ufefd\034\ufefd\035\ufefd\036" +
    "\ufefd\037\ufefd\067\ufefd\071\ufefd\074\ufefd\075\006\076\ufefd" +
    "\001\002\000\030\003\ufffa\022\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\067\ufffa\071\ufffa\074\ufffa\076\ufffa" +
    "\001\002\000\006\005\u02d1\041\u02d2\001\002\000\004\067" +
    "\u02d4\001\002\000\032\003\ufefd\022\ufefd\033\ufefd\034\ufefd" +
    "\035\ufefd\036\ufefd\037\ufefd\067\ufefd\071\ufefd\074\ufefd\075" +
    "\006\076\ufefd\001\002\000\030\003\ufff9\022\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\067\ufff9\071\ufff9\074" +
    "\ufff9\076\ufff9\001\002\000\004\041\u02d5\001\002\000\032" +
    "\003\ufefd\022\ufefd\033\ufefd\034\ufefd\035\ufefd\036\ufefd\037" +
    "\ufefd\067\ufefd\071\ufefd\074\ufefd\075\006\076\ufefd\001\002" +
    "\000\030\003\ufff8\022\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\067\ufff8\071\ufff8\074\ufff8\076\ufff8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02d4\000\010\002\004\043\006\044\003\001\001\000" +
    "\004\003\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\013\001\001\000\002\001\001\000\024\005\014" +
    "\006\022\007\036\011\026\014\034\042\032\045\031\053" +
    "\033\057\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\u0121\001\001\000\004\050" +
    "\353\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\117\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\062\041\063\040\113\042\001\001\000\002\001\001\000" +
    "\004\115\167\001\001\000\004\066\043\001\001\000\004" +
    "\114\155\001\001\000\012\047\054\060\050\064\051\065" +
    "\053\001\001\000\002\001\001\000\004\120\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\047\125\060\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\047\054\060\050\064" +
    "\116\065\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\123\070\001\001\000\006\035\071\134\072\001\001\000" +
    "\002\001\001\000\012\047\054\060\050\064\073\065\053" +
    "\001\001\000\004\135\100\001\001\000\012\047\054\060" +
    "\050\064\114\065\053\001\001\000\012\047\054\060\050" +
    "\064\113\065\053\001\001\000\012\047\054\060\050\064" +
    "\112\065\053\001\001\000\012\047\054\060\050\064\111" +
    "\065\053\001\001\000\004\036\103\001\001\000\012\047" +
    "\054\060\050\064\102\065\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\136\105\001\001\000\012\047" +
    "\054\060\050\064\106\065\053\001\001\000\004\137\107" +
    "\001\001\000\004\036\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\120\127\001\001\000\006\062\130\063\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\125\144\001\001\000\006" +
    "\035\145\134\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\124\152" +
    "\001\001\000\006\035\153\134\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\006\044\161\001" +
    "\001\000\002\001\001\000\010\062\164\063\040\066\163" +
    "\001\001\000\004\116\165\001\001\000\002\001\001\000" +
    "\004\041\166\001\001\000\002\001\001\000\004\041\170" +
    "\001\001\000\002\001\001\000\006\043\006\044\172\001" +
    "\001\000\002\001\001\000\012\047\054\060\050\064\174" +
    "\065\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\110\201\001\001\000\006\062\200\063\040\001\001" +
    "\000\002\001\001\000\012\047\054\060\050\064\202\065" +
    "\053\001\001\000\002\001\001\000\004\111\204\001\001" +
    "\000\006\043\006\044\205\001\001\000\002\001\001\000" +
    "\012\047\054\060\050\064\207\065\053\001\001\000\002" +
    "\001\001\000\004\112\211\001\001\000\006\043\006\044" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\140\217\142\216\001\001\000\004\016" +
    "\340\001\001\000\004\102\220\001\001\000\004\141\325" +
    "\001\001\000\006\100\224\101\223\001\001\000\002\001" +
    "\001\000\012\072\235\073\232\074\236\075\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\062\300\063\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\074\275\075\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\072\254\073\232\074\236\075\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\156\251\001\001\000\006" +
    "\035\252\134\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\072\267" +
    "\073\232\074\236\075\227\001\001\000\012\072\266\073" +
    "\232\074\236\075\227\001\001\000\012\072\265\073\232" +
    "\074\236\075\227\001\001\000\012\072\264\073\232\074" +
    "\236\075\227\001\001\000\012\072\263\073\232\074\236" +
    "\075\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\062\300\063\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\160\314\001\001\000\006\035\315\134\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\157\322\001\001\000\006\035" +
    "\323\134\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\102\331\144\332\001\001\000\004\143\334" +
    "\001\001\000\004\016\333\001\001\000\002\001\001\000" +
    "\004\016\335\001\001\000\002\001\001\000\006\043\006" +
    "\044\337\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\006\044\342\001\001\000\002\001\001\000\004" +
    "\106\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\047\054\060\050\064\347\065\053\001\001\000\002" +
    "\001\001\000\004\107\351\001\001\000\006\043\006\044" +
    "\352\001\001\000\002\001\001\000\004\043\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\u014a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\006\044\u015a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\006\044\u015e\001\001\000\004" +
    "\121\u015f\001\001\000\002\001\001\000\006\043\006\044" +
    "\u0161\001\001\000\004\012\u0162\001\001\000\046\006\u0178" +
    "\007\u0166\013\u016c\014\u016f\017\u0170\021\u016a\022\u017e\023" +
    "\u016b\024\u017a\026\u017b\030\u0165\032\u0175\033\u0177\042\u0174" +
    "\045\u0173\053\033\057\u0179\061\u0172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\122\u0253\001\001\000\004\172" +
    "\u022d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\117" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\006\044\u01c3\001\001\000\004\161" +
    "\u0196\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u0185\001\001\000\004\054\u0186\001\001\000\004\200" +
    "\u0187\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\060\u018c\076\u018e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\120\127\001\001\000\002\001\001\000\004\201" +
    "\u0192\001\001\000\006\043\006\044\u0193\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\u019a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\u019f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\162\u01a5\001\001\000\014" +
    "\070\u01a6\072\u01a9\073\232\074\236\075\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\u01aa\001\001\000\012\072\u01b3\073\232\074\236\075" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\u01b9\001\001\000\002\001\001" +
    "\000\004\163\u01bb\001\001\000\006\043\006\044\u01bc\001" +
    "\001\000\002\001\001\000\006\043\006\044\u01be\001\001" +
    "\000\004\012\u01bf\001\001\000\046\006\u0178\007\u0166\013" +
    "\u016c\014\u016f\017\u0170\021\u016a\022\u017e\023\u016b\024\u017a" +
    "\026\u017b\030\u0165\032\u0175\033\u0177\042\u0174\045\u0173\053" +
    "\033\057\u0179\061\u0172\001\001\000\004\164\u01c1\001\001" +
    "\000\006\043\006\044\u01c2\001\001\000\002\001\001\000" +
    "\004\170\u01c4\001\001\000\002\001\001\000\006\043\006" +
    "\044\u01c6\001\001\000\004\012\u01c7\001\001\000\046\006" +
    "\u0178\007\u0166\013\u016c\014\u016f\017\u0170\021\u016a\022\u017e" +
    "\023\u016b\024\u017a\026\u017b\030\u0165\032\u0175\033\u0177\042" +
    "\u0174\045\u0173\053\033\057\u0179\061\u0172\001\001\000\006" +
    "\043\006\044\u01c9\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\070\u01cc\071\u01ce\072\u01a9\073\232\074\236" +
    "\075\227\001\001\000\002\001\001\000\014\070\u01d8\072" +
    "\u01a9\073\232\074\236\075\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\070\u01cc\071\u01d4\072\u01a9\073" +
    "\232\074\236\075\227\001\001\000\004\155\u01d2\001\001" +
    "\000\016\070\u01cc\071\u01d3\072\u01a9\073\232\074\236\075" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\171\u01d6\001\001\000\006\043\006\044\u01d7\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\070\u01da\072\u01db" +
    "\073\232\074\236\075\227\001\001\000\002\001\001\000" +
    "\004\056\u01aa\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\126\u01e0\001\001\000\006\035" +
    "\u01e1\134\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\127\u01e4\001\001\000\006\043\006\044\u01e5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\132\u01eb\001" +
    "\001\000\006\035\u01ec\134\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\133\u01ef\001\001\000\006\043" +
    "\006\044\u01f0\001\001\000\002\001\001\000\004\110\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\205\u01f6\001\001\000\006\043\006\044\u01f7" +
    "\001\001\000\002\001\001\000\012\047\054\060\050\064" +
    "\207\065\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\206\u01fd\001\001\000\006\043" +
    "\006\044\u01fe\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\207\u0202\001\001\000\006\043" +
    "\006\044\u0203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\204\u0207\001\001\000\006\043" +
    "\006\044\u0208\001\001\000\002\001\001\000\004\145\u020a" +
    "\001\001\000\016\070\u01cc\071\u020b\072\u01a9\073\232\074" +
    "\236\075\227\001\001\000\004\146\u020c\001\001\000\002" +
    "\001\001\000\006\043\006\044\u020e\001\001\000\002\001" +
    "\001\000\006\043\006\044\u0210\001\001\000\004\012\u0211" +
    "\001\001\000\046\006\u0178\007\u0166\013\u016c\014\u016f\017" +
    "\u0170\021\u016a\022\u017e\023\u016b\024\u017a\026\u017b\030\u0165" +
    "\032\u0175\033\u0177\042\u0174\045\u0173\053\033\057\u0179\061" +
    "\u0172\001\001\000\004\147\u0213\001\001\000\006\043\006" +
    "\044\u0214\001\001\000\004\020\u0215\001\001\000\002\001" +
    "\001\000\006\043\006\044\u0218\001\001\000\002\001\001" +
    "\000\004\153\u0219\001\001\000\002\001\001\000\006\043" +
    "\006\044\u021b\001\001\000\004\012\u021c\001\001\000\046" +
    "\006\u0178\007\u0166\013\u016c\014\u016f\017\u0170\021\u016a\022" +
    "\u017e\023\u016b\024\u017a\026\u017b\030\u0165\032\u0175\033\u0177" +
    "\042\u0174\045\u0173\053\033\057\u0179\061\u0172\001\001\000" +
    "\004\154\u021e\001\001\000\006\043\006\044\u021f\001\001" +
    "\000\002\001\001\000\004\150\u0221\001\001\000\016\070" +
    "\u01cc\071\u0222\072\u01a9\073\232\074\236\075\227\001\001" +
    "\000\004\151\u0223\001\001\000\002\001\001\000\006\043" +
    "\006\044\u0225\001\001\000\002\001\001\000\006\043\006" +
    "\044\u0227\001\001\000\004\012\u0228\001\001\000\046\006" +
    "\u0178\007\u0166\013\u016c\014\u016f\017\u0170\021\u016a\022\u017e" +
    "\023\u016b\024\u017a\026\u017b\030\u0165\032\u0175\033\u0177\042" +
    "\u0174\045\u0173\053\033\057\u0179\061\u0172\001\001\000\004" +
    "\152\u022a\001\001\000\006\043\006\044\u022b\001\001\000" +
    "\004\020\u022c\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\060\u018c\076\u022f\001\001\000\004\173\u0230\001" +
    "\001\000\002\001\001\000\006\043\006\044\u0232\001\001" +
    "\000\002\001\001\000\006\043\006\044\u0234\001\001\000" +
    "\004\025\u0235\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\077\u0238\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\175\u0242\001\001\000\004\043\u0243" +
    "\001\001\000\004\012\u0244\001\001\000\050\006\u0178\007" +
    "\u0166\010\u0246\013\u016c\014\u016f\017\u0170\021\u016a\022\u017e" +
    "\023\u016b\024\u017a\026\u017b\030\u0165\032\u0175\033\u0177\042" +
    "\u0174\045\u0173\053\033\057\u0179\061\u0172\001\001\000\002" +
    "\001\001\000\004\176\u0247\001\001\000\004\025\u0248\001" +
    "\001\000\002\001\001\000\006\043\006\044\u024a\001\001" +
    "\000\002\001\001\000\004\177\u024c\001\001\000\004\043" +
    "\u024d\001\001\000\004\012\u024e\001\001\000\050\006\u0178" +
    "\007\u0166\010\u024f\013\u016c\014\u016f\017\u0170\021\u016a\022" +
    "\u017e\023\u016b\024\u017a\026\u017b\030\u0165\032\u0175\033\u0177" +
    "\042\u0174\045\u0173\053\033\057\u0179\061\u0172\001\001\000" +
    "\002\001\001\000\004\174\u0251\001\001\000\006\043\006" +
    "\044\u0252\001\001\000\002\001\001\000\006\043\006\044" +
    "\u0254\001\001\000\002\001\001\000\004\165\u0256\001\001" +
    "\000\016\070\u01cc\071\u0257\072\u01a9\073\232\074\236\075" +
    "\227\001\001\000\004\166\u0258\001\001\000\002\001\001" +
    "\000\006\043\006\044\u025a\001\001\000\002\001\001\000" +
    "\006\043\006\044\u025c\001\001\000\004\012\u025d\001\001" +
    "\000\046\006\u0178\007\u0166\013\u016c\014\u016f\017\u0170\021" +
    "\u016a\022\u017e\023\u016b\024\u017a\026\u017b\030\u0165\032\u0175" +
    "\033\u0177\042\u0174\045\u0173\053\033\057\u0179\061\u0172\001" +
    "\001\000\004\167\u025f\001\001\000\006\043\006\044\u0260" +
    "\001\001\000\002\001\001\000\006\202\u0263\203\u0262\001" +
    "\001\000\010\034\u02ae\047\u02a0\057\u029d\001\001\000\002" +
    "\001\001\000\004\051\u0265\001\001\000\004\054\u028b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u029a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\u029e\047\u02a0" +
    "\057\u029d\001\001\000\004\117\177\001\001\000\002\001" +
    "\001\000\004\031\u02aa\001\001\000\004\051\u02a7\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u02a3\001" +
    "\001\000\002\001\001\000\004\117\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\u028b\001\001\000" +
    "\004\031\u02a9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\006\044\u02ad\001\001\000" +
    "\002\001\001\000\004\031\u02af\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\006\044\u02b2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\130\u02b6\001\001\000\006\035\u02b7\134\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\131\u02ba\001\001" +
    "\000\006\043\006\044\u02bb\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\104" +
    "\u02c3\001\001\000\006\043\006\044\u02c4\001\001\000\002" +
    "\001\001\000\004\103\u02c6\001\001\000\006\043\006\044" +
    "\u02c7\001\001\000\002\001\001\000\004\052\u02ca\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\105\u02cd\001\001\000\006\043\006\044\u02ce\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\006\044\u02d2\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\006\044\u02d5\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public VerifC verif = new VerifC();
    public int jerarquia = 0;
    public String tipoActual = "";
    public OperacionesC op = new OperacionesC();
    public TablaSimbolos tabla;
    public static Integer itMetodo = null;
    public String auxTipo = "";
    /*variables exclusiva para la comprobacion de parametros, Produccion -> METODO*/
    public boolean metodoCorrecto = false;
    public Clase claseUsar = null;
    public String idClase2 = "";
    public String idSwitch = "";
    public String len = "";
    public int contParam = 0;
    public int it = 0;
    public String idClase = "";

    /*Variables para los cuartetos*/
    public ArrayList<String> arrayFinales = new ArrayList<>();
    public int contFinales = 0;
    public ManejoC manejoc = new ManejoC();
    public ManejoCondiciones manejo = new ManejoCondiciones();
    public static String aux2 = "", aux3 = "", etInst = "";
    public static boolean inst = false;
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();
    public ArrayList<Boolean> usoPila = new ArrayList<>();

    public boolean auxFor = false;

    public SintaxC(AnalizadorLexico4 lexer, TablaSimbolos tabla){
        super(lexer);
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+"   "+mensaje);
    }

    public void syntax_error(Symbol s){
         int fila = s.left + PanelPrincipal.totalLineas+1;
        PanelPrincipal.errores += "Fila: "+fila+" Columna:"+s.right+" Tipo de error: SINTACTICO.\n";
   }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxC$actions {
  private final SintaxC parser;

  /** Constructor */
  CUP$SintaxC$actions(SintaxC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxC$do_action(
    int                        CUP$SintaxC$act_num,
    java_cup.runtime.lr_parser CUP$SintaxC$parser,
    java.util.Stack            CUP$SintaxC$stack,
    int                        CUP$SintaxC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxC$result;

      /* select the action based on the action number */
      switch (CUP$SintaxC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // TEXTO_COM ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // TEXTO_COM ::= TEXTO_COM resto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // TEXTO_COM ::= TEXTO_COM enter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 RESULT = a + "\n";  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // TEXTO_COM ::= TEXTO_COM MODULOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // TEXTO_COM ::= TEXTO_COM id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // TEXTO_COM ::= TEXTO_COM numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // TEXTO_COM ::= TEXTO_COM getch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // TEXTO_COM ::= TEXTO_COM clscr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // TEXTO_COM ::= TEXTO_COM scanf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // TEXTO_COM ::= TEXTO_COM printf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // TEXTO_COM ::= TEXTO_COM condDo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // TEXTO_COM ::= TEXTO_COM condWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // TEXTO_COM ::= TEXTO_COM condFor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // TEXTO_COM ::= TEXTO_COM condDef 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // TEXTO_COM ::= TEXTO_COM condCase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // TEXTO_COM ::= TEXTO_COM condSwitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // TEXTO_COM ::= TEXTO_COM condElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // TEXTO_COM ::= TEXTO_COM condIf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // TEXTO_COM ::= TEXTO_COM pleca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // TEXTO_COM ::= TEXTO_COM ampersand 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // TEXTO_COM ::= TEXTO_COM admiracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // TEXTO_COM ::= TEXTO_COM igual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // TEXTO_COM ::= TEXTO_COM menor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // TEXTO_COM ::= TEXTO_COM mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // TEXTO_COM ::= TEXTO_COM main 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // TEXTO_COM ::= TEXTO_COM falso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // TEXTO_COM ::= TEXTO_COM verdadero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // TEXTO_COM ::= TEXTO_COM tipoConst 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // TEXTO_COM ::= TEXTO_COM tipoChar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // TEXTO_COM ::= TEXTO_COM tipoInteger 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // TEXTO_COM ::= TEXTO_COM tipoVoid 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // TEXTO_COM ::= TEXTO_COM numeral 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // TEXTO_COM ::= TEXTO_COM div 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // TEXTO_COM ::= TEXTO_COM por 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // TEXTO_COM ::= TEXTO_COM menos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // TEXTO_COM ::= TEXTO_COM mas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // TEXTO_COM ::= TEXTO_COM principal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // TEXTO_COM ::= TEXTO_COM java 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // TEXTO_COM ::= TEXTO_COM python 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // TEXTO_COM ::= TEXTO_COM visual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // TEXTO_COM ::= TEXTO_COM condInclude 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // TEXTO_COM ::= TEXTO_COM condBreak 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // TEXTO_COM ::= TEXTO_COM comillaSimple 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // TEXTO_COM ::= TEXTO_COM agrupacion_b 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // TEXTO_COM ::= TEXTO_COM agrupacion_a 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // TEXTO_COM ::= TEXTO_COM parentesis_b 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // TEXTO_COM ::= TEXTO_COM parentesis_a 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // TEXTO_COM ::= TEXTO_COM llave_b 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // TEXTO_COM ::= TEXTO_COM llave_a 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // TEXTO_COM ::= TEXTO_COM dosPuntos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // TEXTO_COM ::= TEXTO_COM puntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // TEXTO_COM ::= TEXTO_COM punto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // TEXTO_COM ::= TEXTO_COM coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO_COM",36, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // TEXTO2 ::= 
            {
              String RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // TEXTO2 ::= TEXTO2 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // TEXTO2 ::= TEXTO2 MODULOS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // TEXTO2 ::= TEXTO2 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // TEXTO2 ::= TEXTO2 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // TEXTO2 ::= TEXTO2 getch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // TEXTO2 ::= TEXTO2 clscr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // TEXTO2 ::= TEXTO2 scanf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TEXTO2 ::= TEXTO2 printf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TEXTO2 ::= TEXTO2 condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // TEXTO2 ::= TEXTO2 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TEXTO2 ::= TEXTO2 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TEXTO2 ::= TEXTO2 condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // TEXTO2 ::= TEXTO2 condCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // TEXTO2 ::= TEXTO2 condSwitch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // TEXTO2 ::= TEXTO2 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // TEXTO2 ::= TEXTO2 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // TEXTO2 ::= TEXTO2 pleca 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // TEXTO2 ::= TEXTO2 ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // TEXTO2 ::= TEXTO2 admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // TEXTO2 ::= TEXTO2 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // TEXTO2 ::= TEXTO2 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // TEXTO2 ::= TEXTO2 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // TEXTO2 ::= TEXTO2 main 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // TEXTO2 ::= TEXTO2 falso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TEXTO2 ::= TEXTO2 verdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TEXTO2 ::= TEXTO2 tipoConst 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TEXTO2 ::= TEXTO2 tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TEXTO2 ::= TEXTO2 tipoInteger 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TEXTO2 ::= TEXTO2 tipoVoid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TEXTO2 ::= TEXTO2 numeral 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TEXTO2 ::= TEXTO2 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TEXTO2 ::= TEXTO2 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TEXTO2 ::= TEXTO2 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TEXTO2 ::= TEXTO2 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TEXTO2 ::= TEXTO2 principal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TEXTO2 ::= TEXTO2 java 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TEXTO2 ::= TEXTO2 python 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TEXTO2 ::= TEXTO2 visual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TEXTO2 ::= TEXTO2 condInclude 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // TEXTO2 ::= TEXTO2 condBreak 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // TEXTO2 ::= TEXTO2 comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // TEXTO2 ::= TEXTO2 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // TEXTO2 ::= TEXTO2 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // TEXTO2 ::= TEXTO2 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // TEXTO2 ::= TEXTO2 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TEXTO2 ::= TEXTO2 llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TEXTO2 ::= TEXTO2 llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TEXTO2 ::= TEXTO2 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TEXTO2 ::= TEXTO2 puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TEXTO2 ::= TEXTO2 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TEXTO2 ::= TEXTO2 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO2",39, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TEXTO ::= 
            {
              String RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TEXTO ::= TEXTO resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TEXTO ::= TEXTO id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TEXTO ::= TEXTO numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TEXTO ::= TEXTO getch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TEXTO ::= TEXTO clscr 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TEXTO ::= TEXTO scanf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // TEXTO ::= TEXTO printf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TEXTO ::= TEXTO condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TEXTO ::= TEXTO condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // TEXTO ::= TEXTO condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // TEXTO ::= TEXTO condDef 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // TEXTO ::= TEXTO condCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TEXTO ::= TEXTO condSwitch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TEXTO ::= TEXTO condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // TEXTO ::= TEXTO condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TEXTO ::= TEXTO pleca 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TEXTO ::= TEXTO ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TEXTO ::= TEXTO admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TEXTO ::= TEXTO igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TEXTO ::= TEXTO menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TEXTO ::= TEXTO mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // TEXTO ::= TEXTO main 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // TEXTO ::= TEXTO falso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // TEXTO ::= TEXTO verdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // TEXTO ::= TEXTO tipoConst 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // TEXTO ::= TEXTO tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // TEXTO ::= TEXTO tipoInteger 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // TEXTO ::= TEXTO tipoVoid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // TEXTO ::= TEXTO numeral 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // TEXTO ::= TEXTO div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // TEXTO ::= TEXTO por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // TEXTO ::= TEXTO menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // TEXTO ::= TEXTO mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // TEXTO ::= TEXTO principal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // TEXTO ::= TEXTO java 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // TEXTO ::= TEXTO python 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // TEXTO ::= TEXTO visual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // TEXTO ::= TEXTO condInclude 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // TEXTO ::= TEXTO condBreak 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // TEXTO ::= TEXTO comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // TEXTO ::= TEXTO agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // TEXTO ::= TEXTO agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // TEXTO ::= TEXTO parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // TEXTO ::= TEXTO parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // TEXTO ::= TEXTO llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // TEXTO ::= TEXTO llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // TEXTO ::= TEXTO dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // TEXTO ::= TEXTO puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TEXTO ::= TEXTO punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // TEXTO ::= TEXTO coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a + b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TEXTO",38, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ENTER2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER2",34, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // ENTER2 ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER2",34, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // ENTER2 ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER2",34, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ENTER ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER",33, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ENTER ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ENTER",33, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // COMENTARIO_B ::= comentario_b TEXTO_COM comentario_c ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",35, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // COMENTARIO_A ::= comentario_a TEXTO ENTER 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("COMENTARIO_A",32, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // VAR_TEXTO ::= numero punto numero 
            {
              Object RESULT =null;
		 RESULT=true; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // VAR_TEXTO ::= numero 
            {
              Object RESULT =null;
		 RESULT=true; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // VAR_TEXTO ::= METODOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // VAR_TEXTO ::= ampersand VECTOR 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // VAR_TEXTO ::= VECTOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // VAR_TEXTO ::= ampersand id 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // VAR_TEXTO ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_TEXTO",26, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // GETCH ::= getch parentesis_a parentesis_b puntoComa NT$68 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("GETCH",25, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NT$68 ::= 
            {
              Object RESULT =null;
 parser.manejoc.crearGetch(parser.tabla.getObC(), null); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$68",133, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // GETCH ::= VECTOR igual getch parentesis_a parentesis_b puntoComa NT$67 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("GETCH",25, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // NT$67 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
 if(a){ if(!parser.tipoActual.equals("Integer") || !parser.tipoActual.equals("Char")){ System.out.println("arreglo "+a.toString()+" con valor incorrecto para asignacion de getch");  } } else { System.out.println("Variable no existe para poder asignar getch"); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$67",132, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // GETCH ::= id igual getch parentesis_a parentesis_b puntoComa NT$66 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("GETCH",25, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // NT$66 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
 parser.manejoc.crearGetch(parser.tabla.getObC(), a.toString());  parser.tipoActual=parser.verif.devolverTipoVar(parser.tabla.getObC(), parser.jerarquia, a.toString(), aleft+PanelPrincipal.totalLineas, aright);  if(parser.tipoActual.equals("Integer") || parser.tipoActual.equals("Char")){} else { int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: La variable "+a.toString()+" con valor incorrecto para asignacion de getch\n"; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$66",131, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CLSCR ::= clscr parentesis_a parentesis_b puntoComa NT$65 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLSCR",24, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NT$65 ::= 
            {
              Object RESULT =null;
 parser.manejoc.crearClscr(parser.tabla.getObC()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$65",130, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // RESTO_MENSAJE ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",23, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // RESTO_MENSAJE ::= coma VAR_TEXTO RESTO_MENSAJE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",23, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // RESTO_MENSAJE ::= coma comilla TEXTO2 comilla RESTO_MENSAJE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("RESTO_MENSAJE",23, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // MENSAJE ::= printf parentesis_a NT$64 VAR_TEXTO RESTO_MENSAJE parentesis_b puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MENSAJE",22, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$64 ::= 
            {
              Object RESULT =null;
 parser.tipoActual="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$64",129, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // MENSAJE ::= printf parentesis_a NT$63 comilla TEXTO2 comilla RESTO_MENSAJE parentesis_b puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MENSAJE",22, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NT$63 ::= 
            {
              Object RESULT =null;
 parser.tipoActual="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$63",128, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // VAR_LECTURA ::= VECTOR_OP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = ""; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_LECTURA",60, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // VAR_LECTURA ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_LECTURA",60, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // VAR_LECTURA ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_LECTURA",60, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // VAR_LECTURA ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); RESULT=a.toString();  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_LECTURA",60, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // MODULOS ::= scanfChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT="Char"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MODULOS",42, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // MODULOS ::= scanfFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MODULOS",42, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // MODULOS ::= scanfInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT="Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MODULOS",42, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // LECTURA_DATOS ::= scanf parentesis_a comilla TEXTO MODULOS NT$61 comilla coma ampersand VAR_LECTURA parentesis_b puntoComa NT$62 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",20, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NT$62 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
 parser.manejoc.crearScanf(parser.tabla.getObC(), b, a); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$62",127, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NT$61 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.tipoActual=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$61",126, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // VAR_CASE ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // VAR_CASE ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // VAR_CASE ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // VAR_CASE ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // VAR_CASE ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a.toString();  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_CASE",61, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // BREAK ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BREAK",6, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // BREAK ::= condBreak puntoComa ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BREAK",6, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // CASES ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CASES ::= condDef dosPuntos NT$60 ENTER CUERPO_MAIN BREAK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		 parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // NT$60 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$60",125, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // CASES ::= condCase VAR_CASE dosPuntos NT$58 ENTER CUERPO_MAIN BREAK NT$59 CASES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CASES",19, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NT$59 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
 parser.manejoc.agregarFinCase(parser.tabla.getObC(), parser.arrayFinales, parser.jerarquia);  parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$59",124, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // NT$58 ::= 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.jerarquia++; parser.manejoc.agregarCaseSwitch(parser.tabla.getObC(), parser.jerarquia, parser.idSwitch, h, "==");  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$58",123, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SWITCH ::= condSwitch NT$55 parentesis_a VAR_LECTURA NT$56 parentesis_b ENTER2 llave_a ENTER2 CASES llave_b NT$57 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NT$57 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
  parser.tabla.getObC().getCuarpeta().add(new Nodo("ETIQUETA", parser.arrayFinales.get(parser.arrayFinales.size()-1), null, null, parser.jerarquia)); parser.arrayFinales.remove(parser.arrayFinales.size()-1);       parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$57",122, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$56 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.arrayFinales.add("etFinal_"+parser.contFinales); parser.contFinales++; parser.idSwitch = a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$56",121, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$55 ::= 
            {
              Object RESULT =null;
 parser.tipoActual="Integer";  parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$55",120, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // DO_WHILE ::= condDo ENTER2 NT$53 llave_a ENTER2 CUERPO_MAIN llave_b ENTER2 condWhile parentesis_a EXT parentesis_b puntoComa NT$54 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DO_WHILE",17, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-14)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NT$54 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
  parser.manejoc.agregarCondicionWhile(parser.tabla.getObC(), parser.usoPila, h, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);    parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$54",119, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$53 ::= 
            {
              Object RESULT =null;
 parser.usoPila.add(false);   parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); parser.manejoc.agregarDoWhile(parser.tabla.getObC(), parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$53",118, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // WHILE ::= condWhile parentesis_a NT$50 EXT NT$51 parentesis_b ENTER2 llave_a ENTER2 CUERPO_MAIN llave_b NT$52 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("WHILE",16, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$52 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
  parser.manejoc.retornoWhile(parser.tabla.getObC(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);   parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$52",117, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$51 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.manejoc.agregarWhile(parser.tabla.getObC(), h, parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$51",116, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$50 ::= 
            {
              Object RESULT =null;
parser.usoPila.add(false);    parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$50",115, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // VAR_FOR ::= menos id 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 Boolean valor = parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, "Integer", aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(b.toString() + a.toString(), valor);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_FOR",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // VAR_FOR ::= id 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 Boolean valor = parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, "Integer", aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(a.toString(), valor);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_FOR",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // VAR_FOR ::= menos numero 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Integer", "Integer", a.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(b.toString()+a.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_FOR",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // VAR_FOR ::= numero 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Integer", "Integer", a.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(a.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR_FOR",53, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TIPO_VAR_FOR ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TIPO_VAR_FOR ::= tipoChar 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TIPO_VAR_FOR ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // TIPO_VAR_FOR ::= tipoInteger 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR_FOR",43, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // FOR ::= condFor NT$46 parentesis_a TIPO_VAR_FOR id igual VAR_FOR puntoComa NT$47 BOOLEAN puntoComa id igual id mas VAR_FOR parentesis_b NT$48 ENTER2 llave_a ENTER2 CUERPO_MAIN llave_b NT$49 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-21)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-21)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-21)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-20)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-20)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-20)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).right;
		NodoOperacion h = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-15)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-15)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-15)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		NodoOperacion f = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-24)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$49 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-19)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-19)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-19)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-18)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-16)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-16)).right;
		NodoOperacion h = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-16)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		NodoOperacion f = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
  parser.manejoc.retornarFor(parser.tabla.getObC(), parser.usoPila, d.toString(), e.toString(), f.getId(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$49",114, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$48 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-12)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).right;
		NodoOperacion h = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		ArrayList<Nodo> c = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion f = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.manejoc.agregarFor(parser.tabla.getObC(), b.toString(), h.getId(), c, parser.jerarquia, a);  parser.verif.verificarFor(parser.tabla.getObC(), parser.jerarquia, parser.auxFor, d.toString(), e.toString(), parser.tipoActual, f.getValor(), a, b.toString());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$48",113, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // NT$47 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion h = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 if(h.getValor()){ parser.auxFor= parser.verif.verifVarFor(parser.tabla.getObC(), b.toString(), a, "Integer", parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright); } else { parser.auxFor=false; } parser.tipoActual="Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$47",112, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$46 ::= 
            {
              Object RESULT =null;
 parser.usoPila.add(false);  parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$46",111, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // METODO_COND ::= java punto id punto id parentesis_a NT$45 PARAMETROS parentesis_b 
            {
              NodoBoolean RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (NodoBoolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 String tip = ""; if(parser.metodoCorrecto){ tip=parser.claseUsar.getMisMetodos().get(parser.itMetodo).getRetorno();   } RESULT = new NodoBoolean(tip, parser.idClase2+"_"+b.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODO_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$45 ::= 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), b.toString(), parser.jerarquia, c.toString(), bleft+PanelPrincipal.totalLineas, bright); parser.claseUsar = parser.verif.devolverClaseJava2(parser.tabla, b.toString(), bleft+PanelPrincipal.totalLineas, bright); if(parser.claseUsar != null){ parser.idClase2 = parser.claseUsar.getId(); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$45",110, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // METODO_COND ::= visual punto id parentesis_a NT$44 PARAMETROS parentesis_b 
            {
              NodoBoolean RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (NodoBoolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 String tip = ""; if(parser.metodoCorrecto){  tip=parser.tabla.getObVb().getMisMetodos().get(parser.itMetodo).getRetorno();    } RESULT = new NodoBoolean(tip, b.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODO_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$44 ::= 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$44",109, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // METODO_COND ::= python punto id parentesis_a NT$43 PARAMETROS parentesis_b 
            {
              NodoBoolean RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (NodoBoolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 String tip = ""; if(parser.metodoCorrecto){  tip=parser.tabla.getObPython().getMisMetodos().get(parser.itMetodo).getRetorno(); }  RESULT= new NodoBoolean(tip, b.toString());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODO_COND",58, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$43 ::= 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$43",108, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // VECTOR_COND ::= id DIM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=parser.op.devolverTipoArreglo(parser.tabla.getObC(), a.toString(), b, parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VECTOR_COND",59, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // VAL_COND ::= menos id 
            {
              NodoBoolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 String tip = parser.op.devolverTipoVar(parser.tabla.getObC(), a.toString(), parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoBoolean(tip, b.toString()+a.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // VAL_COND ::= menos METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String id = parser.manejoc.operacionMetodo2(parser.tabla.getObC(), a.getId(), parser.contParam); parser.idClase2 = ""; parser.contParam = 0; RESULT = new NodoBoolean(a.getTipo(), id); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // VAL_COND ::= menos VECTOR_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 /*RESULT=a;*/ 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // VAL_COND ::= menos numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // VAL_COND ::= menos numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // VAL_COND ::= id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 String tip = parser.op.devolverTipoVar(parser.tabla.getObC(), a.toString(), parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright);  RESULT=new NodoBoolean(tip, a.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // VAL_COND ::= METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 String id = parser.manejoc.operacionMetodo(parser.tabla.getObC(), a.getId(), parser.contParam); parser.idClase2 = ""; parser.contParam = 0; RESULT = new NodoBoolean(a.getTipo(), id);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VAL_COND ::= VECTOR_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 /*RESULT=a;*/ 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VAL_COND ::= numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VAL_COND ::= numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VAL_COND ::= menos comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VAL_COND ::= menos comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // VAL_COND ::= comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // VAL_COND ::= comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAL_COND",57, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OP_COND ::= VAL_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",56, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OP_COND ::= OP_COND modulo OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = parser.manejoc.concatenarOperacion(parser.tabla.getObC(), a, b, "modulo"); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",56, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OP_COND ::= OP_COND div OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = parser.manejoc.concatenarOperacion(parser.tabla.getObC(), a, b, "div"); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",56, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OP_COND ::= OP_COND por OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = parser.manejoc.concatenarOperacion(parser.tabla.getObC(), a, b, "mult"); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",56, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OP_COND ::= OP_COND menos OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = parser.manejoc.concatenarOperacion(parser.tabla.getObC(), a, b, "resta"); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",56, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OP_COND ::= OP_COND mas OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = parser.manejoc.concatenarOperacion(parser.tabla.getObC(), a, b, "suma"); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",56, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OP_COND ::= parentesis_a OP_COND parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP_COND",56, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // BOOLEAN ::= falso 
            {
              ArrayList<Nodo> RESULT =null;
		 RESULT = parser.manejoc.agregarFalso(parser.tabla.getObC(), parser.pilaFalsas, parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // BOOLEAN ::= verdadero 
            {
              ArrayList<Nodo> RESULT =null;
		 RESULT = parser.manejoc.agregarVerdadero(parser.tabla.getObC(), parser.pilaFalsas, parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // BOOLEAN ::= OP_COND OP OP_COND 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = parser.manejoc.agregarBooleans(parser.tabla.getObC(), parser.pilaFalsas, a, b, c, parser.jerarquia);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("BOOLEAN",54, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXT ::= admiracion BOOLEAN 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = parser.manejoc.cambiarGotos(a); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXT ::= admiracion parentesis_a BOOLEAN parentesis_b 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 RESULT = parser.manejoc.cambiarGotos(a); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXT ::= BOOLEAN 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXT ::= EXT or NT$42 EXT 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 parser.manejoc.manejoOr(parser.tabla.getObC(), parser.usoPila, parser.pilaCuarpeta, b, a, parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$42 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.aux3 = parser.aux2; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$42",107, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXT ::= EXT and EXT 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT = parser.manejoc.manejoAnd(a, b); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("EXT",55, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP ::= admiracion igual 
            {
              String RESULT =null;
		 RESULT="!="; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP ::= igual igual 
            {
              String RESULT =null;
		 RESULT="=="; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP ::= menor igual 
            {
              String RESULT =null;
		 RESULT="<="; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP ::= mayor igual 
            {
              String RESULT =null;
		 RESULT=">="; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP ::= menor 
            {
              String RESULT =null;
		 RESULT="<"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP ::= mayor 
            {
              String RESULT =null;
		 RESULT=">"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OP",44, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ELSE ::= 
            {
              Object RESULT =null;
		  parser.manejo.agregarEtiquetaFinC(parser.tabla.getObC(), parser.jerarquia); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ELSE",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ELSE ::= condElse ENTER2 NT$40 llave_a ENTER2 CUERPO_MAIN llave_b NT$41 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ELSE",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$41 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
 parser.manejo.irEtiquetaFinC(parser.tabla.getObC(), parser.jerarquia);  parser.manejo.agregarEtiquetaFinC(parser.tabla.getObC(), parser.jerarquia);  parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$41",106, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$40 ::= 
            {
              Object RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$40",105, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ELSE ::= condElse condIf parentesis_a NT$37 EXT NT$38 parentesis_b ENTER2 llave_a ENTER2 CUERPO_MAIN llave_b NT$39 ENTER2 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ELSE",14, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-14)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$39 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
 parser.manejo.irEtiquetaFinC(parser.tabla.getObC(), parser.jerarquia); parser.manejoc.segundoChequeoIf(parser.tabla.getObC(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia); parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$39",104, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$38 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.manejoc.primerChequeoIf(parser.tabla.getObC(), h); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$38",103, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$37 ::= 
            {
              Object RESULT =null;
 parser.usoPila.add(false);  parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$37",102, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IF ::= condIf parentesis_a NT$34 EXT NT$35 parentesis_b ENTER2 llave_a ENTER2 CUERPO_MAIN llave_b NT$36 ENTER2 ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-10)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$36 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
 parser.manejo.irEtiquetaFinC(parser.tabla.getObC(), parser.jerarquia); parser.manejoc.segundoChequeoIf(parser.tabla.getObC(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.op.eliminarVarAmbitos(parser.tabla.getObC(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$36",101, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$35 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.manejoc.primerChequeoIf(parser.tabla.getObC(), h); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$35",100, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$34 ::= 
            {
              Object RESULT =null;
 parser.usoPila.add(false);  parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$34",99, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CLASES2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES2",12, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CLASES2 ::= coma id NT$33 CLASES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES2",12, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$33 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.manejoc.agregarConstructor(parser.tabla.getObC(), parser.idClase, a.toString(), 0);     parser.op.agregarClase(parser.tabla.getObC(), a.toString(), parser.idClase, parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$33",98, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CLASES2 ::= coma id CONSTRUCTOR NT$32 CLASES2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES2",12, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$32 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.manejoc.agregarConstructor(parser.tabla.getObC(), parser.idClase, a.toString(), b.size());  parser.op.crearClase(parser.tabla, b, parser.idClase, a.toString(), parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$32",97, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PARAM2 ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM2",63, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PARAM2 ::= PARAM2 OP_COND coma 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 parser.manejoc.invocacionParametros(parser.tabla.getObC(), b.getId());  if(a!=null){ if(!b.getTipo().equals("")) { a.add(b.getTipo()); RESULT=a; } else { RESULT=null; } } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM2",63, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAM ::= PARAM2 OP_COND 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 parser.manejoc.invocacionParametros(parser.tabla.getObC(), b.getId());   if(a!=null){ if(!b.getTipo().equals("")){ a.add(b.getTipo()); RESULT=a; } else { RESULT=null; } } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAM",62, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONSTRUCTOR ::= parentesis_a parentesis_b 
            {
              ArrayList<String> RESULT =null;
		 RESULT=new ArrayList<>(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",64, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONSTRUCTOR ::= parentesis_a PARAM parentesis_b 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",64, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CLASES ::= java punto id id NT$31 CLASES2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES",10, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$31 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.idClase = b.toString();    parser.manejoc.agregarConstructor(parser.tabla.getObC(), b.toString(), c.toString(), 0);      parser.op.agregarClase(parser.tabla.getObC(), c.toString(), b.toString(), parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$31",96, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CLASES ::= java punto id id NT$29 CONSTRUCTOR NT$30 CLASES2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		ArrayList<String> d = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CLASES",10, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		ArrayList<String> d = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.manejoc.agregarConstructor(parser.tabla.getObC(), b.toString(), c.toString(), d.size());    parser.op.crearClase(parser.tabla, d, b.toString(), c.toString(), parser.jerarquia, cleft+PanelPrincipal.totalLineas, cright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$30",95, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$29 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.idClase = b.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$29",94, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMETROS2 ::= 
            {
              Object RESULT =null;
		   parser.verif.verUltimoParametro(parser.tabla, parser.it, parser.len, parser.claseUsar); parser.it = 0;   parser.len=""; parser.claseUsar=null; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",28, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMETROS2 ::= coma NT$27 OPERACION NT$28 PARAMETROS2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		   if(!a.getValor()){ System.out.println("ss"); }    
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",28, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.contParam++; parser.manejoc.invocacionParametros(parser.tabla.getObC(), a.getId()); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$28",93, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$27 ::= 
            {
              Object RESULT =null;
 parser.tipoActual = parser.verif.verifParametrosMetodo(parser.tabla, parser.it, parser.len, parser.claseUsar); parser.it++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$27",92, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAMETROS ::= 
            {
              Object RESULT =null;
		 parser.verif.verUltimoParametro(parser.tabla, parser.it, parser.len, parser.claseUsar); parser.it = 0;   parser.len = ""; parser.claseUsar = null; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMETROS ::= NT$25 OPERACION NT$26 PARAMETROS2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  if(!a.getValor()){ System.out.println("dddd");  }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.contParam++; parser.manejoc.invocacionParametros(parser.tabla.getObC(), a.getId());  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$26",91, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$25 ::= 
            {
              Object RESULT =null;
 parser.tipoActual = parser.verif.verifParametrosMetodo(parser.tabla, parser.it, parser.len, parser.claseUsar); parser.it++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$25",90, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // METODOS_MAIN ::= java punto id punto id parentesis_a NT$23 PARAMETROS parentesis_b puntoComa NT$24 ENTER2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS_MAIN",47, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$24 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
 parser.manejoc.metodoVoid(parser.tabla.getObC(), parser.idClase2+"_"+c.toString(), parser.contParam); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$24",89, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$23 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodo(parser.tabla, a.toString(), b.toString(), parser.jerarquia, c.toString(), cleft+PanelPrincipal.totalLineas, cright); parser.claseUsar = parser.verif.devolverClaseJava2(parser.tabla, b.toString(), bleft+PanelPrincipal.totalLineas, bright); if(parser.claseUsar != null){ parser.idClase2 = "JV_"+parser.claseUsar.getId(); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$23",88, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // METODOS_MAIN ::= visual punto id parentesis_a NT$21 PARAMETROS parentesis_b puntoComa NT$22 ENTER2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS_MAIN",47, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$22 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
 parser.manejoc.metodoVoid(parser.tabla.getObC(), "VB_"+b.toString(), parser.contParam); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$22",87, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$21 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.metodoCorrecto=parser.verif.verificarMetodo(parser.tabla, a.toString(), null, parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$21",86, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // METODOS_MAIN ::= python punto id parentesis_a NT$19 PARAMETROS parentesis_b puntoComa NT$20 ENTER2 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS_MAIN",47, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$20 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
 parser.manejoc.metodoVoid(parser.tabla.getObC(), "PY_"+b.toString(), parser.contParam); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$20",85, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$19 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString();   parser.metodoCorrecto=parser.verif.verificarMetodo(parser.tabla, a.toString(), null, parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$19",84, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // METODOS ::= java punto id punto id parentesis_a NT$18 PARAMETROS parentesis_b 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		  RESULT = parser.idClase2+"_"+c.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$18 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), b.toString(), parser.jerarquia, c.toString(), bleft+PanelPrincipal.totalLineas, bright); parser.claseUsar = parser.verif.devolverClaseJava2(parser.tabla, b.toString(), bleft+PanelPrincipal.totalLineas, bright); if(parser.claseUsar != null){ parser.idClase2 = "JV_"+parser.claseUsar.getId(); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$18",83, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // METODOS ::= visual punto id parentesis_a NT$17 PARAMETROS parentesis_b 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		 RESULT = "VB_"+b.toString();  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$17 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$17",82, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // METODOS ::= python punto id parentesis_a NT$16 PARAMETROS parentesis_b 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		  RESULT = "PY_"+b.toString();    
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("METODOS",37, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$16 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.len=a.toString(); parser.verif.verificarMetodoOp(parser.tabla, parser.tipoActual, a.toString(), "", parser.jerarquia, b.toString(), bleft+PanelPrincipal.totalLineas, bright);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$16",81, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARIABLES_MAIN ::= CLASES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VARIABLES_MAIN ::= METODOS_MAIN 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARIABLES_MAIN ::= VARS 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARIABLES_MAIN ::= ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES_MAIN",9, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CUERPO_MAIN ::= CUERPO_MAIN error 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CUERPO_MAIN ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CUERPO_MAIN ::= CUERPO_MAIN COMENTARIO_B 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CUERPO_MAIN ::= CUERPO_MAIN COMENTARIO_A 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CUERPO_MAIN ::= CUERPO_MAIN GETCH 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CUERPO_MAIN ::= CUERPO_MAIN CLSCR 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CUERPO_MAIN ::= CUERPO_MAIN MENSAJE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CUERPO_MAIN ::= CUERPO_MAIN LECTURA_DATOS 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CUERPO_MAIN ::= CUERPO_MAIN SWITCH 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CUERPO_MAIN ::= CUERPO_MAIN DO_WHILE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CUERPO_MAIN ::= CUERPO_MAIN WHILE 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CUERPO_MAIN ::= CUERPO_MAIN FOR 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUERPO_MAIN ::= CUERPO_MAIN IF 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPO_MAIN ::= CUERPO_MAIN VARIABLES_MAIN 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",8, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MAIN ::= tipoVoid main parentesis_a parentesis_b ENTER2 NT$14 llave_a ENTER2 CUERPO_MAIN llave_b NT$15 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("MAIN",7, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
 parser.manejoc.finMain(parser.tabla.getObC()); parser.jerarquia--; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$15",80, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$14 ::= 
            {
              Object RESULT =null;
 parser.manejoc.crearMain(parser.tabla.getObC());  parser.jerarquia++; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$14",79, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DIM2 ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM2",49, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DIM2 ::= DIM2 agrupacion_a OPERACION agrupacion_b 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 if(b.getValor() != null){ if(b.getValor()){ Integer suma = a + 1; RESULT=suma; } else { RESULT=null; } } else { RESULT=null; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM2",49, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DIM ::= DIM2 agrupacion_a OPERACION agrupacion_b 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 if(b.getValor()!= null){ if(b.getValor()){Integer suma = a + 1; RESULT=suma;} else { RESULT=null; } } else { RESULT=null; } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("DIM",48, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VECTOR_OP ::= id NT$13 DIM 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 parser.tipoActual = parser.auxTipo; parser.auxTipo = ""; if(b != null){ RESULT=parser.verif.verifVectorOperacion(parser.tabla.getObC(), a.toString(), b, parser.jerarquia, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VECTOR_OP",46, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$13 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.auxTipo = parser.tipoActual; parser.tipoActual = "Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$13",78, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VECTOR ::= id NT$12 DIM 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  if(parser.verif.verifExistenciaArreglo(parser.tabla.getObC(), parser.jerarquia, a.toString())){ parser.tipoActual = parser.tabla.getObC().getListArreglos().get(VerifObjetos.iterador).getTipo(); RESULT=true; } else {  RESULT=false; }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VECTOR",45, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$12 ::= 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
  parser.tipoActual="Integer";  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$12",77, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VAR ::= menos comillaSimple numero comillaSimple 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoOperacion(a.toString() + b.toString() + c.toString() + d.toString(), true);   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VAR ::= menos comillaSimple id comillaSimple 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoOperacion(a.toString() + b.toString() + c.toString() + d.toString(), true);   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VAR ::= menos id 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 Boolean valor = parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(b.toString()+a.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VAR ::= menos METODOS 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 String id = parser.manejoc.operacionMetodo2(parser.tabla.getObC(), a, parser.contParam); parser.contParam = 0; parser.idClase2 = "";  RESULT = new NodoOperacion(id, true); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAR ::= menos VECTOR_OP 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 /*RESULT=a;*/ 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VAR ::= menos numero punto numero 
            {
              NodoOperacion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Float", parser.tipoActual, a.toString()+b.toString()+c.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(d.toString()+a.toString()+b.toString()+c.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VAR ::= menos numero 
            {
              NodoOperacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Integer", parser.tipoActual, a.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(b.toString()+a.toString(),valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VAR ::= id 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 Boolean valor = parser.verif.verificarIdOperacion(parser.tabla.getObC(), a.toString(), parser.jerarquia, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright);  RESULT = new NodoOperacion(a.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VAR ::= METODOS 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 String id = parser.manejoc.operacionMetodo(parser.tabla.getObC(), a, parser.contParam); parser.contParam = 0; parser.idClase2 = ""; RESULT = new NodoOperacion(id, true);  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VAR ::= VECTOR_OP 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 /*RESULT=a;*/ 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VAR ::= numero punto numero 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Float", parser.tipoActual, a.toString()+b.toString()+c.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(a.toString()+b.toString()+c.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VAR ::= numero 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 Boolean valor = parser.verif.verificarNumero(parser.tabla.getObC(), "Integer", parser.tipoActual, a.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoOperacion(a.toString(), valor); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VAR ::= comillaSimple numero comillaSimple 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoOperacion(a.toString()+b.toString()+c.toString(), true);   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VAR ::= comillaSimple id comillaSimple 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = new NodoOperacion(a.toString()+b.toString()+c.toString(), true);   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VAR",51, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION ::= VAR 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  RESULT = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION ::= OPERACION modulo OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 String id = parser.manejoc.agregarOperacion(parser.tabla.getObC(), a.getId(), b.getId(), "modulo"); if(a.getValor() && b.getValor()){ RESULT = new NodoOperacion(id, true);  } else { RESULT=new NodoOperacion(id, false); }   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION ::= OPERACION div OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String id = parser.manejoc.agregarOperacion(parser.tabla.getObC(), a.getId(), b.getId(), "div"); if(a.getValor() && b.getValor()){ RESULT = new NodoOperacion(id, true);  } else { RESULT=new NodoOperacion(id, false); }   
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= OPERACION por OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 String id = parser.manejoc.agregarOperacion(parser.tabla.getObC(), a.getId(), b.getId(), "mult"); if(a.getValor() && b.getValor()){ RESULT = new NodoOperacion(id, true);  } else { RESULT=new NodoOperacion(id, false); }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION ::= OPERACION menos OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 String id = parser.manejoc.agregarOperacion(parser.tabla.getObC(), a.getId(), b.getId(), "resta"); if(a.getValor() && b.getValor()){ RESULT = new NodoOperacion(id, true);  } else { RESULT=new NodoOperacion(id, false); }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= OPERACION mas OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		  String id = parser.manejoc.agregarOperacion(parser.tabla.getObC(), a.getId(), b.getId(), "suma");  if(a.getValor() && b.getValor()){ RESULT = new NodoOperacion(id, true);  } else { RESULT=new NodoOperacion(id, false); }      
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		 RESULT = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("OPERACION",50, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_VAR ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",41, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_VAR ::= tipoChar 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",41, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_VAR ::= tipoInteger 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",41, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARS2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS2",31, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VARS2 ::= coma id DIM 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 if(b != null){ parser.op.agregarNuevaVar(parser.tabla.getObC(), a.toString(), parser.tipoActual, "Arreglo", parser.jerarquia, true, "", b, aleft+PanelPrincipal.totalLineas, aright); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS2",31, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARS2 ::= coma id VALOR NT$11 VARS2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS2",31, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.manejoc.crearVariableConValor(parser.tabla.getObC(), a.toString(), parser.tipoActual, b); if(b != null){ if(b.getValor()){ parser.op.agregarNuevaVar(parser.tabla.getObC(), a.toString(), parser.tipoActual, "Variable", parser.jerarquia, b.getValor(), "", null, aleft+PanelPrincipal.totalLineas, aright); } } else { parser.op.agregarNuevaVar(parser.tabla.getObC(), a.toString(), parser.tipoActual, "Variable", parser.jerarquia, false, "", null, aleft+PanelPrincipal.totalLineas, aright); }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$11",76, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARS ::= TIPO_VAR id DIM NT$10 VARS2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS",5, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.tipoActual=a; if(a!=null){ parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Arreglo", parser.jerarquia, true, "", c, bleft+PanelPrincipal.totalLineas, bright); } 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$10",75, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VARS ::= TIPO_VAR id NT$8 VALOR NT$9 VARS2 puntoComa ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		NodoOperacion c = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARS",5, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion c = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.manejoc.crearVariableConValor(parser.tabla.getObC(), b.toString(), a, c);    if(c!=null){ if(c.getValor()){parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Variable", parser.jerarquia, c.getValor(), "", null, bleft+PanelPrincipal.totalLineas, bright); } else { System.out.println("soy falso"); } } else { parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Variable", parser.jerarquia, false, "", null, bleft+PanelPrincipal.totalLineas, bright); }  
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$9",74, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.tipoActual=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$8",73, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACIONES ::= VECTOR igual OPERACION puntoComa NT$7 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 if(a && b.getValor()){ /*VER LO DE LAS ASIGNACIONES*/ } else { System.out.println("no es posible asignar en el arreglo"); }     
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$7",72, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACIONES ::= id igual NT$5 OPERACION puntoComa NT$6 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion b = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
  parser.manejoc.asignarValor(parser.tabla.getObC(), a.toString(), b.getId());   parser.tabla.getObC().getListVariables().get(VerifObjetos.iterador).getListAsignaciones().add(parser.jerarquia); parser.tabla.getObC().getListVariables().get(VerifObjetos.iterador).setValor(true);       
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$6",71, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.tipoActual = parser.verif.devolverTipoVar(parser.tabla.getObC(), parser.jerarquia, a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$5",70, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR ::= 
            {
              NodoOperacion RESULT =null;
		 RESULT=null; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VALOR",52, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALOR ::= igual OPERACION 
            {
              NodoOperacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		NodoOperacion a = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VALOR",52, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONSTANTES ::= tipoConst TIPO_VAR NT$3 id igual OPERACION puntoComa NT$4 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		NodoOperacion c = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("CONSTANTES",3, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		NodoOperacion c = (NodoOperacion)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.manejoc.crearVariable(parser.tabla.getObC(), b.toString(), a);   parser.op.agregarNuevaVar(parser.tabla.getObC(), b.toString(), a, "Constante", parser.jerarquia, true, "", null, bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$4",69, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
 parser.tipoActual = a; 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$3",68, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARIABLES ::= VARIABLES error 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLES ::= VARIABLES COMENTARIO_B 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLES ::= VARIABLES COMENTARIO_A 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLES ::= VARIABLES CLASES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLES ::= VARIABLES VARS 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLES ::= VARIABLES ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLES ::= VARIABLES CONSTANTES 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // JAVA_CLASES ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("JAVA_CLASES",40, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // JAVA_CLASES ::= por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("JAVA_CLASES",40, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LIBRERIAS ::= 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LIBRERIAS ::= LIBRERIAS numeral condInclude menor id punto id mayor ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LIBRERIAS ::= LIBRERIAS numeral condInclude menor id mayor ENTER2 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIBRERIAS ::= LIBRERIAS numeral condInclude comilla java punto JAVA_CLASES comilla NT$2 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.op.activarLenguaje(a.toString(), parser.tabla, b, bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$2",67, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIBRERIAS ::= LIBRERIAS numeral condInclude comilla python comilla NT$1 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.op.activarLenguaje(a.toString(), parser.tabla, "", aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$1",66, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIAS ::= LIBRERIAS numeral condInclude comilla visual comilla NT$0 ENTER2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)).value;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
 parser.op.activarLenguaje(a.toString(), parser.tabla, "", aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("NT$0",65, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ENTER2 LIBRERIAS VARIABLES MAIN 
            {
              Object RESULT =null;

              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          return CUP$SintaxC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)).value;
		RESULT = start_val;
              CUP$SintaxC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxC$stack.elementAt(CUP$SintaxC$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxC$parser.done_parsing();
          return CUP$SintaxC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

