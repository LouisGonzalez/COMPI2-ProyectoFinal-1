
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 10 11:28:03 CST 2020
//----------------------------------------------------

package gramaticaJAVA;

import java_cup.runtime.*;
import Tablas.*;
import Operaciones.*;
import verificaciones.*;
import cuartetos.*;
import objetosApoyo.*;
import manejoCuartetos.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 10 11:28:03 CST 2020
  */
public class SintaxJAVA extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxJAVA() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxJAVA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxJAVA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\355\000\002\002\004\000\002\002\003\000\002\072" +
    "\002\000\002\003\012\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\002\000\002\073\002\000\002\074\002\000\002" +
    "\005\010\000\002\075\002\000\002\076\002\000\002\022" +
    "\010\000\002\077\002\000\002\012\007\000\002\012\003" +
    "\000\002\100\002\000\002\101\002\000\002\013\010\000" +
    "\002\013\003\000\002\061\004\000\002\061\002\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\060" +
    "\003\000\002\056\005\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\004\000\002\057\004\000\002\057\006\000\002\102\002" +
    "\000\002\103\002\000\002\006\016\000\002\104\002\000" +
    "\002\105\002\000\002\006\015\000\002\106\002\000\002" +
    "\107\002\000\002\021\014\000\002\110\002\000\002\111" +
    "\002\000\002\021\013\000\002\020\005\000\002\024\006" +
    "\000\002\024\002\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\040\004\000\002" +
    "\040\004\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\040\004\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\040\002\000" +
    "\002\112\002\000\002\052\006\000\002\052\002\000\002" +
    "\113\002\000\002\114\002\000\002\115\002\000\002\043" +
    "\016\000\002\116\002\000\002\117\002\000\002\120\002" +
    "\000\002\044\017\000\002\121\002\000\002\044\010\000" +
    "\002\044\002\000\002\122\002\000\002\123\002\000\002" +
    "\124\002\000\002\045\024\000\002\035\003\000\002\035" +
    "\002\000\002\125\002\000\002\062\005\000\002\064\005" +
    "\000\002\064\005\000\002\064\005\000\002\064\005\000" +
    "\002\064\005\000\002\064\005\000\002\064\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\004\000\002\065\004" +
    "\000\002\065\006\000\002\071\004\000\002\071\003\000" +
    "\002\071\004\000\002\071\003\000\002\071\003\000\002" +
    "\071\004\000\002\071\004\000\002\042\003\000\002\042" +
    "\004\000\002\042\003\000\002\042\004\000\002\126\002" +
    "\000\002\127\002\000\002\046\014\000\002\130\002\000" +
    "\002\047\015\000\002\011\007\000\002\011\007\000\002" +
    "\131\002\000\002\132\002\000\002\050\013\000\002\133" +
    "\002\000\002\134\002\000\002\051\013\000\002\135\002" +
    "\000\002\136\002\000\002\051\011\000\002\053\003\000" +
    "\002\053\003\000\002\063\003\000\002\063\005\000\002" +
    "\063\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\023\006\000\002\023\004\000\002\041\005" +
    "\000\002\067\005\000\002\137\002\000\002\067\006\000" +
    "\002\067\003\000\002\067\006\000\002\067\004\000\002" +
    "\066\005\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\005\000\002\055\005\000\002\055\005\000\002" +
    "\055\004\000\002\055\004\000\002\055\006\000\002\070" +
    "\003\000\002\070\004\000\002\070\003\000\002\070\004" +
    "\000\002\070\004\000\002\070\004\000\002\027\011\000" +
    "\002\027\010\000\002\027\007\000\002\027\006\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\025" +
    "\004\000\002\025\006\000\002\037\003\000\002\037\003" +
    "\000\002\026\004\000\002\026\002\000\002\030\004\000" +
    "\002\031\005\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\032\004\000" +
    "\002\032\004\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\032\004\000" +
    "\002\032\004\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\032\004\000" +
    "\002\032\004\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\004\000\002\032" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0195\000\006\002\ufffd\020\ufffd\001\002\000\006\002" +
    "\000\020\007\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\021\010\001\002\000\004\044" +
    "\011\001\002\000\004\022\uffff\001\002\000\004\022\013" +
    "\001\002\000\016\006\ufff8\007\ufff8\010\ufff8\020\ufff8\023" +
    "\ufff8\044\ufff8\001\002\000\016\006\015\007\021\010\017" +
    "\020\023\023\020\044\016\001\002\000\004\044\uffe8\001" +
    "\002\000\004\031\u0197\001\002\000\004\044\uffe6\001\002" +
    "\000\006\002\ufffe\020\ufffe\001\002\000\004\044\uffe7\001" +
    "\002\000\016\006\ufffc\007\ufffc\010\ufffc\020\ufffc\023\ufffc" +
    "\044\ufffc\001\002\000\014\006\102\007\104\010\103\011" +
    "\105\044\107\001\002\000\004\044\030\001\002\000\016" +
    "\006\ufffb\007\ufffb\010\ufffb\020\ufffb\023\ufffb\044\ufffb\001" +
    "\002\000\016\006\ufff9\007\ufff9\010\ufff9\020\ufff9\023\ufff9" +
    "\044\ufff9\001\002\000\016\006\ufffa\007\ufffa\010\ufffa\020" +
    "\ufffa\023\ufffa\044\ufffa\001\002\000\010\004\ufff7\026\ufff7" +
    "\031\ufff7\001\002\000\010\004\uffe9\026\uffe9\031\032\001" +
    "\002\000\014\033\051\043\045\044\053\050\046\052\044" +
    "\001\002\000\006\004\ufff6\026\ufff6\001\002\000\006\004" +
    "\035\026\036\001\002\000\004\044\040\001\002\000\052" +
    "\006\uffef\007\uffef\010\uffef\012\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\023\uffef\026\uffef\044\uffef\051\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\072" +
    "\uffef\001\002\000\052\006\ufff5\007\ufff5\010\ufff5\012\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\023\ufff5\026" +
    "\ufff5\044\ufff5\051\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\063\ufff5\072\ufff5\001\002\000\010\004\uffe9\026" +
    "\uffe9\031\032\001\002\000\006\004\ufff1\026\ufff1\001\002" +
    "\000\006\004\035\026\036\001\002\000\052\006\ufff0\007" +
    "\ufff0\010\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\023\ufff0\026\ufff0\044\ufff0\051\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\072\ufff0\001\002" +
    "\000\014\033\051\043\045\044\053\050\046\052\044\001" +
    "\002\000\026\004\uffdc\005\076\026\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\044\uffdc\053\uffdc\001\002\000" +
    "\006\043\072\044\073\001\002\000\006\004\uffea\026\uffea" +
    "\001\002\000\024\004\uffde\026\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\044\uffde\053\uffde\001\002\000\006" +
    "\043\066\044\067\001\002\000\022\004\uffe5\026\uffe5\032" +
    "\056\033\057\034\054\035\060\036\055\044\uffe5\001\002" +
    "\000\024\004\uffdd\026\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\044\uffdd\053\uffdd\001\002\000\014\033\051" +
    "\043\045\044\053\050\046\052\044\001\002\000\014\033" +
    "\051\043\045\044\053\050\046\052\044\001\002\000\014" +
    "\033\051\043\045\044\053\050\046\052\044\001\002\000" +
    "\014\033\051\043\045\044\053\050\046\052\044\001\002" +
    "\000\014\033\051\043\045\044\053\050\046\052\044\001" +
    "\002\000\024\004\uffe0\026\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\044\uffe0\053\uffe0\001\002\000\024\004" +
    "\uffe2\026\uffe2\032\uffe2\033\uffe2\034\054\035\060\036\055" +
    "\044\uffe2\053\uffe2\001\002\000\024\004\uffe3\026\uffe3\032" +
    "\uffe3\033\uffe3\034\054\035\060\036\055\044\uffe3\053\uffe3" +
    "\001\002\000\024\004\uffdf\026\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\044\uffdf\053\uffdf\001\002\000\024" +
    "\004\uffe1\026\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\044\uffe1\053\uffe1\001\002\000\026\004\uffd7\005\070" +
    "\026\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\044" +
    "\uffd7\053\uffd7\001\002\000\024\004\uffd8\026\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\044\uffd8\053\uffd8\001" +
    "\002\000\004\043\071\001\002\000\024\004\uffd6\026\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\044\uffd6\053" +
    "\uffd6\001\002\000\004\050\075\001\002\000\004\050\074" +
    "\001\002\000\024\004\uffda\026\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\044\uffda\053\uffda\001\002\000\024" +
    "\004\uffd9\026\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\044\uffd9\053\uffd9\001\002\000\004\043\077\001\002" +
    "\000\024\004\uffdb\026\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\044\uffdb\053\uffdb\001\002\000\016\032\056" +
    "\033\057\034\054\035\060\036\055\053\101\001\002\000" +
    "\024\004\uffe4\026\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\044\uffe4\053\uffe4\001\002\000\004\044\uffc4\001" +
    "\002\000\004\044\uffc5\001\002\000\004\044\uffc6\001\002" +
    "\000\004\044\uffc3\001\002\000\004\044\u0186\001\002\000" +
    "\004\052\110\001\002\000\012\006\uffcf\007\uffcf\010\uffcf" +
    "\053\uffcc\001\002\000\004\053\u0181\001\002\000\010\006" +
    "\uffc7\007\uffc7\010\uffc7\001\002\000\010\006\015\007\021" +
    "\010\017\001\002\000\004\053\115\001\002\000\004\022" +
    "\116\001\002\000\042\006\uffb8\007\uffb8\010\uffb8\012\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\017\uffb8\023\uffb8\044\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\072\uffb8\001\002" +
    "\000\042\006\015\007\021\010\017\012\146\014\140\015" +
    "\120\016\122\017\143\023\uffce\044\142\057\133\060\126" +
    "\061\127\062\121\063\130\072\134\001\002\000\004\052" +
    "\uff87\001\002\000\004\052\uff4b\001\002\000\004\022\uff84" +
    "\001\002\000\050\006\uffba\007\uffba\010\uffba\012\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\023\uffba\026\uffba\044\uffba" +
    "\051\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\072\uffba\001\002\000\004\023\u016a\001\002\000\050" +
    "\006\uffbe\007\uffbe\010\uffbe\012\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\023\uffbe\026\uffbe\044\uffbe\051\uffbe\056\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\072\uffbe\001" +
    "\002\000\004\052\u0166\001\002\000\004\052\uff4c\001\002" +
    "\000\004\052\uff4a\001\002\000\050\006\uffbb\007\uffbb\010" +
    "\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\023\uffbb" +
    "\026\uffbb\044\uffbb\051\uffbb\056\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\072\uffbb\001\002\000\050\006\uffc0" +
    "\007\uffc0\010\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\023\uffc0\026\uffc0\044\uffc0\051\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\072\uffc0\001\002\000" +
    "\004\052\u0162\001\002\000\134\004\uff15\005\uff15\006\uff15" +
    "\007\uff15\010\uff15\011\uff15\012\uff15\013\uff15\016\uff15\017" +
    "\uff15\020\uff15\021\uff15\022\uff15\023\uff15\024\uff15\025\uff15" +
    "\026\uff15\027\uff15\030\uff15\031\uff15\032\uff15\033\uff15\034" +
    "\uff15\035\uff15\036\uff15\037\uff15\040\uff15\042\uff15\043\uff15" +
    "\044\uff15\045\uff15\046\uff15\047\uff15\050\uff15\051\uff15\052" +
    "\uff15\053\uff15\054\uff15\055\uff15\056\uff15\057\uff15\060\uff15" +
    "\065\uff15\066\uff15\073\uff15\001\002\000\050\006\uffc1\007" +
    "\uffc1\010\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\023\uffc1\026\uffc1\044\uffc1\051\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\072\uffc1\001\002\000\004" +
    "\052\u015a\001\002\000\050\006\uffc2\007\uffc2\010\uffc2\012" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\023\uffc2\026\uffc2" +
    "\044\uffc2\051\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\072\uffc2\001\002\000\004\052\uffa9\001\002" +
    "\000\050\006\uffbd\007\uffbd\010\uffbd\012\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\023\uffbd\026\uffbd\044\uffbd\051\uffbd" +
    "\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\072" +
    "\uffbd\001\002\000\004\031\333\001\002\000\004\052\uff80" +
    "\001\002\000\050\006\uffb9\007\uffb9\010\uffb9\012\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\023\uffb9\026\uffb9\044\uffb9" +
    "\051\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063" +
    "\uffb9\072\uffb9\001\002\000\050\006\uffbf\007\uffbf\010\uffbf" +
    "\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\023\uffbf\026" +
    "\uffbf\044\uffbf\051\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf" +
    "\062\uffbf\063\uffbf\072\uffbf\001\002\000\004\052\150\001" +
    "\002\000\050\006\uffbc\007\uffbc\010\uffbc\012\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\023\uffbc\026\uffbc\044\uffbc\051" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\072\uffbc\001\002\000\016\030\uffb4\033\uffb4\043\uffb4\044" +
    "\uffb4\050\uffb4\052\uffb4\001\002\000\016\030\160\033\155" +
    "\043\156\044\152\050\163\052\162\001\002\000\034\026" +
    "\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e" +
    "\036\uff5e\046\uff5e\047\uff5e\053\uff5e\067\uff5e\070\uff5e\001" +
    "\002\000\034\026\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f" +
    "\034\uff5f\035\uff5f\036\uff5f\046\uff5f\047\uff5f\053\uff5f\067" +
    "\uff5f\070\uff5f\001\002\000\012\026\uff69\053\uff69\067\uff69" +
    "\070\uff69\001\002\000\006\043\270\044\271\001\002\000" +
    "\036\005\266\026\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d" +
    "\034\uff5d\035\uff5d\036\uff5d\046\uff5d\047\uff5d\053\uff5d\067" +
    "\uff5d\070\uff5d\001\002\000\024\030\255\031\257\032\174" +
    "\033\175\034\172\035\176\036\173\046\256\047\254\001" +
    "\002\000\014\033\155\043\156\044\152\050\163\052\247" +
    "\001\002\000\010\053\uffb3\067\205\070\206\001\002\000" +
    "\014\033\155\043\156\044\152\050\163\052\162\001\002" +
    "\000\006\043\164\044\165\001\002\000\004\050\167\001" +
    "\002\000\004\050\166\001\002\000\034\026\uff5b\030\uff5b" +
    "\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\046" +
    "\uff5b\047\uff5b\053\uff5b\067\uff5b\070\uff5b\001\002\000\034" +
    "\026\uff5a\030\uff5a\031\uff5a\032\uff5a\033\uff5a\034\uff5a\035" +
    "\uff5a\036\uff5a\046\uff5a\047\uff5a\053\uff5a\067\uff5a\070\uff5a" +
    "\001\002\000\016\032\174\033\175\034\172\035\176\036" +
    "\173\053\171\001\002\000\034\026\uff65\030\uff65\031\uff65" +
    "\032\uff65\033\uff65\034\uff65\035\uff65\036\uff65\046\uff65\047" +
    "\uff65\053\uff65\067\uff65\070\uff65\001\002\000\014\033\155" +
    "\043\156\044\152\050\163\052\162\001\002\000\014\033" +
    "\155\043\156\044\152\050\163\052\162\001\002\000\014" +
    "\033\155\043\156\044\152\050\163\052\162\001\002\000" +
    "\014\033\155\043\156\044\152\050\163\052\162\001\002" +
    "\000\014\033\155\043\156\044\152\050\163\052\162\001" +
    "\002\000\034\026\uff61\030\uff61\031\uff61\032\uff61\033\uff61" +
    "\034\uff61\035\uff61\036\uff61\046\uff61\047\uff61\053\uff61\067" +
    "\uff61\070\uff61\001\002\000\034\026\uff63\030\uff63\031\uff63" +
    "\032\uff63\033\uff63\034\172\035\176\036\173\046\uff63\047" +
    "\uff63\053\uff63\067\uff63\070\uff63\001\002\000\034\026\uff64" +
    "\030\uff64\031\uff64\032\uff64\033\uff64\034\172\035\176\036" +
    "\173\046\uff64\047\uff64\053\uff64\067\uff64\070\uff64\001\002" +
    "\000\034\026\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034" +
    "\uff60\035\uff60\036\uff60\046\uff60\047\uff60\053\uff60\067\uff60" +
    "\070\uff60\001\002\000\034\026\uff62\030\uff62\031\uff62\032" +
    "\uff62\033\uff62\034\uff62\035\uff62\036\uff62\046\uff62\047\uff62" +
    "\053\uff62\067\uff62\070\uff62\001\002\000\004\053\212\001" +
    "\002\000\016\030\160\033\155\043\156\044\152\050\163" +
    "\052\162\001\002\000\016\030\uff6b\033\uff6b\043\uff6b\044" +
    "\uff6b\050\uff6b\052\uff6b\001\002\000\016\030\160\033\155" +
    "\043\156\044\152\050\163\052\162\001\002\000\012\026" +
    "\uff6a\053\uff6a\067\205\070\uff6a\001\002\000\012\026\uff6c" +
    "\053\uff6c\067\uff6c\070\uff6c\001\002\000\004\022\213\001" +
    "\002\000\044\006\uffb8\007\uffb8\010\uffb8\012\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\023\uffb8\044\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\072\uffb8\001\002" +
    "\000\044\006\015\007\021\010\017\012\146\014\140\015" +
    "\120\016\122\017\143\023\uffb5\044\142\056\216\057\133" +
    "\060\126\061\127\062\121\063\130\072\134\001\002\000" +
    "\004\023\222\001\002\000\014\033\uffb7\043\uffb7\044\uffb7" +
    "\050\uffb7\052\uffb7\001\002\000\014\033\051\043\045\044" +
    "\053\050\046\052\044\001\002\000\016\026\221\032\056" +
    "\033\057\034\054\035\060\036\055\001\002\000\006\023" +
    "\uffb6\026\uffb6\001\002\000\052\006\uffb2\007\uffb2\010\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\023" +
    "\uffb2\026\uffb2\044\uffb2\051\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\072\uffb2\001\002\000\052\006" +
    "\uffaa\007\uffaa\010\uffaa\012\uffaa\013\225\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\023\uffaa\026\uffaa\044\uffaa\051\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\072\uffaa" +
    "\001\002\000\050\006\uffb1\007\uffb1\010\uffb1\012\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\023\uffb1\026\uffb1\044\uffb1" +
    "\051\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\072\uffb1\001\002\000\006\012\226\022\uffac\001\002" +
    "\000\004\052\234\001\002\000\004\022\230\001\002\000" +
    "\044\006\uffb8\007\uffb8\010\uffb8\012\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\023\uffb8\044\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\072\uffb8\001\002\000\044" +
    "\006\015\007\021\010\017\012\146\014\140\015\120\016" +
    "\122\017\143\023\uffb5\044\142\056\216\057\133\060\126" +
    "\061\127\062\121\063\130\072\134\001\002\000\004\023" +
    "\233\001\002\000\050\006\uffab\007\uffab\010\uffab\012\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\023\uffab\026\uffab\044" +
    "\uffab\051\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\072\uffab\001\002\000\016\030\uffb0\033\uffb0\043" +
    "\uffb0\044\uffb0\050\uffb0\052\uffb0\001\002\000\016\030\160" +
    "\033\155\043\156\044\152\050\163\052\162\001\002\000" +
    "\010\053\uffaf\067\205\070\206\001\002\000\004\053\240" +
    "\001\002\000\004\022\241\001\002\000\044\006\uffb8\007" +
    "\uffb8\010\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\023\uffb8\044\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\072\uffb8\001\002\000\044\006\015\007\021" +
    "\010\017\012\146\014\140\015\120\016\122\017\143\023" +
    "\uffb5\044\142\056\216\057\133\060\126\061\127\062\121" +
    "\063\130\072\134\001\002\000\004\023\244\001\002\000" +
    "\052\006\uffae\007\uffae\010\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\023\uffae\026\uffae\044\uffae\051" +
    "\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae" +
    "\072\uffae\001\002\000\052\006\uffaa\007\uffaa\010\uffaa\012" +
    "\uffaa\013\225\014\uffaa\015\uffaa\016\uffaa\017\uffaa\023\uffaa" +
    "\026\uffaa\044\uffaa\051\uffaa\056\uffaa\057\uffaa\060\uffaa\061" +
    "\uffaa\062\uffaa\063\uffaa\072\uffaa\001\002\000\050\006\uffad" +
    "\007\uffad\010\uffad\012\uffad\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\023\uffad\026\uffad\044\uffad\051\uffad\056\uffad\057\uffad" +
    "\060\uffad\061\uffad\062\uffad\063\uffad\072\uffad\001\002\000" +
    "\014\033\155\043\156\044\152\050\163\052\162\001\002" +
    "\000\012\026\uff67\053\uff67\067\uff67\070\uff67\001\002\000" +
    "\004\053\265\001\002\000\026\030\255\031\257\032\174" +
    "\033\175\034\172\035\176\036\173\046\256\047\254\053" +
    "\171\001\002\000\014\033\155\043\156\044\152\050\163" +
    "\052\162\001\002\000\016\031\263\033\uff54\043\uff54\044" +
    "\uff54\050\uff54\052\uff54\001\002\000\004\031\262\001\002" +
    "\000\016\031\261\033\uff56\043\uff56\044\uff56\050\uff56\052" +
    "\uff56\001\002\000\004\031\260\001\002\000\014\033\uff52" +
    "\043\uff52\044\uff52\050\uff52\052\uff52\001\002\000\014\033" +
    "\uff55\043\uff55\044\uff55\050\uff55\052\uff55\001\002\000\014" +
    "\033\uff51\043\uff51\044\uff51\050\uff51\052\uff51\001\002\000" +
    "\014\033\uff53\043\uff53\044\uff53\050\uff53\052\uff53\001\002" +
    "\000\024\026\uff66\032\174\033\175\034\172\035\176\036" +
    "\173\053\uff66\067\uff66\070\uff66\001\002\000\012\026\uff68" +
    "\053\uff68\067\uff68\070\uff68\001\002\000\004\043\267\001" +
    "\002\000\034\026\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c" +
    "\034\uff5c\035\uff5c\036\uff5c\046\uff5c\047\uff5c\053\uff5c\067" +
    "\uff5c\070\uff5c\001\002\000\036\005\272\026\uff58\030\uff58" +
    "\031\uff58\032\uff58\033\uff58\034\uff58\035\uff58\036\uff58\046" +
    "\uff58\047\uff58\053\uff58\067\uff58\070\uff58\001\002\000\034" +
    "\026\uff59\030\uff59\031\uff59\032\uff59\033\uff59\034\uff59\035" +
    "\uff59\036\uff59\046\uff59\047\uff59\053\uff59\067\uff59\070\uff59" +
    "\001\002\000\004\043\273\001\002\000\034\026\uff57\030" +
    "\uff57\031\uff57\032\uff57\033\uff57\034\uff57\035\uff57\036\uff57" +
    "\046\uff57\047\uff57\053\uff57\067\uff57\070\uff57\001\002\000" +
    "\004\052\275\001\002\000\010\043\276\044\301\050\277" +
    "\001\002\000\006\027\uff73\053\uff73\001\002\000\004\044" +
    "\331\001\002\000\004\053\uff7f\001\002\000\006\027\uff75" +
    "\053\uff75\001\002\000\004\053\303\001\002\000\004\022" +
    "\304\001\002\000\006\054\307\055\305\001\002\000\004" +
    "\027\323\001\002\000\004\023\322\001\002\000\010\043" +
    "\276\044\301\050\277\001\002\000\004\027\311\001\002" +
    "\000\046\006\uff7d\007\uff7d\010\uff7d\012\uff7d\014\uff7d\015" +
    "\uff7d\016\uff7d\017\uff7d\026\uff7d\044\uff7d\051\uff7d\056\uff7d" +
    "\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\072\uff7d\001" +
    "\002\000\046\006\uffb8\007\uffb8\010\uffb8\012\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\026\uffb8\044\uffb8\051\uffb8\056" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\072\uffb8" +
    "\001\002\000\046\006\015\007\021\010\017\012\146\014" +
    "\140\015\120\016\122\017\143\026\uffb5\044\142\051\314" +
    "\056\216\057\133\060\126\061\127\062\121\063\130\072" +
    "\134\001\002\000\004\026\uff77\001\002\000\004\026\uff76" +
    "\001\002\000\004\026\317\001\002\000\006\054\uff7c\055" +
    "\uff7c\001\002\000\006\054\307\055\305\001\002\000\004" +
    "\023\uff7b\001\002\000\050\006\uff7e\007\uff7e\010\uff7e\012" +
    "\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\023\uff7e\026\uff7e" +
    "\044\uff7e\051\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062" +
    "\uff7e\063\uff7e\072\uff7e\001\002\000\046\006\uff7a\007\uff7a" +
    "\010\uff7a\012\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\026" +
    "\uff7a\044\uff7a\051\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a" +
    "\062\uff7a\063\uff7a\072\uff7a\001\002\000\046\006\uffb8\007" +
    "\uffb8\010\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\026\uffb8\044\uffb8\051\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\072\uffb8\001\002\000\046\006\015" +
    "\007\021\010\017\012\146\014\140\015\120\016\122\017" +
    "\143\026\uffb5\044\142\051\314\056\216\057\133\060\126" +
    "\061\127\062\121\063\130\072\134\001\002\000\004\026" +
    "\uff79\001\002\000\004\026\330\001\002\000\004\023\uff78" +
    "\001\002\000\004\050\332\001\002\000\006\027\uff74\053" +
    "\uff74\001\002\000\022\033\ufff4\043\ufff4\044\ufff4\050\ufff4" +
    "\052\ufff4\061\127\062\121\063\130\001\002\000\014\033" +
    "\051\043\045\044\053\050\046\052\044\001\002\000\004" +
    "\052\336\001\002\000\012\041\343\043\341\044\344\053" +
    "\337\001\002\000\004\026\u0119\001\002\000\004\053\u0117" +
    "\001\002\000\006\032\uff46\053\uff46\001\002\000\006\032" +
    "\u0114\053\uff44\001\002\000\134\004\uff15\005\uff15\006\uff15" +
    "\007\uff15\010\uff15\011\uff15\012\uff15\013\uff15\016\uff15\017" +
    "\uff15\020\uff15\021\uff15\022\uff15\023\uff15\024\uff15\025\uff15" +
    "\026\uff15\027\uff15\030\uff15\031\uff15\032\uff15\033\uff15\034" +
    "\uff15\035\uff15\036\uff15\037\uff15\040\uff15\041\uff15\042\uff15" +
    "\043\uff15\044\uff15\045\uff15\046\uff15\047\uff15\050\uff15\051" +
    "\uff15\052\uff15\053\uff15\054\uff15\055\uff15\056\uff15\057\uff15" +
    "\060\uff15\065\uff15\066\uff15\001\002\000\006\032\uff47\053" +
    "\uff47\001\002\000\134\004\355\005\377\006\u0109\007\362" +
    "\010\u0103\011\u010c\012\363\013\u0101\016\u0110\017\357\020" +
    "\373\021\364\022\354\023\353\024\u0111\025\u010f\026\u0105" +
    "\027\351\030\u010e\031\356\032\372\033\366\034\376\035" +
    "\u010b\036\371\037\350\040\u0102\041\346\042\375\043\365" +
    "\044\u0104\045\u010d\046\374\047\370\050\u010a\051\u0108\052" +
    "\u0107\053\u0106\054\347\055\361\056\u0112\057\u0100\060\352" +
    "\065\360\066\367\001\002\000\006\032\u0114\053\uff44\001" +
    "\002\000\136\004\uff37\005\uff37\006\uff37\007\uff37\010\uff37" +
    "\011\uff37\012\uff37\013\uff37\016\uff37\017\uff37\020\uff37\021" +
    "\uff37\022\uff37\023\uff37\024\uff37\025\uff37\026\uff37\027\uff37" +
    "\030\uff37\031\uff37\032\uff37\033\uff37\034\uff37\035\uff37\036" +
    "\uff37\037\uff37\040\uff37\041\uff37\042\uff37\043\uff37\044\uff37" +
    "\045\uff37\046\uff37\047\uff37\050\uff37\051\uff37\052\uff37\053" +
    "\uff37\054\uff37\055\uff37\056\uff37\057\uff37\060\uff37\065\uff37" +
    "\066\uff37\073\uff37\001\002\000\136\004\uff1e\005\uff1e\006" +
    "\uff1e\007\uff1e\010\uff1e\011\uff1e\012\uff1e\013\uff1e\016\uff1e" +
    "\017\uff1e\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\025" +
    "\uff1e\026\uff1e\027\uff1e\030\uff1e\031\uff1e\032\uff1e\033\uff1e" +
    "\034\uff1e\035\uff1e\036\uff1e\037\uff1e\040\uff1e\041\uff1e\042" +
    "\uff1e\043\uff1e\044\uff1e\045\uff1e\046\uff1e\047\uff1e\050\uff1e" +
    "\051\uff1e\052\uff1e\053\uff1e\054\uff1e\055\uff1e\056\uff1e\057" +
    "\uff1e\060\uff1e\065\uff1e\066\uff1e\073\uff1e\001\002\000\136" +
    "\004\uff28\005\uff28\006\uff28\007\uff28\010\uff28\011\uff28\012" +
    "\uff28\013\uff28\016\uff28\017\uff28\020\uff28\021\uff28\022\uff28" +
    "\023\uff28\024\uff28\025\uff28\026\uff28\027\uff28\030\uff28\031" +
    "\uff28\032\uff28\033\uff28\034\uff28\035\uff28\036\uff28\037\uff28" +
    "\040\uff28\041\uff28\042\uff28\043\uff28\044\uff28\045\uff28\046" +
    "\uff28\047\uff28\050\uff28\051\uff28\052\uff28\053\uff28\054\uff28" +
    "\055\uff28\056\uff28\057\uff28\060\uff28\065\uff28\066\uff28\073" +
    "\uff28\001\002\000\136\004\uff32\005\uff32\006\uff32\007\uff32" +
    "\010\uff32\011\uff32\012\uff32\013\uff32\016\uff32\017\uff32\020" +
    "\uff32\021\uff32\022\uff32\023\uff32\024\uff32\025\uff32\026\uff32" +
    "\027\uff32\030\uff32\031\uff32\032\uff32\033\uff32\034\uff32\035" +
    "\uff32\036\uff32\037\uff32\040\uff32\041\uff32\042\uff32\043\uff32" +
    "\044\uff32\045\uff32\046\uff32\047\uff32\050\uff32\051\uff32\052" +
    "\uff32\053\uff32\054\uff32\055\uff32\056\uff32\057\uff32\060\uff32" +
    "\065\uff32\066\uff32\073\uff32\001\002\000\136\004\uff2e\005" +
    "\uff2e\006\uff2e\007\uff2e\010\uff2e\011\uff2e\012\uff2e\013\uff2e" +
    "\016\uff2e\017\uff2e\020\uff2e\021\uff2e\022\uff2e\023\uff2e\024" +
    "\uff2e\025\uff2e\026\uff2e\027\uff2e\030\uff2e\031\uff2e\032\uff2e" +
    "\033\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e\040\uff2e\041" +
    "\uff2e\042\uff2e\043\uff2e\044\uff2e\045\uff2e\046\uff2e\047\uff2e" +
    "\050\uff2e\051\uff2e\052\uff2e\053\uff2e\054\uff2e\055\uff2e\056" +
    "\uff2e\057\uff2e\060\uff2e\065\uff2e\066\uff2e\073\uff2e\001\002" +
    "\000\136\004\uff2f\005\uff2f\006\uff2f\007\uff2f\010\uff2f\011" +
    "\uff2f\012\uff2f\013\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f" +
    "\022\uff2f\023\uff2f\024\uff2f\025\uff2f\026\uff2f\027\uff2f\030" +
    "\uff2f\031\uff2f\032\uff2f\033\uff2f\034\uff2f\035\uff2f\036\uff2f" +
    "\037\uff2f\040\uff2f\041\uff2f\042\uff2f\043\uff2f\044\uff2f\045" +
    "\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f\052\uff2f\053\uff2f" +
    "\054\uff2f\055\uff2f\056\uff2f\057\uff2f\060\uff2f\065\uff2f\066" +
    "\uff2f\073\uff2f\001\002\000\136\004\uff41\005\uff41\006\uff41" +
    "\007\uff41\010\uff41\011\uff41\012\uff41\013\uff41\016\uff41\017" +
    "\uff41\020\uff41\021\uff41\022\uff41\023\uff41\024\uff41\025\uff41" +
    "\026\uff41\027\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034" +
    "\uff41\035\uff41\036\uff41\037\uff41\040\uff41\041\uff41\042\uff41" +
    "\043\uff41\044\uff41\045\uff41\046\uff41\047\uff41\050\uff41\051" +
    "\uff41\052\uff41\053\uff41\054\uff41\055\uff41\056\uff41\057\uff41" +
    "\060\uff41\065\uff41\066\uff41\073\uff41\001\002\000\136\004" +
    "\uff26\005\uff26\006\uff26\007\uff26\010\uff26\011\uff26\012\uff26" +
    "\013\uff26\016\uff26\017\uff26\020\uff26\021\uff26\022\uff26\023" +
    "\uff26\024\uff26\025\uff26\026\uff26\027\uff26\030\uff26\031\uff26" +
    "\032\uff26\033\uff26\034\uff26\035\uff26\036\uff26\037\uff26\040" +
    "\uff26\041\uff26\042\uff26\043\uff26\044\uff26\045\uff26\046\uff26" +
    "\047\uff26\050\uff26\051\uff26\052\uff26\053\uff26\054\uff26\055" +
    "\uff26\056\uff26\057\uff26\060\uff26\065\uff26\066\uff26\073\uff26" +
    "\001\002\000\136\004\uff38\005\uff38\006\uff38\007\uff38\010" +
    "\uff38\011\uff38\012\uff38\013\uff38\016\uff38\017\uff38\020\uff38" +
    "\021\uff38\022\uff38\023\uff38\024\uff38\025\uff38\026\uff38\027" +
    "\uff38\030\uff38\031\uff38\032\uff38\033\uff38\034\uff38\035\uff38" +
    "\036\uff38\037\uff38\040\uff38\041\uff38\042\uff38\043\uff38\044" +
    "\uff38\045\uff38\046\uff38\047\uff38\050\uff38\051\uff38\052\uff38" +
    "\053\uff38\054\uff38\055\uff38\056\uff38\057\uff38\060\uff38\065" +
    "\uff38\066\uff38\073\uff38\001\002\000\136\004\uff18\005\uff18" +
    "\006\uff18\007\uff18\010\uff18\011\uff18\012\uff18\013\uff18\016" +
    "\uff18\017\uff18\020\uff18\021\uff18\022\uff18\023\uff18\024\uff18" +
    "\025\uff18\026\uff18\027\uff18\030\uff18\031\uff18\032\uff18\033" +
    "\uff18\034\uff18\035\uff18\036\uff18\037\uff18\040\uff18\041\uff18" +
    "\042\uff18\043\uff18\044\uff18\045\uff18\046\uff18\047\uff18\050" +
    "\uff18\051\uff18\052\uff18\053\uff18\054\uff18\055\uff18\056\uff18" +
    "\057\uff18\060\uff18\065\uff18\066\uff18\073\uff18\001\002\000" +
    "\136\004\uff35\005\uff35\006\uff35\007\uff35\010\uff35\011\uff35" +
    "\012\uff35\013\uff35\016\uff35\017\uff35\020\uff35\021\uff35\022" +
    "\uff35\023\uff35\024\uff35\025\uff35\026\uff35\027\uff35\030\uff35" +
    "\031\uff35\032\uff35\033\uff35\034\uff35\035\uff35\036\uff35\037" +
    "\uff35\040\uff35\041\uff35\042\uff35\043\uff35\044\uff35\045\uff35" +
    "\046\uff35\047\uff35\050\uff35\051\uff35\052\uff35\053\uff35\054" +
    "\uff35\055\uff35\056\uff35\057\uff35\060\uff35\065\uff35\066\uff35" +
    "\073\uff35\001\002\000\136\004\uff3e\005\uff3e\006\uff3e\007" +
    "\uff3e\010\uff3e\011\uff3e\012\uff3e\013\uff3e\016\uff3e\017\uff3e" +
    "\020\uff3e\021\uff3e\022\uff3e\023\uff3e\024\uff3e\025\uff3e\026" +
    "\uff3e\027\uff3e\030\uff3e\031\uff3e\032\uff3e\033\uff3e\034\uff3e" +
    "\035\uff3e\036\uff3e\037\uff3e\040\uff3e\041\uff3e\042\uff3e\043" +
    "\uff3e\044\uff3e\045\uff3e\046\uff3e\047\uff3e\050\uff3e\051\uff3e" +
    "\052\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e\057\uff3e\060" +
    "\uff3e\065\uff3e\066\uff3e\073\uff3e\001\002\000\136\004\uff3b" +
    "\005\uff3b\006\uff3b\007\uff3b\010\uff3b\011\uff3b\012\uff3b\013" +
    "\uff3b\016\uff3b\017\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b" +
    "\024\uff3b\025\uff3b\026\uff3b\027\uff3b\030\uff3b\031\uff3b\032" +
    "\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b\040\uff3b" +
    "\041\uff3b\042\uff3b\043\uff3b\044\uff3b\045\uff3b\046\uff3b\047" +
    "\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b\054\uff3b\055\uff3b" +
    "\056\uff3b\057\uff3b\060\uff3b\065\uff3b\066\uff3b\073\uff3b\001" +
    "\002\000\136\004\uff30\005\uff30\006\uff30\007\uff30\010\uff30" +
    "\011\uff30\012\uff30\013\uff30\016\uff30\017\uff30\020\uff30\021" +
    "\uff30\022\uff30\023\uff30\024\uff30\025\uff30\026\uff30\027\uff30" +
    "\030\uff30\031\uff30\032\uff30\033\uff30\034\uff30\035\uff30\036" +
    "\uff30\037\uff30\040\uff30\041\uff30\042\uff30\043\uff30\044\uff30" +
    "\045\uff30\046\uff30\047\uff30\050\uff30\051\uff30\052\uff30\053" +
    "\uff30\054\uff30\055\uff30\056\uff30\057\uff30\060\uff30\065\uff30" +
    "\066\uff30\073\uff30\001\002\000\136\004\uff1a\005\uff1a\006" +
    "\uff1a\007\uff1a\010\uff1a\011\uff1a\012\uff1a\013\uff1a\016\uff1a" +
    "\017\uff1a\020\uff1a\021\uff1a\022\uff1a\023\uff1a\024\uff1a\025" +
    "\uff1a\026\uff1a\027\uff1a\030\uff1a\031\uff1a\032\uff1a\033\uff1a" +
    "\034\uff1a\035\uff1a\036\uff1a\037\uff1a\040\uff1a\041\uff1a\042" +
    "\uff1a\043\uff1a\044\uff1a\045\uff1a\046\uff1a\047\uff1a\050\uff1a" +
    "\051\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056\uff1a\057" +
    "\uff1a\060\uff1a\065\uff1a\066\uff1a\073\uff1a\001\002\000\136" +
    "\004\uff24\005\uff24\006\uff24\007\uff24\010\uff24\011\uff24\012" +
    "\uff24\013\uff24\016\uff24\017\uff24\020\uff24\021\uff24\022\uff24" +
    "\023\uff24\024\uff24\025\uff24\026\uff24\027\uff24\030\uff24\031" +
    "\uff24\032\uff24\033\uff24\034\uff24\035\uff24\036\uff24\037\uff24" +
    "\040\uff24\041\uff24\042\uff24\043\uff24\044\uff24\045\uff24\046" +
    "\uff24\047\uff24\050\uff24\051\uff24\052\uff24\053\uff24\054\uff24" +
    "\055\uff24\056\uff24\057\uff24\060\uff24\065\uff24\066\uff24\073" +
    "\uff24\001\002\000\136\004\uff17\005\uff17\006\uff17\007\uff17" +
    "\010\uff17\011\uff17\012\uff17\013\uff17\016\uff17\017\uff17\020" +
    "\uff17\021\uff17\022\uff17\023\uff17\024\uff17\025\uff17\026\uff17" +
    "\027\uff17\030\uff17\031\uff17\032\uff17\033\uff17\034\uff17\035" +
    "\uff17\036\uff17\037\uff17\040\uff17\041\uff17\042\uff17\043\uff17" +
    "\044\uff17\045\uff17\046\uff17\047\uff17\050\uff17\051\uff17\052" +
    "\uff17\053\uff17\054\uff17\055\uff17\056\uff17\057\uff17\060\uff17" +
    "\065\uff17\066\uff17\073\uff17\001\002\000\136\004\uff20\005" +
    "\uff20\006\uff20\007\uff20\010\uff20\011\uff20\012\uff20\013\uff20" +
    "\016\uff20\017\uff20\020\uff20\021\uff20\022\uff20\023\uff20\024" +
    "\uff20\025\uff20\026\uff20\027\uff20\030\uff20\031\uff20\032\uff20" +
    "\033\uff20\034\uff20\035\uff20\036\uff20\037\uff20\040\uff20\041" +
    "\uff20\042\uff20\043\uff20\044\uff20\045\uff20\046\uff20\047\uff20" +
    "\050\uff20\051\uff20\052\uff20\053\uff20\054\uff20\055\uff20\056" +
    "\uff20\057\uff20\060\uff20\065\uff20\066\uff20\073\uff20\001\002" +
    "\000\136\004\uff21\005\uff21\006\uff21\007\uff21\010\uff21\011" +
    "\uff21\012\uff21\013\uff21\016\uff21\017\uff21\020\uff21\021\uff21" +
    "\022\uff21\023\uff21\024\uff21\025\uff21\026\uff21\027\uff21\030" +
    "\uff21\031\uff21\032\uff21\033\uff21\034\uff21\035\uff21\036\uff21" +
    "\037\uff21\040\uff21\041\uff21\042\uff21\043\uff21\044\uff21\045" +
    "\uff21\046\uff21\047\uff21\050\uff21\051\uff21\052\uff21\053\uff21" +
    "\054\uff21\055\uff21\056\uff21\057\uff21\060\uff21\065\uff21\066" +
    "\uff21\073\uff21\001\002\000\136\004\uff25\005\uff25\006\uff25" +
    "\007\uff25\010\uff25\011\uff25\012\uff25\013\uff25\016\uff25\017" +
    "\uff25\020\uff25\021\uff25\022\uff25\023\uff25\024\uff25\025\uff25" +
    "\026\uff25\027\uff25\030\uff25\031\uff25\032\uff25\033\uff25\034" +
    "\uff25\035\uff25\036\uff25\037\uff25\040\uff25\041\uff25\042\uff25" +
    "\043\uff25\044\uff25\045\uff25\046\uff25\047\uff25\050\uff25\051" +
    "\uff25\052\uff25\053\uff25\054\uff25\055\uff25\056\uff25\057\uff25" +
    "\060\uff25\065\uff25\066\uff25\073\uff25\001\002\000\136\004" +
    "\uff31\005\uff31\006\uff31\007\uff31\010\uff31\011\uff31\012\uff31" +
    "\013\uff31\016\uff31\017\uff31\020\uff31\021\uff31\022\uff31\023" +
    "\uff31\024\uff31\025\uff31\026\uff31\027\uff31\030\uff31\031\uff31" +
    "\032\uff31\033\uff31\034\uff31\035\uff31\036\uff31\037\uff31\040" +
    "\uff31\041\uff31\042\uff31\043\uff31\044\uff31\045\uff31\046\uff31" +
    "\047\uff31\050\uff31\051\uff31\052\uff31\053\uff31\054\uff31\055" +
    "\uff31\056\uff31\057\uff31\060\uff31\065\uff31\066\uff31\073\uff31" +
    "\001\002\000\136\004\uff1f\005\uff1f\006\uff1f\007\uff1f\010" +
    "\uff1f\011\uff1f\012\uff1f\013\uff1f\016\uff1f\017\uff1f\020\uff1f" +
    "\021\uff1f\022\uff1f\023\uff1f\024\uff1f\025\uff1f\026\uff1f\027" +
    "\uff1f\030\uff1f\031\uff1f\032\uff1f\033\uff1f\034\uff1f\035\uff1f" +
    "\036\uff1f\037\uff1f\040\uff1f\041\uff1f\042\uff1f\043\uff1f\044" +
    "\uff1f\045\uff1f\046\uff1f\047\uff1f\050\uff1f\051\uff1f\052\uff1f" +
    "\053\uff1f\054\uff1f\055\uff1f\056\uff1f\057\uff1f\060\uff1f\065" +
    "\uff1f\066\uff1f\073\uff1f\001\002\000\136\004\uff1b\005\uff1b" +
    "\006\uff1b\007\uff1b\010\uff1b\011\uff1b\012\uff1b\013\uff1b\016" +
    "\uff1b\017\uff1b\020\uff1b\021\uff1b\022\uff1b\023\uff1b\024\uff1b" +
    "\025\uff1b\026\uff1b\027\uff1b\030\uff1b\031\uff1b\032\uff1b\033" +
    "\uff1b\034\uff1b\035\uff1b\036\uff1b\037\uff1b\040\uff1b\041\uff1b" +
    "\042\uff1b\043\uff1b\044\uff1b\045\uff1b\046\uff1b\047\uff1b\050" +
    "\uff1b\051\uff1b\052\uff1b\053\uff1b\054\uff1b\055\uff1b\056\uff1b" +
    "\057\uff1b\060\uff1b\065\uff1b\066\uff1b\073\uff1b\001\002\000" +
    "\136\004\uff23\005\uff23\006\uff23\007\uff23\010\uff23\011\uff23" +
    "\012\uff23\013\uff23\016\uff23\017\uff23\020\uff23\021\uff23\022" +
    "\uff23\023\uff23\024\uff23\025\uff23\026\uff23\027\uff23\030\uff23" +
    "\031\uff23\032\uff23\033\uff23\034\uff23\035\uff23\036\uff23\037" +
    "\uff23\040\uff23\041\uff23\042\uff23\043\uff23\044\uff23\045\uff23" +
    "\046\uff23\047\uff23\050\uff23\051\uff23\052\uff23\053\uff23\054" +
    "\uff23\055\uff23\056\uff23\057\uff23\060\uff23\065\uff23\066\uff23" +
    "\073\uff23\001\002\000\136\004\uff40\005\uff40\006\uff40\007" +
    "\uff40\010\uff40\011\uff40\012\uff40\013\uff40\016\uff40\017\uff40" +
    "\020\uff40\021\uff40\022\uff40\023\uff40\024\uff40\025\uff40\026" +
    "\uff40\027\uff40\030\uff40\031\uff40\032\uff40\033\uff40\034\uff40" +
    "\035\uff40\036\uff40\037\uff40\040\uff40\041\uff40\042\uff40\043" +
    "\uff40\044\uff40\045\uff40\046\uff40\047\uff40\050\uff40\051\uff40" +
    "\052\uff40\053\uff40\054\uff40\055\uff40\056\uff40\057\uff40\060" +
    "\uff40\065\uff40\066\uff40\073\uff40\001\002\000\136\004\uff33" +
    "\005\uff33\006\uff33\007\uff33\010\uff33\011\uff33\012\uff33\013" +
    "\uff33\016\uff33\017\uff33\020\uff33\021\uff33\022\uff33\023\uff33" +
    "\024\uff33\025\uff33\026\uff33\027\uff33\030\uff33\031\uff33\032" +
    "\uff33\033\uff33\034\uff33\035\uff33\036\uff33\037\uff33\040\uff33" +
    "\041\uff33\042\uff33\043\uff33\044\uff33\045\uff33\046\uff33\047" +
    "\uff33\050\uff33\051\uff33\052\uff33\053\uff33\054\uff33\055\uff33" +
    "\056\uff33\057\uff33\060\uff33\065\uff33\066\uff33\073\uff33\001" +
    "\002\000\136\004\uff3a\005\uff3a\006\uff3a\007\uff3a\010\uff3a" +
    "\011\uff3a\012\uff3a\013\uff3a\016\uff3a\017\uff3a\020\uff3a\021" +
    "\uff3a\022\uff3a\023\uff3a\024\uff3a\025\uff3a\026\uff3a\027\uff3a" +
    "\030\uff3a\031\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036" +
    "\uff3a\037\uff3a\040\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a" +
    "\045\uff3a\046\uff3a\047\uff3a\050\uff3a\051\uff3a\052\uff3a\053" +
    "\uff3a\054\uff3a\055\uff3a\056\uff3a\057\uff3a\060\uff3a\065\uff3a" +
    "\066\uff3a\073\uff3a\001\002\000\136\004\uff1d\005\uff1d\006" +
    "\uff1d\007\uff1d\010\uff1d\011\uff1d\012\uff1d\013\uff1d\016\uff1d" +
    "\017\uff1d\020\uff1d\021\uff1d\022\uff1d\023\uff1d\024\uff1d\025" +
    "\uff1d\026\uff1d\027\uff1d\030\uff1d\031\uff1d\032\uff1d\033\uff1d" +
    "\034\uff1d\035\uff1d\036\uff1d\037\uff1d\040\uff1d\041\uff1d\042" +
    "\uff1d\043\uff1d\044\uff1d\045\uff1d\046\uff1d\047\uff1d\050\uff1d" +
    "\051\uff1d\052\uff1d\053\uff1d\054\uff1d\055\uff1d\056\uff1d\057" +
    "\uff1d\060\uff1d\065\uff1d\066\uff1d\073\uff1d\001\002\000\136" +
    "\004\uff3d\005\uff3d\006\uff3d\007\uff3d\010\uff3d\011\uff3d\012" +
    "\uff3d\013\uff3d\016\uff3d\017\uff3d\020\uff3d\021\uff3d\022\uff3d" +
    "\023\uff3d\024\uff3d\025\uff3d\026\uff3d\027\uff3d\030\uff3d\031" +
    "\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d\036\uff3d\037\uff3d" +
    "\040\uff3d\041\uff3d\042\uff3d\043\uff3d\044\uff3d\045\uff3d\046" +
    "\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d\053\uff3d\054\uff3d" +
    "\055\uff3d\056\uff3d\057\uff3d\060\uff3d\065\uff3d\066\uff3d\073" +
    "\uff3d\001\002\000\136\004\uff19\005\uff19\006\uff19\007\uff19" +
    "\010\uff19\011\uff19\012\uff19\013\uff19\016\uff19\017\uff19\020" +
    "\uff19\021\uff19\022\uff19\023\uff19\024\uff19\025\uff19\026\uff19" +
    "\027\uff19\030\uff19\031\uff19\032\uff19\033\uff19\034\uff19\035" +
    "\uff19\036\uff19\037\uff19\040\uff19\041\uff19\042\uff19\043\uff19" +
    "\044\uff19\045\uff19\046\uff19\047\uff19\050\uff19\051\uff19\052" +
    "\uff19\053\uff19\054\uff19\055\uff19\056\uff19\057\uff19\060\uff19" +
    "\065\uff19\066\uff19\073\uff19\001\002\000\136\004\uff29\005" +
    "\uff29\006\uff29\007\uff29\010\uff29\011\uff29\012\uff29\013\uff29" +
    "\016\uff29\017\uff29\020\uff29\021\uff29\022\uff29\023\uff29\024" +
    "\uff29\025\uff29\026\uff29\027\uff29\030\uff29\031\uff29\032\uff29" +
    "\033\uff29\034\uff29\035\uff29\036\uff29\037\uff29\040\uff29\041" +
    "\uff29\042\uff29\043\uff29\044\uff29\045\uff29\046\uff29\047\uff29" +
    "\050\uff29\051\uff29\052\uff29\053\uff29\054\uff29\055\uff29\056" +
    "\uff29\057\uff29\060\uff29\065\uff29\066\uff29\073\uff29\001\002" +
    "\000\136\004\uff2a\005\uff2a\006\uff2a\007\uff2a\010\uff2a\011" +
    "\uff2a\012\uff2a\013\uff2a\016\uff2a\017\uff2a\020\uff2a\021\uff2a" +
    "\022\uff2a\023\uff2a\024\uff2a\025\uff2a\026\uff2a\027\uff2a\030" +
    "\uff2a\031\uff2a\032\uff2a\033\uff2a\034\uff2a\035\uff2a\036\uff2a" +
    "\037\uff2a\040\uff2a\041\uff2a\042\uff2a\043\uff2a\044\uff2a\045" +
    "\uff2a\046\uff2a\047\uff2a\050\uff2a\051\uff2a\052\uff2a\053\uff2a" +
    "\054\uff2a\055\uff2a\056\uff2a\057\uff2a\060\uff2a\065\uff2a\066" +
    "\uff2a\073\uff2a\001\002\000\136\004\uff2b\005\uff2b\006\uff2b" +
    "\007\uff2b\010\uff2b\011\uff2b\012\uff2b\013\uff2b\016\uff2b\017" +
    "\uff2b\020\uff2b\021\uff2b\022\uff2b\023\uff2b\024\uff2b\025\uff2b" +
    "\026\uff2b\027\uff2b\030\uff2b\031\uff2b\032\uff2b\033\uff2b\034" +
    "\uff2b\035\uff2b\036\uff2b\037\uff2b\040\uff2b\041\uff2b\042\uff2b" +
    "\043\uff2b\044\uff2b\045\uff2b\046\uff2b\047\uff2b\050\uff2b\051" +
    "\uff2b\052\uff2b\053\uff2b\054\uff2b\055\uff2b\056\uff2b\057\uff2b" +
    "\060\uff2b\065\uff2b\066\uff2b\073\uff2b\001\002\000\136\004" +
    "\uff36\005\uff36\006\uff36\007\uff36\010\uff36\011\uff36\012\uff36" +
    "\013\uff36\016\uff36\017\uff36\020\uff36\021\uff36\022\uff36\023" +
    "\uff36\024\uff36\025\uff36\026\uff36\027\uff36\030\uff36\031\uff36" +
    "\032\uff36\033\uff36\034\uff36\035\uff36\036\uff36\037\uff36\040" +
    "\uff36\041\uff36\042\uff36\043\uff36\044\uff36\045\uff36\046\uff36" +
    "\047\uff36\050\uff36\051\uff36\052\uff36\053\uff36\054\uff36\055" +
    "\uff36\056\uff36\057\uff36\060\uff36\065\uff36\066\uff36\073\uff36" +
    "\001\002\000\136\004\uff3f\005\uff3f\006\uff3f\007\uff3f\010" +
    "\uff3f\011\uff3f\012\uff3f\013\uff3f\016\uff3f\017\uff3f\020\uff3f" +
    "\021\uff3f\022\uff3f\023\uff3f\024\uff3f\025\uff3f\026\uff3f\027" +
    "\uff3f\030\uff3f\031\uff3f\032\uff3f\033\uff3f\034\uff3f\035\uff3f" +
    "\036\uff3f\037\uff3f\040\uff3f\041\uff3f\042\uff3f\043\uff3f\044" +
    "\uff3f\045\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052\uff3f" +
    "\053\uff3f\054\uff3f\055\uff3f\056\uff3f\057\uff3f\060\uff3f\065" +
    "\uff3f\066\uff3f\073\uff3f\001\002\000\136\004\uff1c\005\uff1c" +
    "\006\uff1c\007\uff1c\010\uff1c\011\uff1c\012\uff1c\013\uff1c\016" +
    "\uff1c\017\uff1c\020\uff1c\021\uff1c\022\uff1c\023\uff1c\024\uff1c" +
    "\025\uff1c\026\uff1c\027\uff1c\030\uff1c\031\uff1c\032\uff1c\033" +
    "\uff1c\034\uff1c\035\uff1c\036\uff1c\037\uff1c\040\uff1c\041\uff1c" +
    "\042\uff1c\043\uff1c\044\uff1c\045\uff1c\046\uff1c\047\uff1c\050" +
    "\uff1c\051\uff1c\052\uff1c\053\uff1c\054\uff1c\055\uff1c\056\uff1c" +
    "\057\uff1c\060\uff1c\065\uff1c\066\uff1c\073\uff1c\001\002\000" +
    "\136\004\uff22\005\uff22\006\uff22\007\uff22\010\uff22\011\uff22" +
    "\012\uff22\013\uff22\016\uff22\017\uff22\020\uff22\021\uff22\022" +
    "\uff22\023\uff22\024\uff22\025\uff22\026\uff22\027\uff22\030\uff22" +
    "\031\uff22\032\uff22\033\uff22\034\uff22\035\uff22\036\uff22\037" +
    "\uff22\040\uff22\041\uff22\042\uff22\043\uff22\044\uff22\045\uff22" +
    "\046\uff22\047\uff22\050\uff22\051\uff22\052\uff22\053\uff22\054" +
    "\uff22\055\uff22\056\uff22\057\uff22\060\uff22\065\uff22\066\uff22" +
    "\073\uff22\001\002\000\136\004\uff3c\005\uff3c\006\uff3c\007" +
    "\uff3c\010\uff3c\011\uff3c\012\uff3c\013\uff3c\016\uff3c\017\uff3c" +
    "\020\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c\025\uff3c\026" +
    "\uff3c\027\uff3c\030\uff3c\031\uff3c\032\uff3c\033\uff3c\034\uff3c" +
    "\035\uff3c\036\uff3c\037\uff3c\040\uff3c\041\uff3c\042\uff3c\043" +
    "\uff3c\044\uff3c\045\uff3c\046\uff3c\047\uff3c\050\uff3c\051\uff3c" +
    "\052\uff3c\053\uff3c\054\uff3c\055\uff3c\056\uff3c\057\uff3c\060" +
    "\uff3c\065\uff3c\066\uff3c\073\uff3c\001\002\000\136\004\uff16" +
    "\005\uff16\006\uff16\007\uff16\010\uff16\011\uff16\012\uff16\013" +
    "\uff16\016\uff16\017\uff16\020\uff16\021\uff16\022\uff16\023\uff16" +
    "\024\uff16\025\uff16\026\uff16\027\uff16\030\uff16\031\uff16\032" +
    "\uff16\033\uff16\034\uff16\035\uff16\036\uff16\037\uff16\040\uff16" +
    "\041\uff16\042\uff16\043\uff16\044\uff16\045\uff16\046\uff16\047" +
    "\uff16\050\uff16\051\uff16\052\uff16\053\uff16\054\uff16\055\uff16" +
    "\056\uff16\057\uff16\060\uff16\065\uff16\066\uff16\073\uff16\001" +
    "\002\000\136\004\uff27\005\uff27\006\uff27\007\uff27\010\uff27" +
    "\011\uff27\012\uff27\013\uff27\016\uff27\017\uff27\020\uff27\021" +
    "\uff27\022\uff27\023\uff27\024\uff27\025\uff27\026\uff27\027\uff27" +
    "\030\uff27\031\uff27\032\uff27\033\uff27\034\uff27\035\uff27\036" +
    "\uff27\037\uff27\040\uff27\041\uff27\042\uff27\043\uff27\044\uff27" +
    "\045\uff27\046\uff27\047\uff27\050\uff27\051\uff27\052\uff27\053" +
    "\uff27\054\uff27\055\uff27\056\uff27\057\uff27\060\uff27\065\uff27" +
    "\066\uff27\073\uff27\001\002\000\136\004\uff2c\005\uff2c\006" +
    "\uff2c\007\uff2c\010\uff2c\011\uff2c\012\uff2c\013\uff2c\016\uff2c" +
    "\017\uff2c\020\uff2c\021\uff2c\022\uff2c\023\uff2c\024\uff2c\025" +
    "\uff2c\026\uff2c\027\uff2c\030\uff2c\031\uff2c\032\uff2c\033\uff2c" +
    "\034\uff2c\035\uff2c\036\uff2c\037\uff2c\040\uff2c\041\uff2c\042" +
    "\uff2c\043\uff2c\044\uff2c\045\uff2c\046\uff2c\047\uff2c\050\uff2c" +
    "\051\uff2c\052\uff2c\053\uff2c\054\uff2c\055\uff2c\056\uff2c\057" +
    "\uff2c\060\uff2c\065\uff2c\066\uff2c\073\uff2c\001\002\000\136" +
    "\004\uff39\005\uff39\006\uff39\007\uff39\010\uff39\011\uff39\012" +
    "\uff39\013\uff39\016\uff39\017\uff39\020\uff39\021\uff39\022\uff39" +
    "\023\uff39\024\uff39\025\uff39\026\uff39\027\uff39\030\uff39\031" +
    "\uff39\032\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037\uff39" +
    "\040\uff39\041\uff39\042\uff39\043\uff39\044\uff39\045\uff39\046" +
    "\uff39\047\uff39\050\uff39\051\uff39\052\uff39\053\uff39\054\uff39" +
    "\055\uff39\056\uff39\057\uff39\060\uff39\065\uff39\066\uff39\073" +
    "\uff39\001\002\000\136\004\uff2d\005\uff2d\006\uff2d\007\uff2d" +
    "\010\uff2d\011\uff2d\012\uff2d\013\uff2d\016\uff2d\017\uff2d\020" +
    "\uff2d\021\uff2d\022\uff2d\023\uff2d\024\uff2d\025\uff2d\026\uff2d" +
    "\027\uff2d\030\uff2d\031\uff2d\032\uff2d\033\uff2d\034\uff2d\035" +
    "\uff2d\036\uff2d\037\uff2d\040\uff2d\041\uff2d\042\uff2d\043\uff2d" +
    "\044\uff2d\045\uff2d\046\uff2d\047\uff2d\050\uff2d\051\uff2d\052" +
    "\uff2d\053\uff2d\054\uff2d\055\uff2d\056\uff2d\057\uff2d\060\uff2d" +
    "\065\uff2d\066\uff2d\073\uff2d\001\002\000\136\004\uff34\005" +
    "\uff34\006\uff34\007\uff34\010\uff34\011\uff34\012\uff34\013\uff34" +
    "\016\uff34\017\uff34\020\uff34\021\uff34\022\uff34\023\uff34\024" +
    "\uff34\025\uff34\026\uff34\027\uff34\030\uff34\031\uff34\032\uff34" +
    "\033\uff34\034\uff34\035\uff34\036\uff34\037\uff34\040\uff34\041" +
    "\uff34\042\uff34\043\uff34\044\uff34\045\uff34\046\uff34\047\uff34" +
    "\050\uff34\051\uff34\052\uff34\053\uff34\054\uff34\055\uff34\056" +
    "\uff34\057\uff34\060\uff34\065\uff34\066\uff34\073\uff34\001\002" +
    "\000\004\053\uff48\001\002\000\010\041\343\043\341\044" +
    "\344\001\002\000\004\053\uff45\001\002\000\004\053\uff49" +
    "\001\002\000\004\026\u0118\001\002\000\050\006\uff50\007" +
    "\uff50\010\uff50\012\uff50\014\uff50\015\uff50\016\uff50\017\uff50" +
    "\023\uff50\026\uff50\044\uff50\051\uff50\056\uff50\057\uff50\060" +
    "\uff50\061\uff50\062\uff50\063\uff50\072\uff50\001\002\000\050" +
    "\006\uff4f\007\uff4f\010\uff4f\012\uff4f\014\uff4f\015\uff4f\016" +
    "\uff4f\017\uff4f\023\uff4f\026\uff4f\044\uff4f\051\uff4f\056\uff4f" +
    "\057\uff4f\060\uff4f\061\uff4f\062\uff4f\063\uff4f\072\uff4f\001" +
    "\002\000\006\026\ufff3\044\ufff3\001\002\000\006\026\u011d" +
    "\044\u011e\001\002\000\052\006\ufff2\007\ufff2\010\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\023\ufff2" +
    "\026\ufff2\044\ufff2\051\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\072\ufff2\001\002\000\052\006\uffeb" +
    "\007\uffeb\010\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\023\uffeb\026\uffeb\044\uffeb\051\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\072\uffeb\001" +
    "\002\000\004\031\u011f\001\002\000\014\033\uffee\043\uffee" +
    "\044\uffee\050\uffee\052\uffee\001\002\000\014\033\051\043" +
    "\045\044\053\050\046\052\044\001\002\000\006\026\uffed" +
    "\044\uffed\001\002\000\006\026\u011d\044\u011e\001\002\000" +
    "\052\006\uffec\007\uffec\010\uffec\012\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\023\uffec\026\uffec\044\uffec\051" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec" +
    "\072\uffec\001\002\000\004\052\u0125\001\002\000\006\006" +
    "\u0126\044\uffa4\001\002\000\004\044\uffa5\001\002\000\004" +
    "\044\u0128\001\002\000\004\031\uffa8\001\002\000\004\031" +
    "\u012a\001\002\000\010\033\u012d\043\u012b\044\u012e\001\002" +
    "\000\004\026\uff89\001\002\000\004\026\u0131\001\002\000" +
    "\006\043\u012f\044\u0130\001\002\000\004\026\uff8b\001\002" +
    "\000\004\026\uff88\001\002\000\004\026\uff8a\001\002\000" +
    "\016\030\160\033\155\043\156\044\152\050\163\052\162" +
    "\001\002\000\010\026\u0133\067\205\070\206\001\002\000" +
    "\004\044\u0134\001\002\000\004\031\u0135\001\002\000\014" +
    "\033\uffa3\043\uffa3\044\uffa3\050\uffa3\052\uffa3\001\002\000" +
    "\004\053\u0137\001\002\000\004\022\uffa7\001\002\000\004" +
    "\022\u0139\001\002\000\042\006\uffb8\007\uffb8\010\uffb8\012" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\023\uffb8\044\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\072\uffb8\001" +
    "\002\000\042\006\015\007\021\010\017\012\146\014\140" +
    "\015\120\016\122\017\143\023\u013b\044\142\057\133\060" +
    "\126\061\127\062\121\063\130\072\134\001\002\000\050" +
    "\006\uffa6\007\uffa6\010\uffa6\012\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\023\uffa6\026\uffa6\044\uffa6\051\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\072\uffa6\001" +
    "\002\000\014\033\u0142\043\u013e\044\u0143\050\u0140\052\u013d" +
    "\001\002\000\014\033\u0142\043\u013e\044\u0143\050\u0140\052" +
    "\u013d\001\002\000\020\005\u0156\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\036\uff99\053\uff99\001\002\000\016\032\u014e\033" +
    "\u014f\034\u014c\035\u0150\036\u014d\053\uffa2\001\002\000\006" +
    "\043\u0148\044\u0149\001\002\000\016\032\uff9b\033\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\053\uff9b\001\002\000\006\043\u0144" +
    "\044\u0145\001\002\000\016\032\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\053\uff9a\001\002\000\020\005\u0146\032\uff94" +
    "\033\uff94\034\uff94\035\uff94\036\uff94\053\uff94\001\002\000" +
    "\016\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\053\uff95" +
    "\001\002\000\004\043\u0147\001\002\000\016\032\uff93\033" +
    "\uff93\034\uff93\035\uff93\036\uff93\053\uff93\001\002\000\004" +
    "\050\u014b\001\002\000\004\050\u014a\001\002\000\016\032" +
    "\uff97\033\uff97\034\uff97\035\uff97\036\uff97\053\uff97\001\002" +
    "\000\016\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\053" +
    "\uff96\001\002\000\014\033\u0142\043\u013e\044\u0143\050\u0140" +
    "\052\u013d\001\002\000\014\033\u0142\043\u013e\044\u0143\050" +
    "\u0140\052\u013d\001\002\000\014\033\u0142\043\u013e\044\u0143" +
    "\050\u0140\052\u013d\001\002\000\014\033\u0142\043\u013e\044" +
    "\u0143\050\u0140\052\u013d\001\002\000\014\033\u0142\043\u013e" +
    "\044\u0143\050\u0140\052\u013d\001\002\000\016\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\053\uff9d\001\002\000\016" +
    "\032\uff9f\033\uff9f\034\u014c\035\u0150\036\u014d\053\uff9f\001" +
    "\002\000\016\032\uffa0\033\uffa0\034\u014c\035\u0150\036\u014d" +
    "\053\uffa0\001\002\000\016\032\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\053\uff9c\001\002\000\016\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\053\uff9e\001\002\000\004\043" +
    "\u0157\001\002\000\016\032\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\053\uff98\001\002\000\016\032\u014e\033\u014f\034" +
    "\u014c\035\u0150\036\u014d\053\u0159\001\002\000\016\032\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\053\uffa1\001\002\000" +
    "\012\041\343\043\341\044\344\053\u015c\001\002\000\004" +
    "\053\u015e\001\002\000\004\026\u015d\001\002\000\050\006" +
    "\uff4d\007\uff4d\010\uff4d\012\uff4d\014\uff4d\015\uff4d\016\uff4d" +
    "\017\uff4d\023\uff4d\026\uff4d\044\uff4d\051\uff4d\056\uff4d\057" +
    "\uff4d\060\uff4d\061\uff4d\062\uff4d\063\uff4d\072\uff4d\001\002" +
    "\000\004\026\u015f\001\002\000\050\006\uff4e\007\uff4e\010" +
    "\uff4e\012\uff4e\014\uff4e\015\uff4e\016\uff4e\017\uff4e\023\uff4e" +
    "\026\uff4e\044\uff4e\051\uff4e\056\uff4e\057\uff4e\060\uff4e\061" +
    "\uff4e\062\uff4e\063\uff4e\072\uff4e\001\002\000\134\004\355" +
    "\005\377\006\u0109\007\362\010\u0103\011\u010c\012\363\013" +
    "\u0101\016\u0110\017\357\020\373\021\364\022\354\023\353" +
    "\024\u0111\025\u010f\026\u0105\027\351\030\u010e\031\356\032" +
    "\372\033\366\034\376\035\u010b\036\371\037\350\040\u0102" +
    "\042\375\043\365\044\u0104\045\u010d\046\374\047\370\050" +
    "\u010a\051\u0108\052\u0107\053\u0106\054\347\055\361\056\u0112" +
    "\057\u0100\060\352\065\360\066\367\073\u0161\001\002\000" +
    "\050\006\uff42\007\uff42\010\uff42\012\uff42\014\uff42\015\uff42" +
    "\016\uff42\017\uff42\023\uff42\026\uff42\044\uff42\051\uff42\056" +
    "\uff42\057\uff42\060\uff42\061\uff42\062\uff42\063\uff42\072\uff42" +
    "\001\002\000\010\041\343\043\341\044\344\001\002\000" +
    "\004\053\u0164\001\002\000\004\026\u0165\001\002\000\050" +
    "\006\uff82\007\uff82\010\uff82\012\uff82\014\uff82\015\uff82\016" +
    "\uff82\017\uff82\023\uff82\026\uff82\044\uff82\051\uff82\056\uff82" +
    "\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82\072\uff82\001" +
    "\002\000\010\041\343\043\341\044\344\001\002\000\004" +
    "\053\u0168\001\002\000\004\026\u0169\001\002\000\050\006" +
    "\uff81\007\uff81\010\uff81\012\uff81\014\uff81\015\uff81\016\uff81" +
    "\017\uff81\023\uff81\026\uff81\044\uff81\051\uff81\056\uff81\057" +
    "\uff81\060\uff81\061\uff81\062\uff81\063\uff81\072\uff81\001\002" +
    "\000\016\006\uffcd\007\uffcd\010\uffcd\020\uffcd\023\uffcd\044" +
    "\uffcd\001\002\000\004\022\u016c\001\002\000\044\006\uffb8" +
    "\007\uffb8\010\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\023\uffb8\044\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\062\uffb8\063\uffb8\072\uffb8\001\002\000\044\006\015\007" +
    "\021\010\017\012\146\014\140\015\120\016\122\017\143" +
    "\023\uffb5\044\142\056\216\057\133\060\126\061\127\062" +
    "\121\063\130\072\134\001\002\000\004\023\u016f\001\002" +
    "\000\004\015\u0170\001\002\000\004\052\u0171\001\002\000" +
    "\016\030\160\033\155\043\156\044\152\050\163\052\162" +
    "\001\002\000\010\053\u0173\067\205\070\206\001\002\000" +
    "\004\026\u0174\001\002\000\050\006\uff83\007\uff83\010\uff83" +
    "\012\uff83\014\uff83\015\uff83\016\uff83\017\uff83\023\uff83\026" +
    "\uff83\044\uff83\051\uff83\056\uff83\057\uff83\060\uff83\061\uff83" +
    "\062\uff83\063\uff83\072\uff83\001\002\000\004\052\u0176\001" +
    "\002\000\016\030\160\033\155\043\156\044\152\050\163" +
    "\052\162\001\002\000\010\053\uff86\067\205\070\206\001" +
    "\002\000\004\053\u0179\001\002\000\004\022\u017a\001\002" +
    "\000\044\006\uffb8\007\uffb8\010\uffb8\012\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\023\uffb8\044\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\063\uffb8\072\uffb8\001\002\000" +
    "\044\006\015\007\021\010\017\012\146\014\140\015\120" +
    "\016\122\017\143\023\uffb5\044\142\056\216\057\133\060" +
    "\126\061\127\062\121\063\130\072\134\001\002\000\004" +
    "\023\u017d\001\002\000\050\006\uff85\007\uff85\010\uff85\012" +
    "\uff85\014\uff85\015\uff85\016\uff85\017\uff85\023\uff85\026\uff85" +
    "\044\uff85\051\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062" +
    "\uff85\063\uff85\072\uff85\001\002\000\004\044\u017f\001\002" +
    "\000\006\004\u0180\053\uffc9\001\002\000\010\006\uffc8\007" +
    "\uffc8\010\uffc8\001\002\000\004\022\u0182\001\002\000\042" +
    "\006\uffb8\007\uffb8\010\uffb8\012\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\023\uffb8\044\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\062\uffb8\063\uffb8\072\uffb8\001\002\000\042\006\015\007" +
    "\021\010\017\012\146\014\140\015\120\016\122\017\143" +
    "\023\uffcb\044\142\057\133\060\126\061\127\062\121\063" +
    "\130\072\134\001\002\000\004\023\u0185\001\002\000\016" +
    "\006\uffca\007\uffca\010\uffca\020\uffca\023\uffca\044\uffca\001" +
    "\002\000\004\052\u0187\001\002\000\012\006\uffd5\007\uffd5" +
    "\010\uffd5\053\u0188\001\002\000\004\022\uffd2\001\002\000" +
    "\010\006\uffc7\007\uffc7\010\uffc7\001\002\000\004\053\u018b" +
    "\001\002\000\004\022\u018c\001\002\000\044\006\uffb8\007" +
    "\uffb8\010\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\023\uffb8\044\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\072\uffb8\001\002\000\044\006\015\007\021" +
    "\010\017\012\146\014\140\015\120\016\122\017\143\023" +
    "\uffb5\044\142\056\216\057\133\060\126\061\127\062\121" +
    "\063\130\072\134\001\002\000\004\023\uffd4\001\002\000" +
    "\004\023\u0190\001\002\000\016\006\uffd3\007\uffd3\010\uffd3" +
    "\020\uffd3\023\uffd3\044\uffd3\001\002\000\004\022\u0192\001" +
    "\002\000\044\006\uffb8\007\uffb8\010\uffb8\012\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\023\uffb8\044\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\072\uffb8\001\002" +
    "\000\044\006\015\007\021\010\017\012\146\014\140\015" +
    "\120\016\122\017\143\023\uffb5\044\142\056\216\057\133" +
    "\060\126\061\127\062\121\063\130\072\134\001\002\000" +
    "\004\023\uffd1\001\002\000\004\023\u0196\001\002\000\016" +
    "\006\uffd0\007\uffd0\010\uffd0\020\uffd0\023\uffd0\044\uffd0\001" +
    "\002\000\014\033\ufff4\043\ufff4\044\ufff4\050\ufff4\052\ufff4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0195\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\072\011\001\001\000\002\001" +
    "\001\000\004\004\013\001\001\000\014\005\021\006\024" +
    "\021\026\022\025\033\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\073\030\001\001\000\004\061\032\001" +
    "\001\000\010\056\051\057\047\060\046\001\001\000\004" +
    "\074\033\001\001\000\004\012\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\040" +
    "\001\001\000\004\077\041\001\001\000\004\012\042\001" +
    "\001\000\002\001\001\000\006\056\077\057\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\056\064\057\047\001\001\000\006\056" +
    "\063\057\047\001\001\000\006\056\062\057\047\001\001" +
    "\000\006\056\061\057\047\001\001\000\006\056\060\057" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\106\111\110\110\001\001\000" +
    "\002\001\001\000\006\020\113\024\112\001\001\000\004" +
    "\033\u017d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\116\001\001\000\034\005\136\011\146\022\134" +
    "\027\122\031\143\033\023\034\135\043\131\045\144\046" +
    "\124\047\140\050\130\107\123\001\001\000\004\126\u0174" +
    "\001\001\000\002\001\001\000\004\130\u016a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u015f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\122\u0123\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\131\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\113\150\001\001\000\012\054\156\055\152\066\153\067" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\252\001\001\000\010\054\156\055\152\066\247\001\001" +
    "\000\004\114\203\001\001\000\006\054\167\055\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\054\202\055\152\001\001\000\006" +
    "\054\201\055\152\001\001\000\006\054\200\055\152\001" +
    "\001\000\006\054\177\055\152\001\001\000\006\054\176" +
    "\055\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\054\156\055\152\066\153\067\210\001" +
    "\001\000\004\137\206\001\001\000\012\054\156\055\152" +
    "\066\153\067\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\213\001\001\000\034" +
    "\005\136\011\146\022\134\027\122\031\143\033\023\034" +
    "\135\043\131\045\144\046\124\047\140\050\130\052\214" +
    "\001\001\000\002\001\001\000\004\112\216\001\001\000" +
    "\006\056\217\057\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\115\222\001\001\000\004\044\223\001" +
    "\001\000\002\001\001\000\004\121\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\230\001\001\000" +
    "\034\005\136\011\146\022\134\027\122\031\143\033\023" +
    "\034\135\043\131\045\144\046\124\047\140\050\130\052" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\116\234\001\001\000\012\054\156\055\152\066\153\067" +
    "\235\001\001\000\004\117\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\241\001\001\000\034\005" +
    "\136\011\146\022\134\027\122\031\143\033\023\034\135" +
    "\043\131\045\144\046\124\047\140\050\130\052\242\001" +
    "\001\000\002\001\001\000\004\120\244\001\001\000\004" +
    "\044\245\001\001\000\002\001\001\000\010\054\251\055" +
    "\152\066\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\252\001\001\000\006\054\263\055\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\132\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\307\001\001\000\002\001\001\000\004\133\311\001" +
    "\001\000\004\040\312\001\001\000\036\005\136\011\146" +
    "\022\134\027\122\031\143\033\023\034\135\043\131\045" +
    "\144\046\124\047\140\050\130\052\314\053\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\134\317\001\001\000\004\051\320\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\135\323\001\001\000" +
    "\004\040\324\001\001\000\036\005\136\011\146\022\134" +
    "\027\122\031\143\033\023\034\135\043\131\045\144\046" +
    "\124\047\140\050\130\052\314\053\325\001\001\000\004" +
    "\136\326\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\334\075\333" +
    "\001\001\000\010\056\051\057\047\060\u0119\001\001\000" +
    "\002\001\001\000\006\025\337\037\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\u0115\001\001\000\004\032\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\u0112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\u0114\037" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\u011a\001\001\000\004\013\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\u011f\001" +
    "\001\000\010\056\051\057\047\060\u0120\001\001\000\004" +
    "\101\u0121\001\001\000\004\013\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u0126\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\u0128\001\001\000" +
    "\002\001\001\000\004\042\u012b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\054\156\055\152" +
    "\066\153\067\u0131\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\u0135\001\001\000\004\125\u013b\001\001" +
    "\000\002\001\001\000\004\124\u0137\001\001\000\002\001" +
    "\001\000\004\040\u0139\001\001\000\032\005\136\011\146" +
    "\022\134\027\122\031\143\033\023\034\135\043\131\045" +
    "\144\046\124\047\140\050\130\001\001\000\002\001\001" +
    "\000\006\064\u013e\065\u0140\001\001\000\006\064\u0157\065" +
    "\u0140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\064\u0154\065\u0140" +
    "\001\001\000\006\064\u0153\065\u0140\001\001\000\006\064" +
    "\u0152\065\u0140\001\001\000\006\064\u0151\065\u0140\001\001" +
    "\000\006\064\u0150\065\u0140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\u015a\037\341\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\u0162\037\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\u0166" +
    "\037\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\u016c\001\001\000\034\005\136\011\146\022\134\027" +
    "\122\031\143\033\023\034\135\043\131\045\144\046\124" +
    "\047\140\050\130\052\u016d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\054\156\055\152" +
    "\066\153\067\u0171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\054\156" +
    "\055\152\066\153\067\u0176\001\001\000\004\127\u0177\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u017a" +
    "\001\001\000\034\005\136\011\146\022\134\027\122\031" +
    "\143\033\023\034\135\043\131\045\144\046\124\047\140" +
    "\050\130\052\u017b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u0182\001\001\000\034\005" +
    "\136\011\146\022\134\027\122\031\143\033\023\034\135" +
    "\043\131\045\144\046\124\047\140\050\130\111\u0183\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\u0188\001\001\000\004\104\u0190\001\001\000" +
    "\006\020\u0189\024\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u018c\001\001\000\034\005\136\011" +
    "\146\022\134\027\122\031\143\033\023\034\135\043\131" +
    "\045\144\046\124\047\140\050\130\052\u018d\001\001\000" +
    "\004\103\u018e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u0192\001\001\000\034\005" +
    "\136\011\146\022\134\027\122\031\143\033\023\034\135" +
    "\043\131\045\144\046\124\047\140\050\130\052\u0193\001" +
    "\001\000\004\105\u0194\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\333\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxJAVA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxJAVA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxJAVA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public int jerarquia = 0;
    public String tipoActual = "";
    public TablaSimbolos tabla;
    public OperacionesJAVA op = new OperacionesJAVA();
    public VerifJAVA verif = new VerifJAVA();
    public static boolean todoCorrecto = true;
    public String tipoMetodo = "";

    /*Variables para los cuartetos*/

    public int contVars = 0;
    public String idSwitch = "";
    ArrayList<String> arrayFinales = new ArrayList<>();
    public int contFinales = 0;
    public static String aux2, aux3;
    public ArrayList<Nodo> auxCuarpeta = new ArrayList<>();

    public ArrayList<ArrayList<Nodo>> pilaFor = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();

    public static boolean inst = false;
    public ArrayList<String> pilaEtInst = new ArrayList<>();
    public static String etInst = "";


    public ManejoCondiciones manejo = new ManejoCondiciones();
    public ManejoJava manejoJV = new ManejoJava();
    

    public SintaxJAVA(AnalizadorLexico lex, TablaSimbolos tabla){
        super(lex);
        this.tabla = tabla;
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+s.left,"");        
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxJAVA$actions {
  private final SintaxJAVA parser;

  /** Constructor */
  CUP$SintaxJAVA$actions(SintaxJAVA parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxJAVA$do_action(
    int                        CUP$SintaxJAVA$act_num,
    java_cup.runtime.lr_parser CUP$SintaxJAVA$parser,
    java.util.Stack            CUP$SintaxJAVA$stack,
    int                        CUP$SintaxJAVA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxJAVA$result;

      /* select the action based on the action number */
      switch (CUP$SintaxJAVA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TEXTO_PLANO ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TEXTO_PLANO ::= TEXTO_PLANO resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TEXTO_PLANO ::= TEXTO_PLANO condTrue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TEXTO_PLANO ::= TEXTO_PLANO condFalse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TEXTO_PLANO ::= TEXTO_PLANO id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TEXTO_PLANO ::= TEXTO_PLANO numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // TEXTO_PLANO ::= TEXTO_PLANO guionBajo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TEXTO_PLANO ::= TEXTO_PLANO comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TEXTO_PLANO ::= TEXTO_PLANO pleca 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // TEXTO_PLANO ::= TEXTO_PLANO ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // TEXTO_PLANO ::= TEXTO_PLANO mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // TEXTO_PLANO ::= TEXTO_PLANO menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // TEXTO_PLANO ::= TEXTO_PLANO porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // TEXTO_PLANO ::= TEXTO_PLANO div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // TEXTO_PLANO ::= TEXTO_PLANO por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // TEXTO_PLANO ::= TEXTO_PLANO menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TEXTO_PLANO ::= TEXTO_PLANO mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TEXTO_PLANO ::= TEXTO_PLANO igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TEXTO_PLANO ::= TEXTO_PLANO admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // TEXTO_PLANO ::= TEXTO_PLANO dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // TEXTO_PLANO ::= TEXTO_PLANO puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TEXTO_PLANO ::= TEXTO_PLANO parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TEXTO_PLANO ::= TEXTO_PLANO parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TEXTO_PLANO ::= TEXTO_PLANO agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TEXTO_PLANO ::= TEXTO_PLANO agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TEXTO_PLANO ::= TEXTO_PLANO llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TEXTO_PLANO ::= TEXTO_PLANO llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TEXTO_PLANO ::= TEXTO_PLANO clase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TEXTO_PLANO ::= TEXTO_PLANO tipoPublic 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TEXTO_PLANO ::= TEXTO_PLANO mensaje2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TEXTO_PLANO ::= TEXTO_PLANO mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TEXTO_PLANO ::= TEXTO_PLANO retorno 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TEXTO_PLANO ::= TEXTO_PLANO def 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TEXTO_PLANO ::= TEXTO_PLANO quiebre 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TEXTO_PLANO ::= TEXTO_PLANO noCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TEXTO_PLANO ::= TEXTO_PLANO condSwitch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TEXTO_PLANO ::= TEXTO_PLANO condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TEXTO_PLANO ::= TEXTO_PLANO condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TEXTO_PLANO ::= TEXTO_PLANO condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TEXTO_PLANO ::= TEXTO_PLANO tipoVoid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TEXTO_PLANO ::= TEXTO_PLANO tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TEXTO_PLANO ::= TEXTO_PLANO tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TEXTO_PLANO ::= TEXTO_PLANO tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TEXTO_PLANO ::= TEXTO_PLANO punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TEXTO_PLANO ::= TEXTO_PLANO coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // COMENTARIO_B ::= comentario_b TEXTO_PLANO comentario_c 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",23, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // COMENTARIO_A ::= comentario_a TEXTO_PLANO 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("COMENTARIO_A",22, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // TEXTO2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO2",20, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // TEXTO2 ::= mas TEXTO 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO2",20, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // VAL_TEXTO ::= numero 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=true;  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",29, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // VAL_TEXTO ::= id 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Float"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",29, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TEXTO ::= comilla TEXTO_PLANO comilla TEXTO2 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TEXTO ::= VAL_TEXTO TEXTO2 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TIPO_INPUT ::= floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TIPO_INPUT ::= charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT="Char"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TIPO_INPUT ::= intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // LECTURA_DATOS ::= TIPO_INPUT parentesis_a parentesis_b puntoComa 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // LECTURA_DATOS ::= TIPO_INPUT parentesis_a TEXTO parentesis_b puntoComa 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // LECTURA_DATOS ::= id igual TIPO_INPUT parentesis_a parentesis_b puntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		 parser.verif.verifInput(parser.tabla.getObJava(), a.toString(), b); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // LECTURA_DATOS ::= id igual TIPO_INPUT parentesis_a TEXTO parentesis_b puntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		 parser.verif.verifInput(parser.tabla.getObJava(), a.toString(), b); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",21, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OP2 ::= admiracion igual 
            {
              String RESULT =null;
		 RESULT="!="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OP2 ::= igual igual 
            {
              String RESULT =null;
		 RESULT="=="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OP2 ::= menor igual 
            {
              String RESULT =null;
		 RESULT="<="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OP2 ::= menor 
            {
              String RESULT =null;
		 RESULT="<"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OP2 ::= mayor igual 
            {
              String RESULT =null;
		 RESULT=">="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OP2 ::= mayor 
            {
              String RESULT =null;
		 RESULT=">"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VAL_COND ::= menos numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",43, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VAL_COND ::= menos numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",43, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VAL_COND ::= menos id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tip=parser.op.buscarVariable(parser.tabla.getObJava(), a.toString(), parser.jerarquia);  RESULT = new NodoBoolean(tip, a.toString()+b.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",43, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VAL_COND ::= comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",43, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VAL_COND ::= comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",43, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // VAL_COND ::= numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",43, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // VAL_COND ::= numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = new NodoBoolean("Integer", a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",43, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // VAL_COND ::= id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		   String tip = parser.op.buscarVariable(parser.tabla.getObJava(), a.toString(), parser.jerarquia); RESULT = new NodoBoolean(tip, a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",43, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OP_COND ::= VAL_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",42, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OP_COND ::= OP_COND porcentaje OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; if(!a.getTipo().equals("") && !b.getTipo().equals("")){ String tip=parser.verif.verificarTipoOperacion(parser.tabla.getObJava(), a.getTipo(), b.getTipo()); parser.tabla.getObJava().getCuarpeta().add(new Nodo("mod", a.getId(), b.getId(), var, null)); RESULT=new NodoBoolean(tip, var); } else { parser.tabla.getObJava().getCuarpeta().add(new Nodo("suma", a.getId(), b.getId(), var, null)); RESULT=new NodoBoolean("", var); } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",42, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OP_COND ::= OP_COND div OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; if(!a.getTipo().equals("") && !b.getTipo().equals("")){ String tip=parser.verif.verificarTipoOperacion(parser.tabla.getObJava(), a.getTipo(), b.getTipo()); parser.tabla.getObJava().getCuarpeta().add(new Nodo("div", a.getId(), b.getId(), var, null)); RESULT=new NodoBoolean(tip, var); } else { parser.tabla.getObJava().getCuarpeta().add(new Nodo("suma", a.getId(), b.getId(), var, null)); RESULT=new NodoBoolean("", var); } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",42, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OP_COND ::= OP_COND por OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; if(!a.getTipo().equals("") && !b.getTipo().equals("")){ String tip=parser.verif.verificarTipoOperacion(parser.tabla.getObJava(), a.getTipo(), b.getTipo()); parser.tabla.getObJava().getCuarpeta().add(new Nodo("mult", a.getId(), b.getId(), var, null)); RESULT=new NodoBoolean(tip, var); } else { parser.tabla.getObJava().getCuarpeta().add(new Nodo("suma", a.getId(), b.getId(), var, null)); RESULT=new NodoBoolean("", var); } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",42, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OP_COND ::= OP_COND menos OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; if(!a.getTipo().equals("") && !b.getTipo().equals("")){ String tip=parser.verif.verificarTipoOperacion(parser.tabla.getObJava(), a.getTipo(), b.getTipo());  parser.tabla.getObJava().getCuarpeta().add(new Nodo("resta", a.getId(), b.getId(), var, null)); RESULT=new NodoBoolean(tip, var); } else { parser.tabla.getObJava().getCuarpeta().add(new Nodo("suma", a.getId(), b.getId(), var, null)); RESULT=new NodoBoolean("", var); } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",42, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OP_COND ::= OP_COND mas OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; if(!a.getTipo().equals("") &&  !b.getTipo().equals("")){ String tip=parser.verif.verificarTipoOperacion(parser.tabla.getObJava(), a.getTipo(), b.getTipo()); parser.tabla.getObJava().getCuarpeta().add(new Nodo("suma", a.getId(), b.getId(), var, null));  RESULT=new NodoBoolean(tip, var); } else { parser.tabla.getObJava().getCuarpeta().add(new Nodo("suma", a.getId(), b.getId(), var, null)); RESULT=new NodoBoolean("", var); } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",42, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OP_COND ::= parentesis_a OP_COND parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",42, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // BOOLEAN3 ::= OP_COND OP2 OP_COND 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=parser.manejoJV.agregarBooleans(parser.tabla.getObJava(), parser.pilaFalsas, a, b, c, parser.jerarquia);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("BOOLEAN3",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXT2 ::= admiracion BOOLEAN3 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXT2 ::= admiracion parentesis_a BOOLEAN3 parentesis_b 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXT2 ::= BOOLEAN3 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a;  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXT2 ::= EXT2 or NT$37 EXT2 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.manejoJV.manejoOr(parser.tabla.getObJava(), parser.pilaCuarpeta, a, b, parser.jerarquia);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$37 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.aux3 = parser.aux2; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$37",93, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXT2 ::= EXT2 and EXT2 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.manejoAnd(a, b); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // BOOLEAN ::= OP_COND OP2 OP_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++;  if(!a.getTipo().equals("") && !b.getTipo().equals("")){ String tip=parser.verif.verificarTipoOperacion(parser.tabla.getObJava(), a.getTipo(), b.getTipo()); parser.tabla.getObJava().getCuarpeta().add(new Nodo(c, a.getId(), b.getId(), var,null)); RESULT=var; } else { parser.tabla.getObJava().getCuarpeta().add(new Nodo(c, a.getId(), b.getId(), var, null)); System.out.println("aqui se escribe algo del errorxd");  RESULT=var; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("BOOLEAN",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXT ::= admiracion BOOLEAN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; parser.tabla.getObJava().getCuarpeta().add(new Nodo("!", a, null, var, null)); RESULT=var;  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT",17, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXT ::= admiracion parentesis_a BOOLEAN parentesis_b 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 String var = "t"+parser.contVars; parser.contVars++; parser.tabla.getObJava().getCuarpeta().add(new Nodo("!", a, null, var, null)); RESULT=var; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT",17, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXT ::= BOOLEAN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT",17, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXT ::= EXT or EXT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 System.out.println("entro al or primero"); String var = "t"+parser.contVars; parser.contVars++; parser.tabla.getObJava().getCuarpeta().add(new Nodo("OR", a, b, var, null)); RESULT=var; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT",17, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXT ::= EXT and EXT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 System.out.println("entro al and primero"); String var = "t"+parser.contVars; parser.contVars++; parser.tabla.getObJava().getCuarpeta().add(new Nodo("AND", a, b, var, null)); RESULT=var; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT",17, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VAL_SWITCH ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_SWITCH",49, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VAL_SWITCH ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_SWITCH",49, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VAL_SWITCH ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verifVarSwitch(parser.tabla.getObJava(), a.toString()); RESULT=a.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_SWITCH",49, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // RETORNO_SWITCH ::= RETORNO 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO_SWITCH",41, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // RETORNO_SWITCH ::= quiebre 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO_SWITCH",41, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CASOS_SWITCH ::= def dosPuntos NT$35 CUERPO_METODO RETORNO_SWITCH NT$36 puntoComa 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CASOS_SWITCH",39, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$36 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$36",92, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$35 ::= 
            {
              Boolean RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$35",91, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CASOS_SWITCH ::= noCase VAL_SWITCH dosPuntos NT$33 CUERPO_METODO RETORNO_SWITCH puntoComa NT$34 CASOS_SWITCH 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=parser.op.retornarBoolCase(a, b, c); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CASOS_SWITCH",39, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$34 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.manejoJV.agregarFinCase(parser.tabla.getObJava(), parser.arrayFinales, parser.jerarquia);  parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$34",90, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$33 ::= 
            {
              Boolean RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.jerarquia++; parser.manejoJV.agregarCaseSwitch(parser.tabla.getObJava(), parser.jerarquia, parser.idSwitch, h, "==");  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$33",89, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SWITCH ::= condSwitch NT$31 parentesis_a VAL_SWITCH NT$32 parentesis_b llave_a CASOS_SWITCH llave_b 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		 parser.tabla.getObJava().getCuarpeta().add(new Nodo("ETIQUETA", parser.arrayFinales.get(parser.arrayFinales.size()-1), null, null, parser.jerarquia)); parser.arrayFinales.remove(parser.arrayFinales.size()-1); parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("SWITCH",38, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$32 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.arrayFinales.add("etFinal_"+parser.contFinales); parser.contFinales++;  parser.idSwitch = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$32",88, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$31 ::= 
            {
              Boolean RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$31",87, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // MENSAJE ::= mensaje2 parentesis_a TEXTO parentesis_b puntoComa 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("MENSAJE",7, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MENSAJE ::= mensaje parentesis_a TEXTO parentesis_b puntoComa 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("MENSAJE",7, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DO_WHILE ::= condDo NT$30 llave_a CUERPO_METODO RETORNO llave_b condWhile parentesis_a EXT2 parentesis_b puntoComa 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		 /*parser.manejo.agregarCondicionDoWhile(parser.tabla.getObJava(), parser.jerarquia, h.toString());*/ parser.manejoJV.agregarCondicionWhile(parser.tabla.getObJava(), h, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); parser.jerarquia--; if(a != null){ RESULT=false; } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("DO_WHILE",37, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$30 ::= 
            {
              Boolean RESULT =null;
 parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>());  parser.manejoJV.agregarDoWhile(parser.tabla.getObJava(), parser.jerarquia);      /*parser.manejo.agregarDoWhile(parser.tabla.getObJava(), parser.jerarquia);*/ 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$30",86, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // WHILE ::= condWhile NT$28 parentesis_a EXT2 NT$29 parentesis_b llave_a CUERPO_METODO RETORNO llave_b 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 parser.manejoJV.retornoWhile(parser.tabla.getObJava(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); parser.jerarquia--;  if(a != null){ RESULT=false; } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("WHILE",36, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$29 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.manejoJV.agregarWhile(parser.tabla.getObJava(), h, parser.jerarquia);     
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$29",85, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$28 ::= 
            {
              Boolean RESULT =null;
 parser.jerarquia++; parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$28",84, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VAL_FOR ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",32, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VAL_FOR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",32, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VAL_FOR ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer"); RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",32, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VAL_FOR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer"); RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",32, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP ::= admiracion igual 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP ::= igual igual 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP ::= igual 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP ::= mayor 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP ::= mayor igual 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OP ::= menor 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP ::= menor igual 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPO_FOR ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString()); RESULT=a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPO_FOR ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()); RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPO_FOR ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual); RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO_FOR ::= comillaSimple numero comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPO_FOR ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO_FOR ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString()); RESULT=a.toString()+b.toString()+c.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPO_FOR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString());  RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIPO_FOR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual); RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP_FOR ::= TIPO_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP_FOR ::= OP_FOR porcentaje OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; parser.pilaFor.get(parser.pilaFor.size()-1).add(new Nodo("modulo", a, b, var, null)); RESULT=var; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP_FOR ::= OP_FOR div OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; parser.pilaFor.get(parser.pilaFor.size()-1).add(new Nodo("div", a, b, var, null)); RESULT=var;  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP_FOR ::= OP_FOR por OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; parser.pilaFor.get(parser.pilaFor.size()-1).add(new Nodo("mult", a, b, var, null)); RESULT=var; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP_FOR ::= OP_FOR menos OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; parser.pilaFor.get(parser.pilaFor.size()-1).add(new Nodo("resta", a, b, var, null)); RESULT=var; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP_FOR ::= OP_FOR mas OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++;  parser.pilaFor.get(parser.pilaFor.size()-1).add(new Nodo("suma", a, b, var, null)); RESULT=var; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP_FOR ::= parentesis_a OP_FOR parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INC ::= igual NT$27 OP_FOR 
            {
              String RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("INC",48, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$27 ::= 
            {
              String RESULT =null;
 parser.tipoActual="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$27",83, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INT ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("INT",27, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INT ::= tipoInt 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("INT",27, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FOR ::= condFor NT$24 parentesis_a INT id NT$25 igual VAL_FOR puntoComa EXT2 puntoComa id INC parentesis_b NT$26 llave_a CUERPO_METODO llave_b 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean j = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 parser.manejoJV.retornoFor(parser.tabla.getObJava(), parser.pilaFor, f.toString(), parser.pilaCuarpeta, parser.pilaFalsas, g, parser.jerarquia);  parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia);  parser.jerarquia--;  if(j!=null){ RESULT=false; } else { RESULT=null; }  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("FOR",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-17)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$26 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.manejoJV.agregarFor(parser.tabla.getObJava(), b.toString(), c, d, parser.jerarquia);  boolean idInc = parser.verif.verificarTipadoVar(parser.tabla.getObJava(), f.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer");  parser.verif.comprobarFor(parser.tabla.getObJava(), b.toString(), a.toString(), parser.jerarquia); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$26",82, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$25 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.verif.agregarVarFor(parser.tabla.getObJava(), b.toString(), a, parser.jerarquia); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$25",81, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$24 ::= 
            {
              Boolean RESULT =null;
 parser.jerarquia++; parser.pilaFor.add(new ArrayList<>()); parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$24",80, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELSE ::= 
            {
              Boolean RESULT =null;
		   parser.manejo.agregarEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia);  RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ELSE",34, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELSE ::= condElse NT$23 llave_a CUERPO_METODO RETORNO llave_b 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); parser.manejo.agregarEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); parser.jerarquia--; if(a != null){ if(a && b){ RESULT=null; } else if((!a && b) || (a && !b)){ RESULT=true; } else if(!a && !b){ RESULT=false; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ELSE",34, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$23 ::= 
            {
              Boolean RESULT =null;
 parser.jerarquia++; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$23",79, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELSE ::= condElse condIf parentesis_a NT$20 EXT2 NT$21 parentesis_b llave_a CUERPO_METODO RETORNO llave_b NT$22 ELSE 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=parser.op.retornoIf(a, b, c); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ELSE",34, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$22 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); parser.manejoJV.segundoChequeoIf(parser.tabla.getObJava(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$22",78, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$21 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.jerarquia++;  parser.manejoJV.primerChequeoIf(parser.tabla.getObJava(), h); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$21",77, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$20 ::= 
            {
              Boolean RESULT =null;
 parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$20",76, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF ::= condIf parentesis_a NT$17 EXT2 NT$18 parentesis_b llave_a CUERPO_METODO RETORNO llave_b NT$19 ELSE 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=parser.op.retornoIf(a, b, c); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("IF",33, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$19 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
   parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia);     parser.manejoJV.segundoChequeoIf(parser.tabla.getObJava(), parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);      parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$19",75, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$18 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.jerarquia++; parser.manejoJV.primerChequeoIf(parser.tabla.getObJava(), h);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$18",74, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$17 ::= 
            {
              Boolean RESULT =null;
parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$17",73, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RETORNO ::= 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO",40, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RETORNO ::= retorno NT$16 OPERACION puntoComa 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT=true; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO",40, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$16 ::= 
            {
              Boolean RESULT =null;
 parser.tipoActual = parser.tipoMetodo; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$16",72, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUERPO_METODO ::= 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CUERPO_METODO ::= CUERPO_METODO COMENTARIO_B 
            {
              Boolean RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUERPO_METODO ::= CUERPO_METODO LECTURA_DATOS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de return"); } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUERPO_METODO ::= CUERPO_METODO SWITCH 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ System.out.println("ERROR, lineas escritas luego de return"); } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUERPO_METODO ::= CUERPO_METODO MENSAJE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de return"); } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPO_METODO ::= CUERPO_METODO DO_WHILE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ System.out.println("ERROR, lineas escritas luego de return"); } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUERPO_METODO ::= CUERPO_METODO WHILE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ System.out.println("ERROR, lineas escritas luego de return"); } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUERPO_METODO ::= CUERPO_METODO FOR 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ System.out.println("ERROR, lineas escritas luego de return"); } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUERPO_METODO ::= CUERPO_METODO IF 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ System.out.println("ERROR, lineas escritas luego de return"); } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUERPO_METODO ::= CUERPO_METODO ASIGNACIONES 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de return"); } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CUERPO_METODO ::= CUERPO_METODO VARIABLES 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a!=null){ if(a){ System.out.println("ERROR, lineas escritas luego de return"); } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO_METODO ::= tipoVoid 
            {
              String RESULT =null;
		 RESULT="void"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",28, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO_METODO ::= tipoInt 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",28, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO_METODO ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",28, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO_METODO ::= tipoChar 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",28, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMETROS2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",18, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMETROS2 ::= PARAMETROS2 VAR id coma 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 parser.op.agregarVarMetodo(c.toString(), parser.tabla.getObJava(), b, true, parser.jerarquia); /*parser.op.agregarParametrosMetodo(c.toString(), parser.tabla.getObJava(), b);*/ 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",18, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMETROS ::= PARAMETROS2 VAR id 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.op.agregarVarMetodo(c.toString(), parser.tabla.getObJava(), b, true, parser.jerarquia); /*parser.op.agregarParametrosMetodo(c.toString(), parser.tabla.getObJava(), b);*/ 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAMETROS",14, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONSTRUCTOR ::= tipoPublic id parentesis_a NT$14 parentesis_b llave_a CUERPO_METODO NT$15 llave_b 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",15, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  if(b){ System.out.println("Constructor incapaz de retornar un valor"); }   
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$15",71, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$14 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.op.agregarNuevoConstructor(parser.tabla.getObJava(), a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$14",70, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONSTRUCTOR ::= tipoPublic id parentesis_a NT$12 PARAMETROS parentesis_b llave_a CUERPO_METODO NT$13 llave_b 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",15, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  if(b){ System.out.println("Constructor incapaz de retornar un valor"); }   
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$13",69, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$12 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.op.agregarNuevoConstructor(parser.tabla.getObJava(), a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$12",68, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METODOS ::= tipoPublic TIPO_METODO id parentesis_a parentesis_b NT$10 llave_a CUERPO_METODO RETORNO NT$11 llave_b 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		 parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODOS",4, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.op.comprobarReturnMetodo(parser.tabla.getObJava(), f, g); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$11",67, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
 parser.tipoMetodo=a; parser.jerarquia++; parser.op.agregarNuevoMetodo(b.toString(), parser.tabla.getObJava(), parser.tabla.getObJava().getMisClases().size()-1, a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$10",66, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METODOS ::= tipoPublic TIPO_METODO id parentesis_a NT$8 PARAMETROS parentesis_b llave_a CUERPO_METODO RETORNO NT$9 llave_b 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		 parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODOS",4, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.op.comprobarReturnMetodo(parser.tabla.getObJava(), f, g); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$9",65, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.tipoMetodo=a; parser.jerarquia++; parser.op.agregarNuevoMetodo(b.toString(), parser.tabla.getObJava(), parser.tabla.getObJava().getMisClases().size()-1, a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$8",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_VAL ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString()); RESULT=a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_VAL ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()); RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_VAL ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual); RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_VAL ::= comillaSimple numero comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_VAL ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_VAL ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString()); RESULT=a.toString()+b.toString()+c.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_VAL ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString());  RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_VAL ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual); RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= TIPO_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",44, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= OPERACION porcentaje OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; parser.tabla.getObJava().getCuarpeta().add(new Nodo("modulo", a, b, var, null)); RESULT=var; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",44, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION ::= OPERACION div OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; parser.tabla.getObJava().getCuarpeta().add(new Nodo("div", a, b, var, null)); RESULT=var;  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",44, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION ::= OPERACION por OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; parser.tabla.getObJava().getCuarpeta().add(new Nodo("mult", a, b, var, null)); RESULT=var; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",44, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION ::= OPERACION menos OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++; parser.tabla.getObJava().getCuarpeta().add(new Nodo("resta", a, b, var, null)); RESULT=var; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",44, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION ::= OPERACION mas OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String var = "t"+parser.contVars; parser.contVars++;  parser.tabla.getObJava().getCuarpeta().add(new Nodo("suma", a, b, var, null)); RESULT=var; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",44, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",44, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VALOR",46, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VAR ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAR",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VAR ::= tipoChar 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAR",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VAR ::= tipoInt 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAR",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // C ::= 
            {
              String RESULT =null;
		 RESULT= null; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("C",47, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C ::= igual VALOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("C",47, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONC_VAR_AS ::= puntoComa 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_AS",9, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONC_VAR_AS ::= id igual NT$6 VALOR NT$7 CONC_VAR_AS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_AS",9, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.tabla.getObJava().getCuarpeta().add(new Nodo("asig", b, null, a.toString(), null)); parser.op.agregarValorVar(parser.tabla.getObJava(), parser.jerarquia, a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$7",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.tipoActual=""; parser.tipoActual = parser.op.devolverTipoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$6",62, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONC_VAR_DEF ::= puntoComa 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_DEF",8, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONC_VAR_DEF ::= coma id C NT$5 CONC_VAR_DEF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_DEF",8, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 if(c!=null){ parser.tabla.getObJava().getCuarpeta().add(new Nodo("asig", c, null, a.toString(), null)); parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, a.toString(), parser.tipoActual, true); }  else { parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, a.toString(), parser.tipoActual, false); } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$5",61, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACIONES ::= id igual NT$3 VALOR NT$4 CONC_VAR_AS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",16, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.tabla.getObJava().getCuarpeta().add(new Nodo("asig", b, null, a.toString(), null));  parser.op.agregarValorVar(parser.tabla.getObJava(), parser.jerarquia, a.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.tipoActual = ""; parser.tipoActual = parser.op.devolverTipoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLES ::= VAR id NT$1 C NT$2 CONC_VAR_DEF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 if(c!=null){   /*VER ESTE IF Y REVISAR QUE PROCEDE*/                                       parser.tabla.getObJava().getCuarpeta().add(new Nodo("asig", c, null, b.toString(), null));     parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, b.toString(), a.toString(), true);  } else { parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, b.toString(), a.toString(), false); } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.tipoActual = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // B ::= 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // B ::= B ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // B ::= B CONSTRUCTOR 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // B ::= B METODOS 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // B ::= B VARIABLES 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= A tipoPublic clase id NT$0 llave_a B llave_b 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.op.agregarNuevaClase(parser.tabla.getObJava(), a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // AA ::= A 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("AA",0, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= AA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		RESULT = start_val;
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxJAVA$parser.done_parsing();
          return CUP$SintaxJAVA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

