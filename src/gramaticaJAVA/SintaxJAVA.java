
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 28 12:16:40 CST 2020
//----------------------------------------------------

package gramaticaJAVA;

import java_cup.runtime.*;
import Tablas.*;
import Operaciones.*;
import verificaciones.*;
import cuartetos.*;
import objetosApoyo.*;
import manejoCuartetos.*;
import java.util.*;
import interfaz.*;
import manejoExe.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 28 12:16:40 CST 2020
  */
public class SintaxJAVA extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxJAVA() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxJAVA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxJAVA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\002\002\004\000\002\002\004\000\002\103" +
    "\002\000\002\003\014\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\002\000\002" +
    "\004\004\000\002\104\002\000\002\105\002\000\002\005" +
    "\010\000\002\106\002\000\002\107\002\000\002\021\010" +
    "\000\002\110\002\000\002\111\002\000\002\021\012\000" +
    "\002\112\002\000\002\113\002\000\002\012\010\000\002" +
    "\012\004\000\002\114\002\000\002\115\002\000\002\013" +
    "\010\000\002\013\004\000\002\072\004\000\002\072\002" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\071\003\000\002\067\005\000\002\067\005\000\002" +
    "\067\005\000\002\067\005\000\002\067\005\000\002\067" +
    "\005\000\002\067\003\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\004\000\002\070\005\000" +
    "\002\070\005\000\002\070\005\000\002\070\006\000\002" +
    "\070\006\000\002\070\004\000\002\070\004\000\002\070" +
    "\006\000\002\066\007\000\002\044\007\000\002\030\007" +
    "\000\002\063\003\000\002\063\002\000\002\061\004\000" +
    "\002\062\005\000\002\062\002\000\002\116\002\000\002" +
    "\117\002\000\002\120\002\000\002\006\021\000\002\121" +
    "\002\000\002\122\002\000\002\006\017\000\002\123\002" +
    "\000\002\124\002\000\002\125\002\000\002\020\017\000" +
    "\002\126\002\000\002\127\002\000\002\130\002\000\002" +
    "\020\016\000\002\042\005\000\002\043\006\000\002\043" +
    "\002\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\045\004\000\002\045\004\000" +
    "\002\045\004\000\002\045\004\000\002\045\004\000\002" +
    "\045\004\000\002\045\004\000\002\045\004\000\002\045" +
    "\004\000\002\045\004\000\002\045\004\000\002\045\004" +
    "\000\002\045\002\000\002\045\004\000\002\131\002\000" +
    "\002\057\007\000\002\057\002\000\002\132\002\000\002" +
    "\133\002\000\002\134\002\000\002\050\017\000\002\135" +
    "\002\000\002\136\002\000\002\137\002\000\002\051\020" +
    "\000\002\140\002\000\002\051\012\000\002\051\003\000" +
    "\002\141\002\000\002\142\002\000\002\143\002\000\002" +
    "\052\026\000\002\037\003\000\002\037\002\000\002\144" +
    "\002\000\002\073\005\000\002\075\005\000\002\075\005" +
    "\000\002\075\005\000\002\075\005\000\002\075\005\000" +
    "\002\075\005\000\002\075\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\005\000\002\076\005\000\002\076" +
    "\005\000\002\076\004\000\002\076\004\000\002\076\006" +
    "\000\002\102\004\000\002\102\003\000\002\102\004\000" +
    "\002\102\003\000\002\102\003\000\002\102\004\000\002" +
    "\102\004\000\002\047\003\000\002\047\004\000\002\047" +
    "\003\000\002\047\004\000\002\145\002\000\002\146\002" +
    "\000\002\053\016\000\002\147\002\000\002\054\017\000" +
    "\002\150\002\000\002\151\002\000\002\055\015\000\002" +
    "\152\002\000\002\153\002\000\002\056\013\000\002\154" +
    "\002\000\002\056\010\000\002\056\002\000\002\060\005" +
    "\000\002\060\003\000\002\074\003\000\002\074\005\000" +
    "\002\074\003\000\002\100\005\000\002\155\002\000\002" +
    "\100\006\000\002\100\003\000\002\100\006\000\002\100" +
    "\004\000\002\077\005\000\002\064\005\000\002\064\005" +
    "\000\002\064\005\000\002\064\005\000\002\064\005\000" +
    "\002\064\005\000\002\064\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\005\000\002\065\003\000\002\065" +
    "\004\000\002\065\005\000\002\065\005\000\002\065\006" +
    "\000\002\065\006\000\002\065\004\000\002\065\004\000" +
    "\002\065\006\000\002\101\003\000\002\101\004\000\002" +
    "\101\003\000\002\101\004\000\002\101\004\000\002\101" +
    "\004\000\002\156\002\000\002\025\013\000\002\157\002" +
    "\000\002\025\012\000\002\160\002\000\002\025\011\000" +
    "\002\161\002\000\002\025\010\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\011\010\000\002\011" +
    "\010\000\002\031\004\000\002\031\006\000\002\033\003" +
    "\000\002\033\003\000\002\033\005\000\002\033\004\000" +
    "\002\033\004\000\002\033\006\000\002\032\004\000\002" +
    "\032\002\000\002\026\005\000\002\027\006\000\002\023" +
    "\004\000\002\023\003\000\002\024\004\000\002\024\003" +
    "\000\002\024\002\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\002\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0231\000\010\002\uff1e\020\uff1e\075\006\001\002\000" +
    "\006\002\ufffd\020\ufffd\001\002\000\004\002\011\001\002" +
    "\000\010\002\uff1f\020\uff1f\075\uff21\001\002\000\004\075" +
    "\010\001\002\000\010\002\uff20\020\uff20\075\uff22\001\002" +
    "\000\004\002\001\001\002\000\006\002\000\020\013\001" +
    "\002\000\004\021\014\001\002\000\004\044\015\001\002" +
    "\000\004\022\uffff\001\002\000\004\022\017\001\002\000" +
    "\004\075\020\001\002\000\066\002\uff21\003\uff21\006\uff21" +
    "\007\uff21\010\uff21\012\uff21\014\uff21\015\uff21\016\uff21\017" +
    "\uff21\020\uff21\023\uff21\044\uff21\051\uff21\054\uff21\055\uff21" +
    "\056\uff21\057\uff21\060\uff21\061\uff21\062\uff21\063\uff21\071" +
    "\uff21\072\uff21\074\uff21\075\uff21\001\002\000\030\003\037" +
    "\006\025\007\030\010\024\020\034\023\ufff6\044\036\071" +
    "\027\072\026\074\023\075\042\001\002\000\026\003\037" +
    "\006\025\007\030\010\024\020\034\023\ufff6\044\036\071" +
    "\027\072\026\074\023\001\002\000\004\005\u022c\001\002" +
    "\000\004\044\uffdf\001\002\000\004\044\uffe1\001\002\000" +
    "\144\004\ufebd\005\ufebd\006\ufebd\007\ufebd\010\ufebd\011\ufebd" +
    "\012\ufebd\013\ufebd\014\ufebd\015\ufebd\016\ufebd\017\ufebd\020" +
    "\ufebd\021\ufebd\022\ufebd\023\ufebd\024\ufebd\025\ufebd\026\ufebd" +
    "\027\ufebd\030\ufebd\031\ufebd\032\ufebd\033\ufebd\034\ufebd\035" +
    "\ufebd\036\ufebd\037\ufebd\040\ufebd\042\ufebd\043\ufebd\044\ufebd" +
    "\045\ufebd\046\ufebd\047\ufebd\050\ufebd\051\ufebd\052\ufebd\053" +
    "\ufebd\054\ufebd\055\ufebd\056\ufebd\057\ufebd\060\ufebd\065\ufebd" +
    "\066\ufebd\073\ufebd\074\ufebd\075\ufebd\001\002\000\142\004" +
    "\ufeee\005\ufeee\006\ufeee\007\ufeee\010\ufeee\011\ufeee\012\ufeee" +
    "\013\ufeee\014\ufeee\015\ufeee\016\ufeee\017\ufeee\020\ufeee\021" +
    "\ufeee\022\ufeee\023\ufeee\024\ufeee\025\ufeee\026\ufeee\027\ufeee" +
    "\030\ufeee\031\ufeee\032\ufeee\033\ufeee\034\ufeee\035\ufeee\036" +
    "\ufeee\037\ufeee\040\ufeee\042\ufeee\043\ufeee\044\ufeee\045\ufeee" +
    "\046\ufeee\047\ufeee\050\ufeee\051\ufeee\052\ufeee\053\ufeee\054" +
    "\ufeee\055\ufeee\056\ufeee\057\ufeee\060\ufeee\065\ufeee\066\ufeee" +
    "\074\ufeee\075\ufeee\001\002\000\004\044\uffe0\001\002\000" +
    "\026\003\037\006\025\007\030\010\024\020\034\023\ufff6" +
    "\044\036\071\027\072\026\074\023\001\002\000\026\003" +
    "\037\006\025\007\030\010\024\020\034\023\ufff6\044\036" +
    "\071\027\072\026\074\023\001\002\000\026\003\037\006" +
    "\025\007\030\010\024\020\034\023\ufff6\044\036\071\027" +
    "\072\026\074\023\001\002\000\014\006\224\007\226\010" +
    "\225\011\227\044\231\001\002\000\004\023\222\001\002" +
    "\000\004\031\205\001\002\000\026\003\037\006\025\007" +
    "\030\010\024\020\034\023\ufff6\044\036\071\027\072\026" +
    "\074\023\001\002\000\026\003\037\006\025\007\030\010" +
    "\024\020\034\023\ufff6\044\036\071\027\072\026\074\023" +
    "\001\002\000\026\003\037\006\025\007\030\010\024\020" +
    "\034\023\ufff6\044\036\071\027\072\026\074\023\001\002" +
    "\000\066\002\uff22\003\uff22\006\uff22\007\uff22\010\uff22\012" +
    "\uff22\014\uff22\015\uff22\016\uff22\017\uff22\020\uff22\023\uff22" +
    "\044\uff22\051\uff22\054\uff22\055\uff22\056\uff22\057\uff22\060" +
    "\uff22\061\uff22\062\uff22\063\uff22\071\uff22\072\uff22\074\uff22" +
    "\075\uff22\001\002\000\004\044\044\001\002\000\010\004" +
    "\ufff4\026\ufff4\031\ufff4\001\002\000\010\004\uffe2\026\uffe2" +
    "\031\046\001\002\000\014\033\066\043\067\044\063\050" +
    "\072\052\071\001\002\000\006\004\ufff3\026\ufff3\001\002" +
    "\000\006\004\051\026\052\001\002\000\004\044\055\001" +
    "\002\000\004\075\020\001\002\000\062\003\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\023\ufff2\044\ufff2\051\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\071" +
    "\ufff2\072\ufff2\074\ufff2\001\002\000\064\003\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\023\uffe8\044\uffe8\051\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\071" +
    "\uffe8\072\uffe8\074\uffe8\075\042\001\002\000\010\004\uffeb" +
    "\026\uffeb\031\uffeb\001\002\000\010\004\uffe2\026\uffe2\031" +
    "\046\001\002\000\006\004\uffea\026\uffea\001\002\000\006" +
    "\004\051\026\052\001\002\000\062\003\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\023\uffe9\044\uffe9\051\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\071\uffe9" +
    "\072\uffe9\074\uffe9\001\002\000\006\004\uffe3\026\uffe3\001" +
    "\002\000\026\004\uffd6\026\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\044\uffd6\052\121\053\uffd6\001\002\000" +
    "\024\004\uffd7\026\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\044\uffd7\053\uffd7\001\002\000\022\004\uffde\026" +
    "\uffde\032\103\033\104\034\101\035\105\036\102\044\uffde" +
    "\001\002\000\010\043\115\044\120\050\116\001\002\000" +
    "\026\004\uffd5\005\113\026\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\044\uffd5\053\uffd5\001\002\000\024\004" +
    "\uffd4\026\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\044\uffd4\053\uffd4\001\002\000\014\033\066\043\067\044" +
    "\063\050\072\052\071\001\002\000\006\043\073\044\074" +
    "\001\002\000\004\050\076\001\002\000\004\050\075\001" +
    "\002\000\024\004\uffd1\026\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\044\uffd1\053\uffd1\001\002\000\024\004" +
    "\uffd0\026\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\044\uffd0\053\uffd0\001\002\000\016\032\103\033\104\034" +
    "\101\035\105\036\102\053\100\001\002\000\024\004\uffdd" +
    "\026\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\044" +
    "\uffdd\053\uffdd\001\002\000\014\033\066\043\067\044\063" +
    "\050\072\052\071\001\002\000\014\033\066\043\067\044" +
    "\063\050\072\052\071\001\002\000\014\033\066\043\067" +
    "\044\063\050\072\052\071\001\002\000\014\033\066\043" +
    "\067\044\063\050\072\052\071\001\002\000\014\033\066" +
    "\043\067\044\063\050\072\052\071\001\002\000\024\004" +
    "\uffd9\026\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\044\uffd9\053\uffd9\001\002\000\024\004\uffdb\026\uffdb\032" +
    "\uffdb\033\uffdb\034\101\035\105\036\102\044\uffdb\053\uffdb" +
    "\001\002\000\024\004\uffdc\026\uffdc\032\uffdc\033\uffdc\034" +
    "\101\035\105\036\102\044\uffdc\053\uffdc\001\002\000\024" +
    "\004\uffd8\026\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\044\uffd8\053\uffd8\001\002\000\024\004\uffda\026\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\044\uffda\053" +
    "\uffda\001\002\000\004\043\114\001\002\000\024\004\uffd2" +
    "\026\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\044" +
    "\uffd2\053\uffd2\001\002\000\026\004\uffcc\005\200\026\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\044\uffcc\053" +
    "\uffcc\001\002\000\006\043\174\044\175\001\002\000\024" +
    "\004\uffd3\026\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\044\uffd3\053\uffd3\001\002\000\026\004\uffcd\026\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\044\uffcd\052" +
    "\121\053\uffcd\001\002\000\016\033\uffc3\043\uffc3\044\uffc3" +
    "\050\uffc3\052\uffc3\053\uffc6\001\002\000\004\053\172\001" +
    "\002\000\014\033\131\043\126\044\134\050\127\052\125" +
    "\001\002\000\004\053\uffc7\001\002\000\014\033\131\043" +
    "\126\044\134\050\127\052\125\001\002\000\040\004\uff4c" +
    "\005\166\026\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034" +
    "\uff4c\035\uff4c\036\uff4c\046\uff4c\047\uff4c\053\uff4c\067\uff4c" +
    "\070\uff4c\001\002\000\006\043\162\044\163\001\002\000" +
    "\036\004\uff4a\026\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a" +
    "\034\uff4a\035\uff4a\036\uff4a\046\uff4a\047\uff4a\053\uff4a\067" +
    "\uff4a\070\uff4a\001\002\000\010\043\150\044\153\050\151" +
    "\001\002\000\036\004\uff4e\026\uff4e\030\uff4e\031\uff4e\032" +
    "\uff4e\033\uff4e\034\uff4e\035\uff4e\036\uff4e\046\uff4e\047\uff4e" +
    "\053\uff4e\067\uff4e\070\uff4e\001\002\000\020\004\140\032" +
    "\137\033\141\034\135\035\142\036\136\053\uffc5\001\002" +
    "\000\040\004\uff4d\026\uff4d\030\uff4d\031\uff4d\032\uff4d\033" +
    "\uff4d\034\uff4d\035\uff4d\036\uff4d\046\uff4d\047\uff4d\052\121" +
    "\053\uff4d\067\uff4d\070\uff4d\001\002\000\014\033\131\043" +
    "\126\044\134\050\127\052\125\001\002\000\014\033\131" +
    "\043\126\044\134\050\127\052\125\001\002\000\014\033" +
    "\131\043\126\044\134\050\127\052\125\001\002\000\014" +
    "\033\uffc4\043\uffc4\044\uffc4\050\uffc4\052\uffc4\001\002\000" +
    "\014\033\131\043\126\044\134\050\127\052\125\001\002" +
    "\000\014\033\131\043\126\044\134\050\127\052\125\001" +
    "\002\000\036\004\uff50\026\uff50\030\uff50\031\uff50\032\uff50" +
    "\033\uff50\034\uff50\035\uff50\036\uff50\046\uff50\047\uff50\053" +
    "\uff50\067\uff50\070\uff50\001\002\000\036\004\uff52\026\uff52" +
    "\030\uff52\031\uff52\032\uff52\033\uff52\034\135\035\142\036" +
    "\136\046\uff52\047\uff52\053\uff52\067\uff52\070\uff52\001\002" +
    "\000\036\004\uff53\026\uff53\030\uff53\031\uff53\032\uff53\033" +
    "\uff53\034\135\035\142\036\136\046\uff53\047\uff53\053\uff53" +
    "\067\uff53\070\uff53\001\002\000\036\004\uff4f\026\uff4f\030" +
    "\uff4f\031\uff4f\032\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f" +
    "\046\uff4f\047\uff4f\053\uff4f\067\uff4f\070\uff4f\001\002\000" +
    "\036\004\uff51\026\uff51\030\uff51\031\uff51\032\uff51\033\uff51" +
    "\034\uff51\035\uff51\036\uff51\046\uff51\047\uff51\053\uff51\067" +
    "\uff51\070\uff51\001\002\000\040\004\uff43\005\160\026\uff43" +
    "\030\uff43\031\uff43\032\uff43\033\uff43\034\uff43\035\uff43\036" +
    "\uff43\046\uff43\047\uff43\053\uff43\067\uff43\070\uff43\001\002" +
    "\000\006\043\154\044\155\001\002\000\036\004\uff49\026" +
    "\uff49\030\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035\uff49" +
    "\036\uff49\046\uff49\047\uff49\053\uff49\067\uff49\070\uff49\001" +
    "\002\000\040\004\uff44\026\uff44\030\uff44\031\uff44\032\uff44" +
    "\033\uff44\034\uff44\035\uff44\036\uff44\046\uff44\047\uff44\052" +
    "\121\053\uff44\067\uff44\070\uff44\001\002\000\004\050\157" +
    "\001\002\000\004\050\156\001\002\000\036\004\uff46\026" +
    "\uff46\030\uff46\031\uff46\032\uff46\033\uff46\034\uff46\035\uff46" +
    "\036\uff46\046\uff46\047\uff46\053\uff46\067\uff46\070\uff46\001" +
    "\002\000\036\004\uff45\026\uff45\030\uff45\031\uff45\032\uff45" +
    "\033\uff45\034\uff45\035\uff45\036\uff45\046\uff45\047\uff45\053" +
    "\uff45\067\uff45\070\uff45\001\002\000\004\043\161\001\002" +
    "\000\036\004\uff42\026\uff42\030\uff42\031\uff42\032\uff42\033" +
    "\uff42\034\uff42\035\uff42\036\uff42\046\uff42\047\uff42\053\uff42" +
    "\067\uff42\070\uff42\001\002\000\004\050\165\001\002\000" +
    "\004\050\164\001\002\000\036\004\uff48\026\uff48\030\uff48" +
    "\031\uff48\032\uff48\033\uff48\034\uff48\035\uff48\036\uff48\046" +
    "\uff48\047\uff48\053\uff48\067\uff48\070\uff48\001\002\000\036" +
    "\004\uff47\026\uff47\030\uff47\031\uff47\032\uff47\033\uff47\034" +
    "\uff47\035\uff47\036\uff47\046\uff47\047\uff47\053\uff47\067\uff47" +
    "\070\uff47\001\002\000\004\043\167\001\002\000\036\004" +
    "\uff4b\026\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b" +
    "\035\uff4b\036\uff4b\046\uff4b\047\uff4b\053\uff4b\067\uff4b\070" +
    "\uff4b\001\002\000\016\032\137\033\141\034\135\035\142" +
    "\036\136\053\171\001\002\000\036\004\uff54\026\uff54\030" +
    "\uff54\031\uff54\032\uff54\033\uff54\034\uff54\035\uff54\036\uff54" +
    "\046\uff54\047\uff54\053\uff54\067\uff54\070\uff54\001\002\000" +
    "\004\026\173\001\002\000\040\004\uffca\026\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\044" +
    "\uffca\046\uffca\047\uffca\053\uffca\067\uffca\070\uffca\001\002" +
    "\000\004\050\177\001\002\000\004\050\176\001\002\000" +
    "\024\004\uffcf\026\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\044\uffcf\053\uffcf\001\002\000\024\004\uffce\026" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\044\uffce" +
    "\053\uffce\001\002\000\004\043\201\001\002\000\024\004" +
    "\uffcb\026\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\044\uffcb\053\uffcb\001\002\000\004\023\ufff8\001\002\000" +
    "\004\023\ufff7\001\002\000\004\023\ufff5\001\002\000\014" +
    "\033\ufff1\043\ufff1\044\ufff1\050\ufff1\052\ufff1\001\002\000" +
    "\014\033\066\043\067\044\063\050\072\052\071\001\002" +
    "\000\006\026\ufff0\044\ufff0\001\002\000\006\026\212\044" +
    "\213\001\002\000\062\003\uffef\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\023" +
    "\uffef\044\uffef\051\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\062\uffef\063\uffef\071\uffef\072\uffef\074" +
    "\uffef\001\002\000\004\075\020\001\002\000\004\031\214" +
    "\001\002\000\014\033\uffe7\043\uffe7\044\uffe7\050\uffe7\052" +
    "\uffe7\001\002\000\014\033\066\043\067\044\063\050\072" +
    "\052\071\001\002\000\006\026\uffe6\044\uffe6\001\002\000" +
    "\006\026\212\044\213\001\002\000\062\003\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\023\uffe5\044\uffe5\051\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\071" +
    "\uffe5\072\uffe5\074\uffe5\001\002\000\064\003\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\023\uffe4\044\uffe4\051\uffe4\054\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\071" +
    "\uffe4\072\uffe4\074\uffe4\075\042\001\002\000\004\075\020" +
    "\001\002\000\010\002\ufffe\020\ufffe\075\042\001\002\000" +
    "\004\044\uffae\001\002\000\004\044\uffaf\001\002\000\004" +
    "\044\uffb0\001\002\000\004\044\uffad\001\002\000\004\044" +
    "\u01de\001\002\000\004\052\232\001\002\000\012\006\uffbb" +
    "\007\uffbb\010\uffbb\053\uffb7\001\002\000\004\053\u01d6\001" +
    "\002\000\010\006\uffb1\007\uffb1\010\uffb1\001\002\000\010" +
    "\006\025\007\030\010\024\001\002\000\004\053\237\001" +
    "\002\000\004\022\uffba\001\002\000\004\022\241\001\002" +
    "\000\004\075\020\001\002\000\052\003\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\023\uffa0\044\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\071\uffa0\072\uffa0\074\uffa0\075\042\001\002\000\050" +
    "\003\267\006\025\007\030\010\024\012\274\014\263\015" +
    "\244\016\250\017\266\023\uffb9\044\265\057\257\060\252" +
    "\061\253\062\245\063\254\071\027\072\026\074\023\001" +
    "\002\000\004\052\uff6e\001\002\000\004\052\uff32\001\002" +
    "\000\004\023\u01c6\001\002\000\060\003\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\012\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\023\uffa4\044\uffa4\051\uffa4\054\uffa4\055\uffa4\056\uffa4\057" +
    "\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\071\uffa4\072\uffa4" +
    "\074\uffa4\001\002\000\004\022\uff6b\001\002\000\060\003" +
    "\uffa8\006\uffa8\007\uffa8\010\uffa8\012\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\023\uffa8\044\uffa8\051\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\071\uffa8\072\uffa8\074\uffa8\001\002\000\004\052\u01b5\001" +
    "\002\000\004\052\uff33\001\002\000\004\052\uff31\001\002" +
    "\000\060\003\uffa5\006\uffa5\007\uffa5\010\uffa5\012\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\023\uffa5\044\uffa5\051\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\063\uffa5\071\uffa5\072\uffa5\074\uffa5\001\002\000\060" +
    "\003\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\023\uffaa\044\uffaa\051\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063" +
    "\uffaa\071\uffaa\072\uffaa\074\uffaa\001\002\000\004\052\u01b0" +
    "\001\002\000\060\003\uffab\006\uffab\007\uffab\010\uffab\012" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\023\uffab\044\uffab" +
    "\051\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\063\uffab\071\uffab\072\uffab\074\uffab\001\002" +
    "\000\004\052\u01a6\001\002\000\060\003\uffac\006\uffac\007" +
    "\uffac\010\uffac\012\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\023\uffac\044\uffac\051\uffac\054\uffac\055\uffac\056\uffac\057" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\071\uffac\072\uffac" +
    "\074\uffac\001\002\000\004\052\uff90\001\002\000\060\003" +
    "\uffa7\006\uffa7\007\uffa7\010\uffa7\012\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\023\uffa7\044\uffa7\051\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\071\uffa7\072\uffa7\074\uffa7\001\002\000\006\031\u011f\052" +
    "\u011e\001\002\000\004\052\uff69\001\002\000\060\003\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\012\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\023\uff9f\044\uff9f\051\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\071" +
    "\uff9f\072\uff9f\074\uff9f\001\002\000\060\003\uffa3\006\uffa3" +
    "\007\uffa3\010\uffa3\012\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\023\uffa3\044\uffa3\051\uffa3\054\uffa3\055\uffa3\056\uffa3" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\071\uffa3\072" +
    "\uffa3\074\uffa3\001\002\000\060\003\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\012\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\023" +
    "\uffa2\044\uffa2\051\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\071\uffa2\072\uffa2\074" +
    "\uffa2\001\002\000\060\003\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\012\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\023\uffa1\044" +
    "\uffa1\051\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\061\uffa1\062\uffa1\063\uffa1\071\uffa1\072\uffa1\074\uffa1\001" +
    "\002\000\060\003\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\023\uffa9\044\uffa9\051" +
    "\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\071\uffa9\072\uffa9\074\uffa9\001\002\000" +
    "\004\052\276\001\002\000\060\003\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\012\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\023" +
    "\uffa6\044\uffa6\051\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\061\uffa6\062\uffa6\063\uffa6\071\uffa6\072\uffa6\074" +
    "\uffa6\001\002\000\016\030\uff9b\033\uff9b\043\uff9b\044\uff9b" +
    "\050\uff9b\052\uff9b\001\002\000\016\030\302\033\131\043" +
    "\126\044\134\050\127\052\125\001\002\000\012\026\uff58" +
    "\053\uff58\067\uff58\070\uff58\001\002\000\024\030\363\031" +
    "\365\032\137\033\141\034\135\035\142\036\136\046\364" +
    "\047\362\001\002\000\014\033\131\043\126\044\134\050" +
    "\127\052\356\001\002\000\010\053\uff9a\067\304\070\305" +
    "\001\002\000\016\030\302\033\131\043\126\044\134\050" +
    "\127\052\125\001\002\000\016\030\uff5a\033\uff5a\043\uff5a" +
    "\044\uff5a\050\uff5a\052\uff5a\001\002\000\004\053\307\001" +
    "\002\000\004\022\310\001\002\000\004\075\020\001\002" +
    "\000\054\003\uffa0\006\uffa0\007\uffa0\010\uffa0\012\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\023\uffa0\044\uffa0\056\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\071\uffa0\072" +
    "\uffa0\074\uffa0\075\042\001\002\000\052\003\267\006\025" +
    "\007\030\010\024\012\274\014\263\015\244\016\250\017" +
    "\266\023\uff9c\044\265\056\314\057\257\060\252\061\253" +
    "\062\245\063\254\071\027\072\026\074\023\001\002\000" +
    "\004\023\321\001\002\000\014\033\uff9e\043\uff9e\044\uff9e" +
    "\050\uff9e\052\uff9e\001\002\000\014\033\066\043\067\044" +
    "\063\050\072\052\071\001\002\000\016\026\317\032\103" +
    "\033\104\034\101\035\105\036\102\001\002\000\004\075" +
    "\020\001\002\000\012\023\uff9d\054\uff9d\055\uff9d\075\042" +
    "\001\002\000\006\013\uff99\075\uff99\001\002\000\006\013" +
    "\324\075\020\001\002\000\060\003\uff98\006\uff98\007\uff98" +
    "\010\uff98\012\uff98\014\uff98\015\uff98\016\uff98\017\uff98\023" +
    "\uff98\044\uff98\051\uff98\054\uff98\055\uff98\056\uff98\057\uff98" +
    "\060\uff98\061\uff98\062\uff98\063\uff98\071\uff98\072\uff98\074" +
    "\uff98\001\002\000\006\012\326\022\uff93\001\002\000\062" +
    "\003\uff91\006\uff91\007\uff91\010\uff91\012\uff91\014\uff91\015" +
    "\uff91\016\uff91\017\uff91\023\uff91\044\uff91\051\uff91\054\uff91" +
    "\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063" +
    "\uff91\071\uff91\072\uff91\074\uff91\075\042\001\002\000\004" +
    "\052\336\001\002\000\004\022\330\001\002\000\004\075" +
    "\020\001\002\000\054\003\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\023\uffa0\044" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\071\uffa0\072\uffa0\074\uffa0\075\042\001\002\000\052\003" +
    "\267\006\025\007\030\010\024\012\274\014\263\015\244" +
    "\016\250\017\266\023\uff9c\044\265\056\314\057\257\060" +
    "\252\061\253\062\245\063\254\071\027\072\026\074\023" +
    "\001\002\000\004\023\334\001\002\000\004\075\020\001" +
    "\002\000\062\003\uff92\006\uff92\007\uff92\010\uff92\012\uff92" +
    "\014\uff92\015\uff92\016\uff92\017\uff92\023\uff92\044\uff92\051" +
    "\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92" +
    "\062\uff92\063\uff92\071\uff92\072\uff92\074\uff92\075\042\001" +
    "\002\000\016\030\uff97\033\uff97\043\uff97\044\uff97\050\uff97" +
    "\052\uff97\001\002\000\016\030\302\033\131\043\126\044" +
    "\134\050\127\052\125\001\002\000\010\053\uff96\067\304" +
    "\070\305\001\002\000\004\053\342\001\002\000\004\022" +
    "\343\001\002\000\004\075\020\001\002\000\054\003\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\012\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\023\uffa0\044\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\071\uffa0\072\uffa0\074\uffa0\075" +
    "\042\001\002\000\052\003\267\006\025\007\030\010\024" +
    "\012\274\014\263\015\244\016\250\017\266\023\uff9c\044" +
    "\265\056\314\057\257\060\252\061\253\062\245\063\254" +
    "\071\027\072\026\074\023\001\002\000\004\023\347\001" +
    "\002\000\006\013\uff95\075\uff95\001\002\000\006\013\324" +
    "\075\020\001\002\000\060\003\uff94\006\uff94\007\uff94\010" +
    "\uff94\012\uff94\014\uff94\015\uff94\016\uff94\017\uff94\023\uff94" +
    "\044\uff94\051\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060" +
    "\uff94\061\uff94\062\uff94\063\uff94\071\uff94\072\uff94\074\uff94" +
    "\001\002\000\016\030\302\033\131\043\126\044\134\050" +
    "\127\052\125\001\002\000\012\026\uff59\053\uff59\067\304" +
    "\070\uff59\001\002\000\012\026\uff5b\053\uff5b\067\uff5b\070" +
    "\uff5b\001\002\000\012\026\uff56\053\uff56\067\uff56\070\uff56" +
    "\001\002\000\014\033\131\043\126\044\134\050\127\052" +
    "\125\001\002\000\004\053\373\001\002\000\026\030\363" +
    "\031\365\032\137\033\141\034\135\035\142\036\136\046" +
    "\364\047\362\053\171\001\002\000\014\033\131\043\126" +
    "\044\134\050\127\052\125\001\002\000\016\031\371\033" +
    "\uff3f\043\uff3f\044\uff3f\050\uff3f\052\uff3f\001\002\000\004" +
    "\031\370\001\002\000\016\031\367\033\uff41\043\uff41\044" +
    "\uff41\050\uff41\052\uff41\001\002\000\004\031\366\001\002" +
    "\000\014\033\uff3d\043\uff3d\044\uff3d\050\uff3d\052\uff3d\001" +
    "\002\000\014\033\uff40\043\uff40\044\uff40\050\uff40\052\uff40" +
    "\001\002\000\014\033\uff3c\043\uff3c\044\uff3c\050\uff3c\052" +
    "\uff3c\001\002\000\014\033\uff3e\043\uff3e\044\uff3e\050\uff3e" +
    "\052\uff3e\001\002\000\024\026\uff55\032\137\033\141\034" +
    "\135\035\142\036\136\053\uff55\067\uff55\070\uff55\001\002" +
    "\000\012\026\uff57\053\uff57\067\uff57\070\uff57\001\002\000" +
    "\004\052\375\001\002\000\010\043\376\044\u0101\050\377" +
    "\001\002\000\006\027\uff5c\053\uff5c\001\002\000\004\044" +
    "\u011c\001\002\000\004\053\uff68\001\002\000\006\027\uff5e" +
    "\053\uff5e\001\002\000\004\053\u0103\001\002\000\004\022" +
    "\u0104\001\002\000\004\075\020\001\002\000\012\023\uff61" +
    "\054\u0108\055\u0106\075\042\001\002\000\004\027\u0117\001" +
    "\002\000\004\023\u0115\001\002\000\010\043\376\044\u0101" +
    "\050\377\001\002\000\004\027\u010a\001\002\000\004\075" +
    "\020\001\002\000\062\003\uff66\006\uff66\007\uff66\010\uff66" +
    "\012\uff66\014\uff66\015\uff66\016\uff66\017\uff66\023\uff66\044" +
    "\uff66\051\uff66\054\uff66\055\uff66\056\uff66\057\uff66\060\uff66" +
    "\061\uff66\062\uff66\063\uff66\071\uff66\072\uff66\074\uff66\075" +
    "\042\001\002\000\060\003\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\023\uffa0\044" +
    "\uffa0\051\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\071\uffa0\072\uffa0\074\uffa0\001" +
    "\002\000\060\003\267\006\025\007\030\010\024\012\274" +
    "\014\263\015\244\016\250\017\266\023\uff9c\044\265\051" +
    "\u0110\054\uff9c\055\uff9c\056\314\057\257\060\252\061\253" +
    "\062\245\063\254\071\027\072\026\074\023\001\002\000" +
    "\010\023\uff65\054\uff65\055\uff65\001\002\000\010\023\uff5f" +
    "\054\uff5f\055\uff5f\001\002\000\004\026\u0111\001\002\000" +
    "\004\075\020\001\002\000\012\023\uff60\054\uff60\055\uff60" +
    "\075\042\001\002\000\010\023\uff61\054\u0108\055\u0106\001" +
    "\002\000\004\023\uff64\001\002\000\004\075\020\001\002" +
    "\000\062\003\uff67\006\uff67\007\uff67\010\uff67\012\uff67\014" +
    "\uff67\015\uff67\016\uff67\017\uff67\023\uff67\044\uff67\051\uff67" +
    "\054\uff67\055\uff67\056\uff67\057\uff67\060\uff67\061\uff67\062" +
    "\uff67\063\uff67\071\uff67\072\uff67\074\uff67\075\042\001\002" +
    "\000\004\075\020\001\002\000\056\003\uff63\006\uff63\007" +
    "\uff63\010\uff63\012\uff63\014\uff63\015\uff63\016\uff63\017\uff63" +
    "\023\uff63\044\uff63\051\uff63\056\uff63\057\uff63\060\uff63\061" +
    "\uff63\062\uff63\063\uff63\071\uff63\072\uff63\074\uff63\075\042" +
    "\001\002\000\054\003\uffa0\006\uffa0\007\uffa0\010\uffa0\012" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\023\uffa0\044\uffa0" +
    "\051\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\071\uffa0\072\uffa0\074\uffa0\001\002\000\054\003\267" +
    "\006\025\007\030\010\024\012\274\014\263\015\244\016" +
    "\250\017\266\023\uff9c\044\265\051\u0110\056\314\057\257" +
    "\060\252\061\253\062\245\063\254\071\027\072\026\074" +
    "\023\001\002\000\004\023\uff62\001\002\000\004\050\u011d" +
    "\001\002\000\006\027\uff5d\053\uff5d\001\002\000\016\033" +
    "\uffc3\043\uffc3\044\uffc3\050\uffc3\052\uffc3\053\uffc6\001\002" +
    "\000\022\033\ufff1\043\ufff1\044\ufff1\050\ufff1\052\ufff1\061" +
    "\253\062\245\063\254\001\002\000\004\052\u0121\001\002" +
    "\000\014\033\u0126\041\u0127\043\u0124\044\u0128\053\u0122\001" +
    "\002\000\004\026\u0168\001\002\000\004\053\u0164\001\002" +
    "\000\010\005\u0162\032\uff2b\053\uff2b\001\002\000\006\032" +
    "\u015b\053\uff25\001\002\000\006\043\u015d\044\u015e\001\002" +
    "\000\142\004\ufeee\005\ufeee\006\ufeee\007\ufeee\010\ufeee\011" +
    "\ufeee\012\ufeee\013\ufeee\014\ufeee\015\ufeee\016\ufeee\017\ufeee" +
    "\020\ufeee\021\ufeee\022\ufeee\023\ufeee\024\ufeee\025\ufeee\026" +
    "\ufeee\027\ufeee\030\ufeee\031\ufeee\032\ufeee\033\ufeee\034\ufeee" +
    "\035\ufeee\036\ufeee\037\ufeee\040\ufeee\041\ufeee\042\ufeee\043" +
    "\ufeee\044\ufeee\045\ufeee\046\ufeee\047\ufeee\050\ufeee\051\ufeee" +
    "\052\ufeee\053\ufeee\054\ufeee\055\ufeee\056\ufeee\057\ufeee\060" +
    "\ufeee\065\ufeee\066\ufeee\074\ufeee\001\002\000\006\032\uff2c" +
    "\053\uff2c\001\002\000\142\004\u0132\005\u0146\006\u014f\007" +
    "\u0138\010\u0149\011\u0152\012\u0139\013\u0147\014\u0158\015\u012f" +
    "\016\u0156\017\u0134\020\u0141\021\u013a\022\u0131\023\u0130\024" +
    "\u0157\025\u0155\026\u014b\027\u012d\030\u0154\031\u0133\032\u0140" +
    "\033\u013c\034\u0144\035\u0151\036\u013f\037\u012c\040\u0148\041" +
    "\u012a\042\u0143\043\u013b\044\u014a\045\u0153\046\u0142\047\u013e" +
    "\050\u0150\051\u014e\052\u014d\053\u014c\054\u012b\055\u0137\056" +
    "\u0159\057\u0145\060\u012e\065\u0135\066\u013d\074\u0136\001\002" +
    "\000\006\032\u015b\053\uff25\001\002\000\144\004\uff13\005" +
    "\uff13\006\uff13\007\uff13\010\uff13\011\uff13\012\uff13\013\uff13" +
    "\014\uff13\015\uff13\016\uff13\017\uff13\020\uff13\021\uff13\022" +
    "\uff13\023\uff13\024\uff13\025\uff13\026\uff13\027\uff13\030\uff13" +
    "\031\uff13\032\uff13\033\uff13\034\uff13\035\uff13\036\uff13\037" +
    "\uff13\040\uff13\041\uff13\042\uff13\043\uff13\044\uff13\045\uff13" +
    "\046\uff13\047\uff13\050\uff13\051\uff13\052\uff13\053\uff13\054" +
    "\uff13\055\uff13\056\uff13\057\uff13\060\uff13\065\uff13\066\uff13" +
    "\074\uff13\075\uff13\001\002\000\144\004\ufef7\005\ufef7\006" +
    "\ufef7\007\ufef7\010\ufef7\011\ufef7\012\ufef7\013\ufef7\014\ufef7" +
    "\015\ufef7\016\ufef7\017\ufef7\020\ufef7\021\ufef7\022\ufef7\023" +
    "\ufef7\024\ufef7\025\ufef7\026\ufef7\027\ufef7\030\ufef7\031\ufef7" +
    "\032\ufef7\033\ufef7\034\ufef7\035\ufef7\036\ufef7\037\ufef7\040" +
    "\ufef7\041\ufef7\042\ufef7\043\ufef7\044\ufef7\045\ufef7\046\ufef7" +
    "\047\ufef7\050\ufef7\051\ufef7\052\ufef7\053\ufef7\054\ufef7\055" +
    "\ufef7\056\ufef7\057\ufef7\060\ufef7\065\ufef7\066\ufef7\074\ufef7" +
    "\075\ufef7\001\002\000\144\004\uff01\005\uff01\006\uff01\007" +
    "\uff01\010\uff01\011\uff01\012\uff01\013\uff01\014\uff01\015\uff01" +
    "\016\uff01\017\uff01\020\uff01\021\uff01\022\uff01\023\uff01\024" +
    "\uff01\025\uff01\026\uff01\027\uff01\030\uff01\031\uff01\032\uff01" +
    "\033\uff01\034\uff01\035\uff01\036\uff01\037\uff01\040\uff01\041" +
    "\uff01\042\uff01\043\uff01\044\uff01\045\uff01\046\uff01\047\uff01" +
    "\050\uff01\051\uff01\052\uff01\053\uff01\054\uff01\055\uff01\056" +
    "\uff01\057\uff01\060\uff01\065\uff01\066\uff01\074\uff01\075\uff01" +
    "\001\002\000\144\004\uff0c\005\uff0c\006\uff0c\007\uff0c\010" +
    "\uff0c\011\uff0c\012\uff0c\013\uff0c\014\uff0c\015\uff0c\016\uff0c" +
    "\017\uff0c\020\uff0c\021\uff0c\022\uff0c\023\uff0c\024\uff0c\025" +
    "\uff0c\026\uff0c\027\uff0c\030\uff0c\031\uff0c\032\uff0c\033\uff0c" +
    "\034\uff0c\035\uff0c\036\uff0c\037\uff0c\040\uff0c\041\uff0c\042" +
    "\uff0c\043\uff0c\044\uff0c\045\uff0c\046\uff0c\047\uff0c\050\uff0c" +
    "\051\uff0c\052\uff0c\053\uff0c\054\uff0c\055\uff0c\056\uff0c\057" +
    "\uff0c\060\uff0c\065\uff0c\066\uff0c\074\uff0c\075\uff0c\001\002" +
    "\000\144\004\uff12\005\uff12\006\uff12\007\uff12\010\uff12\011" +
    "\uff12\012\uff12\013\uff12\014\uff12\015\uff12\016\uff12\017\uff12" +
    "\020\uff12\021\uff12\022\uff12\023\uff12\024\uff12\025\uff12\026" +
    "\uff12\027\uff12\030\uff12\031\uff12\032\uff12\033\uff12\034\uff12" +
    "\035\uff12\036\uff12\037\uff12\040\uff12\041\uff12\042\uff12\043" +
    "\uff12\044\uff12\045\uff12\046\uff12\047\uff12\050\uff12\051\uff12" +
    "\052\uff12\053\uff12\054\uff12\055\uff12\056\uff12\057\uff12\060" +
    "\uff12\065\uff12\066\uff12\074\uff12\075\uff12\001\002\000\144" +
    "\004\uff08\005\uff08\006\uff08\007\uff08\010\uff08\011\uff08\012" +
    "\uff08\013\uff08\014\uff08\015\uff08\016\uff08\017\uff08\020\uff08" +
    "\021\uff08\022\uff08\023\uff08\024\uff08\025\uff08\026\uff08\027" +
    "\uff08\030\uff08\031\uff08\032\uff08\033\uff08\034\uff08\035\uff08" +
    "\036\uff08\037\uff08\040\uff08\041\uff08\042\uff08\043\uff08\044" +
    "\uff08\045\uff08\046\uff08\047\uff08\050\uff08\051\uff08\052\uff08" +
    "\053\uff08\054\uff08\055\uff08\056\uff08\057\uff08\060\uff08\065" +
    "\uff08\066\uff08\074\uff08\075\uff08\001\002\000\144\004\uff09" +
    "\005\uff09\006\uff09\007\uff09\010\uff09\011\uff09\012\uff09\013" +
    "\uff09\014\uff09\015\uff09\016\uff09\017\uff09\020\uff09\021\uff09" +
    "\022\uff09\023\uff09\024\uff09\025\uff09\026\uff09\027\uff09\030" +
    "\uff09\031\uff09\032\uff09\033\uff09\034\uff09\035\uff09\036\uff09" +
    "\037\uff09\040\uff09\041\uff09\042\uff09\043\uff09\044\uff09\045" +
    "\uff09\046\uff09\047\uff09\050\uff09\051\uff09\052\uff09\053\uff09" +
    "\054\uff09\055\uff09\056\uff09\057\uff09\060\uff09\065\uff09\066" +
    "\uff09\074\uff09\075\uff09\001\002\000\144\004\uff1d\005\uff1d" +
    "\006\uff1d\007\uff1d\010\uff1d\011\uff1d\012\uff1d\013\uff1d\014" +
    "\uff1d\015\uff1d\016\uff1d\017\uff1d\020\uff1d\021\uff1d\022\uff1d" +
    "\023\uff1d\024\uff1d\025\uff1d\026\uff1d\027\uff1d\030\uff1d\031" +
    "\uff1d\032\uff1d\033\uff1d\034\uff1d\035\uff1d\036\uff1d\037\uff1d" +
    "\040\uff1d\041\uff1d\042\uff1d\043\uff1d\044\uff1d\045\uff1d\046" +
    "\uff1d\047\uff1d\050\uff1d\051\uff1d\052\uff1d\053\uff1d\054\uff1d" +
    "\055\uff1d\056\uff1d\057\uff1d\060\uff1d\065\uff1d\066\uff1d\074" +
    "\uff1d\075\uff1d\001\002\000\144\004\ufeff\005\ufeff\006\ufeff" +
    "\007\ufeff\010\ufeff\011\ufeff\012\ufeff\013\ufeff\014\ufeff\015" +
    "\ufeff\016\ufeff\017\ufeff\020\ufeff\021\ufeff\022\ufeff\023\ufeff" +
    "\024\ufeff\025\ufeff\026\ufeff\027\ufeff\030\ufeff\031\ufeff\032" +
    "\ufeff\033\ufeff\034\ufeff\035\ufeff\036\ufeff\037\ufeff\040\ufeff" +
    "\041\ufeff\042\ufeff\043\ufeff\044\ufeff\045\ufeff\046\ufeff\047" +
    "\ufeff\050\ufeff\051\ufeff\052\ufeff\053\ufeff\054\ufeff\055\ufeff" +
    "\056\ufeff\057\ufeff\060\ufeff\065\ufeff\066\ufeff\074\ufeff\075" +
    "\ufeff\001\002\000\144\004\uff14\005\uff14\006\uff14\007\uff14" +
    "\010\uff14\011\uff14\012\uff14\013\uff14\014\uff14\015\uff14\016" +
    "\uff14\017\uff14\020\uff14\021\uff14\022\uff14\023\uff14\024\uff14" +
    "\025\uff14\026\uff14\027\uff14\030\uff14\031\uff14\032\uff14\033" +
    "\uff14\034\uff14\035\uff14\036\uff14\037\uff14\040\uff14\041\uff14" +
    "\042\uff14\043\uff14\044\uff14\045\uff14\046\uff14\047\uff14\050" +
    "\uff14\051\uff14\052\uff14\053\uff14\054\uff14\055\uff14\056\uff14" +
    "\057\uff14\060\uff14\065\uff14\066\uff14\074\uff14\075\uff14\001" +
    "\002\000\144\004\ufef1\005\ufef1\006\ufef1\007\ufef1\010\ufef1" +
    "\011\ufef1\012\ufef1\013\ufef1\014\ufef1\015\ufef1\016\ufef1\017" +
    "\ufef1\020\ufef1\021\ufef1\022\ufef1\023\ufef1\024\ufef1\025\ufef1" +
    "\026\ufef1\027\ufef1\030\ufef1\031\ufef1\032\ufef1\033\ufef1\034" +
    "\ufef1\035\ufef1\036\ufef1\037\ufef1\040\ufef1\041\ufef1\042\ufef1" +
    "\043\ufef1\044\ufef1\045\ufef1\046\ufef1\047\ufef1\050\ufef1\051" +
    "\ufef1\052\ufef1\053\ufef1\054\ufef1\055\ufef1\056\ufef1\057\ufef1" +
    "\060\ufef1\065\ufef1\066\ufef1\074\ufef1\075\ufef1\001\002\000" +
    "\144\004\uff04\005\uff04\006\uff04\007\uff04\010\uff04\011\uff04" +
    "\012\uff04\013\uff04\014\uff04\015\uff04\016\uff04\017\uff04\020" +
    "\uff04\021\uff04\022\uff04\023\uff04\024\uff04\025\uff04\026\uff04" +
    "\027\uff04\030\uff04\031\uff04\032\uff04\033\uff04\034\uff04\035" +
    "\uff04\036\uff04\037\uff04\040\uff04\041\uff04\042\uff04\043\uff04" +
    "\044\uff04\045\uff04\046\uff04\047\uff04\050\uff04\051\uff04\052" +
    "\uff04\053\uff04\054\uff04\055\uff04\056\uff04\057\uff04\060\uff04" +
    "\065\uff04\066\uff04\074\uff04\075\uff04\001\002\000\144\004" +
    "\uff10\005\uff10\006\uff10\007\uff10\010\uff10\011\uff10\012\uff10" +
    "\013\uff10\014\uff10\015\uff10\016\uff10\017\uff10\020\uff10\021" +
    "\uff10\022\uff10\023\uff10\024\uff10\025\uff10\026\uff10\027\uff10" +
    "\030\uff10\031\uff10\032\uff10\033\uff10\034\uff10\035\uff10\036" +
    "\uff10\037\uff10\040\uff10\041\uff10\042\uff10\043\uff10\044\uff10" +
    "\045\uff10\046\uff10\047\uff10\050\uff10\051\uff10\052\uff10\053" +
    "\uff10\054\uff10\055\uff10\056\uff10\057\uff10\060\uff10\065\uff10" +
    "\066\uff10\074\uff10\075\uff10\001\002\000\144\004\uff1a\005" +
    "\uff1a\006\uff1a\007\uff1a\010\uff1a\011\uff1a\012\uff1a\013\uff1a" +
    "\014\uff1a\015\uff1a\016\uff1a\017\uff1a\020\uff1a\021\uff1a\022" +
    "\uff1a\023\uff1a\024\uff1a\025\uff1a\026\uff1a\027\uff1a\030\uff1a" +
    "\031\uff1a\032\uff1a\033\uff1a\034\uff1a\035\uff1a\036\uff1a\037" +
    "\uff1a\040\uff1a\041\uff1a\042\uff1a\043\uff1a\044\uff1a\045\uff1a" +
    "\046\uff1a\047\uff1a\050\uff1a\051\uff1a\052\uff1a\053\uff1a\054" +
    "\uff1a\055\uff1a\056\uff1a\057\uff1a\060\uff1a\065\uff1a\066\uff1a" +
    "\074\uff1a\075\uff1a\001\002\000\144\004\uff17\005\uff17\006" +
    "\uff17\007\uff17\010\uff17\011\uff17\012\uff17\013\uff17\014\uff17" +
    "\015\uff17\016\uff17\017\uff17\020\uff17\021\uff17\022\uff17\023" +
    "\uff17\024\uff17\025\uff17\026\uff17\027\uff17\030\uff17\031\uff17" +
    "\032\uff17\033\uff17\034\uff17\035\uff17\036\uff17\037\uff17\040" +
    "\uff17\041\uff17\042\uff17\043\uff17\044\uff17\045\uff17\046\uff17" +
    "\047\uff17\050\uff17\051\uff17\052\uff17\053\uff17\054\uff17\055" +
    "\uff17\056\uff17\057\uff17\060\uff17\065\uff17\066\uff17\074\uff17" +
    "\075\uff17\001\002\000\144\004\uff0a\005\uff0a\006\uff0a\007" +
    "\uff0a\010\uff0a\011\uff0a\012\uff0a\013\uff0a\014\uff0a\015\uff0a" +
    "\016\uff0a\017\uff0a\020\uff0a\021\uff0a\022\uff0a\023\uff0a\024" +
    "\uff0a\025\uff0a\026\uff0a\027\uff0a\030\uff0a\031\uff0a\032\uff0a" +
    "\033\uff0a\034\uff0a\035\uff0a\036\uff0a\037\uff0a\040\uff0a\041" +
    "\uff0a\042\uff0a\043\uff0a\044\uff0a\045\uff0a\046\uff0a\047\uff0a" +
    "\050\uff0a\051\uff0a\052\uff0a\053\uff0a\054\uff0a\055\uff0a\056" +
    "\uff0a\057\uff0a\060\uff0a\065\uff0a\066\uff0a\074\uff0a\075\uff0a" +
    "\001\002\000\144\004\ufef3\005\ufef3\006\ufef3\007\ufef3\010" +
    "\ufef3\011\ufef3\012\ufef3\013\ufef3\014\ufef3\015\ufef3\016\ufef3" +
    "\017\ufef3\020\ufef3\021\ufef3\022\ufef3\023\ufef3\024\ufef3\025" +
    "\ufef3\026\ufef3\027\ufef3\030\ufef3\031\ufef3\032\ufef3\033\ufef3" +
    "\034\ufef3\035\ufef3\036\ufef3\037\ufef3\040\ufef3\041\ufef3\042" +
    "\ufef3\043\ufef3\044\ufef3\045\ufef3\046\ufef3\047\ufef3\050\ufef3" +
    "\051\ufef3\052\ufef3\053\ufef3\054\ufef3\055\ufef3\056\ufef3\057" +
    "\ufef3\060\ufef3\065\ufef3\066\ufef3\074\ufef3\075\ufef3\001\002" +
    "\000\144\004\ufefd\005\ufefd\006\ufefd\007\ufefd\010\ufefd\011" +
    "\ufefd\012\ufefd\013\ufefd\014\ufefd\015\ufefd\016\ufefd\017\ufefd" +
    "\020\ufefd\021\ufefd\022\ufefd\023\ufefd\024\ufefd\025\ufefd\026" +
    "\ufefd\027\ufefd\030\ufefd\031\ufefd\032\ufefd\033\ufefd\034\ufefd" +
    "\035\ufefd\036\ufefd\037\ufefd\040\ufefd\041\ufefd\042\ufefd\043" +
    "\ufefd\044\ufefd\045\ufefd\046\ufefd\047\ufefd\050\ufefd\051\ufefd" +
    "\052\ufefd\053\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060" +
    "\ufefd\065\ufefd\066\ufefd\074\ufefd\075\ufefd\001\002\000\144" +
    "\004\ufef0\005\ufef0\006\ufef0\007\ufef0\010\ufef0\011\ufef0\012" +
    "\ufef0\013\ufef0\014\ufef0\015\ufef0\016\ufef0\017\ufef0\020\ufef0" +
    "\021\ufef0\022\ufef0\023\ufef0\024\ufef0\025\ufef0\026\ufef0\027" +
    "\ufef0\030\ufef0\031\ufef0\032\ufef0\033\ufef0\034\ufef0\035\ufef0" +
    "\036\ufef0\037\ufef0\040\ufef0\041\ufef0\042\ufef0\043\ufef0\044" +
    "\ufef0\045\ufef0\046\ufef0\047\ufef0\050\ufef0\051\ufef0\052\ufef0" +
    "\053\ufef0\054\ufef0\055\ufef0\056\ufef0\057\ufef0\060\ufef0\065" +
    "\ufef0\066\ufef0\074\ufef0\075\ufef0\001\002\000\144\004\ufef9" +
    "\005\ufef9\006\ufef9\007\ufef9\010\ufef9\011\ufef9\012\ufef9\013" +
    "\ufef9\014\ufef9\015\ufef9\016\ufef9\017\ufef9\020\ufef9\021\ufef9" +
    "\022\ufef9\023\ufef9\024\ufef9\025\ufef9\026\ufef9\027\ufef9\030" +
    "\ufef9\031\ufef9\032\ufef9\033\ufef9\034\ufef9\035\ufef9\036\ufef9" +
    "\037\ufef9\040\ufef9\041\ufef9\042\ufef9\043\ufef9\044\ufef9\045" +
    "\ufef9\046\ufef9\047\ufef9\050\ufef9\051\ufef9\052\ufef9\053\ufef9" +
    "\054\ufef9\055\ufef9\056\ufef9\057\ufef9\060\ufef9\065\ufef9\066" +
    "\ufef9\074\ufef9\075\ufef9\001\002\000\144\004\ufefa\005\ufefa" +
    "\006\ufefa\007\ufefa\010\ufefa\011\ufefa\012\ufefa\013\ufefa\014" +
    "\ufefa\015\ufefa\016\ufefa\017\ufefa\020\ufefa\021\ufefa\022\ufefa" +
    "\023\ufefa\024\ufefa\025\ufefa\026\ufefa\027\ufefa\030\ufefa\031" +
    "\ufefa\032\ufefa\033\ufefa\034\ufefa\035\ufefa\036\ufefa\037\ufefa" +
    "\040\ufefa\041\ufefa\042\ufefa\043\ufefa\044\ufefa\045\ufefa\046" +
    "\ufefa\047\ufefa\050\ufefa\051\ufefa\052\ufefa\053\ufefa\054\ufefa" +
    "\055\ufefa\056\ufefa\057\ufefa\060\ufefa\065\ufefa\066\ufefa\074" +
    "\ufefa\075\ufefa\001\002\000\144\004\ufefe\005\ufefe\006\ufefe" +
    "\007\ufefe\010\ufefe\011\ufefe\012\ufefe\013\ufefe\014\ufefe\015" +
    "\ufefe\016\ufefe\017\ufefe\020\ufefe\021\ufefe\022\ufefe\023\ufefe" +
    "\024\ufefe\025\ufefe\026\ufefe\027\ufefe\030\ufefe\031\ufefe\032" +
    "\ufefe\033\ufefe\034\ufefe\035\ufefe\036\ufefe\037\ufefe\040\ufefe" +
    "\041\ufefe\042\ufefe\043\ufefe\044\ufefe\045\ufefe\046\ufefe\047" +
    "\ufefe\050\ufefe\051\ufefe\052\ufefe\053\ufefe\054\ufefe\055\ufefe" +
    "\056\ufefe\057\ufefe\060\ufefe\065\ufefe\066\ufefe\074\ufefe\075" +
    "\ufefe\001\002\000\144\004\uff0b\005\uff0b\006\uff0b\007\uff0b" +
    "\010\uff0b\011\uff0b\012\uff0b\013\uff0b\014\uff0b\015\uff0b\016" +
    "\uff0b\017\uff0b\020\uff0b\021\uff0b\022\uff0b\023\uff0b\024\uff0b" +
    "\025\uff0b\026\uff0b\027\uff0b\030\uff0b\031\uff0b\032\uff0b\033" +
    "\uff0b\034\uff0b\035\uff0b\036\uff0b\037\uff0b\040\uff0b\041\uff0b" +
    "\042\uff0b\043\uff0b\044\uff0b\045\uff0b\046\uff0b\047\uff0b\050" +
    "\uff0b\051\uff0b\052\uff0b\053\uff0b\054\uff0b\055\uff0b\056\uff0b" +
    "\057\uff0b\060\uff0b\065\uff0b\066\uff0b\074\uff0b\075\uff0b\001" +
    "\002\000\144\004\ufef8\005\ufef8\006\ufef8\007\ufef8\010\ufef8" +
    "\011\ufef8\012\ufef8\013\ufef8\014\ufef8\015\ufef8\016\ufef8\017" +
    "\ufef8\020\ufef8\021\ufef8\022\ufef8\023\ufef8\024\ufef8\025\ufef8" +
    "\026\ufef8\027\ufef8\030\ufef8\031\ufef8\032\ufef8\033\ufef8\034" +
    "\ufef8\035\ufef8\036\ufef8\037\ufef8\040\ufef8\041\ufef8\042\ufef8" +
    "\043\ufef8\044\ufef8\045\ufef8\046\ufef8\047\ufef8\050\ufef8\051" +
    "\ufef8\052\ufef8\053\ufef8\054\ufef8\055\ufef8\056\ufef8\057\ufef8" +
    "\060\ufef8\065\ufef8\066\ufef8\074\ufef8\075\ufef8\001\002\000" +
    "\144\004\ufef4\005\ufef4\006\ufef4\007\ufef4\010\ufef4\011\ufef4" +
    "\012\ufef4\013\ufef4\014\ufef4\015\ufef4\016\ufef4\017\ufef4\020" +
    "\ufef4\021\ufef4\022\ufef4\023\ufef4\024\ufef4\025\ufef4\026\ufef4" +
    "\027\ufef4\030\ufef4\031\ufef4\032\ufef4\033\ufef4\034\ufef4\035" +
    "\ufef4\036\ufef4\037\ufef4\040\ufef4\041\ufef4\042\ufef4\043\ufef4" +
    "\044\ufef4\045\ufef4\046\ufef4\047\ufef4\050\ufef4\051\ufef4\052" +
    "\ufef4\053\ufef4\054\ufef4\055\ufef4\056\ufef4\057\ufef4\060\ufef4" +
    "\065\ufef4\066\ufef4\074\ufef4\075\ufef4\001\002\000\144\004" +
    "\ufefc\005\ufefc\006\ufefc\007\ufefc\010\ufefc\011\ufefc\012\ufefc" +
    "\013\ufefc\014\ufefc\015\ufefc\016\ufefc\017\ufefc\020\ufefc\021" +
    "\ufefc\022\ufefc\023\ufefc\024\ufefc\025\ufefc\026\ufefc\027\ufefc" +
    "\030\ufefc\031\ufefc\032\ufefc\033\ufefc\034\ufefc\035\ufefc\036" +
    "\ufefc\037\ufefc\040\ufefc\041\ufefc\042\ufefc\043\ufefc\044\ufefc" +
    "\045\ufefc\046\ufefc\047\ufefc\050\ufefc\051\ufefc\052\ufefc\053" +
    "\ufefc\054\ufefc\055\ufefc\056\ufefc\057\ufefc\060\ufefc\065\ufefc" +
    "\066\ufefc\074\ufefc\075\ufefc\001\002\000\144\004\uff0d\005" +
    "\uff0d\006\uff0d\007\uff0d\010\uff0d\011\uff0d\012\uff0d\013\uff0d" +
    "\014\uff0d\015\uff0d\016\uff0d\017\uff0d\020\uff0d\021\uff0d\022" +
    "\uff0d\023\uff0d\024\uff0d\025\uff0d\026\uff0d\027\uff0d\030\uff0d" +
    "\031\uff0d\032\uff0d\033\uff0d\034\uff0d\035\uff0d\036\uff0d\037" +
    "\uff0d\040\uff0d\041\uff0d\042\uff0d\043\uff0d\044\uff0d\045\uff0d" +
    "\046\uff0d\047\uff0d\050\uff0d\051\uff0d\052\uff0d\053\uff0d\054" +
    "\uff0d\055\uff0d\056\uff0d\057\uff0d\060\uff0d\065\uff0d\066\uff0d" +
    "\074\uff0d\075\uff0d\001\002\000\144\004\uff1c\005\uff1c\006" +
    "\uff1c\007\uff1c\010\uff1c\011\uff1c\012\uff1c\013\uff1c\014\uff1c" +
    "\015\uff1c\016\uff1c\017\uff1c\020\uff1c\021\uff1c\022\uff1c\023" +
    "\uff1c\024\uff1c\025\uff1c\026\uff1c\027\uff1c\030\uff1c\031\uff1c" +
    "\032\uff1c\033\uff1c\034\uff1c\035\uff1c\036\uff1c\037\uff1c\040" +
    "\uff1c\041\uff1c\042\uff1c\043\uff1c\044\uff1c\045\uff1c\046\uff1c" +
    "\047\uff1c\050\uff1c\051\uff1c\052\uff1c\053\uff1c\054\uff1c\055" +
    "\uff1c\056\uff1c\057\uff1c\060\uff1c\065\uff1c\066\uff1c\074\uff1c" +
    "\075\uff1c\001\002\000\144\004\uff16\005\uff16\006\uff16\007" +
    "\uff16\010\uff16\011\uff16\012\uff16\013\uff16\014\uff16\015\uff16" +
    "\016\uff16\017\uff16\020\uff16\021\uff16\022\uff16\023\uff16\024" +
    "\uff16\025\uff16\026\uff16\027\uff16\030\uff16\031\uff16\032\uff16" +
    "\033\uff16\034\uff16\035\uff16\036\uff16\037\uff16\040\uff16\041" +
    "\uff16\042\uff16\043\uff16\044\uff16\045\uff16\046\uff16\047\uff16" +
    "\050\uff16\051\uff16\052\uff16\053\uff16\054\uff16\055\uff16\056" +
    "\uff16\057\uff16\060\uff16\065\uff16\066\uff16\074\uff16\075\uff16" +
    "\001\002\000\144\004\ufef6\005\ufef6\006\ufef6\007\ufef6\010" +
    "\ufef6\011\ufef6\012\ufef6\013\ufef6\014\ufef6\015\ufef6\016\ufef6" +
    "\017\ufef6\020\ufef6\021\ufef6\022\ufef6\023\ufef6\024\ufef6\025" +
    "\ufef6\026\ufef6\027\ufef6\030\ufef6\031\ufef6\032\ufef6\033\ufef6" +
    "\034\ufef6\035\ufef6\036\ufef6\037\ufef6\040\ufef6\041\ufef6\042" +
    "\ufef6\043\ufef6\044\ufef6\045\ufef6\046\ufef6\047\ufef6\050\ufef6" +
    "\051\ufef6\052\ufef6\053\ufef6\054\ufef6\055\ufef6\056\ufef6\057" +
    "\ufef6\060\ufef6\065\ufef6\066\ufef6\074\ufef6\075\ufef6\001\002" +
    "\000\144\004\uff19\005\uff19\006\uff19\007\uff19\010\uff19\011" +
    "\uff19\012\uff19\013\uff19\014\uff19\015\uff19\016\uff19\017\uff19" +
    "\020\uff19\021\uff19\022\uff19\023\uff19\024\uff19\025\uff19\026" +
    "\uff19\027\uff19\030\uff19\031\uff19\032\uff19\033\uff19\034\uff19" +
    "\035\uff19\036\uff19\037\uff19\040\uff19\041\uff19\042\uff19\043" +
    "\uff19\044\uff19\045\uff19\046\uff19\047\uff19\050\uff19\051\uff19" +
    "\052\uff19\053\uff19\054\uff19\055\uff19\056\uff19\057\uff19\060" +
    "\uff19\065\uff19\066\uff19\074\uff19\075\uff19\001\002\000\144" +
    "\004\ufef2\005\ufef2\006\ufef2\007\ufef2\010\ufef2\011\ufef2\012" +
    "\ufef2\013\ufef2\014\ufef2\015\ufef2\016\ufef2\017\ufef2\020\ufef2" +
    "\021\ufef2\022\ufef2\023\ufef2\024\ufef2\025\ufef2\026\ufef2\027" +
    "\ufef2\030\ufef2\031\ufef2\032\ufef2\033\ufef2\034\ufef2\035\ufef2" +
    "\036\ufef2\037\ufef2\040\ufef2\041\ufef2\042\ufef2\043\ufef2\044" +
    "\ufef2\045\ufef2\046\ufef2\047\ufef2\050\ufef2\051\ufef2\052\ufef2" +
    "\053\ufef2\054\ufef2\055\ufef2\056\ufef2\057\ufef2\060\ufef2\065" +
    "\ufef2\066\ufef2\074\ufef2\075\ufef2\001\002\000\144\004\uff02" +
    "\005\uff02\006\uff02\007\uff02\010\uff02\011\uff02\012\uff02\013" +
    "\uff02\014\uff02\015\uff02\016\uff02\017\uff02\020\uff02\021\uff02" +
    "\022\uff02\023\uff02\024\uff02\025\uff02\026\uff02\027\uff02\030" +
    "\uff02\031\uff02\032\uff02\033\uff02\034\uff02\035\uff02\036\uff02" +
    "\037\uff02\040\uff02\041\uff02\042\uff02\043\uff02\044\uff02\045" +
    "\uff02\046\uff02\047\uff02\050\uff02\051\uff02\052\uff02\053\uff02" +
    "\054\uff02\055\uff02\056\uff02\057\uff02\060\uff02\065\uff02\066" +
    "\uff02\074\uff02\075\uff02\001\002\000\144\004\uff03\005\uff03" +
    "\006\uff03\007\uff03\010\uff03\011\uff03\012\uff03\013\uff03\014" +
    "\uff03\015\uff03\016\uff03\017\uff03\020\uff03\021\uff03\022\uff03" +
    "\023\uff03\024\uff03\025\uff03\026\uff03\027\uff03\030\uff03\031" +
    "\uff03\032\uff03\033\uff03\034\uff03\035\uff03\036\uff03\037\uff03" +
    "\040\uff03\041\uff03\042\uff03\043\uff03\044\uff03\045\uff03\046" +
    "\uff03\047\uff03\050\uff03\051\uff03\052\uff03\053\uff03\054\uff03" +
    "\055\uff03\056\uff03\057\uff03\060\uff03\065\uff03\066\uff03\074" +
    "\uff03\075\uff03\001\002\000\144\004\uff05\005\uff05\006\uff05" +
    "\007\uff05\010\uff05\011\uff05\012\uff05\013\uff05\014\uff05\015" +
    "\uff05\016\uff05\017\uff05\020\uff05\021\uff05\022\uff05\023\uff05" +
    "\024\uff05\025\uff05\026\uff05\027\uff05\030\uff05\031\uff05\032" +
    "\uff05\033\uff05\034\uff05\035\uff05\036\uff05\037\uff05\040\uff05" +
    "\041\uff05\042\uff05\043\uff05\044\uff05\045\uff05\046\uff05\047" +
    "\uff05\050\uff05\051\uff05\052\uff05\053\uff05\054\uff05\055\uff05" +
    "\056\uff05\057\uff05\060\uff05\065\uff05\066\uff05\074\uff05\075" +
    "\uff05\001\002\000\144\004\uff11\005\uff11\006\uff11\007\uff11" +
    "\010\uff11\011\uff11\012\uff11\013\uff11\014\uff11\015\uff11\016" +
    "\uff11\017\uff11\020\uff11\021\uff11\022\uff11\023\uff11\024\uff11" +
    "\025\uff11\026\uff11\027\uff11\030\uff11\031\uff11\032\uff11\033" +
    "\uff11\034\uff11\035\uff11\036\uff11\037\uff11\040\uff11\041\uff11" +
    "\042\uff11\043\uff11\044\uff11\045\uff11\046\uff11\047\uff11\050" +
    "\uff11\051\uff11\052\uff11\053\uff11\054\uff11\055\uff11\056\uff11" +
    "\057\uff11\060\uff11\065\uff11\066\uff11\074\uff11\075\uff11\001" +
    "\002\000\144\004\uff1b\005\uff1b\006\uff1b\007\uff1b\010\uff1b" +
    "\011\uff1b\012\uff1b\013\uff1b\014\uff1b\015\uff1b\016\uff1b\017" +
    "\uff1b\020\uff1b\021\uff1b\022\uff1b\023\uff1b\024\uff1b\025\uff1b" +
    "\026\uff1b\027\uff1b\030\uff1b\031\uff1b\032\uff1b\033\uff1b\034" +
    "\uff1b\035\uff1b\036\uff1b\037\uff1b\040\uff1b\041\uff1b\042\uff1b" +
    "\043\uff1b\044\uff1b\045\uff1b\046\uff1b\047\uff1b\050\uff1b\051" +
    "\uff1b\052\uff1b\053\uff1b\054\uff1b\055\uff1b\056\uff1b\057\uff1b" +
    "\060\uff1b\065\uff1b\066\uff1b\074\uff1b\075\uff1b\001\002\000" +
    "\144\004\ufef5\005\ufef5\006\ufef5\007\ufef5\010\ufef5\011\ufef5" +
    "\012\ufef5\013\ufef5\014\ufef5\015\ufef5\016\ufef5\017\ufef5\020" +
    "\ufef5\021\ufef5\022\ufef5\023\ufef5\024\ufef5\025\ufef5\026\ufef5" +
    "\027\ufef5\030\ufef5\031\ufef5\032\ufef5\033\ufef5\034\ufef5\035" +
    "\ufef5\036\ufef5\037\ufef5\040\ufef5\041\ufef5\042\ufef5\043\ufef5" +
    "\044\ufef5\045\ufef5\046\ufef5\047\ufef5\050\ufef5\051\ufef5\052" +
    "\ufef5\053\ufef5\054\ufef5\055\ufef5\056\ufef5\057\ufef5\060\ufef5" +
    "\065\ufef5\066\ufef5\074\ufef5\075\ufef5\001\002\000\144\004" +
    "\ufefb\005\ufefb\006\ufefb\007\ufefb\010\ufefb\011\ufefb\012\ufefb" +
    "\013\ufefb\014\ufefb\015\ufefb\016\ufefb\017\ufefb\020\ufefb\021" +
    "\ufefb\022\ufefb\023\ufefb\024\ufefb\025\ufefb\026\ufefb\027\ufefb" +
    "\030\ufefb\031\ufefb\032\ufefb\033\ufefb\034\ufefb\035\ufefb\036" +
    "\ufefb\037\ufefb\040\ufefb\041\ufefb\042\ufefb\043\ufefb\044\ufefb" +
    "\045\ufefb\046\ufefb\047\ufefb\050\ufefb\051\ufefb\052\ufefb\053" +
    "\ufefb\054\ufefb\055\ufefb\056\ufefb\057\ufefb\060\ufefb\065\ufefb" +
    "\066\ufefb\074\ufefb\075\ufefb\001\002\000\144\004\uff18\005" +
    "\uff18\006\uff18\007\uff18\010\uff18\011\uff18\012\uff18\013\uff18" +
    "\014\uff18\015\uff18\016\uff18\017\uff18\020\uff18\021\uff18\022" +
    "\uff18\023\uff18\024\uff18\025\uff18\026\uff18\027\uff18\030\uff18" +
    "\031\uff18\032\uff18\033\uff18\034\uff18\035\uff18\036\uff18\037" +
    "\uff18\040\uff18\041\uff18\042\uff18\043\uff18\044\uff18\045\uff18" +
    "\046\uff18\047\uff18\050\uff18\051\uff18\052\uff18\053\uff18\054" +
    "\uff18\055\uff18\056\uff18\057\uff18\060\uff18\065\uff18\066\uff18" +
    "\074\uff18\075\uff18\001\002\000\144\004\ufeef\005\ufeef\006" +
    "\ufeef\007\ufeef\010\ufeef\011\ufeef\012\ufeef\013\ufeef\014\ufeef" +
    "\015\ufeef\016\ufeef\017\ufeef\020\ufeef\021\ufeef\022\ufeef\023" +
    "\ufeef\024\ufeef\025\ufeef\026\ufeef\027\ufeef\030\ufeef\031\ufeef" +
    "\032\ufeef\033\ufeef\034\ufeef\035\ufeef\036\ufeef\037\ufeef\040" +
    "\ufeef\041\ufeef\042\ufeef\043\ufeef\044\ufeef\045\ufeef\046\ufeef" +
    "\047\ufeef\050\ufeef\051\ufeef\052\ufeef\053\ufeef\054\ufeef\055" +
    "\ufeef\056\ufeef\057\ufeef\060\ufeef\065\ufeef\066\ufeef\074\ufeef" +
    "\075\ufeef\001\002\000\144\004\uff00\005\uff00\006\uff00\007" +
    "\uff00\010\uff00\011\uff00\012\uff00\013\uff00\014\uff00\015\uff00" +
    "\016\uff00\017\uff00\020\uff00\021\uff00\022\uff00\023\uff00\024" +
    "\uff00\025\uff00\026\uff00\027\uff00\030\uff00\031\uff00\032\uff00" +
    "\033\uff00\034\uff00\035\uff00\036\uff00\037\uff00\040\uff00\041" +
    "\uff00\042\uff00\043\uff00\044\uff00\045\uff00\046\uff00\047\uff00" +
    "\050\uff00\051\uff00\052\uff00\053\uff00\054\uff00\055\uff00\056" +
    "\uff00\057\uff00\060\uff00\065\uff00\066\uff00\074\uff00\075\uff00" +
    "\001\002\000\144\004\uff06\005\uff06\006\uff06\007\uff06\010" +
    "\uff06\011\uff06\012\uff06\013\uff06\014\uff06\015\uff06\016\uff06" +
    "\017\uff06\020\uff06\021\uff06\022\uff06\023\uff06\024\uff06\025" +
    "\uff06\026\uff06\027\uff06\030\uff06\031\uff06\032\uff06\033\uff06" +
    "\034\uff06\035\uff06\036\uff06\037\uff06\040\uff06\041\uff06\042" +
    "\uff06\043\uff06\044\uff06\045\uff06\046\uff06\047\uff06\050\uff06" +
    "\051\uff06\052\uff06\053\uff06\054\uff06\055\uff06\056\uff06\057" +
    "\uff06\060\uff06\065\uff06\066\uff06\074\uff06\075\uff06\001\002" +
    "\000\144\004\uff15\005\uff15\006\uff15\007\uff15\010\uff15\011" +
    "\uff15\012\uff15\013\uff15\014\uff15\015\uff15\016\uff15\017\uff15" +
    "\020\uff15\021\uff15\022\uff15\023\uff15\024\uff15\025\uff15\026" +
    "\uff15\027\uff15\030\uff15\031\uff15\032\uff15\033\uff15\034\uff15" +
    "\035\uff15\036\uff15\037\uff15\040\uff15\041\uff15\042\uff15\043" +
    "\uff15\044\uff15\045\uff15\046\uff15\047\uff15\050\uff15\051\uff15" +
    "\052\uff15\053\uff15\054\uff15\055\uff15\056\uff15\057\uff15\060" +
    "\uff15\065\uff15\066\uff15\074\uff15\075\uff15\001\002\000\144" +
    "\004\uff07\005\uff07\006\uff07\007\uff07\010\uff07\011\uff07\012" +
    "\uff07\013\uff07\014\uff07\015\uff07\016\uff07\017\uff07\020\uff07" +
    "\021\uff07\022\uff07\023\uff07\024\uff07\025\uff07\026\uff07\027" +
    "\uff07\030\uff07\031\uff07\032\uff07\033\uff07\034\uff07\035\uff07" +
    "\036\uff07\037\uff07\040\uff07\041\uff07\042\uff07\043\uff07\044" +
    "\uff07\045\uff07\046\uff07\047\uff07\050\uff07\051\uff07\052\uff07" +
    "\053\uff07\054\uff07\055\uff07\056\uff07\057\uff07\060\uff07\065" +
    "\uff07\066\uff07\074\uff07\075\uff07\001\002\000\144\004\uff0e" +
    "\005\uff0e\006\uff0e\007\uff0e\010\uff0e\011\uff0e\012\uff0e\013" +
    "\uff0e\014\uff0e\015\uff0e\016\uff0e\017\uff0e\020\uff0e\021\uff0e" +
    "\022\uff0e\023\uff0e\024\uff0e\025\uff0e\026\uff0e\027\uff0e\030" +
    "\uff0e\031\uff0e\032\uff0e\033\uff0e\034\uff0e\035\uff0e\036\uff0e" +
    "\037\uff0e\040\uff0e\041\uff0e\042\uff0e\043\uff0e\044\uff0e\045" +
    "\uff0e\046\uff0e\047\uff0e\050\uff0e\051\uff0e\052\uff0e\053\uff0e" +
    "\054\uff0e\055\uff0e\056\uff0e\057\uff0e\060\uff0e\065\uff0e\066" +
    "\uff0e\074\uff0e\075\uff0e\001\002\000\144\004\uff0f\005\uff0f" +
    "\006\uff0f\007\uff0f\010\uff0f\011\uff0f\012\uff0f\013\uff0f\014" +
    "\uff0f\015\uff0f\016\uff0f\017\uff0f\020\uff0f\021\uff0f\022\uff0f" +
    "\023\uff0f\024\uff0f\025\uff0f\026\uff0f\027\uff0f\030\uff0f\031" +
    "\uff0f\032\uff0f\033\uff0f\034\uff0f\035\uff0f\036\uff0f\037\uff0f" +
    "\040\uff0f\041\uff0f\042\uff0f\043\uff0f\044\uff0f\045\uff0f\046" +
    "\uff0f\047\uff0f\050\uff0f\051\uff0f\052\uff0f\053\uff0f\054\uff0f" +
    "\055\uff0f\056\uff0f\057\uff0f\060\uff0f\065\uff0f\066\uff0f\074" +
    "\uff0f\075\uff0f\001\002\000\004\053\uff2d\001\002\000\012" +
    "\033\u0126\041\u0127\043\u0124\044\u0128\001\002\000\004\053" +
    "\uff26\001\002\000\010\005\u015f\032\uff28\053\uff28\001\002" +
    "\000\006\032\uff29\053\uff29\001\002\000\004\043\u0160\001" +
    "\002\000\006\032\uff27\053\uff27\001\002\000\004\053\uff2e" +
    "\001\002\000\004\043\u0163\001\002\000\006\032\uff2a\053" +
    "\uff2a\001\002\000\004\026\u0165\001\002\000\004\075\uff3b" +
    "\001\002\000\004\075\020\001\002\000\062\003\uff3a\006" +
    "\uff3a\007\uff3a\010\uff3a\012\uff3a\014\uff3a\015\uff3a\016\uff3a" +
    "\017\uff3a\023\uff3a\044\uff3a\051\uff3a\054\uff3a\055\uff3a\056" +
    "\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a\071\uff3a" +
    "\072\uff3a\074\uff3a\075\042\001\002\000\004\075\uff39\001" +
    "\002\000\004\075\020\001\002\000\062\003\uff38\006\uff38" +
    "\007\uff38\010\uff38\012\uff38\014\uff38\015\uff38\016\uff38\017" +
    "\uff38\023\uff38\044\uff38\051\uff38\054\uff38\055\uff38\056\uff38" +
    "\057\uff38\060\uff38\061\uff38\062\uff38\063\uff38\071\uff38\072" +
    "\uff38\074\uff38\075\042\001\002\000\004\053\u016c\001\002" +
    "\000\004\026\u016d\001\002\000\060\003\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\023\uffc8\044\uffc8\051\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\071\uffc8\072\uffc8" +
    "\074\uffc8\001\002\000\004\052\u016f\001\002\000\006\006" +
    "\u0170\044\uff8b\001\002\000\004\044\uff8c\001\002\000\004" +
    "\044\u0172\001\002\000\004\031\uff8f\001\002\000\004\031" +
    "\u0174\001\002\000\010\033\u0177\043\u0175\044\u0178\001\002" +
    "\000\004\026\uff70\001\002\000\004\026\u017b\001\002\000" +
    "\006\043\u0179\044\u017a\001\002\000\004\026\uff72\001\002" +
    "\000\004\026\uff6f\001\002\000\004\026\uff71\001\002\000" +
    "\016\030\302\033\131\043\126\044\134\050\127\052\125" +
    "\001\002\000\010\026\u017d\067\304\070\305\001\002\000" +
    "\004\044\u017e\001\002\000\004\031\u017f\001\002\000\014" +
    "\033\uff8a\043\uff8a\044\uff8a\050\uff8a\052\uff8a\001\002\000" +
    "\004\053\u0181\001\002\000\004\022\uff8e\001\002\000\004" +
    "\022\u0183\001\002\000\004\075\020\001\002\000\052\003" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\012\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\023\uffa0\044\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\071\uffa0\072\uffa0\074\uffa0\075\042" +
    "\001\002\000\050\003\267\006\025\007\030\010\024\012" +
    "\274\014\263\015\244\016\250\017\266\023\u0186\044\265" +
    "\057\257\060\252\061\253\062\245\063\254\071\027\072" +
    "\026\074\023\001\002\000\004\075\020\001\002\000\062" +
    "\003\uff8d\006\uff8d\007\uff8d\010\uff8d\012\uff8d\014\uff8d\015" +
    "\uff8d\016\uff8d\017\uff8d\023\uff8d\044\uff8d\051\uff8d\054\uff8d" +
    "\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063" +
    "\uff8d\071\uff8d\072\uff8d\074\uff8d\075\042\001\002\000\014" +
    "\033\u018e\043\u018b\044\u018f\050\u018c\052\u0189\001\002\000" +
    "\014\033\u018e\043\u018b\044\u018f\050\u018c\052\u0189\001\002" +
    "\000\016\032\u019c\033\u019d\034\u019a\035\u019e\036\u019b\053" +
    "\uff89\001\002\000\020\005\u0198\032\uff80\033\uff80\034\uff80" +
    "\035\uff80\036\uff80\053\uff80\001\002\000\006\043\u0194\044" +
    "\u0195\001\002\000\016\032\uff82\033\uff82\034\uff82\035\uff82" +
    "\036\uff82\053\uff82\001\002\000\006\043\u0190\044\u0191\001" +
    "\002\000\016\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81" +
    "\053\uff81\001\002\000\020\005\u0192\032\uff7b\033\uff7b\034" +
    "\uff7b\035\uff7b\036\uff7b\053\uff7b\001\002\000\016\032\uff7c" +
    "\033\uff7c\034\uff7c\035\uff7c\036\uff7c\053\uff7c\001\002\000" +
    "\004\043\u0193\001\002\000\016\032\uff7a\033\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\053\uff7a\001\002\000\004\050\u0197\001" +
    "\002\000\004\050\u0196\001\002\000\016\032\uff7e\033\uff7e" +
    "\034\uff7e\035\uff7e\036\uff7e\053\uff7e\001\002\000\016\032" +
    "\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\053\uff7d\001\002" +
    "\000\004\043\u0199\001\002\000\016\032\uff7f\033\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\053\uff7f\001\002\000\014\033\u018e" +
    "\043\u018b\044\u018f\050\u018c\052\u0189\001\002\000\014\033" +
    "\u018e\043\u018b\044\u018f\050\u018c\052\u0189\001\002\000\014" +
    "\033\u018e\043\u018b\044\u018f\050\u018c\052\u0189\001\002\000" +
    "\014\033\u018e\043\u018b\044\u018f\050\u018c\052\u0189\001\002" +
    "\000\014\033\u018e\043\u018b\044\u018f\050\u018c\052\u0189\001" +
    "\002\000\016\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84" +
    "\053\uff84\001\002\000\016\032\uff86\033\uff86\034\u019a\035" +
    "\u019e\036\u019b\053\uff86\001\002\000\016\032\uff87\033\uff87" +
    "\034\u019a\035\u019e\036\u019b\053\uff87\001\002\000\016\032" +
    "\uff83\033\uff83\034\uff83\035\uff83\036\uff83\053\uff83\001\002" +
    "\000\016\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\053" +
    "\uff85\001\002\000\016\032\u019c\033\u019d\034\u019a\035\u019e" +
    "\036\u019b\053\u01a5\001\002\000\016\032\uff88\033\uff88\034" +
    "\uff88\035\uff88\036\uff88\053\uff88\001\002\000\014\033\u0126" +
    "\041\u0127\043\u0124\044\u0128\053\u01a7\001\002\000\004\026" +
    "\u01ad\001\002\000\004\053\u01a9\001\002\000\004\026\u01aa" +
    "\001\002\000\004\075\uff37\001\002\000\004\075\020\001" +
    "\002\000\062\003\uff36\006\uff36\007\uff36\010\uff36\012\uff36" +
    "\014\uff36\015\uff36\016\uff36\017\uff36\023\uff36\044\uff36\051" +
    "\uff36\054\uff36\055\uff36\056\uff36\057\uff36\060\uff36\061\uff36" +
    "\062\uff36\063\uff36\071\uff36\072\uff36\074\uff36\075\042\001" +
    "\002\000\004\075\uff35\001\002\000\004\075\020\001\002" +
    "\000\062\003\uff34\006\uff34\007\uff34\010\uff34\012\uff34\014" +
    "\uff34\015\uff34\016\uff34\017\uff34\023\uff34\044\uff34\051\uff34" +
    "\054\uff34\055\uff34\056\uff34\057\uff34\060\uff34\061\uff34\062" +
    "\uff34\063\uff34\071\uff34\072\uff34\074\uff34\075\042\001\002" +
    "\000\012\033\u0126\041\u0127\043\u0124\044\u0128\001\002\000" +
    "\004\053\u01b2\001\002\000\004\026\u01b3\001\002\000\004" +
    "\075\020\001\002\000\062\003\uff30\006\uff30\007\uff30\010" +
    "\uff30\012\uff30\014\uff30\015\uff30\016\uff30\017\uff30\023\uff30" +
    "\044\uff30\051\uff30\054\uff30\055\uff30\056\uff30\057\uff30\060" +
    "\uff30\061\uff30\062\uff30\063\uff30\071\uff30\072\uff30\074\uff30" +
    "\075\042\001\002\000\012\033\u0126\041\u0127\043\u0124\044" +
    "\u0128\001\002\000\004\053\u01b7\001\002\000\004\026\u01b8" +
    "\001\002\000\004\075\020\001\002\000\062\003\uff2f\006" +
    "\uff2f\007\uff2f\010\uff2f\012\uff2f\014\uff2f\015\uff2f\016\uff2f" +
    "\017\uff2f\023\uff2f\044\uff2f\051\uff2f\054\uff2f\055\uff2f\056" +
    "\uff2f\057\uff2f\060\uff2f\061\uff2f\062\uff2f\063\uff2f\071\uff2f" +
    "\072\uff2f\074\uff2f\075\042\001\002\000\004\022\u01bb\001" +
    "\002\000\004\075\020\001\002\000\054\003\uffa0\006\uffa0" +
    "\007\uffa0\010\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\023\uffa0\044\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\071\uffa0\072\uffa0\074\uffa0\075\042\001" +
    "\002\000\052\003\267\006\025\007\030\010\024\012\274" +
    "\014\263\015\244\016\250\017\266\023\uff9c\044\265\056" +
    "\314\057\257\060\252\061\253\062\245\063\254\071\027" +
    "\072\026\074\023\001\002\000\004\023\u01bf\001\002\000" +
    "\004\015\u01c0\001\002\000\004\052\u01c1\001\002\000\016" +
    "\030\302\033\131\043\126\044\134\050\127\052\125\001" +
    "\002\000\010\053\u01c3\067\304\070\305\001\002\000\004" +
    "\026\u01c4\001\002\000\004\075\020\001\002\000\062\003" +
    "\uff6a\006\uff6a\007\uff6a\010\uff6a\012\uff6a\014\uff6a\015\uff6a" +
    "\016\uff6a\017\uff6a\023\uff6a\044\uff6a\051\uff6a\054\uff6a\055" +
    "\uff6a\056\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\063\uff6a" +
    "\071\uff6a\072\uff6a\074\uff6a\075\042\001\002\000\004\075" +
    "\020\001\002\000\030\003\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\020\uffb8\023\uffb8\044\uffb8\071\uffb8\072\uffb8\074\uffb8\075" +
    "\042\001\002\000\004\052\u01c9\001\002\000\016\030\302" +
    "\033\131\043\126\044\134\050\127\052\125\001\002\000" +
    "\010\053\uff6d\067\304\070\305\001\002\000\004\053\u01cc" +
    "\001\002\000\004\022\u01cd\001\002\000\004\075\020\001" +
    "\002\000\054\003\uffa0\006\uffa0\007\uffa0\010\uffa0\012\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\023\uffa0\044\uffa0\056" +
    "\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\071\uffa0" +
    "\072\uffa0\074\uffa0\075\042\001\002\000\052\003\267\006" +
    "\025\007\030\010\024\012\274\014\263\015\244\016\250" +
    "\017\266\023\uff9c\044\265\056\314\057\257\060\252\061" +
    "\253\062\245\063\254\071\027\072\026\074\023\001\002" +
    "\000\004\023\u01d1\001\002\000\004\075\020\001\002\000" +
    "\062\003\uff6c\006\uff6c\007\uff6c\010\uff6c\012\uff6c\014\uff6c" +
    "\015\uff6c\016\uff6c\017\uff6c\023\uff6c\044\uff6c\051\uff6c\054" +
    "\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c" +
    "\063\uff6c\071\uff6c\072\uff6c\074\uff6c\075\042\001\002\000" +
    "\004\044\u01d4\001\002\000\006\004\u01d5\053\uffb3\001\002" +
    "\000\010\006\uffb2\007\uffb2\010\uffb2\001\002\000\004\022" +
    "\uffb6\001\002\000\004\022\u01d8\001\002\000\004\075\020" +
    "\001\002\000\052\003\uffa0\006\uffa0\007\uffa0\010\uffa0\012" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\023\uffa0\044\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\071\uffa0\072" +
    "\uffa0\074\uffa0\075\042\001\002\000\050\003\267\006\025" +
    "\007\030\010\024\012\274\014\263\015\244\016\250\017" +
    "\266\023\uffb5\044\265\057\257\060\252\061\253\062\245" +
    "\063\254\071\027\072\026\074\023\001\002\000\004\023" +
    "\u01dc\001\002\000\004\075\020\001\002\000\030\003\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\020\uffb4\023\uffb4\044\uffb4\071" +
    "\uffb4\072\uffb4\074\uffb4\075\042\001\002\000\004\052\u01df" +
    "\001\002\000\012\006\uffc2\007\uffc2\010\uffc2\053\u01e0\001" +
    "\002\000\004\022\uffbe\001\002\000\010\006\uffb1\007\uffb1" +
    "\010\uffb1\001\002\000\004\053\u01e3\001\002\000\004\022" +
    "\uffc1\001\002\000\004\022\u01e5\001\002\000\004\075\020" +
    "\001\002\000\054\003\uffa0\006\uffa0\007\uffa0\010\uffa0\012" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\023\uffa0\044\uffa0" +
    "\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\071" +
    "\uffa0\072\uffa0\074\uffa0\075\042\001\002\000\052\003\267" +
    "\006\025\007\030\010\024\012\274\014\263\015\244\016" +
    "\250\017\266\023\uff9c\044\265\056\314\057\257\060\252" +
    "\061\253\062\245\063\254\071\027\072\026\074\023\001" +
    "\002\000\004\023\uffc0\001\002\000\004\023\u01ea\001\002" +
    "\000\004\075\020\001\002\000\030\003\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\020\uffbf\023\uffbf\044\uffbf\071\uffbf\072\uffbf" +
    "\074\uffbf\075\042\001\002\000\004\022\u01ed\001\002\000" +
    "\004\075\020\001\002\000\054\003\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\023" +
    "\uffa0\044\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0" +
    "\063\uffa0\071\uffa0\072\uffa0\074\uffa0\075\042\001\002\000" +
    "\052\003\267\006\025\007\030\010\024\012\274\014\263" +
    "\015\244\016\250\017\266\023\uff9c\044\265\056\314\057" +
    "\257\060\252\061\253\062\245\063\254\071\027\072\026" +
    "\074\023\001\002\000\004\023\uffbd\001\002\000\004\023" +
    "\u01f2\001\002\000\004\075\020\001\002\000\030\003\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\020\uffbc\023\uffbc\044\uffbc\071" +
    "\uffbc\072\uffbc\074\uffbc\075\042\001\002\000\004\023\ufffa" +
    "\001\002\000\004\023\ufffc\001\002\000\004\023\ufff9\001" +
    "\002\000\142\004\u0132\005\u0146\006\u014f\007\u0138\010\u0149" +
    "\011\u0152\012\u0139\013\u0147\014\u0158\015\u012f\016\u0156\017" +
    "\u0134\020\u0141\021\u013a\022\u0131\023\u0130\024\u0157\025\u0155" +
    "\026\u014b\027\u012d\030\u0154\031\u0133\032\u0140\033\u013c\034" +
    "\u0144\035\u0151\036\u013f\037\u012c\040\u0148\042\u0143\043\u013b" +
    "\044\u014a\045\u0153\046\u0142\047\u013e\050\u0150\051\u014e\052" +
    "\u014d\053\u014c\054\u012b\055\u0137\056\u0159\057\u0145\060\u012e" +
    "\065\u0135\066\u013d\074\u0136\075\020\001\002\000\064\003" +
    "\uff24\006\uff24\007\uff24\010\uff24\012\uff24\014\uff24\015\uff24" +
    "\016\uff24\017\uff24\020\uff24\023\uff24\044\uff24\051\uff24\054" +
    "\uff24\055\uff24\056\uff24\057\uff24\060\uff24\061\uff24\062\uff24" +
    "\063\uff24\071\uff24\072\uff24\074\uff24\075\042\001\002\000" +
    "\144\004\u0200\005\u0215\006\u021f\007\u0207\010\u0218\011\u0222" +
    "\012\u0208\013\u0217\014\u0229\015\u01fe\016\u0225\017\u0203\020" +
    "\u0211\021\u0209\022\u0201\023\u01ff\024\u0228\025\u0227\026\u021b" +
    "\027\u01fd\030\u0226\031\u0202\032\u0210\033\u020c\034\u0214\035" +
    "\u0221\036\u020f\037\u01fb\040\u0219\042\u0213\043\u020a\044\u021a" +
    "\045\u0224\046\u0212\047\u020e\050\u0220\051\u021e\052\u021d\053" +
    "\u021c\054\u01fa\055\u0206\056\u022a\057\u0216\060\u01fc\065\u0204" +
    "\066\u020d\073\u020b\074\u0205\075\u0223\001\002\000\144\004" +
    "\ufee2\005\ufee2\006\ufee2\007\ufee2\010\ufee2\011\ufee2\012\ufee2" +
    "\013\ufee2\014\ufee2\015\ufee2\016\ufee2\017\ufee2\020\ufee2\021" +
    "\ufee2\022\ufee2\023\ufee2\024\ufee2\025\ufee2\026\ufee2\027\ufee2" +
    "\030\ufee2\031\ufee2\032\ufee2\033\ufee2\034\ufee2\035\ufee2\036" +
    "\ufee2\037\ufee2\040\ufee2\042\ufee2\043\ufee2\044\ufee2\045\ufee2" +
    "\046\ufee2\047\ufee2\050\ufee2\051\ufee2\052\ufee2\053\ufee2\054" +
    "\ufee2\055\ufee2\056\ufee2\057\ufee2\060\ufee2\065\ufee2\066\ufee2" +
    "\073\ufee2\074\ufee2\075\ufee2\001\002\000\144\004\ufec7\005" +
    "\ufec7\006\ufec7\007\ufec7\010\ufec7\011\ufec7\012\ufec7\013\ufec7" +
    "\014\ufec7\015\ufec7\016\ufec7\017\ufec7\020\ufec7\021\ufec7\022" +
    "\ufec7\023\ufec7\024\ufec7\025\ufec7\026\ufec7\027\ufec7\030\ufec7" +
    "\031\ufec7\032\ufec7\033\ufec7\034\ufec7\035\ufec7\036\ufec7\037" +
    "\ufec7\040\ufec7\042\ufec7\043\ufec7\044\ufec7\045\ufec7\046\ufec7" +
    "\047\ufec7\050\ufec7\051\ufec7\052\ufec7\053\ufec7\054\ufec7\055" +
    "\ufec7\056\ufec7\057\ufec7\060\ufec7\065\ufec7\066\ufec7\073\ufec7" +
    "\074\ufec7\075\ufec7\001\002\000\144\004\ufedb\005\ufedb\006" +
    "\ufedb\007\ufedb\010\ufedb\011\ufedb\012\ufedb\013\ufedb\014\ufedb" +
    "\015\ufedb\016\ufedb\017\ufedb\020\ufedb\021\ufedb\022\ufedb\023" +
    "\ufedb\024\ufedb\025\ufedb\026\ufedb\027\ufedb\030\ufedb\031\ufedb" +
    "\032\ufedb\033\ufedb\034\ufedb\035\ufedb\036\ufedb\037\ufedb\040" +
    "\ufedb\042\ufedb\043\ufedb\044\ufedb\045\ufedb\046\ufedb\047\ufedb" +
    "\050\ufedb\051\ufedb\052\ufedb\053\ufedb\054\ufedb\055\ufedb\056" +
    "\ufedb\057\ufedb\060\ufedb\065\ufedb\066\ufedb\073\ufedb\074\ufedb" +
    "\075\ufedb\001\002\000\144\004\ufed1\005\ufed1\006\ufed1\007" +
    "\ufed1\010\ufed1\011\ufed1\012\ufed1\013\ufed1\014\ufed1\015\ufed1" +
    "\016\ufed1\017\ufed1\020\ufed1\021\ufed1\022\ufed1\023\ufed1\024" +
    "\ufed1\025\ufed1\026\ufed1\027\ufed1\030\ufed1\031\ufed1\032\ufed1" +
    "\033\ufed1\034\ufed1\035\ufed1\036\ufed1\037\ufed1\040\ufed1\042" +
    "\ufed1\043\ufed1\044\ufed1\045\ufed1\046\ufed1\047\ufed1\050\ufed1" +
    "\051\ufed1\052\ufed1\053\ufed1\054\ufed1\055\ufed1\056\ufed1\057" +
    "\ufed1\060\ufed1\065\ufed1\066\ufed1\073\ufed1\074\ufed1\075\ufed1" +
    "\001\002\000\144\004\ufee1\005\ufee1\006\ufee1\007\ufee1\010" +
    "\ufee1\011\ufee1\012\ufee1\013\ufee1\014\ufee1\015\ufee1\016\ufee1" +
    "\017\ufee1\020\ufee1\021\ufee1\022\ufee1\023\ufee1\024\ufee1\025" +
    "\ufee1\026\ufee1\027\ufee1\030\ufee1\031\ufee1\032\ufee1\033\ufee1" +
    "\034\ufee1\035\ufee1\036\ufee1\037\ufee1\040\ufee1\042\ufee1\043" +
    "\ufee1\044\ufee1\045\ufee1\046\ufee1\047\ufee1\050\ufee1\051\ufee1" +
    "\052\ufee1\053\ufee1\054\ufee1\055\ufee1\056\ufee1\057\ufee1\060" +
    "\ufee1\065\ufee1\066\ufee1\073\ufee1\074\ufee1\075\ufee1\001\002" +
    "\000\144\004\ufed7\005\ufed7\006\ufed7\007\ufed7\010\ufed7\011" +
    "\ufed7\012\ufed7\013\ufed7\014\ufed7\015\ufed7\016\ufed7\017\ufed7" +
    "\020\ufed7\021\ufed7\022\ufed7\023\ufed7\024\ufed7\025\ufed7\026" +
    "\ufed7\027\ufed7\030\ufed7\031\ufed7\032\ufed7\033\ufed7\034\ufed7" +
    "\035\ufed7\036\ufed7\037\ufed7\040\ufed7\042\ufed7\043\ufed7\044" +
    "\ufed7\045\ufed7\046\ufed7\047\ufed7\050\ufed7\051\ufed7\052\ufed7" +
    "\053\ufed7\054\ufed7\055\ufed7\056\ufed7\057\ufed7\060\ufed7\065" +
    "\ufed7\066\ufed7\073\ufed7\074\ufed7\075\ufed7\001\002\000\144" +
    "\004\ufeed\005\ufeed\006\ufeed\007\ufeed\010\ufeed\011\ufeed\012" +
    "\ufeed\013\ufeed\014\ufeed\015\ufeed\016\ufeed\017\ufeed\020\ufeed" +
    "\021\ufeed\022\ufeed\023\ufeed\024\ufeed\025\ufeed\026\ufeed\027" +
    "\ufeed\030\ufeed\031\ufeed\032\ufeed\033\ufeed\034\ufeed\035\ufeed" +
    "\036\ufeed\037\ufeed\040\ufeed\042\ufeed\043\ufeed\044\ufeed\045" +
    "\ufeed\046\ufeed\047\ufeed\050\ufeed\051\ufeed\052\ufeed\053\ufeed" +
    "\054\ufeed\055\ufeed\056\ufeed\057\ufeed\060\ufeed\065\ufeed\066" +
    "\ufeed\073\ufeed\074\ufeed\075\ufeed\001\002\000\144\004\ufed8" +
    "\005\ufed8\006\ufed8\007\ufed8\010\ufed8\011\ufed8\012\ufed8\013" +
    "\ufed8\014\ufed8\015\ufed8\016\ufed8\017\ufed8\020\ufed8\021\ufed8" +
    "\022\ufed8\023\ufed8\024\ufed8\025\ufed8\026\ufed8\027\ufed8\030" +
    "\ufed8\031\ufed8\032\ufed8\033\ufed8\034\ufed8\035\ufed8\036\ufed8" +
    "\037\ufed8\040\ufed8\042\ufed8\043\ufed8\044\ufed8\045\ufed8\046" +
    "\ufed8\047\ufed8\050\ufed8\051\ufed8\052\ufed8\053\ufed8\054\ufed8" +
    "\055\ufed8\056\ufed8\057\ufed8\060\ufed8\065\ufed8\066\ufed8\073" +
    "\ufed8\074\ufed8\075\ufed8\001\002\000\144\004\ufecf\005\ufecf" +
    "\006\ufecf\007\ufecf\010\ufecf\011\ufecf\012\ufecf\013\ufecf\014" +
    "\ufecf\015\ufecf\016\ufecf\017\ufecf\020\ufecf\021\ufecf\022\ufecf" +
    "\023\ufecf\024\ufecf\025\ufecf\026\ufecf\027\ufecf\030\ufecf\031" +
    "\ufecf\032\ufecf\033\ufecf\034\ufecf\035\ufecf\036\ufecf\037\ufecf" +
    "\040\ufecf\042\ufecf\043\ufecf\044\ufecf\045\ufecf\046\ufecf\047" +
    "\ufecf\050\ufecf\051\ufecf\052\ufecf\053\ufecf\054\ufecf\055\ufecf" +
    "\056\ufecf\057\ufecf\060\ufecf\065\ufecf\066\ufecf\073\ufecf\074" +
    "\ufecf\075\ufecf\001\002\000\144\004\ufee3\005\ufee3\006\ufee3" +
    "\007\ufee3\010\ufee3\011\ufee3\012\ufee3\013\ufee3\014\ufee3\015" +
    "\ufee3\016\ufee3\017\ufee3\020\ufee3\021\ufee3\022\ufee3\023\ufee3" +
    "\024\ufee3\025\ufee3\026\ufee3\027\ufee3\030\ufee3\031\ufee3\032" +
    "\ufee3\033\ufee3\034\ufee3\035\ufee3\036\ufee3\037\ufee3\040\ufee3" +
    "\042\ufee3\043\ufee3\044\ufee3\045\ufee3\046\ufee3\047\ufee3\050" +
    "\ufee3\051\ufee3\052\ufee3\053\ufee3\054\ufee3\055\ufee3\056\ufee3" +
    "\057\ufee3\060\ufee3\065\ufee3\066\ufee3\073\ufee3\074\ufee3\075" +
    "\ufee3\001\002\000\144\004\ufec0\005\ufec0\006\ufec0\007\ufec0" +
    "\010\ufec0\011\ufec0\012\ufec0\013\ufec0\014\ufec0\015\ufec0\016" +
    "\ufec0\017\ufec0\020\ufec0\021\ufec0\022\ufec0\023\ufec0\024\ufec0" +
    "\025\ufec0\026\ufec0\027\ufec0\030\ufec0\031\ufec0\032\ufec0\033" +
    "\ufec0\034\ufec0\035\ufec0\036\ufec0\037\ufec0\040\ufec0\042\ufec0" +
    "\043\ufec0\044\ufec0\045\ufec0\046\ufec0\047\ufec0\050\ufec0\051" +
    "\ufec0\052\ufec0\053\ufec0\054\ufec0\055\ufec0\056\ufec0\057\ufec0" +
    "\060\ufec0\065\ufec0\066\ufec0\073\ufec0\074\ufec0\075\ufec0\001" +
    "\002\000\144\004\ufedc\005\ufedc\006\ufedc\007\ufedc\010\ufedc" +
    "\011\ufedc\012\ufedc\013\ufedc\014\ufedc\015\ufedc\016\ufedc\017" +
    "\ufedc\020\ufedc\021\ufedc\022\ufedc\023\ufedc\024\ufedc\025\ufedc" +
    "\026\ufedc\027\ufedc\030\ufedc\031\ufedc\032\ufedc\033\ufedc\034" +
    "\ufedc\035\ufedc\036\ufedc\037\ufedc\040\ufedc\042\ufedc\043\ufedc" +
    "\044\ufedc\045\ufedc\046\ufedc\047\ufedc\050\ufedc\051\ufedc\052" +
    "\ufedc\053\ufedc\054\ufedc\055\ufedc\056\ufedc\057\ufedc\060\ufedc" +
    "\065\ufedc\066\ufedc\073\ufedc\074\ufedc\075\ufedc\001\002\000" +
    "\144\004\ufedf\005\ufedf\006\ufedf\007\ufedf\010\ufedf\011\ufedf" +
    "\012\ufedf\013\ufedf\014\ufedf\015\ufedf\016\ufedf\017\ufedf\020" +
    "\ufedf\021\ufedf\022\ufedf\023\ufedf\024\ufedf\025\ufedf\026\ufedf" +
    "\027\ufedf\030\ufedf\031\ufedf\032\ufedf\033\ufedf\034\ufedf\035" +
    "\ufedf\036\ufedf\037\ufedf\040\ufedf\042\ufedf\043\ufedf\044\ufedf" +
    "\045\ufedf\046\ufedf\047\ufedf\050\ufedf\051\ufedf\052\ufedf\053" +
    "\ufedf\054\ufedf\055\ufedf\056\ufedf\057\ufedf\060\ufedf\065\ufedf" +
    "\066\ufedf\073\ufedf\074\ufedf\075\ufedf\001\002\000\144\004" +
    "\ufeea\005\ufeea\006\ufeea\007\ufeea\010\ufeea\011\ufeea\012\ufeea" +
    "\013\ufeea\014\ufeea\015\ufeea\016\ufeea\017\ufeea\020\ufeea\021" +
    "\ufeea\022\ufeea\023\ufeea\024\ufeea\025\ufeea\026\ufeea\027\ufeea" +
    "\030\ufeea\031\ufeea\032\ufeea\033\ufeea\034\ufeea\035\ufeea\036" +
    "\ufeea\037\ufeea\040\ufeea\042\ufeea\043\ufeea\044\ufeea\045\ufeea" +
    "\046\ufeea\047\ufeea\050\ufeea\051\ufeea\052\ufeea\053\ufeea\054" +
    "\ufeea\055\ufeea\056\ufeea\057\ufeea\060\ufeea\065\ufeea\066\ufeea" +
    "\073\ufeea\074\ufeea\075\ufeea\001\002\000\144\004\ufee7\005" +
    "\ufee7\006\ufee7\007\ufee7\010\ufee7\011\ufee7\012\ufee7\013\ufee7" +
    "\014\ufee7\015\ufee7\016\ufee7\017\ufee7\020\ufee7\021\ufee7\022" +
    "\ufee7\023\ufee7\024\ufee7\025\ufee7\026\ufee7\027\ufee7\030\ufee7" +
    "\031\ufee7\032\ufee7\033\ufee7\034\ufee7\035\ufee7\036\ufee7\037" +
    "\ufee7\040\ufee7\042\ufee7\043\ufee7\044\ufee7\045\ufee7\046\ufee7" +
    "\047\ufee7\050\ufee7\051\ufee7\052\ufee7\053\ufee7\054\ufee7\055" +
    "\ufee7\056\ufee7\057\ufee7\060\ufee7\065\ufee7\066\ufee7\073\ufee7" +
    "\074\ufee7\075\ufee7\001\002\000\144\004\ufed9\005\ufed9\006" +
    "\ufed9\007\ufed9\010\ufed9\011\ufed9\012\ufed9\013\ufed9\014\ufed9" +
    "\015\ufed9\016\ufed9\017\ufed9\020\ufed9\021\ufed9\022\ufed9\023" +
    "\ufed9\024\ufed9\025\ufed9\026\ufed9\027\ufed9\030\ufed9\031\ufed9" +
    "\032\ufed9\033\ufed9\034\ufed9\035\ufed9\036\ufed9\037\ufed9\040" +
    "\ufed9\042\ufed9\043\ufed9\044\ufed9\045\ufed9\046\ufed9\047\ufed9" +
    "\050\ufed9\051\ufed9\052\ufed9\053\ufed9\054\ufed9\055\ufed9\056" +
    "\ufed9\057\ufed9\060\ufed9\065\ufed9\066\ufed9\073\ufed9\074\ufed9" +
    "\075\ufed9\001\002\000\144\004\ufec3\005\ufec3\006\ufec3\007" +
    "\ufec3\010\ufec3\011\ufec3\012\ufec3\013\ufec3\014\ufec3\015\ufec3" +
    "\016\ufec3\017\ufec3\020\ufec3\021\ufec3\022\ufec3\023\ufec3\024" +
    "\ufec3\025\ufec3\026\ufec3\027\ufec3\030\ufec3\031\ufec3\032\ufec3" +
    "\033\ufec3\034\ufec3\035\ufec3\036\ufec3\037\ufec3\040\ufec3\042" +
    "\ufec3\043\ufec3\044\ufec3\045\ufec3\046\ufec3\047\ufec3\050\ufec3" +
    "\051\ufec3\052\ufec3\053\ufec3\054\ufec3\055\ufec3\056\ufec3\057" +
    "\ufec3\060\ufec3\065\ufec3\066\ufec3\073\ufec3\074\ufec3\075\ufec3" +
    "\001\002\000\004\075\020\001\002\000\144\004\ufecd\005" +
    "\ufecd\006\ufecd\007\ufecd\010\ufecd\011\ufecd\012\ufecd\013\ufecd" +
    "\014\ufecd\015\ufecd\016\ufecd\017\ufecd\020\ufecd\021\ufecd\022" +
    "\ufecd\023\ufecd\024\ufecd\025\ufecd\026\ufecd\027\ufecd\030\ufecd" +
    "\031\ufecd\032\ufecd\033\ufecd\034\ufecd\035\ufecd\036\ufecd\037" +
    "\ufecd\040\ufecd\042\ufecd\043\ufecd\044\ufecd\045\ufecd\046\ufecd" +
    "\047\ufecd\050\ufecd\051\ufecd\052\ufecd\053\ufecd\054\ufecd\055" +
    "\ufecd\056\ufecd\057\ufecd\060\ufecd\065\ufecd\066\ufecd\073\ufecd" +
    "\074\ufecd\075\ufecd\001\002\000\144\004\ufebf\005\ufebf\006" +
    "\ufebf\007\ufebf\010\ufebf\011\ufebf\012\ufebf\013\ufebf\014\ufebf" +
    "\015\ufebf\016\ufebf\017\ufebf\020\ufebf\021\ufebf\022\ufebf\023" +
    "\ufebf\024\ufebf\025\ufebf\026\ufebf\027\ufebf\030\ufebf\031\ufebf" +
    "\032\ufebf\033\ufebf\034\ufebf\035\ufebf\036\ufebf\037\ufebf\040" +
    "\ufebf\042\ufebf\043\ufebf\044\ufebf\045\ufebf\046\ufebf\047\ufebf" +
    "\050\ufebf\051\ufebf\052\ufebf\053\ufebf\054\ufebf\055\ufebf\056" +
    "\ufebf\057\ufebf\060\ufebf\065\ufebf\066\ufebf\073\ufebf\074\ufebf" +
    "\075\ufebf\001\002\000\144\004\ufec9\005\ufec9\006\ufec9\007" +
    "\ufec9\010\ufec9\011\ufec9\012\ufec9\013\ufec9\014\ufec9\015\ufec9" +
    "\016\ufec9\017\ufec9\020\ufec9\021\ufec9\022\ufec9\023\ufec9\024" +
    "\ufec9\025\ufec9\026\ufec9\027\ufec9\030\ufec9\031\ufec9\032\ufec9" +
    "\033\ufec9\034\ufec9\035\ufec9\036\ufec9\037\ufec9\040\ufec9\042" +
    "\ufec9\043\ufec9\044\ufec9\045\ufec9\046\ufec9\047\ufec9\050\ufec9" +
    "\051\ufec9\052\ufec9\053\ufec9\054\ufec9\055\ufec9\056\ufec9\057" +
    "\ufec9\060\ufec9\065\ufec9\066\ufec9\073\ufec9\074\ufec9\075\ufec9" +
    "\001\002\000\144\004\ufeca\005\ufeca\006\ufeca\007\ufeca\010" +
    "\ufeca\011\ufeca\012\ufeca\013\ufeca\014\ufeca\015\ufeca\016\ufeca" +
    "\017\ufeca\020\ufeca\021\ufeca\022\ufeca\023\ufeca\024\ufeca\025" +
    "\ufeca\026\ufeca\027\ufeca\030\ufeca\031\ufeca\032\ufeca\033\ufeca" +
    "\034\ufeca\035\ufeca\036\ufeca\037\ufeca\040\ufeca\042\ufeca\043" +
    "\ufeca\044\ufeca\045\ufeca\046\ufeca\047\ufeca\050\ufeca\051\ufeca" +
    "\052\ufeca\053\ufeca\054\ufeca\055\ufeca\056\ufeca\057\ufeca\060" +
    "\ufeca\065\ufeca\066\ufeca\073\ufeca\074\ufeca\075\ufeca\001\002" +
    "\000\144\004\ufece\005\ufece\006\ufece\007\ufece\010\ufece\011" +
    "\ufece\012\ufece\013\ufece\014\ufece\015\ufece\016\ufece\017\ufece" +
    "\020\ufece\021\ufece\022\ufece\023\ufece\024\ufece\025\ufece\026" +
    "\ufece\027\ufece\030\ufece\031\ufece\032\ufece\033\ufece\034\ufece" +
    "\035\ufece\036\ufece\037\ufece\040\ufece\042\ufece\043\ufece\044" +
    "\ufece\045\ufece\046\ufece\047\ufece\050\ufece\051\ufece\052\ufece" +
    "\053\ufece\054\ufece\055\ufece\056\ufece\057\ufece\060\ufece\065" +
    "\ufece\066\ufece\073\ufece\074\ufece\075\ufece\001\002\000\144" +
    "\004\ufeda\005\ufeda\006\ufeda\007\ufeda\010\ufeda\011\ufeda\012" +
    "\ufeda\013\ufeda\014\ufeda\015\ufeda\016\ufeda\017\ufeda\020\ufeda" +
    "\021\ufeda\022\ufeda\023\ufeda\024\ufeda\025\ufeda\026\ufeda\027" +
    "\ufeda\030\ufeda\031\ufeda\032\ufeda\033\ufeda\034\ufeda\035\ufeda" +
    "\036\ufeda\037\ufeda\040\ufeda\042\ufeda\043\ufeda\044\ufeda\045" +
    "\ufeda\046\ufeda\047\ufeda\050\ufeda\051\ufeda\052\ufeda\053\ufeda" +
    "\054\ufeda\055\ufeda\056\ufeda\057\ufeda\060\ufeda\065\ufeda\066" +
    "\ufeda\073\ufeda\074\ufeda\075\ufeda\001\002\000\144\004\ufec8" +
    "\005\ufec8\006\ufec8\007\ufec8\010\ufec8\011\ufec8\012\ufec8\013" +
    "\ufec8\014\ufec8\015\ufec8\016\ufec8\017\ufec8\020\ufec8\021\ufec8" +
    "\022\ufec8\023\ufec8\024\ufec8\025\ufec8\026\ufec8\027\ufec8\030" +
    "\ufec8\031\ufec8\032\ufec8\033\ufec8\034\ufec8\035\ufec8\036\ufec8" +
    "\037\ufec8\040\ufec8\042\ufec8\043\ufec8\044\ufec8\045\ufec8\046" +
    "\ufec8\047\ufec8\050\ufec8\051\ufec8\052\ufec8\053\ufec8\054\ufec8" +
    "\055\ufec8\056\ufec8\057\ufec8\060\ufec8\065\ufec8\066\ufec8\073" +
    "\ufec8\074\ufec8\075\ufec8\001\002\000\144\004\ufec4\005\ufec4" +
    "\006\ufec4\007\ufec4\010\ufec4\011\ufec4\012\ufec4\013\ufec4\014" +
    "\ufec4\015\ufec4\016\ufec4\017\ufec4\020\ufec4\021\ufec4\022\ufec4" +
    "\023\ufec4\024\ufec4\025\ufec4\026\ufec4\027\ufec4\030\ufec4\031" +
    "\ufec4\032\ufec4\033\ufec4\034\ufec4\035\ufec4\036\ufec4\037\ufec4" +
    "\040\ufec4\042\ufec4\043\ufec4\044\ufec4\045\ufec4\046\ufec4\047" +
    "\ufec4\050\ufec4\051\ufec4\052\ufec4\053\ufec4\054\ufec4\055\ufec4" +
    "\056\ufec4\057\ufec4\060\ufec4\065\ufec4\066\ufec4\073\ufec4\074" +
    "\ufec4\075\ufec4\001\002\000\144\004\ufecc\005\ufecc\006\ufecc" +
    "\007\ufecc\010\ufecc\011\ufecc\012\ufecc\013\ufecc\014\ufecc\015" +
    "\ufecc\016\ufecc\017\ufecc\020\ufecc\021\ufecc\022\ufecc\023\ufecc" +
    "\024\ufecc\025\ufecc\026\ufecc\027\ufecc\030\ufecc\031\ufecc\032" +
    "\ufecc\033\ufecc\034\ufecc\035\ufecc\036\ufecc\037\ufecc\040\ufecc" +
    "\042\ufecc\043\ufecc\044\ufecc\045\ufecc\046\ufecc\047\ufecc\050" +
    "\ufecc\051\ufecc\052\ufecc\053\ufecc\054\ufecc\055\ufecc\056\ufecc" +
    "\057\ufecc\060\ufecc\065\ufecc\066\ufecc\073\ufecc\074\ufecc\075" +
    "\ufecc\001\002\000\144\004\ufeec\005\ufeec\006\ufeec\007\ufeec" +
    "\010\ufeec\011\ufeec\012\ufeec\013\ufeec\014\ufeec\015\ufeec\016" +
    "\ufeec\017\ufeec\020\ufeec\021\ufeec\022\ufeec\023\ufeec\024\ufeec" +
    "\025\ufeec\026\ufeec\027\ufeec\030\ufeec\031\ufeec\032\ufeec\033" +
    "\ufeec\034\ufeec\035\ufeec\036\ufeec\037\ufeec\040\ufeec\042\ufeec" +
    "\043\ufeec\044\ufeec\045\ufeec\046\ufeec\047\ufeec\050\ufeec\051" +
    "\ufeec\052\ufeec\053\ufeec\054\ufeec\055\ufeec\056\ufeec\057\ufeec" +
    "\060\ufeec\065\ufeec\066\ufeec\073\ufeec\074\ufeec\075\ufeec\001" +
    "\002\000\144\004\ufedd\005\ufedd\006\ufedd\007\ufedd\010\ufedd" +
    "\011\ufedd\012\ufedd\013\ufedd\014\ufedd\015\ufedd\016\ufedd\017" +
    "\ufedd\020\ufedd\021\ufedd\022\ufedd\023\ufedd\024\ufedd\025\ufedd" +
    "\026\ufedd\027\ufedd\030\ufedd\031\ufedd\032\ufedd\033\ufedd\034" +
    "\ufedd\035\ufedd\036\ufedd\037\ufedd\040\ufedd\042\ufedd\043\ufedd" +
    "\044\ufedd\045\ufedd\046\ufedd\047\ufedd\050\ufedd\051\ufedd\052" +
    "\ufedd\053\ufedd\054\ufedd\055\ufedd\056\ufedd\057\ufedd\060\ufedd" +
    "\065\ufedd\066\ufedd\073\ufedd\074\ufedd\075\ufedd\001\002\000" +
    "\144\004\ufee6\005\ufee6\006\ufee6\007\ufee6\010\ufee6\011\ufee6" +
    "\012\ufee6\013\ufee6\014\ufee6\015\ufee6\016\ufee6\017\ufee6\020" +
    "\ufee6\021\ufee6\022\ufee6\023\ufee6\024\ufee6\025\ufee6\026\ufee6" +
    "\027\ufee6\030\ufee6\031\ufee6\032\ufee6\033\ufee6\034\ufee6\035" +
    "\ufee6\036\ufee6\037\ufee6\040\ufee6\042\ufee6\043\ufee6\044\ufee6" +
    "\045\ufee6\046\ufee6\047\ufee6\050\ufee6\051\ufee6\052\ufee6\053" +
    "\ufee6\054\ufee6\055\ufee6\056\ufee6\057\ufee6\060\ufee6\065\ufee6" +
    "\066\ufee6\073\ufee6\074\ufee6\075\ufee6\001\002\000\144\004" +
    "\ufee9\005\ufee9\006\ufee9\007\ufee9\010\ufee9\011\ufee9\012\ufee9" +
    "\013\ufee9\014\ufee9\015\ufee9\016\ufee9\017\ufee9\020\ufee9\021" +
    "\ufee9\022\ufee9\023\ufee9\024\ufee9\025\ufee9\026\ufee9\027\ufee9" +
    "\030\ufee9\031\ufee9\032\ufee9\033\ufee9\034\ufee9\035\ufee9\036" +
    "\ufee9\037\ufee9\040\ufee9\042\ufee9\043\ufee9\044\ufee9\045\ufee9" +
    "\046\ufee9\047\ufee9\050\ufee9\051\ufee9\052\ufee9\053\ufee9\054" +
    "\ufee9\055\ufee9\056\ufee9\057\ufee9\060\ufee9\065\ufee9\066\ufee9" +
    "\073\ufee9\074\ufee9\075\ufee9\001\002\000\144\004\ufec6\005" +
    "\ufec6\006\ufec6\007\ufec6\010\ufec6\011\ufec6\012\ufec6\013\ufec6" +
    "\014\ufec6\015\ufec6\016\ufec6\017\ufec6\020\ufec6\021\ufec6\022" +
    "\ufec6\023\ufec6\024\ufec6\025\ufec6\026\ufec6\027\ufec6\030\ufec6" +
    "\031\ufec6\032\ufec6\033\ufec6\034\ufec6\035\ufec6\036\ufec6\037" +
    "\ufec6\040\ufec6\042\ufec6\043\ufec6\044\ufec6\045\ufec6\046\ufec6" +
    "\047\ufec6\050\ufec6\051\ufec6\052\ufec6\053\ufec6\054\ufec6\055" +
    "\ufec6\056\ufec6\057\ufec6\060\ufec6\065\ufec6\066\ufec6\073\ufec6" +
    "\074\ufec6\075\ufec6\001\002\000\144\004\ufec2\005\ufec2\006" +
    "\ufec2\007\ufec2\010\ufec2\011\ufec2\012\ufec2\013\ufec2\014\ufec2" +
    "\015\ufec2\016\ufec2\017\ufec2\020\ufec2\021\ufec2\022\ufec2\023" +
    "\ufec2\024\ufec2\025\ufec2\026\ufec2\027\ufec2\030\ufec2\031\ufec2" +
    "\032\ufec2\033\ufec2\034\ufec2\035\ufec2\036\ufec2\037\ufec2\040" +
    "\ufec2\042\ufec2\043\ufec2\044\ufec2\045\ufec2\046\ufec2\047\ufec2" +
    "\050\ufec2\051\ufec2\052\ufec2\053\ufec2\054\ufec2\055\ufec2\056" +
    "\ufec2\057\ufec2\060\ufec2\065\ufec2\066\ufec2\073\ufec2\074\ufec2" +
    "\075\ufec2\001\002\000\144\004\ufed2\005\ufed2\006\ufed2\007" +
    "\ufed2\010\ufed2\011\ufed2\012\ufed2\013\ufed2\014\ufed2\015\ufed2" +
    "\016\ufed2\017\ufed2\020\ufed2\021\ufed2\022\ufed2\023\ufed2\024" +
    "\ufed2\025\ufed2\026\ufed2\027\ufed2\030\ufed2\031\ufed2\032\ufed2" +
    "\033\ufed2\034\ufed2\035\ufed2\036\ufed2\037\ufed2\040\ufed2\042" +
    "\ufed2\043\ufed2\044\ufed2\045\ufed2\046\ufed2\047\ufed2\050\ufed2" +
    "\051\ufed2\052\ufed2\053\ufed2\054\ufed2\055\ufed2\056\ufed2\057" +
    "\ufed2\060\ufed2\065\ufed2\066\ufed2\073\ufed2\074\ufed2\075\ufed2" +
    "\001\002\000\144\004\ufed3\005\ufed3\006\ufed3\007\ufed3\010" +
    "\ufed3\011\ufed3\012\ufed3\013\ufed3\014\ufed3\015\ufed3\016\ufed3" +
    "\017\ufed3\020\ufed3\021\ufed3\022\ufed3\023\ufed3\024\ufed3\025" +
    "\ufed3\026\ufed3\027\ufed3\030\ufed3\031\ufed3\032\ufed3\033\ufed3" +
    "\034\ufed3\035\ufed3\036\ufed3\037\ufed3\040\ufed3\042\ufed3\043" +
    "\ufed3\044\ufed3\045\ufed3\046\ufed3\047\ufed3\050\ufed3\051\ufed3" +
    "\052\ufed3\053\ufed3\054\ufed3\055\ufed3\056\ufed3\057\ufed3\060" +
    "\ufed3\065\ufed3\066\ufed3\073\ufed3\074\ufed3\075\ufed3\001\002" +
    "\000\144\004\ufed4\005\ufed4\006\ufed4\007\ufed4\010\ufed4\011" +
    "\ufed4\012\ufed4\013\ufed4\014\ufed4\015\ufed4\016\ufed4\017\ufed4" +
    "\020\ufed4\021\ufed4\022\ufed4\023\ufed4\024\ufed4\025\ufed4\026" +
    "\ufed4\027\ufed4\030\ufed4\031\ufed4\032\ufed4\033\ufed4\034\ufed4" +
    "\035\ufed4\036\ufed4\037\ufed4\040\ufed4\042\ufed4\043\ufed4\044" +
    "\ufed4\045\ufed4\046\ufed4\047\ufed4\050\ufed4\051\ufed4\052\ufed4" +
    "\053\ufed4\054\ufed4\055\ufed4\056\ufed4\057\ufed4\060\ufed4\065" +
    "\ufed4\066\ufed4\073\ufed4\074\ufed4\075\ufed4\001\002\000\144" +
    "\004\ufee0\005\ufee0\006\ufee0\007\ufee0\010\ufee0\011\ufee0\012" +
    "\ufee0\013\ufee0\014\ufee0\015\ufee0\016\ufee0\017\ufee0\020\ufee0" +
    "\021\ufee0\022\ufee0\023\ufee0\024\ufee0\025\ufee0\026\ufee0\027" +
    "\ufee0\030\ufee0\031\ufee0\032\ufee0\033\ufee0\034\ufee0\035\ufee0" +
    "\036\ufee0\037\ufee0\040\ufee0\042\ufee0\043\ufee0\044\ufee0\045" +
    "\ufee0\046\ufee0\047\ufee0\050\ufee0\051\ufee0\052\ufee0\053\ufee0" +
    "\054\ufee0\055\ufee0\056\ufee0\057\ufee0\060\ufee0\065\ufee0\066" +
    "\ufee0\073\ufee0\074\ufee0\075\ufee0\001\002\000\144\004\ufeeb" +
    "\005\ufeeb\006\ufeeb\007\ufeeb\010\ufeeb\011\ufeeb\012\ufeeb\013" +
    "\ufeeb\014\ufeeb\015\ufeeb\016\ufeeb\017\ufeeb\020\ufeeb\021\ufeeb" +
    "\022\ufeeb\023\ufeeb\024\ufeeb\025\ufeeb\026\ufeeb\027\ufeeb\030" +
    "\ufeeb\031\ufeeb\032\ufeeb\033\ufeeb\034\ufeeb\035\ufeeb\036\ufeeb" +
    "\037\ufeeb\040\ufeeb\042\ufeeb\043\ufeeb\044\ufeeb\045\ufeeb\046" +
    "\ufeeb\047\ufeeb\050\ufeeb\051\ufeeb\052\ufeeb\053\ufeeb\054\ufeeb" +
    "\055\ufeeb\056\ufeeb\057\ufeeb\060\ufeeb\065\ufeeb\066\ufeeb\073" +
    "\ufeeb\074\ufeeb\075\ufeeb\001\002\000\144\004\ufec5\005\ufec5" +
    "\006\ufec5\007\ufec5\010\ufec5\011\ufec5\012\ufec5\013\ufec5\014" +
    "\ufec5\015\ufec5\016\ufec5\017\ufec5\020\ufec5\021\ufec5\022\ufec5" +
    "\023\ufec5\024\ufec5\025\ufec5\026\ufec5\027\ufec5\030\ufec5\031" +
    "\ufec5\032\ufec5\033\ufec5\034\ufec5\035\ufec5\036\ufec5\037\ufec5" +
    "\040\ufec5\042\ufec5\043\ufec5\044\ufec5\045\ufec5\046\ufec5\047" +
    "\ufec5\050\ufec5\051\ufec5\052\ufec5\053\ufec5\054\ufec5\055\ufec5" +
    "\056\ufec5\057\ufec5\060\ufec5\065\ufec5\066\ufec5\073\ufec5\074" +
    "\ufec5\075\ufec5\001\002\000\144\004\ufecb\005\ufecb\006\ufecb" +
    "\007\ufecb\010\ufecb\011\ufecb\012\ufecb\013\ufecb\014\ufecb\015" +
    "\ufecb\016\ufecb\017\ufecb\020\ufecb\021\ufecb\022\ufecb\023\ufecb" +
    "\024\ufecb\025\ufecb\026\ufecb\027\ufecb\030\ufecb\031\ufecb\032" +
    "\ufecb\033\ufecb\034\ufecb\035\ufecb\036\ufecb\037\ufecb\040\ufecb" +
    "\042\ufecb\043\ufecb\044\ufecb\045\ufecb\046\ufecb\047\ufecb\050" +
    "\ufecb\051\ufecb\052\ufecb\053\ufecb\054\ufecb\055\ufecb\056\ufecb" +
    "\057\ufecb\060\ufecb\065\ufecb\066\ufecb\073\ufecb\074\ufecb\075" +
    "\ufecb\001\002\000\144\004\ufee8\005\ufee8\006\ufee8\007\ufee8" +
    "\010\ufee8\011\ufee8\012\ufee8\013\ufee8\014\ufee8\015\ufee8\016" +
    "\ufee8\017\ufee8\020\ufee8\021\ufee8\022\ufee8\023\ufee8\024\ufee8" +
    "\025\ufee8\026\ufee8\027\ufee8\030\ufee8\031\ufee8\032\ufee8\033" +
    "\ufee8\034\ufee8\035\ufee8\036\ufee8\037\ufee8\040\ufee8\042\ufee8" +
    "\043\ufee8\044\ufee8\045\ufee8\046\ufee8\047\ufee8\050\ufee8\051" +
    "\ufee8\052\ufee8\053\ufee8\054\ufee8\055\ufee8\056\ufee8\057\ufee8" +
    "\060\ufee8\065\ufee8\066\ufee8\073\ufee8\074\ufee8\075\ufee8\001" +
    "\002\000\144\004\ufec1\005\ufec1\006\ufec1\007\ufec1\010\ufec1" +
    "\011\ufec1\012\ufec1\013\ufec1\014\ufec1\015\ufec1\016\ufec1\017" +
    "\ufec1\020\ufec1\021\ufec1\022\ufec1\023\ufec1\024\ufec1\025\ufec1" +
    "\026\ufec1\027\ufec1\030\ufec1\031\ufec1\032\ufec1\033\ufec1\034" +
    "\ufec1\035\ufec1\036\ufec1\037\ufec1\040\ufec1\042\ufec1\043\ufec1" +
    "\044\ufec1\045\ufec1\046\ufec1\047\ufec1\050\ufec1\051\ufec1\052" +
    "\ufec1\053\ufec1\054\ufec1\055\ufec1\056\ufec1\057\ufec1\060\ufec1" +
    "\065\ufec1\066\ufec1\073\ufec1\074\ufec1\075\ufec1\001\002\000" +
    "\144\004\ufebe\005\ufebe\006\ufebe\007\ufebe\010\ufebe\011\ufebe" +
    "\012\ufebe\013\ufebe\014\ufebe\015\ufebe\016\ufebe\017\ufebe\020" +
    "\ufebe\021\ufebe\022\ufebe\023\ufebe\024\ufebe\025\ufebe\026\ufebe" +
    "\027\ufebe\030\ufebe\031\ufebe\032\ufebe\033\ufebe\034\ufebe\035" +
    "\ufebe\036\ufebe\037\ufebe\040\ufebe\042\ufebe\043\ufebe\044\ufebe" +
    "\045\ufebe\046\ufebe\047\ufebe\050\ufebe\051\ufebe\052\ufebe\053" +
    "\ufebe\054\ufebe\055\ufebe\056\ufebe\057\ufebe\060\ufebe\065\ufebe" +
    "\066\ufebe\073\ufebe\074\ufebe\075\ufebe\001\002\000\144\004" +
    "\ufee4\005\ufee4\006\ufee4\007\ufee4\010\ufee4\011\ufee4\012\ufee4" +
    "\013\ufee4\014\ufee4\015\ufee4\016\ufee4\017\ufee4\020\ufee4\021" +
    "\ufee4\022\ufee4\023\ufee4\024\ufee4\025\ufee4\026\ufee4\027\ufee4" +
    "\030\ufee4\031\ufee4\032\ufee4\033\ufee4\034\ufee4\035\ufee4\036" +
    "\ufee4\037\ufee4\040\ufee4\042\ufee4\043\ufee4\044\ufee4\045\ufee4" +
    "\046\ufee4\047\ufee4\050\ufee4\051\ufee4\052\ufee4\053\ufee4\054" +
    "\ufee4\055\ufee4\056\ufee4\057\ufee4\060\ufee4\065\ufee4\066\ufee4" +
    "\073\ufee4\074\ufee4\075\ufee4\001\002\000\144\004\ufed0\005" +
    "\ufed0\006\ufed0\007\ufed0\010\ufed0\011\ufed0\012\ufed0\013\ufed0" +
    "\014\ufed0\015\ufed0\016\ufed0\017\ufed0\020\ufed0\021\ufed0\022" +
    "\ufed0\023\ufed0\024\ufed0\025\ufed0\026\ufed0\027\ufed0\030\ufed0" +
    "\031\ufed0\032\ufed0\033\ufed0\034\ufed0\035\ufed0\036\ufed0\037" +
    "\ufed0\040\ufed0\042\ufed0\043\ufed0\044\ufed0\045\ufed0\046\ufed0" +
    "\047\ufed0\050\ufed0\051\ufed0\052\ufed0\053\ufed0\054\ufed0\055" +
    "\ufed0\056\ufed0\057\ufed0\060\ufed0\065\ufed0\066\ufed0\073\ufed0" +
    "\074\ufed0\075\ufed0\001\002\000\144\004\ufed5\005\ufed5\006" +
    "\ufed5\007\ufed5\010\ufed5\011\ufed5\012\ufed5\013\ufed5\014\ufed5" +
    "\015\ufed5\016\ufed5\017\ufed5\020\ufed5\021\ufed5\022\ufed5\023" +
    "\ufed5\024\ufed5\025\ufed5\026\ufed5\027\ufed5\030\ufed5\031\ufed5" +
    "\032\ufed5\033\ufed5\034\ufed5\035\ufed5\036\ufed5\037\ufed5\040" +
    "\ufed5\042\ufed5\043\ufed5\044\ufed5\045\ufed5\046\ufed5\047\ufed5" +
    "\050\ufed5\051\ufed5\052\ufed5\053\ufed5\054\ufed5\055\ufed5\056" +
    "\ufed5\057\ufed5\060\ufed5\065\ufed5\066\ufed5\073\ufed5\074\ufed5" +
    "\075\ufed5\001\002\000\144\004\ufed6\005\ufed6\006\ufed6\007" +
    "\ufed6\010\ufed6\011\ufed6\012\ufed6\013\ufed6\014\ufed6\015\ufed6" +
    "\016\ufed6\017\ufed6\020\ufed6\021\ufed6\022\ufed6\023\ufed6\024" +
    "\ufed6\025\ufed6\026\ufed6\027\ufed6\030\ufed6\031\ufed6\032\ufed6" +
    "\033\ufed6\034\ufed6\035\ufed6\036\ufed6\037\ufed6\040\ufed6\042" +
    "\ufed6\043\ufed6\044\ufed6\045\ufed6\046\ufed6\047\ufed6\050\ufed6" +
    "\051\ufed6\052\ufed6\053\ufed6\054\ufed6\055\ufed6\056\ufed6\057" +
    "\ufed6\060\ufed6\065\ufed6\066\ufed6\073\ufed6\074\ufed6\075\ufed6" +
    "\001\002\000\144\004\ufee5\005\ufee5\006\ufee5\007\ufee5\010" +
    "\ufee5\011\ufee5\012\ufee5\013\ufee5\014\ufee5\015\ufee5\016\ufee5" +
    "\017\ufee5\020\ufee5\021\ufee5\022\ufee5\023\ufee5\024\ufee5\025" +
    "\ufee5\026\ufee5\027\ufee5\030\ufee5\031\ufee5\032\ufee5\033\ufee5" +
    "\034\ufee5\035\ufee5\036\ufee5\037\ufee5\040\ufee5\042\ufee5\043" +
    "\ufee5\044\ufee5\045\ufee5\046\ufee5\047\ufee5\050\ufee5\051\ufee5" +
    "\052\ufee5\053\ufee5\054\ufee5\055\ufee5\056\ufee5\057\ufee5\060" +
    "\ufee5\065\ufee5\066\ufee5\073\ufee5\074\ufee5\075\ufee5\001\002" +
    "\000\144\004\ufede\005\ufede\006\ufede\007\ufede\010\ufede\011" +
    "\ufede\012\ufede\013\ufede\014\ufede\015\ufede\016\ufede\017\ufede" +
    "\020\ufede\021\ufede\022\ufede\023\ufede\024\ufede\025\ufede\026" +
    "\ufede\027\ufede\030\ufede\031\ufede\032\ufede\033\ufede\034\ufede" +
    "\035\ufede\036\ufede\037\ufede\040\ufede\042\ufede\043\ufede\044" +
    "\ufede\045\ufede\046\ufede\047\ufede\050\ufede\051\ufede\052\ufede" +
    "\053\ufede\054\ufede\055\ufede\056\ufede\057\ufede\060\ufede\065" +
    "\ufede\066\ufede\073\ufede\074\ufede\075\ufede\001\002\000\064" +
    "\003\uff23\006\uff23\007\uff23\010\uff23\012\uff23\014\uff23\015" +
    "\uff23\016\uff23\017\uff23\020\uff23\023\uff23\044\uff23\051\uff23" +
    "\054\uff23\055\uff23\056\uff23\057\uff23\060\uff23\061\uff23\062" +
    "\uff23\063\uff23\071\uff23\072\uff23\074\uff23\075\042\001\002" +
    "\000\004\044\u022d\001\002\000\004\031\u022e\001\002\000" +
    "\014\033\uffee\043\uffee\044\uffee\050\uffee\052\uffee\001\002" +
    "\000\014\033\066\043\067\044\063\050\072\052\071\001" +
    "\002\000\006\026\uffed\044\uffed\001\002\000\006\026\212" +
    "\044\213\001\002\000\062\003\uffec\006\uffec\007\uffec\010" +
    "\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\023\uffec\044\uffec\051\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\063\uffec\071\uffec\072\uffec" +
    "\074\uffec\001\002\000\004\023\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0231\000\010\002\004\023\006\024\003\001\001\000" +
    "\004\003\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\103\015\001\001\000\002\001\001\000\004\023\020\001" +
    "\001\000\002\001\001\000\022\004\034\005\031\006\021" +
    "\020\032\021\030\026\040\027\037\035\042\001\001\000" +
    "\022\004\u0232\005\031\006\021\020\032\021\030\026\040" +
    "\027\037\035\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u01f8\001\001\000\004" +
    "\034\u01f6\001\001\000\002\001\001\000\022\004\u01f5\005" +
    "\031\006\021\020\032\021\030\026\040\027\037\035\042" +
    "\001\001\000\022\004\u01f4\005\031\006\021\020\032\021" +
    "\030\026\040\027\037\035\042\001\001\000\022\004\u01f3" +
    "\005\031\006\021\020\032\021\030\026\040\027\037\035" +
    "\042\001\001\000\004\040\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\203\005\031\006\021\020" +
    "\032\021\030\026\040\027\037\035\042\001\001\000\022" +
    "\004\202\005\031\006\021\020\032\021\030\026\040\027" +
    "\037\035\042\001\001\000\022\004\201\005\031\006\021" +
    "\020\032\021\030\026\040\027\037\035\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\044\001\001" +
    "\000\004\072\046\001\001\000\012\066\067\067\064\070" +
    "\063\071\061\001\001\000\004\105\047\001\001\000\004" +
    "\012\052\001\001\000\002\001\001\000\004\023\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\055" +
    "\001\001\000\004\072\056\001\001\000\004\113\057\001" +
    "\001\000\004\012\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\066\067\067\076\070\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\066\067\067\111\070\063\001\001\000\010" +
    "\066\067\067\110\070\063\001\001\000\010\066\067\067" +
    "\107\070\063\001\001\000\010\066\067\067\106\070\063" +
    "\001\001\000\010\066\067\067\105\070\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\061\123\062\122\063\121\001" +
    "\001\000\002\001\001\000\010\064\132\065\131\066\127" +
    "\001\001\000\002\001\001\000\010\064\167\065\131\066" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\064\146\065\131" +
    "\066\127\001\001\000\010\064\145\065\131\066\127\001" +
    "\001\000\010\064\144\065\131\066\127\001\001\000\002" +
    "\001\001\000\010\064\143\065\131\066\127\001\001\000" +
    "\010\064\142\065\131\066\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\205\001\001\000\012\066\067\067" +
    "\064\070\063\071\206\001\001\000\004\107\207\001\001" +
    "\000\004\013\210\001\001\000\002\001\001\000\004\023" +
    "\220\001\001\000\002\001\001\000\004\114\214\001\001" +
    "\000\012\066\067\067\064\070\063\071\215\001\001\000" +
    "\004\115\216\001\001\000\004\013\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\123\233\126\232\001\001\000\002\001\001" +
    "\000\006\042\235\043\234\001\001\000\004\035\u01d2\001" +
    "\001\000\002\001\001\000\004\124\237\001\001\000\002" +
    "\001\001\000\004\023\241\001\001\000\004\045\242\001" +
    "\001\000\040\005\261\011\274\021\257\025\246\026\270" +
    "\027\267\030\271\035\042\036\260\050\255\052\272\053" +
    "\250\054\263\055\254\125\245\001\001\000\004\145\u01c7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\147\u01b9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\141\u016d\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\150\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\132\276\001\001\000\014\064" +
    "\300\065\131\066\127\077\277\100\302\001\001\000\002" +
    "\001\001\000\004\101\360\001\001\000\012\064\300\065" +
    "\131\066\127\077\354\001\001\000\004\133\305\001\001" +
    "\000\014\064\300\065\131\066\127\077\277\100\353\001" +
    "\001\000\004\155\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\310\001\001\000\004\045\311\001" +
    "\001\000\040\005\261\011\274\021\257\025\246\026\270" +
    "\027\267\030\271\035\042\036\260\050\255\052\272\053" +
    "\250\054\263\055\254\057\312\001\001\000\002\001\001" +
    "\000\004\131\314\001\001\000\010\066\067\067\315\070" +
    "\063\001\001\000\002\001\001\000\004\023\317\001\001" +
    "\000\002\001\001\000\004\134\321\001\001\000\006\023" +
    "\324\051\322\001\001\000\002\001\001\000\004\140\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\330\001\001\000\004\045\331\001\001" +
    "\000\040\005\261\011\274\021\257\025\246\026\270\027" +
    "\267\030\271\035\042\036\260\050\255\052\272\053\250" +
    "\054\263\055\254\057\332\001\001\000\002\001\001\000" +
    "\004\023\334\001\001\000\002\001\001\000\004\135\336" +
    "\001\001\000\014\064\300\065\131\066\127\077\277\100" +
    "\337\001\001\000\004\136\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\343\001\001\000\004\045" +
    "\344\001\001\000\040\005\261\011\274\021\257\025\246" +
    "\026\270\027\267\030\271\035\042\036\260\050\255\052" +
    "\272\053\250\054\263\055\254\057\345\001\001\000\002" +
    "\001\001\000\004\137\347\001\001\000\006\023\324\051" +
    "\350\001\001\000\002\001\001\000\014\064\300\065\131" +
    "\066\127\077\277\100\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\064\357\065\131" +
    "\066\127\077\356\001\001\000\002\001\001\000\004\101" +
    "\360\001\001\000\010\064\371\065\131\066\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\377\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\151\u0101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u0104\001\001\000\004\056\u0106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\u0108\001\001\000\002" +
    "\001\001\000\004\023\u010a\001\001\000\004\152\u010b\001" +
    "\001\000\004\045\u010c\001\001\000\042\005\261\011\274" +
    "\021\257\025\246\026\270\027\267\030\271\035\042\036" +
    "\260\050\255\052\272\053\250\054\263\055\254\057\u010e" +
    "\060\u010d\001\001\000\004\153\u0112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0111\001\001\000\002" +
    "\001\001\000\004\056\u0113\001\001\000\002\001\001\000" +
    "\004\023\u0115\001\001\000\002\001\001\000\004\023\u0117" +
    "\001\001\000\004\154\u0118\001\001\000\004\045\u0119\001" +
    "\001\000\042\005\261\011\274\021\257\025\246\026\270" +
    "\027\267\030\271\035\042\036\260\050\255\052\272\053" +
    "\250\054\263\055\254\057\u010e\060\u011a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\061" +
    "\123\062\122\063\u016a\001\001\000\006\036\u011f\106\205" +
    "\001\001\000\002\001\001\000\006\031\u0122\033\u0124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u0160\001\001\000\002\001\001\000\004\034" +
    "\u0128\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u0159\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\u015b\033\u0124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\156\u0165\001\001\000" +
    "\004\023\u0166\001\001\000\002\001\001\000\004\157\u0168" +
    "\001\001\000\004\023\u0169\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\u0170\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\142\u0172\001\001\000\002\001\001" +
    "\000\004\047\u0175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\064\300\065\131\066\127\077" +
    "\277\100\u017b\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\073\u017f\001\001\000\004\144\u0187\001\001\000" +
    "\002\001\001\000\004\143\u0181\001\001\000\002\001\001" +
    "\000\004\023\u0183\001\001\000\004\045\u0184\001\001\000" +
    "\036\005\261\011\274\021\257\025\246\026\270\027\267" +
    "\030\271\035\042\036\260\050\255\052\272\053\250\054" +
    "\263\055\254\001\001\000\004\023\u0186\001\001\000\002" +
    "\001\001\000\006\075\u0189\076\u018c\001\001\000\006\075" +
    "\u01a3\076\u018c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\075\u01a2\076\u018c\001\001\000" +
    "\006\075\u01a1\076\u018c\001\001\000\006\075\u01a0\076\u018c" +
    "\001\001\000\006\075\u019f\076\u018c\001\001\000\006\075" +
    "\u019e\076\u018c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\u01a7\033\u0124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\160\u01aa\001\001\000\004\023\u01ab\001\001" +
    "\000\002\001\001\000\004\161\u01ad\001\001\000\004\023" +
    "\u01ae\001\001\000\002\001\001\000\006\031\u01b0\033\u0124" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u01b3\001\001\000\002\001\001\000\006\031\u01b5\033\u0124" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u01b8\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u01bb\001\001\000\004\045\u01bc\001\001\000\040\005" +
    "\261\011\274\021\257\025\246\026\270\027\267\030\271" +
    "\035\042\036\260\050\255\052\272\053\250\054\263\055" +
    "\254\057\u01bd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\064\300\065\131\066\127\077" +
    "\277\100\u01c1\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u01c4\001\001\000\002\001\001\000\004\023" +
    "\u01c6\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\064\300\065\131\066\127\077\277\100\u01c9\001\001\000" +
    "\004\146\u01ca\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u01cd\001\001\000\004\045\u01ce\001\001\000" +
    "\040\005\261\011\274\021\257\025\246\026\270\027\267" +
    "\030\271\035\042\036\260\050\255\052\272\053\250\054" +
    "\263\055\254\057\u01cf\001\001\000\002\001\001\000\004" +
    "\023\u01d1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\127\u01d6\001\001" +
    "\000\002\001\001\000\004\023\u01d8\001\001\000\004\045" +
    "\u01d9\001\001\000\040\005\261\011\274\021\257\025\246" +
    "\026\270\027\267\030\271\035\042\036\260\050\255\052" +
    "\272\053\250\054\263\055\254\130\u01da\001\001\000\002" +
    "\001\001\000\004\023\u01dc\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\u01e0\001\001\000\004\121\u01eb" +
    "\001\001\000\006\042\u01e1\043\234\001\001\000\002\001" +
    "\001\000\004\117\u01e3\001\001\000\002\001\001\000\004" +
    "\023\u01e5\001\001\000\004\045\u01e6\001\001\000\040\005" +
    "\261\011\274\021\257\025\246\026\270\027\267\030\271" +
    "\035\042\036\260\050\255\052\272\053\250\054\263\055" +
    "\254\057\u01e7\001\001\000\004\120\u01e8\001\001\000\002" +
    "\001\001\000\004\023\u01ea\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u01ed\001\001\000\004\045\u01ee" +
    "\001\001\000\040\005\261\011\274\021\257\025\246\026" +
    "\270\027\267\030\271\035\042\036\260\050\255\052\272" +
    "\053\250\054\263\055\254\057\u01ef\001\001\000\004\122" +
    "\u01f0\001\001\000\002\001\001\000\004\023\u01f2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u01f7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u022a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\110\u022e\001\001\000" +
    "\012\066\067\067\064\070\063\071\u022f\001\001\000\004" +
    "\111\u0230\001\001\000\004\013\u0231\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxJAVA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxJAVA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxJAVA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public int jerarquia = 0;
    public String tipoActual = "";
    public TablaSimbolos tabla;
    public OperacionesJAVA op = new OperacionesJAVA();
    public VerifJAVA verif = new VerifJAVA();
    public static boolean todoCorrecto = true;
    public String tipoMetodo = "";

    /*Variables para los cuartetos*/

    public int contVars = 0;
    public String idSwitch = "";
    ArrayList<String> arrayFinales = new ArrayList<>();
    public int contFinales = 0;
    public static String aux2, aux3;
    public ArrayList<Nodo> auxCuarpeta = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaFor = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<Boolean> usoPila = new ArrayList<>();
    public static boolean inst = false;
    public ArrayList<String> pilaEtInst = new ArrayList<>();
    public static String etInst = "";
    public ManejoCondiciones manejo = new ManejoCondiciones();
    public ManejoJava manejoJV = new ManejoJava();
    
    /*---------------------------------------- CODIGO EJECUTABLE ---------------------------------------------*/

    public String metodo = "", clase = "";
    public ExeJava exe = new ExeJava();

    public SintaxJAVA(AnalizadorLexico lex, TablaSimbolos tabla){
        super(lex);
        this.tabla = tabla;
        contVars = tabla.getObJava().getContVars();
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
        int fila = s.left + PanelPrincipal.totalLineas;
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+fila,"");   
        PanelPrincipal.errores += "Fila: "+fila+" Columna:"+s.right+" Tipo de error: SINTACTICO.\n";
    }

   /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna:"+s.right+" Tipo de error: SINTACTICO.\n";
    }*/


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxJAVA$actions {
  private final SintaxJAVA parser;

  /** Constructor */
  CUP$SintaxJAVA$actions(SintaxJAVA parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxJAVA$do_action(
    int                        CUP$SintaxJAVA$act_num,
    java_cup.runtime.lr_parser CUP$SintaxJAVA$parser,
    java.util.Stack            CUP$SintaxJAVA$stack,
    int                        CUP$SintaxJAVA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxJAVA$result;

      /* select the action based on the action number */
      switch (CUP$SintaxJAVA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TEXTO_PLANO2 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // TEXTO_PLANO2 ::= TEXTO_PLANO2 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condTrue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condFalse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // TEXTO_PLANO2 ::= TEXTO_PLANO2 enter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT = a + "\n"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // TEXTO_PLANO2 ::= TEXTO_PLANO2 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // TEXTO_PLANO2 ::= TEXTO_PLANO2 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TEXTO_PLANO2 ::= TEXTO_PLANO2 guionBajo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TEXTO_PLANO2 ::= TEXTO_PLANO2 comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TEXTO_PLANO2 ::= TEXTO_PLANO2 pleca 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TEXTO_PLANO2 ::= TEXTO_PLANO2 ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TEXTO_PLANO2 ::= TEXTO_PLANO2 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TEXTO_PLANO2 ::= TEXTO_PLANO2 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TEXTO_PLANO2 ::= TEXTO_PLANO2 porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TEXTO_PLANO2 ::= TEXTO_PLANO2 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TEXTO_PLANO2 ::= TEXTO_PLANO2 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TEXTO_PLANO2 ::= TEXTO_PLANO2 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TEXTO_PLANO2 ::= TEXTO_PLANO2 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TEXTO_PLANO2 ::= TEXTO_PLANO2 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TEXTO_PLANO2 ::= TEXTO_PLANO2 admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // TEXTO_PLANO2 ::= TEXTO_PLANO2 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TEXTO_PLANO2 ::= TEXTO_PLANO2 puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TEXTO_PLANO2 ::= TEXTO_PLANO2 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // TEXTO_PLANO2 ::= TEXTO_PLANO2 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // TEXTO_PLANO2 ::= TEXTO_PLANO2 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // TEXTO_PLANO2 ::= TEXTO_PLANO2 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TEXTO_PLANO2 ::= TEXTO_PLANO2 llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TEXTO_PLANO2 ::= TEXTO_PLANO2 llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // TEXTO_PLANO2 ::= TEXTO_PLANO2 clase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TEXTO_PLANO2 ::= TEXTO_PLANO2 tipoPublic 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TEXTO_PLANO2 ::= TEXTO_PLANO2 mensaje2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condThis 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TEXTO_PLANO2 ::= TEXTO_PLANO2 mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TEXTO_PLANO2 ::= TEXTO_PLANO2 retorno 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TEXTO_PLANO2 ::= TEXTO_PLANO2 def 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // TEXTO_PLANO2 ::= TEXTO_PLANO2 quiebre 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // TEXTO_PLANO2 ::= TEXTO_PLANO2 noCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condSwitch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // TEXTO_PLANO2 ::= TEXTO_PLANO2 tipoVoid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // TEXTO_PLANO2 ::= TEXTO_PLANO2 tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // TEXTO_PLANO2 ::= TEXTO_PLANO2 tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // TEXTO_PLANO2 ::= TEXTO_PLANO2 tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // TEXTO_PLANO2 ::= TEXTO_PLANO2 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // TEXTO_PLANO2 ::= TEXTO_PLANO2 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // TEXTO_PLANO ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // TEXTO_PLANO ::= TEXTO_PLANO resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // TEXTO_PLANO ::= TEXTO_PLANO condTrue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // TEXTO_PLANO ::= TEXTO_PLANO condFalse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT= a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // TEXTO_PLANO ::= TEXTO_PLANO id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // TEXTO_PLANO ::= TEXTO_PLANO numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // TEXTO_PLANO ::= TEXTO_PLANO guionBajo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // TEXTO_PLANO ::= TEXTO_PLANO comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // TEXTO_PLANO ::= TEXTO_PLANO pleca 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // TEXTO_PLANO ::= TEXTO_PLANO ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // TEXTO_PLANO ::= TEXTO_PLANO mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // TEXTO_PLANO ::= TEXTO_PLANO menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // TEXTO_PLANO ::= TEXTO_PLANO porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TEXTO_PLANO ::= TEXTO_PLANO div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // TEXTO_PLANO ::= TEXTO_PLANO por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // TEXTO_PLANO ::= TEXTO_PLANO menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // TEXTO_PLANO ::= TEXTO_PLANO mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // TEXTO_PLANO ::= TEXTO_PLANO igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // TEXTO_PLANO ::= TEXTO_PLANO admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // TEXTO_PLANO ::= TEXTO_PLANO dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TEXTO_PLANO ::= TEXTO_PLANO puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // TEXTO_PLANO ::= TEXTO_PLANO parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // TEXTO_PLANO ::= TEXTO_PLANO condThis 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // TEXTO_PLANO ::= TEXTO_PLANO parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // TEXTO_PLANO ::= TEXTO_PLANO agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // TEXTO_PLANO ::= TEXTO_PLANO agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // TEXTO_PLANO ::= TEXTO_PLANO llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // TEXTO_PLANO ::= TEXTO_PLANO llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // TEXTO_PLANO ::= TEXTO_PLANO clase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // TEXTO_PLANO ::= TEXTO_PLANO tipoPublic 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TEXTO_PLANO ::= TEXTO_PLANO mensaje2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TEXTO_PLANO ::= TEXTO_PLANO mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TEXTO_PLANO ::= TEXTO_PLANO condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TEXTO_PLANO ::= TEXTO_PLANO retorno 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TEXTO_PLANO ::= TEXTO_PLANO def 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TEXTO_PLANO ::= TEXTO_PLANO quiebre 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TEXTO_PLANO ::= TEXTO_PLANO condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TEXTO_PLANO ::= TEXTO_PLANO noCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TEXTO_PLANO ::= TEXTO_PLANO condSwitch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TEXTO_PLANO ::= TEXTO_PLANO condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TEXTO_PLANO ::= TEXTO_PLANO condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TEXTO_PLANO ::= TEXTO_PLANO condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TEXTO_PLANO ::= TEXTO_PLANO tipoVoid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TEXTO_PLANO ::= TEXTO_PLANO tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TEXTO_PLANO ::= TEXTO_PLANO tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // TEXTO_PLANO ::= TEXTO_PLANO tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TEXTO_PLANO ::= TEXTO_PLANO punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TEXTO_PLANO ::= TEXTO_PLANO coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ENTER2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ENTER2",18, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // ENTER2 ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ENTER2",18, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ENTER2 ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ENTER2",18, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ENTER ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ENTER",17, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // ENTER ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ENTER",17, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // COMENTARIO_B ::= comentario_b TEXTO_PLANO2 comentario_c ENTER 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",21, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // COMENTARIO_A ::= comentario_a TEXTO_PLANO ENTER 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("COMENTARIO_A",20, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TEXTO2 ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO2",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TEXTO2 ::= mas TEXTO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO2",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // VAL_TEXTO ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // VAL_TEXTO ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // VAL_TEXTO ::= menos id 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Float", aleft+PanelPrincipal.totalLineas, aright); 
                                                                        String devolver = parser.manejoJV.devolverVarSwitch(parser.tabla, a.toString(), parser.metodo, parser.clase);
                                                                        RESULT = b.toString()+devolver; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // VAL_TEXTO ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // VAL_TEXTO ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // VAL_TEXTO ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Float", aleft+PanelPrincipal.totalLineas, aright); 
                                                                        RESULT = parser.manejoJV.devolverVarSwitch(parser.tabla, a.toString(), parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TEXTO ::= comilla TEXTO_PLANO comilla TEXTO2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarMensaje(parser.tabla.getObJava(), a.toString()+b.toString()+c.toString(), d); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TEXTO ::= VAL_TEXTO TEXTO2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarMensaje(parser.tabla.getObJava(), a, b); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // MENSAJE ::= mensaje2 parentesis_a TEXTO parentesis_b puntoComa ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		 parser.manejoJV.mostrarMensaje(parser.tabla.getObJava(), a);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("MENSAJE",7, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // MENSAJE ::= mensaje parentesis_a TEXTO parentesis_b puntoComa ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		 parser.manejoJV.mostrarMensaje(parser.tabla.getObJava(), a); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("MENSAJE",7, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TIPO_INPUT ::= floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TIPO_INPUT ::= charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT="Char"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TIPO_INPUT ::= intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // LECTURA_DATOS ::= TIPO_INPUT parentesis_a parentesis_b puntoComa NT$46 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$46 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
  parser.manejoJV.crearScanf(parser.tabla, "", a, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$46",111, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // LECTURA_DATOS ::= TIPO_INPUT parentesis_a TEXTO parentesis_b puntoComa NT$45 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$45 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
  parser.manejoJV.mostrarMensaje(parser.tabla.getObJava(), c);   
                                                                                                    parser.manejoJV.crearScanf(parser.tabla, "", a, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$45",110, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // LECTURA_DATOS ::= id igual TIPO_INPUT parentesis_a parentesis_b puntoComa NT$44 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$44 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
  parser.manejoJV.crearScanf(parser.tabla, a.toString(), b, parser.metodo, parser.clase);   
                                                                                                    parser.verif.verifInput(parser.tabla.getObJava(), a.toString(), b, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$44",109, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // LECTURA_DATOS ::= id igual TIPO_INPUT parentesis_a TEXTO parentesis_b puntoComa NT$43 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$43 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
  parser.manejoJV.mostrarMensaje(parser.tabla.getObJava(), c); 
                                                                                                    parser.manejoJV.crearScanf(parser.tabla, a.toString(), b, parser.metodo, parser.clase);  
                                                                                                    parser.verif.verifInput(parser.tabla.getObJava(), a.toString(), b, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$43",108, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // OP2 ::= admiracion igual 
            {
              String RESULT =null;
		 RESULT="!="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // OP2 ::= igual igual 
            {
              String RESULT =null;
		 RESULT="=="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // OP2 ::= menor igual 
            {
              String RESULT =null;
		 RESULT="<="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OP2 ::= menor 
            {
              String RESULT =null;
		 RESULT="<"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // OP2 ::= mayor igual 
            {
              String RESULT =null;
		 RESULT=">="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // OP2 ::= mayor 
            {
              String RESULT =null;
		 RESULT=">"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // VAL_COND ::= menos numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // VAL_COND ::= menos numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // VAL_COND ::= menos id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tip=parser.op.buscarVariable(parser.tabla.getObJava(), a.toString(), parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright);  RESULT = new NodoBoolean(tip, a.toString()+b.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // VAL_COND ::= menos comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // VAL_COND ::= menos comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // VAL_COND ::= comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // VAL_COND ::= comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // VAL_COND ::= menos METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String et = "-"+a.getId();
                                                                        RESULT = new NodoBoolean(a.getTipo(), et); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // VAL_COND ::= METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // VAL_COND ::= numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // VAL_COND ::= numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // VAL_COND ::= id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tip = parser.op.buscarVariable(parser.tabla.getObJava(), a.toString(), parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); RESULT = new NodoBoolean(tip, a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // OP_COND ::= VAL_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.devEtiquetaIndividual(parser.tabla, a, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OP_COND ::= OP_COND porcentaje OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "modulo"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OP_COND ::= OP_COND div OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "div"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OP_COND ::= OP_COND por OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "mult"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OP_COND ::= OP_COND menos OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "resta"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OP_COND ::= OP_COND mas OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "suma"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OP_COND ::= parentesis_a OP_COND parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // BOOLEAN3 ::= OP_COND OP2 OP_COND 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=parser.manejoJV.agregarBooleans(parser.tabla.getObJava(), parser.pilaFalsas, a, b, c, parser.jerarquia);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("BOOLEAN3",61, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXT2 ::= admiracion BOOLEAN3 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.cambiarGotos(a); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",62, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXT2 ::= admiracion parentesis_a BOOLEAN3 parentesis_b 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT = parser.manejoJV.cambiarGotos(a); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",62, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXT2 ::= BOOLEAN3 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a;  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",62, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXT2 ::= EXT2 or NT$42 EXT2 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.manejoJV.manejoOr(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta,  a, b, parser.jerarquia);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",62, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$42 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.aux3 = parser.aux2; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$42",107, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXT2 ::= EXT2 and EXT2 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.manejoAnd(a, b); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",62, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // VAL_SWITCH ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_SWITCH",58, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // VAL_SWITCH ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_SWITCH",58, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // VAL_SWITCH ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verifVarSwitch(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
                                                           RESULT = parser.manejoJV.devolverVarSwitch(parser.tabla, a.toString(), parser.metodo, parser.clase);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_SWITCH",58, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // RETORNO_SWITCH ::= RETORNO 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO_SWITCH",46, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // RETORNO_SWITCH ::= quiebre puntoComa ENTER 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO_SWITCH",46, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CASOS_SWITCH ::= 
            {
              Boolean RESULT =null;
		  RESULT = false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CASOS_SWITCH",44, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CASOS_SWITCH ::= def dosPuntos ENTER NT$41 CUERPO_METODO RETORNO_SWITCH 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                            parser.jerarquia--;  
                                                                            RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CASOS_SWITCH",44, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$41 ::= 
            {
              Boolean RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$41",106, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CASOS_SWITCH ::= noCase VAL_SWITCH dosPuntos ENTER NT$39 CUERPO_METODO RETORNO_SWITCH NT$40 CASOS_SWITCH 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=parser.op.retornarBoolCase(a, b, c); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CASOS_SWITCH",44, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$40 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.manejoJV.agregarFinCase(parser.tabla.getObJava(), parser.arrayFinales, parser.jerarquia);  
                                                                            parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                            parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$40",105, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$39 ::= 
            {
              Boolean RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
  parser.jerarquia++; 
                                                                            parser.manejoJV.agregarCaseSwitch(parser.tabla.getObJava(), parser.jerarquia, parser.idSwitch, h, "==");  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$39",104, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SWITCH ::= condSwitch NT$37 parentesis_a VAL_SWITCH NT$38 parentesis_b llave_a ENTER CASOS_SWITCH llave_b ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		  parser.tabla.getObJava().getCuarpeta().add(new Nodo("ETIQUETA", parser.arrayFinales.get(parser.arrayFinales.size()-1), null, null, parser.jerarquia)); 
                                                                            parser.arrayFinales.remove(parser.arrayFinales.size()-1); 
                                                                            parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("SWITCH",43, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$38 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.arrayFinales.add("etFinal_"+parser.contFinales); 
                                                                            parser.contFinales++;  
                                                                            parser.idSwitch = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$38",103, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$37 ::= 
            {
              Boolean RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$37",102, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DO_WHILE ::= condDo NT$36 llave_a ENTER CUERPO_METODO RETORNO llave_b condWhile parentesis_a EXT2 parentesis_b puntoComa ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		  parser.manejoJV.agregarCondicionWhile(parser.tabla.getObJava(), parser.usoPila, h, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                                                                                    parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                                                                    parser.jerarquia--; 
                                                                                                                                    if(a != null){ 
                                                                                                                                        RESULT=false; 
                                                                                                                                    } else { 
                                                                                                                                        RESULT=null; 
                                                                                                                                    } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("DO_WHILE",42, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$36 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false);  
                                                                                                                                    parser.jerarquia++; 
                                                                                                                                    parser.pilaFalsas.add(new ArrayList<>());  
                                                                                                                                    parser.manejoJV.agregarDoWhile(parser.tabla.getObJava(), parser.jerarquia);      
                                                                                                                                    /*parser.manejo.agregarDoWhile(parser.tabla.getObJava(), parser.jerarquia);*/ 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$36",101, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // WHILE ::= condWhile NT$34 parentesis_a EXT2 NT$35 parentesis_b llave_a ENTER CUERPO_METODO RETORNO llave_b ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  parser.manejoJV.retornoWhile(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                                        parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                        parser.jerarquia--;  
                                                                                        if(a != null){ 
                                                                                            RESULT=false; 
                                                                                        } else { 
                                                                                            RESULT=null; 
                                                                                        } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("WHILE",41, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$35 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.manejoJV.agregarWhile(parser.tabla.getObJava(), h, parser.jerarquia);     
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$35",100, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$34 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false); 
                                                                                        parser.jerarquia++; 
                                                                                        parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$34",99, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // VAL_FOR ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // VAL_FOR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VAL_FOR ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer", bleft+PanelPrincipal.totalLineas, bright); 
                                            RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VAL_FOR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer", aleft+PanelPrincipal.totalLineas, aright); 
                                            RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",37, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP ::= admiracion igual 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP ::= igual igual 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP ::= igual 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP ::= mayor 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP ::= mayor igual 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP ::= menor 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP ::= menor igual 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPO_FOR ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPO_FOR ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TIPO_FOR ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TIPO_FOR ::= comillaSimple numero comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TIPO_FOR ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TIPO_FOR ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT=a.toString()+b.toString()+c.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TIPO_FOR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), aleft+PanelPrincipal.totalLineas, aright);  RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TIPO_FOR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP_FOR ::= TIPO_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.operacionIndividual(parser.tabla, a, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP_FOR ::= OP_FOR porcentaje OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "modulo"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP_FOR ::= OP_FOR div OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "div"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP_FOR ::= OP_FOR por OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "mult"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP_FOR ::= OP_FOR menos OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "resta"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP_FOR ::= OP_FOR mas OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "suma"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP_FOR ::= parentesis_a OP_FOR parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // INC ::= igual NT$33 OP_FOR 
            {
              String RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("INC",57, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$33 ::= 
            {
              String RESULT =null;
  parser.tipoActual="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$33",98, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // INT ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("INT",29, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INT ::= tipoInt 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("INT",29, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FOR ::= condFor NT$30 parentesis_a INT id NT$31 igual VAL_FOR puntoComa EXT2 puntoComa id INC parentesis_b NT$32 llave_a ENTER CUERPO_METODO llave_b ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-16)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-16)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-16)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-15)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-15)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-15)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean j = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  parser.manejoJV.retornoFor(parser.tabla, parser.usoPila, parser.pilaFor, f.toString(), parser.pilaCuarpeta, parser.pilaFalsas, g, parser.jerarquia, parser.metodo, parser.clase);  
                                                                                    parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia);  
                                                                                    parser.jerarquia--;  
                                                                                    if(j!=null){ 
                                                                                        RESULT=false; 
                                                                                    } else { 
                                                                                        RESULT=null; 
                                                                                    }  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("FOR",40, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-19)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$32 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.manejoJV.agregarFor(parser.tabla, b.toString(), c, d, parser.jerarquia, parser.metodo, parser.clase);  
                                                                                    boolean idInc = parser.verif.verificarTipadoVar(parser.tabla.getObJava(), f.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer", fleft+PanelPrincipal.totalLineas, fright);  
                                                                                    parser.verif.comprobarFor(parser.tabla.getObJava(), b.toString(), a.toString(), parser.jerarquia); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$32",97, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$31 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.verif.agregarVarFor(parser.tabla.getObJava(), b.toString(), a, parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright);
                                                                                    if(!a.equals("")){
                                                                                        parser.exe.agregarVariable(parser.tabla, b.toString(), parser.metodo, parser.clase, a); 
                                                                                    } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$31",96, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$30 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false); 
                                                                                    parser.jerarquia++; 
                                                                                    parser.pilaFor.add(new ArrayList<>()); 
                                                                                    parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$30",95, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELSE ::= ENTER 
            {
              Boolean RESULT =null;
		  parser.manejo.agregarEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia);  
                                                                                RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ELSE",39, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELSE ::= condElse NT$29 llave_a ENTER CUERPO_METODO RETORNO llave_b ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.manejo.agregarEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.jerarquia--; 
                                                                                if(a != null){ 
                                                                                    if(a && b){ 
                                                                                        RESULT=null; 
                                                                                    } else if((!a && b) || (a && !b)){ 
                                                                                        RESULT=true; 
                                                                                    } else if(!a && !b){ 
                                                                                        RESULT=false; 
                                                                                    } 
                                                                                } else { 
                                                                                    RESULT=null; 
                                                                                } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ELSE",39, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$29 ::= 
            {
              Boolean RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$29",94, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ELSE ::= condElse condIf parentesis_a NT$26 EXT2 NT$27 parentesis_b llave_a ENTER CUERPO_METODO RETORNO llave_b NT$28 ELSE 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=parser.op.retornoIf(a, b, c); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ELSE",39, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$28 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.manejoJV.segundoChequeoIf(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                                parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$28",93, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$27 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.jerarquia++;  
                                                                                parser.manejoJV.primerChequeoIf(parser.tabla.getObJava(), h); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$27",92, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$26 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false); 
                                                                                parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$26",91, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IF ::= condIf parentesis_a NT$23 EXT2 NT$24 parentesis_b llave_a ENTER CUERPO_METODO RETORNO llave_b NT$25 ELSE 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=parser.op.retornoIf(a, b, c); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("IF",38, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$25 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia);     
                                                                                parser.manejoJV.segundoChequeoIf(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);      
                                                                                parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$25",90, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$24 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.jerarquia++; 
                                                                                parser.manejoJV.primerChequeoIf(parser.tabla.getObJava(), h);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$24",89, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$23 ::= 
            {
              Boolean RESULT =null;
  parser.pilaFalsas.add(new ArrayList<>()); 
                                                                                parser.usoPila.add(false); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$23",88, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RETORNO ::= 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RETORNO ::= retorno NT$22 OPERACION puntoComa ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  parser.manejoJV.crearReturn(parser.tabla, a, parser.metodo, parser.clase);  
                                                            RESULT=true; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$22 ::= 
            {
              Boolean RESULT =null;
  parser.tipoActual = parser.tipoMetodo; 
                                                            parser.exe.agregarReturn(parser.tabla, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$22",87, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CUERPO_METODO ::= CUERPO_METODO error 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CUERPO_METODO ::= 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CUERPO_METODO ::= CUERPO_METODO METODO_VOID 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CUERPO_METODO ::= CUERPO_METODO COMENTARIO_A 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CUERPO_METODO ::= CUERPO_METODO COMENTARIO_B 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CUERPO_METODO ::= CUERPO_METODO LECTURA_DATOS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CUERPO_METODO ::= CUERPO_METODO SWITCH 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CUERPO_METODO ::= CUERPO_METODO MENSAJE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CUERPO_METODO ::= CUERPO_METODO DO_WHILE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CUERPO_METODO ::= CUERPO_METODO WHILE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CUERPO_METODO ::= CUERPO_METODO FOR 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CUERPO_METODO ::= CUERPO_METODO IF 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CUERPO_METODO ::= CUERPO_METODO ASIGNACIONES 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CUERPO_METODO ::= CUERPO_METODO VARIABLES 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIPO_METODO ::= tipoVoid 
            {
              String RESULT =null;
		 RESULT="void"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPO_METODO ::= tipoInt 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPO_METODO ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPO_METODO ::= tipoChar 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMETROS2 ::= 
            {
              String RESULT =null;
		  RESULT=""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",33, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAMETROS2 ::= PARAMETROS2 VAR id coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		  parser.op.agregarVarMetodo(c.toString(), parser.tabla.getObJava(), b, true, parser.jerarquia, cleft+PanelPrincipal.totalLineas, cright);   
                                                            parser.op.agregarParametrosMetodo(c.toString(), parser.tabla.getObJava(), b, cleft+PanelPrincipal.totalLineas, cright);
                                                            parser.exe.agregarParametro(parser.tabla, c.toString(), parser.clase, parser.metodo, b);
                                                            if(a.equals("")){
                                                                RESULT = b.toString();
                                                            } else {
                                                                RESULT = a + "_" + b.toString();
                                                            } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",33, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAMETROS ::= PARAMETROS2 VAR id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.op.agregarVarMetodo(c.toString(), parser.tabla.getObJava(), b, true, parser.jerarquia, cleft+PanelPrincipal.totalLineas, cright);  
                                                            parser.exe.agregarParametro(parser.tabla, c.toString(), parser.clase, parser.metodo, b);
                                                            parser.op.agregarParametrosMetodo(c.toString(), parser.tabla.getObJava(), b, cleft+PanelPrincipal.totalLineas, cright);
                                                            if(a.equals("")){
                                                                RESULT = b.toString();
                                                            } else {
                                                                RESULT = a + "_" + b.toString();
                                                            } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAMETROS",32, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONSTRUCTOR ::= tipoPublic id parentesis_a NT$19 parentesis_b NT$20 llave_a ENTER CUERPO_METODO NT$21 llave_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		  parser.manejoJV.finMetodo(parser.tabla.getObJava());
                                                            parser.metodo = "";
                                                            parser.jerarquia--;  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",14, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  if(b){ 
                                                                System.out.println("Constructor incapaz de retornar un valor"); 
                                                            }   
                                                            //parser.exe.agregarReturn(parser.tabla, parser.metodo, parser.clase);    
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$21",86, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
  parser.manejoJV.crearMetodo(parser.tabla.getObJava(), a.toString(), "", "void");  
                                                            parser.manejoJV.inicializarThis(parser.tabla, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$20",85, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$19 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.jerarquia++; 
                                                            parser.metodo = a.toString();
                                                            parser.exe.agregarConstructor(parser.tabla, a.toString());
                                                            parser.op.agregarNuevoConstructor(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$19",84, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONSTRUCTOR ::= tipoPublic id parentesis_a NT$16 PARAMETROS parentesis_b NT$17 llave_a ENTER CUERPO_METODO NT$18 llave_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		  parser.manejoJV.finMetodo(parser.tabla.getObJava()); 
                                                            parser.metodo = "";
                                                            parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",14, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  if(b){                      
                                                                System.out.println("Constructor incapaz de retornar un valor"); 
                                                            }  
                                                            //parser.exe.agregarReturn(parser.tabla, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$18",83, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.manejoJV.crearMetodo(parser.tabla.getObJava(), a.toString(), h, "void");
                                                            parser.exe.agregarParametros(parser.tabla, parser.metodo, parser.clase, h);  
                                                            if(!h.equals("")){
                                                                parser.metodo = a.toString()+"_"+h;
                                                                parser.exe.actualizarParametrosMetodo(parser.tabla, parser.clase, parser.metodo);
                                                            }    
                                                            parser.manejoJV.inicializarThis(parser.tabla, parser.metodo, parser.clase);    
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$17",82, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$16 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.jerarquia++; 
                                                            parser.metodo = a.toString();
                                                            parser.exe.agregarConstructor(parser.tabla, a.toString());
                                                            parser.op.agregarNuevoConstructor(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$16",81, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METODOS ::= tipoPublic TIPO_METODO id parentesis_a parentesis_b NT$14 llave_a ENTER CUERPO_METODO RETORNO NT$15 llave_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		  parser.metodo = "";
                                                                            parser.manejoJV.finMetodo(parser.tabla.getObJava());  
                                                                            parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODOS",4, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.op.comprobarReturnMetodo(parser.tabla.getObJava(), f, g, b.toString(), a); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$15",80, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$14 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
  parser.tipoMetodo=a; 
                                                                            parser.jerarquia++; 
                                                                            parser.exe.agregarMetodo(parser.tabla, b.toString(), a, parser.clase);
                                                                            parser.op.agregarNuevoMetodo(b.toString(), parser.tabla.getObJava(), parser.tabla.getObJava().getMisClases().size()-1, a.toString(), bleft+PanelPrincipal.totalLineas, bright);  
                                                                            parser.manejoJV.crearMetodo(parser.tabla.getObJava(), b.toString(), "", a);    
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$14",79, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METODOS ::= tipoPublic TIPO_METODO id parentesis_a NT$11 PARAMETROS parentesis_b NT$12 llave_a ENTER CUERPO_METODO RETORNO NT$13 llave_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		  parser.manejoJV.finMetodo(parser.tabla.getObJava());  
                                                                            parser.jerarquia--;
                                                                            parser.metodo = ""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODOS",4, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-14)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.op.comprobarReturnMetodo(parser.tabla.getObJava(), f, g, b.toString(), a);     
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$13",78, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  
                                                                            parser.exe.agregarParametros(parser.tabla, parser.metodo, parser.clase, h);
                                                                            if(!h.equals("")){
                                                                                parser.metodo = b.toString() + "_"+h;
                                                                                parser.exe.actualizarParametrosMetodo(parser.tabla, parser.clase, parser.metodo);
                                                                            }
                                                                            parser.manejoJV.crearMetodo(parser.tabla.getObJava(), b.toString(), h, a);      
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$12",77, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.tipoMetodo=a; 
                                                                            parser.jerarquia++;
                                                                            parser.metodo = b.toString();
                                                                            parser.exe.agregarMetodo(parser.tabla, b.toString(), a, parser.clase);
                                                                            parser.op.agregarNuevoMetodo(b.toString(), parser.tabla.getObJava(), parser.tabla.getObJava().getMisClases().size()-1, a.toString(), bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$11",76, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARAM2 ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM2",48, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAM2 ::= PARAM2 OP_COND coma 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		  if(a != null){
                                                                        if(!b.getTipo().equals("")){
                                                                            a.add(b);
                                                                            RESULT = a;
                                                                        } else {
                                                                            RESULT = null;
                                                                        }
                                                                    } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM2",48, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAM ::= PARAM2 OP_COND 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  if(a != null){
                                                                        if(!b.getTipo().equals("")){
                                                                            a.add(b);
                                                                            RESULT = a;
                                                                        } else {
                                                                            RESULT = null;
                                                                        }
                                                                    }  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM",47, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAM_METODOS ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",49, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAM_METODOS ::= PARAM 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",49, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODO_VOID ::= id parentesis_a PARAM_METODOS parentesis_b puntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		    parser.verif.verificarMetodo(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                                        parser.manejoJV.invocarMetodo(parser.tabla, a.toString(), parser.clase, b, aleft+PanelPrincipal.totalLineas);   
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODO_VOID",22, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODO_OP ::= id parentesis_a PARAM_METODOS parentesis_b puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  parser.verif.verificarMetodo(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                                      RESULT = parser.manejoJV.devolverEtiquetaMetodo(parser.tabla, a.toString(), parser.clase, b, aleft+PanelPrincipal.totalLineas);   
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODO_OP",34, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METODO_COND ::= id parentesis_a PARAM_METODOS parentesis_b puntoComa 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  boolean existe = parser.verif.verificarMetodo(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                                    String et = parser.manejoJV.devolverEtiquetaMetodo(parser.tabla, a.toString(), parser.clase, b, aleft+PanelPrincipal.totalLineas);
                                                                                    String tip = "";
                                                                                    if(existe){
                                                                                        tip = parser.tabla.getObJava().getMisClases().get(parser.tabla.getObJava().getMisClases().size()-1).getMisMetodos().get(VerifJAVA.iterador).getRetorno();
                                                                                    }
                                                                                    RESULT = new NodoBoolean(tip, et);   
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODO_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_VAL ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_VAL ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_VAL ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_VAL ::= menos comillaSimple numero comillaSimple 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=d.toString()+a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_VAL ::= menos comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=d.toString()+a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_VAL ::= comillaSimple numero comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_VAL ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_VAL ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT=a.toString()+b.toString()+c.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_VAL ::= menos METODO_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  if(!a.getTipo().equals(parser.tipoActual)){
                                                                            if(parser.verif.verificarPadreVar(parser.tabla.getObJava(), a.getTipo(), parser.tipoActual)){
                                                                                PanelPrincipal.errores += "Fila: " + aleft+PanelPrincipal.totalLineas + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                            }
                                                                        }
                                                                        RESULT = "-"+a.getId(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_VAL ::= METODO_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  if(!a.getTipo().equals(parser.tipoActual)){
                                                                            if(parser.verif.verificarPadreVar(parser.tabla.getObJava(), a.getTipo(), parser.tipoActual)){
                                                                                PanelPrincipal.errores += "Fila: " + aleft+PanelPrincipal.totalLineas + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                            }
                                                                        }
                                                                        RESULT = a.getId(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_VAL ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), aleft+PanelPrincipal.totalLineas, aright);  RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_VAL ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION ::= TIPO_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.operacionIndividual(parser.tabla, a, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION ::= OPERACION porcentaje OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "modulo"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION ::= OPERACION div OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "div");  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION ::= OPERACION por OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "mult"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= OPERACION menos OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "resta"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= OPERACION mas OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "suma"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VALOR",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VAR ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VAR ::= tipoChar 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VAR ::= tipoInt 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // C ::= 
            {
              String RESULT =null;
		 RESULT= null; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("C",56, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // C ::= igual VALOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("C",56, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONC_VAR_AS ::= puntoComa ENTER 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_AS",9, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONC_VAR_AS ::= id igual NT$9 VALOR NT$10 CONC_VAR_AS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_AS",9, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.manejoJV.agregarValVariable(parser.tabla, a.toString(), b, parser.metodo, parser.clase);
                                                    parser.op.agregarValorVar(parser.tabla.getObJava(), parser.jerarquia, a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$10",75, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.tipoActual=""; 
                                                    parser.tipoActual = parser.op.devolverTipoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$9",74, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONC_VAR_DEF ::= puntoComa ENTER 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_DEF",8, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONC_VAR_DEF ::= coma id NT$7 C NT$8 CONC_VAR_DEF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_DEF",8, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  if(c!=null){ 
                                                        parser.manejoJV.agregarValVariable(parser.tabla, a.toString(), c, parser.metodo, parser.clase);
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, a.toString(), parser.tipoActual, true, aleft+PanelPrincipal.totalLineas, aright); 
                                                    } else { 
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, a.toString(), parser.tipoActual, false, aleft+PanelPrincipal.totalLineas, aright); 
                                                    } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$8",73, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodo, parser.clase, parser.tipoActual); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$7",72, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACIONES ::= condThis punto id igual NT$5 VALOR NT$6 CONC_VAR_AS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",15, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.manejoJV.agregarValVariable2(parser.tabla, a.toString(), b, parser.metodo, parser.clase);
                                                    parser.op.agregarValorVar(parser.tabla.getObJava(), 0, a.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$6",71, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.tipoActual = ""; 
                                                    parser.tipoActual = parser.op.devolverTipoVar(parser.tabla.getObJava(), a.toString(), 0, parser.tabla.getObJava().getMisClases().size()-1, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$5",70, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNACIONES ::= id igual NT$3 VALOR NT$4 CONC_VAR_AS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",15, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.manejoJV.agregarValVariable(parser.tabla, a.toString(), b, parser.metodo, parser.clase);
                                                    parser.op.agregarValorVar(parser.tabla.getObJava(), parser.jerarquia, a.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$4",69, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.tipoActual = ""; 
                                                    parser.tipoActual = parser.op.devolverTipoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$3",68, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLES ::= VAR id NT$1 C NT$2 CONC_VAR_DEF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  if(c!=null){   
                                                        /*VER ESTE IF Y REVISAR QUE PROCEDE*/
                                                        parser.manejoJV.agregarValVariable(parser.tabla, b.toString(), c, parser.metodo, parser.clase);
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, b.toString(), a.toString(), true, bleft+PanelPrincipal.totalLineas, bright);  
                                                    } else { 
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, b.toString(), a.toString(), false, bleft+PanelPrincipal.totalLineas, bright); 
                                                    } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$2",67, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.tipoActual = a;
                                                    parser.exe.agregarVariable(parser.tabla, b.toString(), parser.metodo, parser.clase, a); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$1",66, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // B ::= error B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // B ::= 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // B ::= COMENTARIO_B B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // B ::= COMENTARIO_A B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // B ::= ASIGNACIONES B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // B ::= CONSTRUCTOR B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // B ::= METODOS B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // B ::= VARIABLES B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= A tipoPublic clase id NT$0 llave_a ENTER B llave_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		  parser.clase = ""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.clase = a.toString();
                                                    parser.exe.agregarClase(parser.tabla, a.toString());
                                                    parser.op.agregarNuevaClase(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$0",65, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // AA ::= ENTER2 A 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("AA",0, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= AA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		RESULT = start_val;
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxJAVA$parser.done_parsing();
          return CUP$SintaxJAVA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

