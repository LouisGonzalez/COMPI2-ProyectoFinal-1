
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 11 11:09:44 CST 2020
//----------------------------------------------------

package gramaticaJAVA;

import java_cup.runtime.*;
import Tablas.*;
import Operaciones.*;
import verificaciones.*;
import cuartetos.*;
import objetosApoyo.*;
import manejoCuartetos.*;
import java.util.*;
import interfaz.*;
import manejoExe.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 11 11:09:44 CST 2020
  */
public class SintaxJAVA extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxJAVA() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxJAVA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxJAVA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u016c\000\002\002\004\000\002\002\004\000\002\104" +
    "\002\000\002\003\015\000\002\003\002\000\002\046\003" +
    "\000\002\046\002\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\002\000\002\004\004\000\002\105" +
    "\002\000\002\106\002\000\002\005\010\000\002\107\002" +
    "\000\002\110\002\000\002\021\010\000\002\111\002\000" +
    "\002\112\002\000\002\021\012\000\002\113\002\000\002" +
    "\021\007\000\002\114\002\000\002\021\011\000\002\115" +
    "\002\000\002\116\002\000\002\012\010\000\002\012\004" +
    "\000\002\117\002\000\002\120\002\000\002\013\010\000" +
    "\002\013\004\000\002\121\002\000\002\013\007\000\002" +
    "\073\004\000\002\073\002\000\002\073\004\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\072\003" +
    "\000\002\070\005\000\002\070\005\000\002\070\005\000" +
    "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
    "\070\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\005\000\002\071\006\000\002\071\003\000\002\071\004" +
    "\000\002\071\005\000\002\071\006\000\002\071\005\000" +
    "\002\071\005\000\002\071\005\000\002\071\006\000\002" +
    "\071\006\000\002\071\004\000\002\071\004\000\002\071" +
    "\006\000\002\067\006\000\002\044\006\000\002\030\010" +
    "\000\002\064\003\000\002\064\002\000\002\062\004\000" +
    "\002\062\003\000\002\063\005\000\002\063\002\000\002" +
    "\063\003\000\002\122\002\000\002\123\002\000\002\124" +
    "\002\000\002\006\022\000\002\125\002\000\002\126\002" +
    "\000\002\006\020\000\002\127\002\000\002\130\002\000" +
    "\002\131\002\000\002\020\020\000\002\132\002\000\002" +
    "\133\002\000\002\134\002\000\002\020\017\000\002\042" +
    "\005\000\002\042\003\000\002\043\006\000\002\043\002" +
    "\000\002\043\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\045\004\000\002\045\004\000\002\045\004\000\002\045" +
    "\004\000\002\045\004\000\002\045\004\000\002\045\004" +
    "\000\002\045\004\000\002\045\004\000\002\045\004\000" +
    "\002\045\004\000\002\045\004\000\002\045\002\000\002" +
    "\135\002\000\002\060\007\000\002\060\002\000\002\060" +
    "\006\000\002\136\002\000\002\137\002\000\002\140\002" +
    "\000\002\051\020\000\002\141\002\000\002\142\002\000" +
    "\002\143\002\000\002\052\021\000\002\144\002\000\002" +
    "\052\013\000\002\052\003\000\002\145\002\000\002\146" +
    "\002\000\002\147\002\000\002\150\002\000\002\053\030" +
    "\000\002\037\003\000\002\037\002\000\002\037\003\000" +
    "\002\151\002\000\002\074\005\000\002\074\004\000\002" +
    "\076\005\000\002\076\005\000\002\076\005\000\002\076" +
    "\005\000\002\076\005\000\002\076\005\000\002\076\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\005\000" +
    "\002\077\005\000\002\077\005\000\002\077\004\000\002" +
    "\077\004\000\002\077\006\000\002\103\004\000\002\103" +
    "\003\000\002\103\004\000\002\103\003\000\002\103\003" +
    "\000\002\103\004\000\002\103\004\000\002\050\003\000" +
    "\002\050\005\000\002\050\006\000\002\050\004\000\002" +
    "\050\003\000\002\050\004\000\002\152\002\000\002\153" +
    "\002\000\002\054\017\000\002\154\002\000\002\055\020" +
    "\000\002\155\002\000\002\156\002\000\002\056\015\000" +
    "\002\157\002\000\002\160\002\000\002\057\013\000\002" +
    "\161\002\000\002\057\010\000\002\057\002\000\002\061" +
    "\005\000\002\061\003\000\002\075\003\000\002\075\005" +
    "\000\002\075\003\000\002\075\005\000\002\101\005\000" +
    "\002\162\002\000\002\101\006\000\002\101\003\000\002" +
    "\101\006\000\002\101\004\000\002\101\003\000\002\100" +
    "\005\000\002\065\005\000\002\065\005\000\002\065\005" +
    "\000\002\065\005\000\002\065\005\000\002\065\005\000" +
    "\002\065\003\000\002\066\003\000\002\066\005\000\002" +
    "\066\006\000\002\066\003\000\002\066\005\000\002\066" +
    "\003\000\002\066\004\000\002\066\005\000\002\066\006" +
    "\000\002\066\005\000\002\066\005\000\002\066\006\000" +
    "\002\066\006\000\002\066\004\000\002\066\004\000\002" +
    "\066\006\000\002\102\003\000\002\102\004\000\002\102" +
    "\003\000\002\102\004\000\002\102\004\000\002\102\004" +
    "\000\002\102\003\000\002\163\002\000\002\025\013\000" +
    "\002\164\002\000\002\025\012\000\002\165\002\000\002" +
    "\025\015\000\002\166\002\000\002\025\014\000\002\167" +
    "\002\000\002\025\011\000\002\170\002\000\002\025\010" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\011\010\000\002\011\010\000\002" +
    "\171\002\000\002\031\005\000\002\172\002\000\002\031" +
    "\007\000\002\031\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\005\000\002\033\005\000\002\033\004\000" +
    "\002\033\004\000\002\033\006\000\002\032\004\000\002" +
    "\032\002\000\002\026\005\000\002\027\006\000\002\023" +
    "\004\000\002\023\003\000\002\024\004\000\002\024\003" +
    "\000\002\024\002\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\002\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\041\004\000\002" +
    "\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0282\000\012\002\ufef7\020\ufef7\021\ufef7\075\007\001" +
    "\002\000\010\002\ufffd\020\ufffd\021\ufffd\001\002\000\004" +
    "\002\011\001\002\000\004\075\010\001\002\000\014\002" +
    "\ufef8\020\ufef8\021\ufef8\022\ufef8\075\ufefa\001\002\000\014" +
    "\002\ufef9\020\ufef9\021\ufef9\022\ufef9\075\ufefb\001\002\000" +
    "\004\002\001\001\002\000\010\002\000\020\013\021\ufffb" +
    "\001\002\000\004\021\ufffc\001\002\000\004\021\015\001" +
    "\002\000\004\044\016\001\002\000\006\022\ufef7\075\007" +
    "\001\002\000\004\022\uffff\001\002\000\004\022\021\001" +
    "\002\000\004\075\022\001\002\000\070\002\ufefa\003\ufefa" +
    "\006\ufefa\007\ufefa\010\ufefa\012\ufefa\014\ufefa\015\ufefa\016" +
    "\ufefa\017\ufefa\020\ufefa\021\ufefa\023\ufefa\044\ufefa\051\ufefa" +
    "\054\ufefa\055\ufefa\056\ufefa\057\ufefa\060\ufefa\061\ufefa\062" +
    "\ufefa\063\ufefa\071\ufefa\072\ufefa\074\ufefa\075\ufefa\001\002" +
    "\000\030\003\041\006\027\007\032\010\026\020\036\023" +
    "\ufff4\044\040\071\031\072\030\074\025\075\044\001\002" +
    "\000\026\003\041\006\027\007\032\010\026\020\036\023" +
    "\ufff4\044\040\071\031\072\030\074\025\001\002\000\004" +
    "\005\u0280\001\002\000\004\044\uffd6\001\002\000\004\044" +
    "\uffd8\001\002\000\144\004\ufe96\005\ufe96\006\ufe96\007\ufe96" +
    "\010\ufe96\011\ufe96\012\ufe96\013\ufe96\014\ufe96\015\ufe96\016" +
    "\ufe96\017\ufe96\020\ufe96\021\ufe96\022\ufe96\023\ufe96\024\ufe96" +
    "\025\ufe96\026\ufe96\027\ufe96\030\ufe96\031\ufe96\032\ufe96\033" +
    "\ufe96\034\ufe96\035\ufe96\036\ufe96\037\ufe96\040\ufe96\042\ufe96" +
    "\043\ufe96\044\ufe96\045\ufe96\046\ufe96\047\ufe96\050\ufe96\051" +
    "\ufe96\052\ufe96\053\ufe96\054\ufe96\055\ufe96\056\ufe96\057\ufe96" +
    "\060\ufe96\065\ufe96\066\ufe96\073\ufe96\074\ufe96\075\ufe96\001" +
    "\002\000\142\004\ufec7\005\ufec7\006\ufec7\007\ufec7\010\ufec7" +
    "\011\ufec7\012\ufec7\013\ufec7\014\ufec7\015\ufec7\016\ufec7\017" +
    "\ufec7\020\ufec7\021\ufec7\022\ufec7\023\ufec7\024\ufec7\025\ufec7" +
    "\026\ufec7\027\ufec7\030\ufec7\031\ufec7\032\ufec7\033\ufec7\034" +
    "\ufec7\035\ufec7\036\ufec7\037\ufec7\040\ufec7\042\ufec7\043\ufec7" +
    "\044\ufec7\045\ufec7\046\ufec7\047\ufec7\050\ufec7\051\ufec7\052" +
    "\ufec7\053\ufec7\054\ufec7\055\ufec7\056\ufec7\057\ufec7\060\ufec7" +
    "\065\ufec7\066\ufec7\074\ufec7\075\ufec7\001\002\000\004\044" +
    "\uffd7\001\002\000\026\003\041\006\027\007\032\010\026" +
    "\020\036\023\ufff4\044\040\071\031\072\030\074\025\001" +
    "\002\000\026\003\041\006\027\007\032\010\026\020\036" +
    "\023\ufff4\044\040\071\031\072\030\074\025\001\002\000" +
    "\026\003\041\006\027\007\032\010\026\020\036\023\ufff4" +
    "\044\040\071\031\072\030\074\025\001\002\000\016\003" +
    "\256\006\255\007\260\010\257\011\261\044\263\001\002" +
    "\000\004\023\253\001\002\000\004\031\230\001\002\000" +
    "\026\003\041\006\027\007\032\010\026\020\036\023\ufff4" +
    "\044\040\071\031\072\030\074\025\001\002\000\026\003" +
    "\041\006\027\007\032\010\026\020\036\023\ufff4\044\040" +
    "\071\031\072\030\074\025\001\002\000\026\003\041\006" +
    "\027\007\032\010\026\020\036\023\ufff4\044\040\071\031" +
    "\072\030\074\025\001\002\000\070\002\ufefb\003\ufefb\006" +
    "\ufefb\007\ufefb\010\ufefb\012\ufefb\014\ufefb\015\ufefb\016\ufefb" +
    "\017\ufefb\020\ufefb\021\ufefb\023\ufefb\044\ufefb\051\ufefb\054" +
    "\ufefb\055\ufefb\056\ufefb\057\ufefb\060\ufefb\061\ufefb\062\ufefb" +
    "\063\ufefb\071\ufefb\072\ufefb\074\ufefb\075\ufefb\001\002\000" +
    "\004\044\046\001\002\000\010\004\ufff2\026\ufff2\031\ufff2" +
    "\001\002\000\010\004\uffda\026\uffda\031\050\001\002\000" +
    "\020\003\074\033\070\043\072\044\065\050\076\052\075" +
    "\074\071\001\002\000\006\004\ufff1\026\ufff1\001\002\000" +
    "\006\004\053\026\054\001\002\000\004\044\057\001\002" +
    "\000\004\075\022\001\002\000\062\003\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\023\ufff0\044\ufff0\051\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\071\ufff0" +
    "\072\ufff0\074\ufff0\001\002\000\064\003\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\023\uffe2\044\uffe2\051\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\071\uffe2" +
    "\072\uffe2\074\uffe2\075\044\001\002\000\010\004\uffe5\026" +
    "\uffe5\031\uffe5\001\002\000\010\004\uffda\026\uffda\031\050" +
    "\001\002\000\006\004\uffe4\026\uffe4\001\002\000\006\004" +
    "\053\026\054\001\002\000\062\003\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\023\uffe3\044\uffe3\051\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\071\uffe3\072" +
    "\uffe3\074\uffe3\001\002\000\006\004\uffdb\026\uffdb\001\002" +
    "\000\026\004\uffcd\026\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\044\uffcd\052\124\053\uffcd\001\002\000\024" +
    "\004\uffce\026\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\044\uffce\053\uffce\001\002\000\022\004\uffd5\026\uffd5" +
    "\032\107\033\110\034\105\035\111\036\106\044\uffd5\001" +
    "\002\000\012\043\207\044\213\050\210\074\212\001\002" +
    "\000\004\005\121\001\002\000\026\004\uffcc\005\117\026" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\044\uffcc" +
    "\053\uffcc\001\002\000\024\004\uffc9\026\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\044\uffc9\053\uffc9\001\002" +
    "\000\006\004\uffd9\026\uffd9\001\002\000\016\033\070\043" +
    "\072\044\065\050\076\052\075\074\071\001\002\000\006" +
    "\043\077\044\100\001\002\000\004\050\102\001\002\000" +
    "\004\050\101\001\002\000\024\004\uffc4\026\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\044\uffc4\053\uffc4\001" +
    "\002\000\024\004\uffc3\026\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\044\uffc3\053\uffc3\001\002\000\016\032" +
    "\107\033\110\034\105\035\111\036\106\053\104\001\002" +
    "\000\024\004\uffd4\026\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\044\uffd4\053\uffd4\001\002\000\016\033\070" +
    "\043\072\044\065\050\076\052\075\074\071\001\002\000" +
    "\016\033\070\043\072\044\065\050\076\052\075\074\071" +
    "\001\002\000\016\033\070\043\072\044\065\050\076\052" +
    "\075\074\071\001\002\000\016\033\070\043\072\044\065" +
    "\050\076\052\075\074\071\001\002\000\016\033\070\043" +
    "\072\044\065\050\076\052\075\074\071\001\002\000\024" +
    "\004\uffd0\026\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\044\uffd0\053\uffd0\001\002\000\024\004\uffd2\026\uffd2" +
    "\032\uffd2\033\uffd2\034\105\035\111\036\106\044\uffd2\053" +
    "\uffd2\001\002\000\024\004\uffd3\026\uffd3\032\uffd3\033\uffd3" +
    "\034\105\035\111\036\106\044\uffd3\053\uffd3\001\002\000" +
    "\024\004\uffcf\026\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\044\uffcf\053\uffcf\001\002\000\024\004\uffd1\026" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\044\uffd1" +
    "\053\uffd1\001\002\000\004\043\120\001\002\000\024\004" +
    "\uffc5\026\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\044\uffc5\053\uffc5\001\002\000\004\044\123\001\002\000" +
    "\024\004\uffc7\026\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\044\uffc7\053\uffc7\001\002\000\026\004\uffcb\026" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\044\uffcb" +
    "\052\124\053\uffcb\001\002\000\022\003\125\033\uffb5\043" +
    "\uffb5\044\uffb5\050\uffb5\052\uffb5\053\uffb9\074\uffb5\001\002" +
    "\000\020\033\uffb4\043\uffb4\044\uffb4\050\uffb4\052\uffb4\053" +
    "\uffb7\074\uffb4\001\002\000\016\033\134\043\136\044\132" +
    "\050\142\052\141\074\135\001\002\000\004\053\131\001" +
    "\002\000\004\053\uffba\001\002\000\042\003\uffbd\004\uffbd" +
    "\026\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\044\uffbd\046\uffbd\047\uffbd\053\uffbd\067\uffbd" +
    "\070\uffbd\001\002\000\042\003\uff34\004\uff34\026\uff34\030" +
    "\uff34\031\uff34\032\uff34\033\uff34\034\uff34\035\uff34\036\uff34" +
    "\046\uff34\047\uff34\052\124\053\uff34\067\uff34\070\uff34\001" +
    "\002\000\040\003\uff35\004\uff35\026\uff35\030\uff35\031\uff35" +
    "\032\uff35\033\uff35\034\uff35\035\uff35\036\uff35\046\uff35\047" +
    "\uff35\053\uff35\067\uff35\070\uff35\001\002\000\012\043\171" +
    "\044\175\050\172\074\174\001\002\000\004\005\166\001" +
    "\002\000\042\003\uff31\004\uff31\005\164\026\uff31\030\uff31" +
    "\031\uff31\032\uff31\033\uff31\034\uff31\035\uff31\036\uff31\046" +
    "\uff31\047\uff31\053\uff31\067\uff31\070\uff31\001\002\000\020" +
    "\004\163\032\153\033\154\034\151\035\155\036\152\053" +
    "\uffb8\001\002\000\040\003\uff2f\004\uff2f\026\uff2f\030\uff2f" +
    "\031\uff2f\032\uff2f\033\uff2f\034\uff2f\035\uff2f\036\uff2f\046" +
    "\uff2f\047\uff2f\053\uff2f\067\uff2f\070\uff2f\001\002\000\016" +
    "\033\134\043\136\044\132\050\142\052\141\074\135\001" +
    "\002\000\006\043\143\044\144\001\002\000\004\050\146" +
    "\001\002\000\004\050\145\001\002\000\040\003\uff2b\004" +
    "\uff2b\026\uff2b\030\uff2b\031\uff2b\032\uff2b\033\uff2b\034\uff2b" +
    "\035\uff2b\036\uff2b\046\uff2b\047\uff2b\053\uff2b\067\uff2b\070" +
    "\uff2b\001\002\000\040\003\uff2a\004\uff2a\026\uff2a\030\uff2a" +
    "\031\uff2a\032\uff2a\033\uff2a\034\uff2a\035\uff2a\036\uff2a\046" +
    "\uff2a\047\uff2a\053\uff2a\067\uff2a\070\uff2a\001\002\000\016" +
    "\032\153\033\154\034\151\035\155\036\152\053\150\001" +
    "\002\000\040\003\uff3b\004\uff3b\026\uff3b\030\uff3b\031\uff3b" +
    "\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\046\uff3b\047" +
    "\uff3b\053\uff3b\067\uff3b\070\uff3b\001\002\000\016\033\134" +
    "\043\136\044\132\050\142\052\141\074\135\001\002\000" +
    "\016\033\134\043\136\044\132\050\142\052\141\074\135" +
    "\001\002\000\016\033\134\043\136\044\132\050\142\052" +
    "\141\074\135\001\002\000\016\033\134\043\136\044\132" +
    "\050\142\052\141\074\135\001\002\000\016\033\134\043" +
    "\136\044\132\050\142\052\141\074\135\001\002\000\040" +
    "\003\uff37\004\uff37\026\uff37\030\uff37\031\uff37\032\uff37\033" +
    "\uff37\034\uff37\035\uff37\036\uff37\046\uff37\047\uff37\053\uff37" +
    "\067\uff37\070\uff37\001\002\000\040\003\uff39\004\uff39\026" +
    "\uff39\030\uff39\031\uff39\032\uff39\033\uff39\034\151\035\155" +
    "\036\152\046\uff39\047\uff39\053\uff39\067\uff39\070\uff39\001" +
    "\002\000\040\003\uff3a\004\uff3a\026\uff3a\030\uff3a\031\uff3a" +
    "\032\uff3a\033\uff3a\034\151\035\155\036\152\046\uff3a\047" +
    "\uff3a\053\uff3a\067\uff3a\070\uff3a\001\002\000\040\003\uff36" +
    "\004\uff36\026\uff36\030\uff36\031\uff36\032\uff36\033\uff36\034" +
    "\uff36\035\uff36\036\uff36\046\uff36\047\uff36\053\uff36\067\uff36" +
    "\070\uff36\001\002\000\040\003\uff38\004\uff38\026\uff38\030" +
    "\uff38\031\uff38\032\uff38\033\uff38\034\uff38\035\uff38\036\uff38" +
    "\046\uff38\047\uff38\053\uff38\067\uff38\070\uff38\001\002\000" +
    "\016\033\uffb6\043\uffb6\044\uffb6\050\uffb6\052\uffb6\074\uffb6" +
    "\001\002\000\004\043\165\001\002\000\040\003\uff30\004" +
    "\uff30\026\uff30\030\uff30\031\uff30\032\uff30\033\uff30\034\uff30" +
    "\035\uff30\036\uff30\046\uff30\047\uff30\053\uff30\067\uff30\070" +
    "\uff30\001\002\000\004\044\170\001\002\000\040\003\uff2d" +
    "\004\uff2d\026\uff2d\030\uff2d\031\uff2d\032\uff2d\033\uff2d\034" +
    "\uff2d\035\uff2d\036\uff2d\046\uff2d\047\uff2d\053\uff2d\067\uff2d" +
    "\070\uff2d\001\002\000\042\003\uff33\004\uff33\026\uff33\030" +
    "\uff33\031\uff33\032\uff33\033\uff33\034\uff33\035\uff33\036\uff33" +
    "\046\uff33\047\uff33\052\124\053\uff33\067\uff33\070\uff33\001" +
    "\002\000\042\003\uff26\004\uff26\005\205\026\uff26\030\uff26" +
    "\031\uff26\032\uff26\033\uff26\034\uff26\035\uff26\036\uff26\046" +
    "\uff26\047\uff26\053\uff26\067\uff26\070\uff26\001\002\000\006" +
    "\043\201\044\202\001\002\000\040\003\uff2e\004\uff2e\026" +
    "\uff2e\030\uff2e\031\uff2e\032\uff2e\033\uff2e\034\uff2e\035\uff2e" +
    "\036\uff2e\046\uff2e\047\uff2e\053\uff2e\067\uff2e\070\uff2e\001" +
    "\002\000\004\005\176\001\002\000\042\003\uff27\004\uff27" +
    "\026\uff27\030\uff27\031\uff27\032\uff27\033\uff27\034\uff27\035" +
    "\uff27\036\uff27\046\uff27\047\uff27\052\124\053\uff27\067\uff27" +
    "\070\uff27\001\002\000\004\044\200\001\002\000\040\003" +
    "\uff2c\004\uff2c\026\uff2c\030\uff2c\031\uff2c\032\uff2c\033\uff2c" +
    "\034\uff2c\035\uff2c\036\uff2c\046\uff2c\047\uff2c\053\uff2c\067" +
    "\uff2c\070\uff2c\001\002\000\042\003\uff32\004\uff32\026\uff32" +
    "\030\uff32\031\uff32\032\uff32\033\uff32\034\uff32\035\uff32\036" +
    "\uff32\046\uff32\047\uff32\052\124\053\uff32\067\uff32\070\uff32" +
    "\001\002\000\004\050\204\001\002\000\004\050\203\001" +
    "\002\000\040\003\uff29\004\uff29\026\uff29\030\uff29\031\uff29" +
    "\032\uff29\033\uff29\034\uff29\035\uff29\036\uff29\046\uff29\047" +
    "\uff29\053\uff29\067\uff29\070\uff29\001\002\000\040\003\uff28" +
    "\004\uff28\026\uff28\030\uff28\031\uff28\032\uff28\033\uff28\034" +
    "\uff28\035\uff28\036\uff28\046\uff28\047\uff28\053\uff28\067\uff28" +
    "\070\uff28\001\002\000\004\043\206\001\002\000\040\003" +
    "\uff25\004\uff25\026\uff25\030\uff25\031\uff25\032\uff25\033\uff25" +
    "\034\uff25\035\uff25\036\uff25\046\uff25\047\uff25\053\uff25\067" +
    "\uff25\070\uff25\001\002\000\026\004\uffbf\005\223\026\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\044\uffbf\053" +
    "\uffbf\001\002\000\006\043\217\044\220\001\002\000\024" +
    "\004\uffc8\026\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\044\uffc8\053\uffc8\001\002\000\004\005\214\001\002" +
    "\000\026\004\uffc0\026\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\044\uffc0\052\124\053\uffc0\001\002\000\004" +
    "\044\216\001\002\000\024\004\uffc6\026\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\044\uffc6\053\uffc6\001\002" +
    "\000\026\004\uffca\026\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\044\uffca\052\124\053\uffca\001\002\000\004" +
    "\050\222\001\002\000\004\050\221\001\002\000\024\004" +
    "\uffc2\026\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\044\uffc2\053\uffc2\001\002\000\024\004\uffc1\026\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\044\uffc1\053\uffc1" +
    "\001\002\000\004\043\224\001\002\000\024\004\uffbe\026" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\044\uffbe" +
    "\053\uffbe\001\002\000\004\023\ufff6\001\002\000\004\023" +
    "\ufff5\001\002\000\004\023\ufff3\001\002\000\020\003\232" +
    "\033\uffef\043\uffef\044\uffef\050\uffef\052\uffef\074\uffef\001" +
    "\002\000\016\033\070\043\072\044\065\050\076\052\075" +
    "\074\071\001\002\000\006\026\uffe9\044\uffe9\001\002\000" +
    "\006\026\235\044\236\001\002\000\062\003\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\023\uffe8\044\uffe8\051\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\071" +
    "\uffe8\072\uffe8\074\uffe8\001\002\000\004\075\022\001\002" +
    "\000\004\031\237\001\002\000\020\003\240\033\uffe1\043" +
    "\uffe1\044\uffe1\050\uffe1\052\uffe1\074\uffe1\001\002\000\006" +
    "\026\uffdd\044\uffdd\001\002\000\016\033\070\043\072\044" +
    "\065\050\076\052\075\074\071\001\002\000\006\026\uffe0" +
    "\044\uffe0\001\002\000\006\026\235\044\236\001\002\000" +
    "\062\003\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\023\uffdf\044\uffdf\051" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\071\uffdf\072\uffdf\074\uffdf\001\002\000" +
    "\006\026\235\044\236\001\002\000\062\003\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\023\uffdc\044\uffdc\051\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\071" +
    "\uffdc\072\uffdc\074\uffdc\001\002\000\064\003\uffde\006\uffde" +
    "\007\uffde\010\uffde\012\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\023\uffde\044\uffde\051\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\071" +
    "\uffde\072\uffde\074\uffde\075\044\001\002\000\006\026\uffee" +
    "\044\uffee\001\002\000\006\026\235\044\236\001\002\000" +
    "\062\003\uffed\006\uffed\007\uffed\010\uffed\012\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\023\uffed\044\uffed\051" +
    "\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\071\uffed\072\uffed\074\uffed\001\002\000" +
    "\004\075\022\001\002\000\012\002\ufffe\020\ufffe\021\ufffe" +
    "\075\044\001\002\000\004\044\uff9d\001\002\000\004\044" +
    "\uff9b\001\002\000\004\044\uff9e\001\002\000\004\044\uff9f" +
    "\001\002\000\004\044\uff9c\001\002\000\004\044\u0230\001" +
    "\002\000\004\052\264\001\002\000\014\003\uffac\006\uffac" +
    "\007\uffac\010\uffac\053\uffa8\001\002\000\004\053\u0227\001" +
    "\002\000\012\003\267\006\uffa1\007\uffa1\010\uffa1\001\002" +
    "\000\012\006\uffa0\007\uffa0\010\uffa0\053\uffa3\001\002\000" +
    "\010\006\027\007\032\010\026\001\002\000\004\053\272" +
    "\001\002\000\006\022\ufef7\075\007\001\002\000\004\022" +
    "\uffab\001\002\000\004\022\275\001\002\000\004\075\022" +
    "\001\002\000\052\003\uff8e\006\uff8e\007\uff8e\010\uff8e\012" +
    "\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\023\uff8e\044\uff8e" +
    "\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\071\uff8e\072" +
    "\uff8e\074\uff8e\075\044\001\002\000\050\003\324\006\027" +
    "\007\032\010\026\012\331\014\320\015\300\016\303\017" +
    "\323\023\uffaa\044\322\057\313\060\305\061\307\062\301" +
    "\063\310\071\031\072\030\074\306\001\002\000\004\052" +
    "\uff57\001\002\000\004\052\uff10\001\002\000\060\003\uff92" +
    "\006\uff92\007\uff92\010\uff92\012\uff92\014\uff92\015\uff92\016" +
    "\uff92\017\uff92\023\uff92\044\uff92\051\uff92\054\uff92\055\uff92" +
    "\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\071" +
    "\uff92\072\uff92\074\uff92\001\002\000\006\022\ufef7\075\007" +
    "\001\002\000\060\003\uff96\006\uff96\007\uff96\010\uff96\012" +
    "\uff96\014\uff96\015\uff96\016\uff96\017\uff96\023\uff96\044\uff96" +
    "\051\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061" +
    "\uff96\062\uff96\063\uff96\071\uff96\072\uff96\074\uff96\001\002" +
    "\000\004\052\u0206\001\002\000\004\005\u01f1\001\002\000" +
    "\004\052\uff11\001\002\000\004\052\uff0f\001\002\000\060" +
    "\003\uff93\006\uff93\007\uff93\010\uff93\012\uff93\014\uff93\015" +
    "\uff93\016\uff93\017\uff93\023\uff93\044\uff93\051\uff93\054\uff93" +
    "\055\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063" +
    "\uff93\071\uff93\072\uff93\074\uff93\001\002\000\060\003\uff98" +
    "\006\uff98\007\uff98\010\uff98\012\uff98\014\uff98\015\uff98\016" +
    "\uff98\017\uff98\023\uff98\044\uff98\051\uff98\054\uff98\055\uff98" +
    "\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\071" +
    "\uff98\072\uff98\074\uff98\001\002\000\004\052\u01ec\001\002" +
    "\000\060\003\uff99\006\uff99\007\uff99\010\uff99\012\uff99\014" +
    "\uff99\015\uff99\016\uff99\017\uff99\023\uff99\044\uff99\051\uff99" +
    "\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\071\uff99\072\uff99\074\uff99\001\002\000\004" +
    "\052\u01e2\001\002\000\060\003\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\012\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\023\uff9a" +
    "\044\uff9a\051\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060" +
    "\uff9a\061\uff9a\062\uff9a\063\uff9a\071\uff9a\072\uff9a\074\uff9a" +
    "\001\002\000\004\023\u01e0\001\002\000\004\052\uff7e\001" +
    "\002\000\060\003\uff95\006\uff95\007\uff95\010\uff95\012\uff95" +
    "\014\uff95\015\uff95\016\uff95\017\uff95\023\uff95\044\uff95\051" +
    "\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95" +
    "\062\uff95\063\uff95\071\uff95\072\uff95\074\uff95\001\002\000" +
    "\006\031\u0147\052\u0146\001\002\000\004\052\uff52\001\002" +
    "\000\004\052\uff0e\001\002\000\060\003\uff91\006\uff91\007" +
    "\uff91\010\uff91\012\uff91\014\uff91\015\uff91\016\uff91\017\uff91" +
    "\023\uff91\044\uff91\051\uff91\054\uff91\055\uff91\056\uff91\057" +
    "\uff91\060\uff91\061\uff91\062\uff91\063\uff91\071\uff91\072\uff91" +
    "\074\uff91\001\002\000\060\003\uff90\006\uff90\007\uff90\010" +
    "\uff90\012\uff90\014\uff90\015\uff90\016\uff90\017\uff90\023\uff90" +
    "\044\uff90\051\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060" +
    "\uff90\061\uff90\062\uff90\063\uff90\071\uff90\072\uff90\074\uff90" +
    "\001\002\000\060\003\uff8f\006\uff8f\007\uff8f\010\uff8f\012" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\023\uff8f\044\uff8f" +
    "\051\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061" +
    "\uff8f\062\uff8f\063\uff8f\071\uff8f\072\uff8f\074\uff8f\001\002" +
    "\000\060\003\uff97\006\uff97\007\uff97\010\uff97\012\uff97\014" +
    "\uff97\015\uff97\016\uff97\017\uff97\023\uff97\044\uff97\051\uff97" +
    "\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062" +
    "\uff97\063\uff97\071\uff97\072\uff97\074\uff97\001\002\000\004" +
    "\052\333\001\002\000\060\003\uff94\006\uff94\007\uff94\010" +
    "\uff94\012\uff94\014\uff94\015\uff94\016\uff94\017\uff94\023\uff94" +
    "\044\uff94\051\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060" +
    "\uff94\061\uff94\062\uff94\063\uff94\071\uff94\072\uff94\074\uff94" +
    "\001\002\000\022\003\uff89\030\uff89\033\uff89\043\uff89\044" +
    "\uff89\050\uff89\052\uff89\074\uff89\001\002\000\022\003\340" +
    "\030\337\033\134\043\136\044\132\050\142\052\141\074" +
    "\135\001\002\000\012\026\uff40\053\uff40\067\uff40\070\uff40" +
    "\001\002\000\026\003\u0118\030\u0117\031\u011a\032\153\033" +
    "\154\034\151\035\155\036\152\046\u0119\047\u0116\001\002" +
    "\000\016\033\134\043\136\044\132\050\142\052\u0112\074" +
    "\135\001\002\000\012\026\uff3d\053\uff3d\067\uff3d\070\uff3d" +
    "\001\002\000\010\053\uff88\067\343\070\344\001\002\000" +
    "\004\053\350\001\002\000\022\003\340\030\337\033\134" +
    "\043\136\044\132\050\142\052\141\074\135\001\002\000" +
    "\022\003\uff42\030\uff42\033\uff42\043\uff42\044\uff42\050\uff42" +
    "\052\uff42\074\uff42\001\002\000\022\003\340\030\337\033" +
    "\134\043\136\044\132\050\142\052\141\074\135\001\002" +
    "\000\012\026\uff41\053\uff41\067\343\070\uff41\001\002\000" +
    "\012\026\uff43\053\uff43\067\uff43\070\uff43\001\002\000\006" +
    "\022\ufef7\075\007\001\002\000\004\022\352\001\002\000" +
    "\004\075\022\001\002\000\054\003\uff8e\006\uff8e\007\uff8e" +
    "\010\uff8e\012\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\023" +
    "\uff8e\044\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e" +
    "\063\uff8e\071\uff8e\072\uff8e\074\uff8e\075\044\001\002\000" +
    "\052\003\324\006\027\007\032\010\026\012\331\014\320" +
    "\015\300\016\303\017\323\023\uff8b\044\322\056\356\057" +
    "\313\060\305\061\307\062\301\063\310\071\031\072\030" +
    "\074\306\001\002\000\004\023\366\001\002\000\020\003" +
    "\357\033\uff8d\043\uff8d\044\uff8d\050\uff8d\052\uff8d\074\uff8d" +
    "\001\002\000\004\026\364\001\002\000\016\033\070\043" +
    "\072\044\065\050\076\052\075\074\071\001\002\000\016" +
    "\026\362\032\107\033\110\034\105\035\111\036\106\001" +
    "\002\000\004\075\022\001\002\000\012\023\uff8c\054\uff8c" +
    "\055\uff8c\075\044\001\002\000\004\075\022\001\002\000" +
    "\012\023\uff8a\054\uff8a\055\uff8a\075\044\001\002\000\006" +
    "\013\uff87\075\uff87\001\002\000\006\013\371\075\022\001" +
    "\002\000\060\003\uff86\006\uff86\007\uff86\010\uff86\012\uff86" +
    "\014\uff86\015\uff86\016\uff86\017\uff86\023\uff86\044\uff86\051" +
    "\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86" +
    "\062\uff86\063\uff86\071\uff86\072\uff86\074\uff86\001\002\000" +
    "\010\012\373\022\ufef7\075\007\001\002\000\062\003\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\012\uff7f\014\uff7f\015\uff7f\016" +
    "\uff7f\017\uff7f\023\uff7f\044\uff7f\051\uff7f\054\uff7f\055\uff7f" +
    "\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\071" +
    "\uff7f\072\uff7f\074\uff7f\075\044\001\002\000\004\052\u0104" +
    "\001\002\000\004\022\uff81\001\002\000\004\022\376\001" +
    "\002\000\004\075\022\001\002\000\054\003\uff8e\006\uff8e" +
    "\007\uff8e\010\uff8e\012\uff8e\014\uff8e\015\uff8e\016\uff8e\017" +
    "\uff8e\023\uff8e\044\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e" +
    "\062\uff8e\063\uff8e\071\uff8e\072\uff8e\074\uff8e\075\044\001" +
    "\002\000\052\003\324\006\027\007\032\010\026\012\331" +
    "\014\320\015\300\016\303\017\323\023\uff8b\044\322\056" +
    "\356\057\313\060\305\061\307\062\301\063\310\071\031" +
    "\072\030\074\306\001\002\000\004\023\u0102\001\002\000" +
    "\004\075\022\001\002\000\062\003\uff80\006\uff80\007\uff80" +
    "\010\uff80\012\uff80\014\uff80\015\uff80\016\uff80\017\uff80\023" +
    "\uff80\044\uff80\051\uff80\054\uff80\055\uff80\056\uff80\057\uff80" +
    "\060\uff80\061\uff80\062\uff80\063\uff80\071\uff80\072\uff80\074" +
    "\uff80\075\044\001\002\000\022\003\uff85\030\uff85\033\uff85" +
    "\043\uff85\044\uff85\050\uff85\052\uff85\074\uff85\001\002\000" +
    "\022\003\340\030\337\033\134\043\136\044\132\050\142" +
    "\052\141\074\135\001\002\000\010\053\uff84\067\343\070" +
    "\344\001\002\000\004\053\u0108\001\002\000\006\022\ufef7" +
    "\075\007\001\002\000\004\022\u010a\001\002\000\004\075" +
    "\022\001\002\000\054\003\uff8e\006\uff8e\007\uff8e\010\uff8e" +
    "\012\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\023\uff8e\044" +
    "\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e" +
    "\071\uff8e\072\uff8e\074\uff8e\075\044\001\002\000\052\003" +
    "\324\006\027\007\032\010\026\012\331\014\320\015\300" +
    "\016\303\017\323\023\uff8b\044\322\056\356\057\313\060" +
    "\305\061\307\062\301\063\310\071\031\072\030\074\306" +
    "\001\002\000\004\023\u010e\001\002\000\006\013\uff83\075" +
    "\uff83\001\002\000\006\013\371\075\022\001\002\000\060" +
    "\003\uff82\006\uff82\007\uff82\010\uff82\012\uff82\014\uff82\015" +
    "\uff82\016\uff82\017\uff82\023\uff82\044\uff82\051\uff82\054\uff82" +
    "\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063" +
    "\uff82\071\uff82\072\uff82\074\uff82\001\002\000\012\026\uff3e" +
    "\053\uff3e\067\uff3e\070\uff3e\001\002\000\016\033\134\043" +
    "\136\044\132\050\142\052\141\074\135\001\002\000\004" +
    "\053\u0120\001\002\000\030\003\u0118\030\u0117\031\u011a\032" +
    "\153\033\154\034\151\035\155\036\152\046\u0119\047\u0116" +
    "\053\150\001\002\000\016\033\134\043\136\044\132\050" +
    "\142\052\141\074\135\001\002\000\020\031\u011e\033\uff22" +
    "\043\uff22\044\uff22\050\uff22\052\uff22\074\uff22\001\002\000" +
    "\004\031\u011d\001\002\000\016\033\uff1e\043\uff1e\044\uff1e" +
    "\050\uff1e\052\uff1e\074\uff1e\001\002\000\020\031\u011c\033" +
    "\uff24\043\uff24\044\uff24\050\uff24\052\uff24\074\uff24\001\002" +
    "\000\004\031\u011b\001\002\000\016\033\uff20\043\uff20\044" +
    "\uff20\050\uff20\052\uff20\074\uff20\001\002\000\016\033\uff23" +
    "\043\uff23\044\uff23\050\uff23\052\uff23\074\uff23\001\002\000" +
    "\016\033\uff1f\043\uff1f\044\uff1f\050\uff1f\052\uff1f\074\uff1f" +
    "\001\002\000\016\033\uff21\043\uff21\044\uff21\050\uff21\052" +
    "\uff21\074\uff21\001\002\000\024\026\uff3c\032\153\033\154" +
    "\034\151\035\155\036\152\053\uff3c\067\uff3c\070\uff3c\001" +
    "\002\000\012\026\uff3f\053\uff3f\067\uff3f\070\uff3f\001\002" +
    "\000\004\052\u0122\001\002\000\012\043\u0123\044\u0127\050" +
    "\u0124\074\u0126\001\002\000\006\027\uff45\053\uff45\001\002" +
    "\000\004\044\u0144\001\002\000\004\053\uff51\001\002\000" +
    "\004\005\u0128\001\002\000\006\027\uff47\053\uff47\001\002" +
    "\000\004\044\u0129\001\002\000\006\027\uff44\053\uff44\001" +
    "\002\000\004\053\u012b\001\002\000\004\022\u012c\001\002" +
    "\000\004\075\022\001\002\000\012\023\uff4a\054\u0130\055" +
    "\u012e\075\044\001\002\000\004\027\u013f\001\002\000\004" +
    "\023\u013d\001\002\000\012\043\u0123\044\u0127\050\u0124\074" +
    "\u0126\001\002\000\004\027\u0132\001\002\000\004\075\022" +
    "\001\002\000\062\003\uff4f\006\uff4f\007\uff4f\010\uff4f\012" +
    "\uff4f\014\uff4f\015\uff4f\016\uff4f\017\uff4f\023\uff4f\044\uff4f" +
    "\051\uff4f\054\uff4f\055\uff4f\056\uff4f\057\uff4f\060\uff4f\061" +
    "\uff4f\062\uff4f\063\uff4f\071\uff4f\072\uff4f\074\uff4f\075\044" +
    "\001\002\000\060\003\uff8e\006\uff8e\007\uff8e\010\uff8e\012" +
    "\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\023\uff8e\044\uff8e" +
    "\051\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061" +
    "\uff8e\062\uff8e\063\uff8e\071\uff8e\072\uff8e\074\uff8e\001\002" +
    "\000\060\003\324\006\027\007\032\010\026\012\331\014" +
    "\320\015\300\016\303\017\323\023\uff8b\044\322\051\u0138" +
    "\054\uff8b\055\uff8b\056\356\057\313\060\305\061\307\062" +
    "\301\063\310\071\031\072\030\074\306\001\002\000\010" +
    "\023\uff4e\054\uff4e\055\uff4e\001\002\000\010\023\uff48\054" +
    "\uff48\055\uff48\001\002\000\004\026\u0139\001\002\000\004" +
    "\075\022\001\002\000\012\023\uff49\054\uff49\055\uff49\075" +
    "\044\001\002\000\010\023\uff4a\054\u0130\055\u012e\001\002" +
    "\000\004\023\uff4d\001\002\000\004\075\022\001\002\000" +
    "\062\003\uff50\006\uff50\007\uff50\010\uff50\012\uff50\014\uff50" +
    "\015\uff50\016\uff50\017\uff50\023\uff50\044\uff50\051\uff50\054" +
    "\uff50\055\uff50\056\uff50\057\uff50\060\uff50\061\uff50\062\uff50" +
    "\063\uff50\071\uff50\072\uff50\074\uff50\075\044\001\002\000" +
    "\004\075\022\001\002\000\056\003\uff4c\006\uff4c\007\uff4c" +
    "\010\uff4c\012\uff4c\014\uff4c\015\uff4c\016\uff4c\017\uff4c\023" +
    "\uff4c\044\uff4c\051\uff4c\056\uff4c\057\uff4c\060\uff4c\061\uff4c" +
    "\062\uff4c\063\uff4c\071\uff4c\072\uff4c\074\uff4c\075\044\001" +
    "\002\000\054\003\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\023\uff8e\044\uff8e\051" +
    "\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e" +
    "\071\uff8e\072\uff8e\074\uff8e\001\002\000\054\003\324\006" +
    "\027\007\032\010\026\012\331\014\320\015\300\016\303" +
    "\017\323\023\uff8b\044\322\051\u0138\056\356\057\313\060" +
    "\305\061\307\062\301\063\310\071\031\072\030\074\306" +
    "\001\002\000\004\023\uff4b\001\002\000\004\050\u0145\001" +
    "\002\000\006\027\uff46\053\uff46\001\002\000\022\003\125" +
    "\033\uffb5\043\uffb5\044\uffb5\050\uffb5\052\uffb5\053\uffb9\074" +
    "\uffb5\001\002\000\026\003\u0148\033\uffef\043\uffef\044\uffef" +
    "\050\uffef\052\uffef\061\307\062\301\063\310\074\uffef\001" +
    "\002\000\010\026\uffe9\044\uffe9\052\uff0e\001\002\000\004" +
    "\052\u014a\001\002\000\020\003\u0152\033\u014e\041\u0150\043" +
    "\u0151\044\u014b\053\u0153\074\u014f\001\002\000\006\032\uff06" +
    "\053\uff06\001\002\000\006\032\uff0b\053\uff0b\001\002\000" +
    "\004\053\u0194\001\002\000\006\043\u0190\044\u0191\001\002" +
    "\000\004\005\u018e\001\002\000\142\004\ufec7\005\ufec7\006" +
    "\ufec7\007\ufec7\010\ufec7\011\ufec7\012\ufec7\013\ufec7\014\ufec7" +
    "\015\ufec7\016\ufec7\017\ufec7\020\ufec7\021\ufec7\022\ufec7\023" +
    "\ufec7\024\ufec7\025\ufec7\026\ufec7\027\ufec7\030\ufec7\031\ufec7" +
    "\032\ufec7\033\ufec7\034\ufec7\035\ufec7\036\ufec7\037\ufec7\040" +
    "\ufec7\041\ufec7\042\ufec7\043\ufec7\044\ufec7\045\ufec7\046\ufec7" +
    "\047\ufec7\050\ufec7\051\ufec7\052\ufec7\053\ufec7\054\ufec7\055" +
    "\ufec7\056\ufec7\057\ufec7\060\ufec7\065\ufec7\066\ufec7\074\ufec7" +
    "\001\002\000\010\005\u0157\032\uff05\053\uff05\001\002\000" +
    "\004\053\uff07\001\002\000\004\026\u0154\001\002\000\004" +
    "\075\uff1b\001\002\000\004\075\022\001\002\000\062\003" +
    "\uff1a\006\uff1a\007\uff1a\010\uff1a\012\uff1a\014\uff1a\015\uff1a" +
    "\016\uff1a\017\uff1a\023\uff1a\044\uff1a\051\uff1a\054\uff1a\055" +
    "\uff1a\056\uff1a\057\uff1a\060\uff1a\061\uff1a\062\uff1a\063\uff1a" +
    "\071\uff1a\072\uff1a\074\uff1a\075\044\001\002\000\004\043" +
    "\u0158\001\002\000\006\032\uff03\053\uff03\001\002\000\142" +
    "\004\u0162\005\u0175\006\u017f\007\u0167\010\u0178\011\u0182\012" +
    "\u0169\013\u0177\014\u0188\015\u015f\016\u0184\017\u0164\020\u0171" +
    "\021\u016a\022\u0161\023\u0160\024\u0187\025\u0186\026\u017b\027" +
    "\u015e\030\u0185\031\u0163\032\u0170\033\u016d\034\u0174\035\u0181" +
    "\036\u016f\037\u015c\040\u0179\041\u015a\042\u0173\043\u016b\044" +
    "\u017a\045\u0183\046\u0172\047\u016e\050\u0180\051\u017e\052\u017d" +
    "\053\u017c\054\u015b\055\u0166\056\u0189\057\u0176\060\u015d\065" +
    "\u0165\066\u016c\074\u0168\001\002\000\006\032\uff09\053\uff09" +
    "\001\002\000\144\004\ufeec\005\ufeec\006\ufeec\007\ufeec\010" +
    "\ufeec\011\ufeec\012\ufeec\013\ufeec\014\ufeec\015\ufeec\016\ufeec" +
    "\017\ufeec\020\ufeec\021\ufeec\022\ufeec\023\ufeec\024\ufeec\025" +
    "\ufeec\026\ufeec\027\ufeec\030\ufeec\031\ufeec\032\ufeec\033\ufeec" +
    "\034\ufeec\035\ufeec\036\ufeec\037\ufeec\040\ufeec\041\ufeec\042" +
    "\ufeec\043\ufeec\044\ufeec\045\ufeec\046\ufeec\047\ufeec\050\ufeec" +
    "\051\ufeec\052\ufeec\053\ufeec\054\ufeec\055\ufeec\056\ufeec\057" +
    "\ufeec\060\ufeec\065\ufeec\066\ufeec\074\ufeec\075\ufeec\001\002" +
    "\000\144\004\ufed0\005\ufed0\006\ufed0\007\ufed0\010\ufed0\011" +
    "\ufed0\012\ufed0\013\ufed0\014\ufed0\015\ufed0\016\ufed0\017\ufed0" +
    "\020\ufed0\021\ufed0\022\ufed0\023\ufed0\024\ufed0\025\ufed0\026" +
    "\ufed0\027\ufed0\030\ufed0\031\ufed0\032\ufed0\033\ufed0\034\ufed0" +
    "\035\ufed0\036\ufed0\037\ufed0\040\ufed0\041\ufed0\042\ufed0\043" +
    "\ufed0\044\ufed0\045\ufed0\046\ufed0\047\ufed0\050\ufed0\051\ufed0" +
    "\052\ufed0\053\ufed0\054\ufed0\055\ufed0\056\ufed0\057\ufed0\060" +
    "\ufed0\065\ufed0\066\ufed0\074\ufed0\075\ufed0\001\002\000\144" +
    "\004\ufee5\005\ufee5\006\ufee5\007\ufee5\010\ufee5\011\ufee5\012" +
    "\ufee5\013\ufee5\014\ufee5\015\ufee5\016\ufee5\017\ufee5\020\ufee5" +
    "\021\ufee5\022\ufee5\023\ufee5\024\ufee5\025\ufee5\026\ufee5\027" +
    "\ufee5\030\ufee5\031\ufee5\032\ufee5\033\ufee5\034\ufee5\035\ufee5" +
    "\036\ufee5\037\ufee5\040\ufee5\041\ufee5\042\ufee5\043\ufee5\044" +
    "\ufee5\045\ufee5\046\ufee5\047\ufee5\050\ufee5\051\ufee5\052\ufee5" +
    "\053\ufee5\054\ufee5\055\ufee5\056\ufee5\057\ufee5\060\ufee5\065" +
    "\ufee5\066\ufee5\074\ufee5\075\ufee5\001\002\000\144\004\ufeda" +
    "\005\ufeda\006\ufeda\007\ufeda\010\ufeda\011\ufeda\012\ufeda\013" +
    "\ufeda\014\ufeda\015\ufeda\016\ufeda\017\ufeda\020\ufeda\021\ufeda" +
    "\022\ufeda\023\ufeda\024\ufeda\025\ufeda\026\ufeda\027\ufeda\030" +
    "\ufeda\031\ufeda\032\ufeda\033\ufeda\034\ufeda\035\ufeda\036\ufeda" +
    "\037\ufeda\040\ufeda\041\ufeda\042\ufeda\043\ufeda\044\ufeda\045" +
    "\ufeda\046\ufeda\047\ufeda\050\ufeda\051\ufeda\052\ufeda\053\ufeda" +
    "\054\ufeda\055\ufeda\056\ufeda\057\ufeda\060\ufeda\065\ufeda\066" +
    "\ufeda\074\ufeda\075\ufeda\001\002\000\144\004\ufeeb\005\ufeeb" +
    "\006\ufeeb\007\ufeeb\010\ufeeb\011\ufeeb\012\ufeeb\013\ufeeb\014" +
    "\ufeeb\015\ufeeb\016\ufeeb\017\ufeeb\020\ufeeb\021\ufeeb\022\ufeeb" +
    "\023\ufeeb\024\ufeeb\025\ufeeb\026\ufeeb\027\ufeeb\030\ufeeb\031" +
    "\ufeeb\032\ufeeb\033\ufeeb\034\ufeeb\035\ufeeb\036\ufeeb\037\ufeeb" +
    "\040\ufeeb\041\ufeeb\042\ufeeb\043\ufeeb\044\ufeeb\045\ufeeb\046" +
    "\ufeeb\047\ufeeb\050\ufeeb\051\ufeeb\052\ufeeb\053\ufeeb\054\ufeeb" +
    "\055\ufeeb\056\ufeeb\057\ufeeb\060\ufeeb\065\ufeeb\066\ufeeb\074" +
    "\ufeeb\075\ufeeb\001\002\000\144\004\ufee1\005\ufee1\006\ufee1" +
    "\007\ufee1\010\ufee1\011\ufee1\012\ufee1\013\ufee1\014\ufee1\015" +
    "\ufee1\016\ufee1\017\ufee1\020\ufee1\021\ufee1\022\ufee1\023\ufee1" +
    "\024\ufee1\025\ufee1\026\ufee1\027\ufee1\030\ufee1\031\ufee1\032" +
    "\ufee1\033\ufee1\034\ufee1\035\ufee1\036\ufee1\037\ufee1\040\ufee1" +
    "\041\ufee1\042\ufee1\043\ufee1\044\ufee1\045\ufee1\046\ufee1\047" +
    "\ufee1\050\ufee1\051\ufee1\052\ufee1\053\ufee1\054\ufee1\055\ufee1" +
    "\056\ufee1\057\ufee1\060\ufee1\065\ufee1\066\ufee1\074\ufee1\075" +
    "\ufee1\001\002\000\144\004\ufee2\005\ufee2\006\ufee2\007\ufee2" +
    "\010\ufee2\011\ufee2\012\ufee2\013\ufee2\014\ufee2\015\ufee2\016" +
    "\ufee2\017\ufee2\020\ufee2\021\ufee2\022\ufee2\023\ufee2\024\ufee2" +
    "\025\ufee2\026\ufee2\027\ufee2\030\ufee2\031\ufee2\032\ufee2\033" +
    "\ufee2\034\ufee2\035\ufee2\036\ufee2\037\ufee2\040\ufee2\041\ufee2" +
    "\042\ufee2\043\ufee2\044\ufee2\045\ufee2\046\ufee2\047\ufee2\050" +
    "\ufee2\051\ufee2\052\ufee2\053\ufee2\054\ufee2\055\ufee2\056\ufee2" +
    "\057\ufee2\060\ufee2\065\ufee2\066\ufee2\074\ufee2\075\ufee2\001" +
    "\002\000\144\004\ufef6\005\ufef6\006\ufef6\007\ufef6\010\ufef6" +
    "\011\ufef6\012\ufef6\013\ufef6\014\ufef6\015\ufef6\016\ufef6\017" +
    "\ufef6\020\ufef6\021\ufef6\022\ufef6\023\ufef6\024\ufef6\025\ufef6" +
    "\026\ufef6\027\ufef6\030\ufef6\031\ufef6\032\ufef6\033\ufef6\034" +
    "\ufef6\035\ufef6\036\ufef6\037\ufef6\040\ufef6\041\ufef6\042\ufef6" +
    "\043\ufef6\044\ufef6\045\ufef6\046\ufef6\047\ufef6\050\ufef6\051" +
    "\ufef6\052\ufef6\053\ufef6\054\ufef6\055\ufef6\056\ufef6\057\ufef6" +
    "\060\ufef6\065\ufef6\066\ufef6\074\ufef6\075\ufef6\001\002\000" +
    "\144\004\ufed8\005\ufed8\006\ufed8\007\ufed8\010\ufed8\011\ufed8" +
    "\012\ufed8\013\ufed8\014\ufed8\015\ufed8\016\ufed8\017\ufed8\020" +
    "\ufed8\021\ufed8\022\ufed8\023\ufed8\024\ufed8\025\ufed8\026\ufed8" +
    "\027\ufed8\030\ufed8\031\ufed8\032\ufed8\033\ufed8\034\ufed8\035" +
    "\ufed8\036\ufed8\037\ufed8\040\ufed8\041\ufed8\042\ufed8\043\ufed8" +
    "\044\ufed8\045\ufed8\046\ufed8\047\ufed8\050\ufed8\051\ufed8\052" +
    "\ufed8\053\ufed8\054\ufed8\055\ufed8\056\ufed8\057\ufed8\060\ufed8" +
    "\065\ufed8\066\ufed8\074\ufed8\075\ufed8\001\002\000\144\004" +
    "\ufeed\005\ufeed\006\ufeed\007\ufeed\010\ufeed\011\ufeed\012\ufeed" +
    "\013\ufeed\014\ufeed\015\ufeed\016\ufeed\017\ufeed\020\ufeed\021" +
    "\ufeed\022\ufeed\023\ufeed\024\ufeed\025\ufeed\026\ufeed\027\ufeed" +
    "\030\ufeed\031\ufeed\032\ufeed\033\ufeed\034\ufeed\035\ufeed\036" +
    "\ufeed\037\ufeed\040\ufeed\041\ufeed\042\ufeed\043\ufeed\044\ufeed" +
    "\045\ufeed\046\ufeed\047\ufeed\050\ufeed\051\ufeed\052\ufeed\053" +
    "\ufeed\054\ufeed\055\ufeed\056\ufeed\057\ufeed\060\ufeed\065\ufeed" +
    "\066\ufeed\074\ufeed\075\ufeed\001\002\000\144\004\ufeca\005" +
    "\ufeca\006\ufeca\007\ufeca\010\ufeca\011\ufeca\012\ufeca\013\ufeca" +
    "\014\ufeca\015\ufeca\016\ufeca\017\ufeca\020\ufeca\021\ufeca\022" +
    "\ufeca\023\ufeca\024\ufeca\025\ufeca\026\ufeca\027\ufeca\030\ufeca" +
    "\031\ufeca\032\ufeca\033\ufeca\034\ufeca\035\ufeca\036\ufeca\037" +
    "\ufeca\040\ufeca\041\ufeca\042\ufeca\043\ufeca\044\ufeca\045\ufeca" +
    "\046\ufeca\047\ufeca\050\ufeca\051\ufeca\052\ufeca\053\ufeca\054" +
    "\ufeca\055\ufeca\056\ufeca\057\ufeca\060\ufeca\065\ufeca\066\ufeca" +
    "\074\ufeca\075\ufeca\001\002\000\144\004\ufee9\005\ufee9\006" +
    "\ufee9\007\ufee9\010\ufee9\011\ufee9\012\ufee9\013\ufee9\014\ufee9" +
    "\015\ufee9\016\ufee9\017\ufee9\020\ufee9\021\ufee9\022\ufee9\023" +
    "\ufee9\024\ufee9\025\ufee9\026\ufee9\027\ufee9\030\ufee9\031\ufee9" +
    "\032\ufee9\033\ufee9\034\ufee9\035\ufee9\036\ufee9\037\ufee9\040" +
    "\ufee9\041\ufee9\042\ufee9\043\ufee9\044\ufee9\045\ufee9\046\ufee9" +
    "\047\ufee9\050\ufee9\051\ufee9\052\ufee9\053\ufee9\054\ufee9\055" +
    "\ufee9\056\ufee9\057\ufee9\060\ufee9\065\ufee9\066\ufee9\074\ufee9" +
    "\075\ufee9\001\002\000\144\004\ufef3\005\ufef3\006\ufef3\007" +
    "\ufef3\010\ufef3\011\ufef3\012\ufef3\013\ufef3\014\ufef3\015\ufef3" +
    "\016\ufef3\017\ufef3\020\ufef3\021\ufef3\022\ufef3\023\ufef3\024" +
    "\ufef3\025\ufef3\026\ufef3\027\ufef3\030\ufef3\031\ufef3\032\ufef3" +
    "\033\ufef3\034\ufef3\035\ufef3\036\ufef3\037\ufef3\040\ufef3\041" +
    "\ufef3\042\ufef3\043\ufef3\044\ufef3\045\ufef3\046\ufef3\047\ufef3" +
    "\050\ufef3\051\ufef3\052\ufef3\053\ufef3\054\ufef3\055\ufef3\056" +
    "\ufef3\057\ufef3\060\ufef3\065\ufef3\066\ufef3\074\ufef3\075\ufef3" +
    "\001\002\000\144\004\ufedd\005\ufedd\006\ufedd\007\ufedd\010" +
    "\ufedd\011\ufedd\012\ufedd\013\ufedd\014\ufedd\015\ufedd\016\ufedd" +
    "\017\ufedd\020\ufedd\021\ufedd\022\ufedd\023\ufedd\024\ufedd\025" +
    "\ufedd\026\ufedd\027\ufedd\030\ufedd\031\ufedd\032\ufedd\033\ufedd" +
    "\034\ufedd\035\ufedd\036\ufedd\037\ufedd\040\ufedd\041\ufedd\042" +
    "\ufedd\043\ufedd\044\ufedd\045\ufedd\046\ufedd\047\ufedd\050\ufedd" +
    "\051\ufedd\052\ufedd\053\ufedd\054\ufedd\055\ufedd\056\ufedd\057" +
    "\ufedd\060\ufedd\065\ufedd\066\ufedd\074\ufedd\075\ufedd\001\002" +
    "\000\144\004\ufef0\005\ufef0\006\ufef0\007\ufef0\010\ufef0\011" +
    "\ufef0\012\ufef0\013\ufef0\014\ufef0\015\ufef0\016\ufef0\017\ufef0" +
    "\020\ufef0\021\ufef0\022\ufef0\023\ufef0\024\ufef0\025\ufef0\026" +
    "\ufef0\027\ufef0\030\ufef0\031\ufef0\032\ufef0\033\ufef0\034\ufef0" +
    "\035\ufef0\036\ufef0\037\ufef0\040\ufef0\041\ufef0\042\ufef0\043" +
    "\ufef0\044\ufef0\045\ufef0\046\ufef0\047\ufef0\050\ufef0\051\ufef0" +
    "\052\ufef0\053\ufef0\054\ufef0\055\ufef0\056\ufef0\057\ufef0\060" +
    "\ufef0\065\ufef0\066\ufef0\074\ufef0\075\ufef0\001\002\000\144" +
    "\004\ufee3\005\ufee3\006\ufee3\007\ufee3\010\ufee3\011\ufee3\012" +
    "\ufee3\013\ufee3\014\ufee3\015\ufee3\016\ufee3\017\ufee3\020\ufee3" +
    "\021\ufee3\022\ufee3\023\ufee3\024\ufee3\025\ufee3\026\ufee3\027" +
    "\ufee3\030\ufee3\031\ufee3\032\ufee3\033\ufee3\034\ufee3\035\ufee3" +
    "\036\ufee3\037\ufee3\040\ufee3\041\ufee3\042\ufee3\043\ufee3\044" +
    "\ufee3\045\ufee3\046\ufee3\047\ufee3\050\ufee3\051\ufee3\052\ufee3" +
    "\053\ufee3\054\ufee3\055\ufee3\056\ufee3\057\ufee3\060\ufee3\065" +
    "\ufee3\066\ufee3\074\ufee3\075\ufee3\001\002\000\144\004\ufecc" +
    "\005\ufecc\006\ufecc\007\ufecc\010\ufecc\011\ufecc\012\ufecc\013" +
    "\ufecc\014\ufecc\015\ufecc\016\ufecc\017\ufecc\020\ufecc\021\ufecc" +
    "\022\ufecc\023\ufecc\024\ufecc\025\ufecc\026\ufecc\027\ufecc\030" +
    "\ufecc\031\ufecc\032\ufecc\033\ufecc\034\ufecc\035\ufecc\036\ufecc" +
    "\037\ufecc\040\ufecc\041\ufecc\042\ufecc\043\ufecc\044\ufecc\045" +
    "\ufecc\046\ufecc\047\ufecc\050\ufecc\051\ufecc\052\ufecc\053\ufecc" +
    "\054\ufecc\055\ufecc\056\ufecc\057\ufecc\060\ufecc\065\ufecc\066" +
    "\ufecc\074\ufecc\075\ufecc\001\002\000\144\004\ufec9\005\ufec9" +
    "\006\ufec9\007\ufec9\010\ufec9\011\ufec9\012\ufec9\013\ufec9\014" +
    "\ufec9\015\ufec9\016\ufec9\017\ufec9\020\ufec9\021\ufec9\022\ufec9" +
    "\023\ufec9\024\ufec9\025\ufec9\026\ufec9\027\ufec9\030\ufec9\031" +
    "\ufec9\032\ufec9\033\ufec9\034\ufec9\035\ufec9\036\ufec9\037\ufec9" +
    "\040\ufec9\041\ufec9\042\ufec9\043\ufec9\044\ufec9\045\ufec9\046" +
    "\ufec9\047\ufec9\050\ufec9\051\ufec9\052\ufec9\053\ufec9\054\ufec9" +
    "\055\ufec9\056\ufec9\057\ufec9\060\ufec9\065\ufec9\066\ufec9\074" +
    "\ufec9\075\ufec9\001\002\000\144\004\ufed6\005\ufed6\006\ufed6" +
    "\007\ufed6\010\ufed6\011\ufed6\012\ufed6\013\ufed6\014\ufed6\015" +
    "\ufed6\016\ufed6\017\ufed6\020\ufed6\021\ufed6\022\ufed6\023\ufed6" +
    "\024\ufed6\025\ufed6\026\ufed6\027\ufed6\030\ufed6\031\ufed6\032" +
    "\ufed6\033\ufed6\034\ufed6\035\ufed6\036\ufed6\037\ufed6\040\ufed6" +
    "\041\ufed6\042\ufed6\043\ufed6\044\ufed6\045\ufed6\046\ufed6\047" +
    "\ufed6\050\ufed6\051\ufed6\052\ufed6\053\ufed6\054\ufed6\055\ufed6" +
    "\056\ufed6\057\ufed6\060\ufed6\065\ufed6\066\ufed6\074\ufed6\075" +
    "\ufed6\001\002\000\144\004\ufed2\005\ufed2\006\ufed2\007\ufed2" +
    "\010\ufed2\011\ufed2\012\ufed2\013\ufed2\014\ufed2\015\ufed2\016" +
    "\ufed2\017\ufed2\020\ufed2\021\ufed2\022\ufed2\023\ufed2\024\ufed2" +
    "\025\ufed2\026\ufed2\027\ufed2\030\ufed2\031\ufed2\032\ufed2\033" +
    "\ufed2\034\ufed2\035\ufed2\036\ufed2\037\ufed2\040\ufed2\041\ufed2" +
    "\042\ufed2\043\ufed2\044\ufed2\045\ufed2\046\ufed2\047\ufed2\050" +
    "\ufed2\051\ufed2\052\ufed2\053\ufed2\054\ufed2\055\ufed2\056\ufed2" +
    "\057\ufed2\060\ufed2\065\ufed2\066\ufed2\074\ufed2\075\ufed2\001" +
    "\002\000\144\004\ufed3\005\ufed3\006\ufed3\007\ufed3\010\ufed3" +
    "\011\ufed3\012\ufed3\013\ufed3\014\ufed3\015\ufed3\016\ufed3\017" +
    "\ufed3\020\ufed3\021\ufed3\022\ufed3\023\ufed3\024\ufed3\025\ufed3" +
    "\026\ufed3\027\ufed3\030\ufed3\031\ufed3\032\ufed3\033\ufed3\034" +
    "\ufed3\035\ufed3\036\ufed3\037\ufed3\040\ufed3\041\ufed3\042\ufed3" +
    "\043\ufed3\044\ufed3\045\ufed3\046\ufed3\047\ufed3\050\ufed3\051" +
    "\ufed3\052\ufed3\053\ufed3\054\ufed3\055\ufed3\056\ufed3\057\ufed3" +
    "\060\ufed3\065\ufed3\066\ufed3\074\ufed3\075\ufed3\001\002\000" +
    "\144\004\ufed7\005\ufed7\006\ufed7\007\ufed7\010\ufed7\011\ufed7" +
    "\012\ufed7\013\ufed7\014\ufed7\015\ufed7\016\ufed7\017\ufed7\020" +
    "\ufed7\021\ufed7\022\ufed7\023\ufed7\024\ufed7\025\ufed7\026\ufed7" +
    "\027\ufed7\030\ufed7\031\ufed7\032\ufed7\033\ufed7\034\ufed7\035" +
    "\ufed7\036\ufed7\037\ufed7\040\ufed7\041\ufed7\042\ufed7\043\ufed7" +
    "\044\ufed7\045\ufed7\046\ufed7\047\ufed7\050\ufed7\051\ufed7\052" +
    "\ufed7\053\ufed7\054\ufed7\055\ufed7\056\ufed7\057\ufed7\060\ufed7" +
    "\065\ufed7\066\ufed7\074\ufed7\075\ufed7\001\002\000\144\004" +
    "\ufee4\005\ufee4\006\ufee4\007\ufee4\010\ufee4\011\ufee4\012\ufee4" +
    "\013\ufee4\014\ufee4\015\ufee4\016\ufee4\017\ufee4\020\ufee4\021" +
    "\ufee4\022\ufee4\023\ufee4\024\ufee4\025\ufee4\026\ufee4\027\ufee4" +
    "\030\ufee4\031\ufee4\032\ufee4\033\ufee4\034\ufee4\035\ufee4\036" +
    "\ufee4\037\ufee4\040\ufee4\041\ufee4\042\ufee4\043\ufee4\044\ufee4" +
    "\045\ufee4\046\ufee4\047\ufee4\050\ufee4\051\ufee4\052\ufee4\053" +
    "\ufee4\054\ufee4\055\ufee4\056\ufee4\057\ufee4\060\ufee4\065\ufee4" +
    "\066\ufee4\074\ufee4\075\ufee4\001\002\000\144\004\ufed1\005" +
    "\ufed1\006\ufed1\007\ufed1\010\ufed1\011\ufed1\012\ufed1\013\ufed1" +
    "\014\ufed1\015\ufed1\016\ufed1\017\ufed1\020\ufed1\021\ufed1\022" +
    "\ufed1\023\ufed1\024\ufed1\025\ufed1\026\ufed1\027\ufed1\030\ufed1" +
    "\031\ufed1\032\ufed1\033\ufed1\034\ufed1\035\ufed1\036\ufed1\037" +
    "\ufed1\040\ufed1\041\ufed1\042\ufed1\043\ufed1\044\ufed1\045\ufed1" +
    "\046\ufed1\047\ufed1\050\ufed1\051\ufed1\052\ufed1\053\ufed1\054" +
    "\ufed1\055\ufed1\056\ufed1\057\ufed1\060\ufed1\065\ufed1\066\ufed1" +
    "\074\ufed1\075\ufed1\001\002\000\144\004\ufecd\005\ufecd\006" +
    "\ufecd\007\ufecd\010\ufecd\011\ufecd\012\ufecd\013\ufecd\014\ufecd" +
    "\015\ufecd\016\ufecd\017\ufecd\020\ufecd\021\ufecd\022\ufecd\023" +
    "\ufecd\024\ufecd\025\ufecd\026\ufecd\027\ufecd\030\ufecd\031\ufecd" +
    "\032\ufecd\033\ufecd\034\ufecd\035\ufecd\036\ufecd\037\ufecd\040" +
    "\ufecd\041\ufecd\042\ufecd\043\ufecd\044\ufecd\045\ufecd\046\ufecd" +
    "\047\ufecd\050\ufecd\051\ufecd\052\ufecd\053\ufecd\054\ufecd\055" +
    "\ufecd\056\ufecd\057\ufecd\060\ufecd\065\ufecd\066\ufecd\074\ufecd" +
    "\075\ufecd\001\002\000\144\004\ufed5\005\ufed5\006\ufed5\007" +
    "\ufed5\010\ufed5\011\ufed5\012\ufed5\013\ufed5\014\ufed5\015\ufed5" +
    "\016\ufed5\017\ufed5\020\ufed5\021\ufed5\022\ufed5\023\ufed5\024" +
    "\ufed5\025\ufed5\026\ufed5\027\ufed5\030\ufed5\031\ufed5\032\ufed5" +
    "\033\ufed5\034\ufed5\035\ufed5\036\ufed5\037\ufed5\040\ufed5\041" +
    "\ufed5\042\ufed5\043\ufed5\044\ufed5\045\ufed5\046\ufed5\047\ufed5" +
    "\050\ufed5\051\ufed5\052\ufed5\053\ufed5\054\ufed5\055\ufed5\056" +
    "\ufed5\057\ufed5\060\ufed5\065\ufed5\066\ufed5\074\ufed5\075\ufed5" +
    "\001\002\000\144\004\ufef5\005\ufef5\006\ufef5\007\ufef5\010" +
    "\ufef5\011\ufef5\012\ufef5\013\ufef5\014\ufef5\015\ufef5\016\ufef5" +
    "\017\ufef5\020\ufef5\021\ufef5\022\ufef5\023\ufef5\024\ufef5\025" +
    "\ufef5\026\ufef5\027\ufef5\030\ufef5\031\ufef5\032\ufef5\033\ufef5" +
    "\034\ufef5\035\ufef5\036\ufef5\037\ufef5\040\ufef5\041\ufef5\042" +
    "\ufef5\043\ufef5\044\ufef5\045\ufef5\046\ufef5\047\ufef5\050\ufef5" +
    "\051\ufef5\052\ufef5\053\ufef5\054\ufef5\055\ufef5\056\ufef5\057" +
    "\ufef5\060\ufef5\065\ufef5\066\ufef5\074\ufef5\075\ufef5\001\002" +
    "\000\144\004\ufee6\005\ufee6\006\ufee6\007\ufee6\010\ufee6\011" +
    "\ufee6\012\ufee6\013\ufee6\014\ufee6\015\ufee6\016\ufee6\017\ufee6" +
    "\020\ufee6\021\ufee6\022\ufee6\023\ufee6\024\ufee6\025\ufee6\026" +
    "\ufee6\027\ufee6\030\ufee6\031\ufee6\032\ufee6\033\ufee6\034\ufee6" +
    "\035\ufee6\036\ufee6\037\ufee6\040\ufee6\041\ufee6\042\ufee6\043" +
    "\ufee6\044\ufee6\045\ufee6\046\ufee6\047\ufee6\050\ufee6\051\ufee6" +
    "\052\ufee6\053\ufee6\054\ufee6\055\ufee6\056\ufee6\057\ufee6\060" +
    "\ufee6\065\ufee6\066\ufee6\074\ufee6\075\ufee6\001\002\000\144" +
    "\004\ufeef\005\ufeef\006\ufeef\007\ufeef\010\ufeef\011\ufeef\012" +
    "\ufeef\013\ufeef\014\ufeef\015\ufeef\016\ufeef\017\ufeef\020\ufeef" +
    "\021\ufeef\022\ufeef\023\ufeef\024\ufeef\025\ufeef\026\ufeef\027" +
    "\ufeef\030\ufeef\031\ufeef\032\ufeef\033\ufeef\034\ufeef\035\ufeef" +
    "\036\ufeef\037\ufeef\040\ufeef\041\ufeef\042\ufeef\043\ufeef\044" +
    "\ufeef\045\ufeef\046\ufeef\047\ufeef\050\ufeef\051\ufeef\052\ufeef" +
    "\053\ufeef\054\ufeef\055\ufeef\056\ufeef\057\ufeef\060\ufeef\065" +
    "\ufeef\066\ufeef\074\ufeef\075\ufeef\001\002\000\144\004\ufef2" +
    "\005\ufef2\006\ufef2\007\ufef2\010\ufef2\011\ufef2\012\ufef2\013" +
    "\ufef2\014\ufef2\015\ufef2\016\ufef2\017\ufef2\020\ufef2\021\ufef2" +
    "\022\ufef2\023\ufef2\024\ufef2\025\ufef2\026\ufef2\027\ufef2\030" +
    "\ufef2\031\ufef2\032\ufef2\033\ufef2\034\ufef2\035\ufef2\036\ufef2" +
    "\037\ufef2\040\ufef2\041\ufef2\042\ufef2\043\ufef2\044\ufef2\045" +
    "\ufef2\046\ufef2\047\ufef2\050\ufef2\051\ufef2\052\ufef2\053\ufef2" +
    "\054\ufef2\055\ufef2\056\ufef2\057\ufef2\060\ufef2\065\ufef2\066" +
    "\ufef2\074\ufef2\075\ufef2\001\002\000\144\004\ufecf\005\ufecf" +
    "\006\ufecf\007\ufecf\010\ufecf\011\ufecf\012\ufecf\013\ufecf\014" +
    "\ufecf\015\ufecf\016\ufecf\017\ufecf\020\ufecf\021\ufecf\022\ufecf" +
    "\023\ufecf\024\ufecf\025\ufecf\026\ufecf\027\ufecf\030\ufecf\031" +
    "\ufecf\032\ufecf\033\ufecf\034\ufecf\035\ufecf\036\ufecf\037\ufecf" +
    "\040\ufecf\041\ufecf\042\ufecf\043\ufecf\044\ufecf\045\ufecf\046" +
    "\ufecf\047\ufecf\050\ufecf\051\ufecf\052\ufecf\053\ufecf\054\ufecf" +
    "\055\ufecf\056\ufecf\057\ufecf\060\ufecf\065\ufecf\066\ufecf\074" +
    "\ufecf\075\ufecf\001\002\000\144\004\ufecb\005\ufecb\006\ufecb" +
    "\007\ufecb\010\ufecb\011\ufecb\012\ufecb\013\ufecb\014\ufecb\015" +
    "\ufecb\016\ufecb\017\ufecb\020\ufecb\021\ufecb\022\ufecb\023\ufecb" +
    "\024\ufecb\025\ufecb\026\ufecb\027\ufecb\030\ufecb\031\ufecb\032" +
    "\ufecb\033\ufecb\034\ufecb\035\ufecb\036\ufecb\037\ufecb\040\ufecb" +
    "\041\ufecb\042\ufecb\043\ufecb\044\ufecb\045\ufecb\046\ufecb\047" +
    "\ufecb\050\ufecb\051\ufecb\052\ufecb\053\ufecb\054\ufecb\055\ufecb" +
    "\056\ufecb\057\ufecb\060\ufecb\065\ufecb\066\ufecb\074\ufecb\075" +
    "\ufecb\001\002\000\144\004\ufedb\005\ufedb\006\ufedb\007\ufedb" +
    "\010\ufedb\011\ufedb\012\ufedb\013\ufedb\014\ufedb\015\ufedb\016" +
    "\ufedb\017\ufedb\020\ufedb\021\ufedb\022\ufedb\023\ufedb\024\ufedb" +
    "\025\ufedb\026\ufedb\027\ufedb\030\ufedb\031\ufedb\032\ufedb\033" +
    "\ufedb\034\ufedb\035\ufedb\036\ufedb\037\ufedb\040\ufedb\041\ufedb" +
    "\042\ufedb\043\ufedb\044\ufedb\045\ufedb\046\ufedb\047\ufedb\050" +
    "\ufedb\051\ufedb\052\ufedb\053\ufedb\054\ufedb\055\ufedb\056\ufedb" +
    "\057\ufedb\060\ufedb\065\ufedb\066\ufedb\074\ufedb\075\ufedb\001" +
    "\002\000\144\004\ufedc\005\ufedc\006\ufedc\007\ufedc\010\ufedc" +
    "\011\ufedc\012\ufedc\013\ufedc\014\ufedc\015\ufedc\016\ufedc\017" +
    "\ufedc\020\ufedc\021\ufedc\022\ufedc\023\ufedc\024\ufedc\025\ufedc" +
    "\026\ufedc\027\ufedc\030\ufedc\031\ufedc\032\ufedc\033\ufedc\034" +
    "\ufedc\035\ufedc\036\ufedc\037\ufedc\040\ufedc\041\ufedc\042\ufedc" +
    "\043\ufedc\044\ufedc\045\ufedc\046\ufedc\047\ufedc\050\ufedc\051" +
    "\ufedc\052\ufedc\053\ufedc\054\ufedc\055\ufedc\056\ufedc\057\ufedc" +
    "\060\ufedc\065\ufedc\066\ufedc\074\ufedc\075\ufedc\001\002\000" +
    "\144\004\ufede\005\ufede\006\ufede\007\ufede\010\ufede\011\ufede" +
    "\012\ufede\013\ufede\014\ufede\015\ufede\016\ufede\017\ufede\020" +
    "\ufede\021\ufede\022\ufede\023\ufede\024\ufede\025\ufede\026\ufede" +
    "\027\ufede\030\ufede\031\ufede\032\ufede\033\ufede\034\ufede\035" +
    "\ufede\036\ufede\037\ufede\040\ufede\041\ufede\042\ufede\043\ufede" +
    "\044\ufede\045\ufede\046\ufede\047\ufede\050\ufede\051\ufede\052" +
    "\ufede\053\ufede\054\ufede\055\ufede\056\ufede\057\ufede\060\ufede" +
    "\065\ufede\066\ufede\074\ufede\075\ufede\001\002\000\144\004" +
    "\ufeea\005\ufeea\006\ufeea\007\ufeea\010\ufeea\011\ufeea\012\ufeea" +
    "\013\ufeea\014\ufeea\015\ufeea\016\ufeea\017\ufeea\020\ufeea\021" +
    "\ufeea\022\ufeea\023\ufeea\024\ufeea\025\ufeea\026\ufeea\027\ufeea" +
    "\030\ufeea\031\ufeea\032\ufeea\033\ufeea\034\ufeea\035\ufeea\036" +
    "\ufeea\037\ufeea\040\ufeea\041\ufeea\042\ufeea\043\ufeea\044\ufeea" +
    "\045\ufeea\046\ufeea\047\ufeea\050\ufeea\051\ufeea\052\ufeea\053" +
    "\ufeea\054\ufeea\055\ufeea\056\ufeea\057\ufeea\060\ufeea\065\ufeea" +
    "\066\ufeea\074\ufeea\075\ufeea\001\002\000\144\004\ufef4\005" +
    "\ufef4\006\ufef4\007\ufef4\010\ufef4\011\ufef4\012\ufef4\013\ufef4" +
    "\014\ufef4\015\ufef4\016\ufef4\017\ufef4\020\ufef4\021\ufef4\022" +
    "\ufef4\023\ufef4\024\ufef4\025\ufef4\026\ufef4\027\ufef4\030\ufef4" +
    "\031\ufef4\032\ufef4\033\ufef4\034\ufef4\035\ufef4\036\ufef4\037" +
    "\ufef4\040\ufef4\041\ufef4\042\ufef4\043\ufef4\044\ufef4\045\ufef4" +
    "\046\ufef4\047\ufef4\050\ufef4\051\ufef4\052\ufef4\053\ufef4\054" +
    "\ufef4\055\ufef4\056\ufef4\057\ufef4\060\ufef4\065\ufef4\066\ufef4" +
    "\074\ufef4\075\ufef4\001\002\000\144\004\ufece\005\ufece\006" +
    "\ufece\007\ufece\010\ufece\011\ufece\012\ufece\013\ufece\014\ufece" +
    "\015\ufece\016\ufece\017\ufece\020\ufece\021\ufece\022\ufece\023" +
    "\ufece\024\ufece\025\ufece\026\ufece\027\ufece\030\ufece\031\ufece" +
    "\032\ufece\033\ufece\034\ufece\035\ufece\036\ufece\037\ufece\040" +
    "\ufece\041\ufece\042\ufece\043\ufece\044\ufece\045\ufece\046\ufece" +
    "\047\ufece\050\ufece\051\ufece\052\ufece\053\ufece\054\ufece\055" +
    "\ufece\056\ufece\057\ufece\060\ufece\065\ufece\066\ufece\074\ufece" +
    "\075\ufece\001\002\000\144\004\ufed4\005\ufed4\006\ufed4\007" +
    "\ufed4\010\ufed4\011\ufed4\012\ufed4\013\ufed4\014\ufed4\015\ufed4" +
    "\016\ufed4\017\ufed4\020\ufed4\021\ufed4\022\ufed4\023\ufed4\024" +
    "\ufed4\025\ufed4\026\ufed4\027\ufed4\030\ufed4\031\ufed4\032\ufed4" +
    "\033\ufed4\034\ufed4\035\ufed4\036\ufed4\037\ufed4\040\ufed4\041" +
    "\ufed4\042\ufed4\043\ufed4\044\ufed4\045\ufed4\046\ufed4\047\ufed4" +
    "\050\ufed4\051\ufed4\052\ufed4\053\ufed4\054\ufed4\055\ufed4\056" +
    "\ufed4\057\ufed4\060\ufed4\065\ufed4\066\ufed4\074\ufed4\075\ufed4" +
    "\001\002\000\144\004\ufef1\005\ufef1\006\ufef1\007\ufef1\010" +
    "\ufef1\011\ufef1\012\ufef1\013\ufef1\014\ufef1\015\ufef1\016\ufef1" +
    "\017\ufef1\020\ufef1\021\ufef1\022\ufef1\023\ufef1\024\ufef1\025" +
    "\ufef1\026\ufef1\027\ufef1\030\ufef1\031\ufef1\032\ufef1\033\ufef1" +
    "\034\ufef1\035\ufef1\036\ufef1\037\ufef1\040\ufef1\041\ufef1\042" +
    "\ufef1\043\ufef1\044\ufef1\045\ufef1\046\ufef1\047\ufef1\050\ufef1" +
    "\051\ufef1\052\ufef1\053\ufef1\054\ufef1\055\ufef1\056\ufef1\057" +
    "\ufef1\060\ufef1\065\ufef1\066\ufef1\074\ufef1\075\ufef1\001\002" +
    "\000\144\004\ufec8\005\ufec8\006\ufec8\007\ufec8\010\ufec8\011" +
    "\ufec8\012\ufec8\013\ufec8\014\ufec8\015\ufec8\016\ufec8\017\ufec8" +
    "\020\ufec8\021\ufec8\022\ufec8\023\ufec8\024\ufec8\025\ufec8\026" +
    "\ufec8\027\ufec8\030\ufec8\031\ufec8\032\ufec8\033\ufec8\034\ufec8" +
    "\035\ufec8\036\ufec8\037\ufec8\040\ufec8\041\ufec8\042\ufec8\043" +
    "\ufec8\044\ufec8\045\ufec8\046\ufec8\047\ufec8\050\ufec8\051\ufec8" +
    "\052\ufec8\053\ufec8\054\ufec8\055\ufec8\056\ufec8\057\ufec8\060" +
    "\ufec8\065\ufec8\066\ufec8\074\ufec8\075\ufec8\001\002\000\144" +
    "\004\ufeee\005\ufeee\006\ufeee\007\ufeee\010\ufeee\011\ufeee\012" +
    "\ufeee\013\ufeee\014\ufeee\015\ufeee\016\ufeee\017\ufeee\020\ufeee" +
    "\021\ufeee\022\ufeee\023\ufeee\024\ufeee\025\ufeee\026\ufeee\027" +
    "\ufeee\030\ufeee\031\ufeee\032\ufeee\033\ufeee\034\ufeee\035\ufeee" +
    "\036\ufeee\037\ufeee\040\ufeee\041\ufeee\042\ufeee\043\ufeee\044" +
    "\ufeee\045\ufeee\046\ufeee\047\ufeee\050\ufeee\051\ufeee\052\ufeee" +
    "\053\ufeee\054\ufeee\055\ufeee\056\ufeee\057\ufeee\060\ufeee\065" +
    "\ufeee\066\ufeee\074\ufeee\075\ufeee\001\002\000\144\004\ufed9" +
    "\005\ufed9\006\ufed9\007\ufed9\010\ufed9\011\ufed9\012\ufed9\013" +
    "\ufed9\014\ufed9\015\ufed9\016\ufed9\017\ufed9\020\ufed9\021\ufed9" +
    "\022\ufed9\023\ufed9\024\ufed9\025\ufed9\026\ufed9\027\ufed9\030" +
    "\ufed9\031\ufed9\032\ufed9\033\ufed9\034\ufed9\035\ufed9\036\ufed9" +
    "\037\ufed9\040\ufed9\041\ufed9\042\ufed9\043\ufed9\044\ufed9\045" +
    "\ufed9\046\ufed9\047\ufed9\050\ufed9\051\ufed9\052\ufed9\053\ufed9" +
    "\054\ufed9\055\ufed9\056\ufed9\057\ufed9\060\ufed9\065\ufed9\066" +
    "\ufed9\074\ufed9\075\ufed9\001\002\000\144\004\ufedf\005\ufedf" +
    "\006\ufedf\007\ufedf\010\ufedf\011\ufedf\012\ufedf\013\ufedf\014" +
    "\ufedf\015\ufedf\016\ufedf\017\ufedf\020\ufedf\021\ufedf\022\ufedf" +
    "\023\ufedf\024\ufedf\025\ufedf\026\ufedf\027\ufedf\030\ufedf\031" +
    "\ufedf\032\ufedf\033\ufedf\034\ufedf\035\ufedf\036\ufedf\037\ufedf" +
    "\040\ufedf\041\ufedf\042\ufedf\043\ufedf\044\ufedf\045\ufedf\046" +
    "\ufedf\047\ufedf\050\ufedf\051\ufedf\052\ufedf\053\ufedf\054\ufedf" +
    "\055\ufedf\056\ufedf\057\ufedf\060\ufedf\065\ufedf\066\ufedf\074" +
    "\ufedf\075\ufedf\001\002\000\144\004\ufee0\005\ufee0\006\ufee0" +
    "\007\ufee0\010\ufee0\011\ufee0\012\ufee0\013\ufee0\014\ufee0\015" +
    "\ufee0\016\ufee0\017\ufee0\020\ufee0\021\ufee0\022\ufee0\023\ufee0" +
    "\024\ufee0\025\ufee0\026\ufee0\027\ufee0\030\ufee0\031\ufee0\032" +
    "\ufee0\033\ufee0\034\ufee0\035\ufee0\036\ufee0\037\ufee0\040\ufee0" +
    "\041\ufee0\042\ufee0\043\ufee0\044\ufee0\045\ufee0\046\ufee0\047" +
    "\ufee0\050\ufee0\051\ufee0\052\ufee0\053\ufee0\054\ufee0\055\ufee0" +
    "\056\ufee0\057\ufee0\060\ufee0\065\ufee0\066\ufee0\074\ufee0\075" +
    "\ufee0\001\002\000\144\004\ufee7\005\ufee7\006\ufee7\007\ufee7" +
    "\010\ufee7\011\ufee7\012\ufee7\013\ufee7\014\ufee7\015\ufee7\016" +
    "\ufee7\017\ufee7\020\ufee7\021\ufee7\022\ufee7\023\ufee7\024\ufee7" +
    "\025\ufee7\026\ufee7\027\ufee7\030\ufee7\031\ufee7\032\ufee7\033" +
    "\ufee7\034\ufee7\035\ufee7\036\ufee7\037\ufee7\040\ufee7\041\ufee7" +
    "\042\ufee7\043\ufee7\044\ufee7\045\ufee7\046\ufee7\047\ufee7\050" +
    "\ufee7\051\ufee7\052\ufee7\053\ufee7\054\ufee7\055\ufee7\056\ufee7" +
    "\057\ufee7\060\ufee7\065\ufee7\066\ufee7\074\ufee7\075\ufee7\001" +
    "\002\000\144\004\ufee8\005\ufee8\006\ufee8\007\ufee8\010\ufee8" +
    "\011\ufee8\012\ufee8\013\ufee8\014\ufee8\015\ufee8\016\ufee8\017" +
    "\ufee8\020\ufee8\021\ufee8\022\ufee8\023\ufee8\024\ufee8\025\ufee8" +
    "\026\ufee8\027\ufee8\030\ufee8\031\ufee8\032\ufee8\033\ufee8\034" +
    "\ufee8\035\ufee8\036\ufee8\037\ufee8\040\ufee8\041\ufee8\042\ufee8" +
    "\043\ufee8\044\ufee8\045\ufee8\046\ufee8\047\ufee8\050\ufee8\051" +
    "\ufee8\052\ufee8\053\ufee8\054\ufee8\055\ufee8\056\ufee8\057\ufee8" +
    "\060\ufee8\065\ufee8\066\ufee8\074\ufee8\075\ufee8\001\002\000" +
    "\006\032\u018c\053\ufefe\001\002\000\004\053\uff08\001\002" +
    "\000\016\003\u0152\033\u014e\041\u0150\043\u0151\044\u014b\074" +
    "\u014f\001\002\000\004\053\ufeff\001\002\000\004\044\u018f" +
    "\001\002\000\006\032\uff04\053\uff04\001\002\000\010\005" +
    "\u0192\032\uff01\053\uff01\001\002\000\006\032\uff02\053\uff02" +
    "\001\002\000\004\043\u0193\001\002\000\006\032\uff00\053" +
    "\uff00\001\002\000\004\026\u0195\001\002\000\004\075\uff1d" +
    "\001\002\000\004\075\022\001\002\000\062\003\uff1c\006" +
    "\uff1c\007\uff1c\010\uff1c\012\uff1c\014\uff1c\015\uff1c\016\uff1c" +
    "\017\uff1c\023\uff1c\044\uff1c\051\uff1c\054\uff1c\055\uff1c\056" +
    "\uff1c\057\uff1c\060\uff1c\061\uff1c\062\uff1c\063\uff1c\071\uff1c" +
    "\072\uff1c\074\uff1c\075\044\001\002\000\006\032\u018c\053" +
    "\ufefe\001\002\000\004\053\uff0a\001\002\000\004\053\u019b" +
    "\001\002\000\004\026\u019c\001\002\000\004\075\022\001" +
    "\002\000\062\003\uffbb\006\uffbb\007\uffbb\010\uffbb\012\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\017\uffbb\023\uffbb\044\uffbb\051" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\071\uffbb\072\uffbb\074\uffbb\075\044\001" +
    "\002\000\004\052\u019f\001\002\000\010\003\u01a1\006\u01a0" +
    "\044\uff78\001\002\000\004\044\uff79\001\002\000\004\044" +
    "\uff77\001\002\000\004\044\u01a3\001\002\000\004\031\uff7d" +
    "\001\002\000\004\031\u01a5\001\002\000\012\033\u01a8\043" +
    "\u01a6\044\u01aa\074\u01a9\001\002\000\004\026\uff59\001\002" +
    "\000\004\026\u01b2\001\002\000\010\043\u01ad\044\u01af\074" +
    "\u01ae\001\002\000\004\005\u01ab\001\002\000\004\026\uff5d" +
    "\001\002\000\004\044\u01ac\001\002\000\004\026\uff5c\001" +
    "\002\000\004\026\uff58\001\002\000\004\005\u01b0\001\002" +
    "\000\004\026\uff5a\001\002\000\004\044\u01b1\001\002\000" +
    "\004\026\uff5b\001\002\000\022\003\uff7c\030\uff7c\033\uff7c" +
    "\043\uff7c\044\uff7c\050\uff7c\052\uff7c\074\uff7c\001\002\000" +
    "\022\003\340\030\337\033\134\043\136\044\132\050\142" +
    "\052\141\074\135\001\002\000\010\026\u01b5\067\343\070" +
    "\344\001\002\000\004\044\u01b6\001\002\000\004\031\u01b7" +
    "\001\002\000\016\003\u01c1\033\uff76\043\uff76\044\uff76\050" +
    "\uff76\052\uff76\001\002\000\004\053\u01b9\001\002\000\006" +
    "\022\uff7b\075\uff7b\001\002\000\006\022\ufef7\075\007\001" +
    "\002\000\004\022\u01bc\001\002\000\004\075\022\001\002" +
    "\000\052\003\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\023\uff8e\044\uff8e\057\uff8e" +
    "\060\uff8e\061\uff8e\062\uff8e\063\uff8e\071\uff8e\072\uff8e\074" +
    "\uff8e\075\044\001\002\000\050\003\324\006\027\007\032" +
    "\010\026\012\331\014\320\015\300\016\303\017\323\023" +
    "\u01bf\044\322\057\313\060\305\061\307\062\301\063\310" +
    "\071\031\072\030\074\306\001\002\000\004\075\022\001" +
    "\002\000\062\003\uff7a\006\uff7a\007\uff7a\010\uff7a\012\uff7a" +
    "\014\uff7a\015\uff7a\016\uff7a\017\uff7a\023\uff7a\044\uff7a\051" +
    "\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a" +
    "\062\uff7a\063\uff7a\071\uff7a\072\uff7a\074\uff7a\075\044\001" +
    "\002\000\004\053\uff74\001\002\000\014\033\u01c8\043\u01c4" +
    "\044\u01c9\050\u01c6\052\u01c3\001\002\000\014\033\u01c8\043" +
    "\u01c4\044\u01c9\050\u01c6\052\u01c3\001\002\000\020\005\u01dc" +
    "\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\053\uff6b\001" +
    "\002\000\016\032\u01d4\033\u01d5\034\u01d2\035\u01d6\036\u01d3" +
    "\053\uff75\001\002\000\006\043\u01ce\044\u01cf\001\002\000" +
    "\016\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\053\uff6d" +
    "\001\002\000\006\043\u01ca\044\u01cb\001\002\000\016\032" +
    "\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\053\uff6c\001\002" +
    "\000\020\005\u01cc\032\uff66\033\uff66\034\uff66\035\uff66\036" +
    "\uff66\053\uff66\001\002\000\016\032\uff67\033\uff67\034\uff67" +
    "\035\uff67\036\uff67\053\uff67\001\002\000\004\043\u01cd\001" +
    "\002\000\016\032\uff65\033\uff65\034\uff65\035\uff65\036\uff65" +
    "\053\uff65\001\002\000\004\050\u01d1\001\002\000\004\050" +
    "\u01d0\001\002\000\016\032\uff69\033\uff69\034\uff69\035\uff69" +
    "\036\uff69\053\uff69\001\002\000\016\032\uff68\033\uff68\034" +
    "\uff68\035\uff68\036\uff68\053\uff68\001\002\000\014\033\u01c8" +
    "\043\u01c4\044\u01c9\050\u01c6\052\u01c3\001\002\000\014\033" +
    "\u01c8\043\u01c4\044\u01c9\050\u01c6\052\u01c3\001\002\000\014" +
    "\033\u01c8\043\u01c4\044\u01c9\050\u01c6\052\u01c3\001\002\000" +
    "\014\033\u01c8\043\u01c4\044\u01c9\050\u01c6\052\u01c3\001\002" +
    "\000\014\033\u01c8\043\u01c4\044\u01c9\050\u01c6\052\u01c3\001" +
    "\002\000\016\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f" +
    "\053\uff6f\001\002\000\016\032\uff71\033\uff71\034\u01d2\035" +
    "\u01d6\036\u01d3\053\uff71\001\002\000\016\032\uff72\033\uff72" +
    "\034\u01d2\035\u01d6\036\u01d3\053\uff72\001\002\000\016\032" +
    "\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\053\uff6e\001\002" +
    "\000\016\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\053" +
    "\uff70\001\002\000\004\043\u01dd\001\002\000\016\032\uff6a" +
    "\033\uff6a\034\uff6a\035\uff6a\036\uff6a\053\uff6a\001\002\000" +
    "\016\032\u01d4\033\u01d5\034\u01d2\035\u01d6\036\u01d3\053\u01df" +
    "\001\002\000\016\032\uff73\033\uff73\034\uff73\035\uff73\036" +
    "\uff73\053\uff73\001\002\000\004\075\022\001\002\000\030" +
    "\003\uffa9\006\uffa9\007\uffa9\010\uffa9\020\uffa9\023\uffa9\044" +
    "\uffa9\071\uffa9\072\uffa9\074\uffa9\075\044\001\002\000\020" +
    "\003\u0152\033\u014e\041\u0150\043\u0151\044\u014b\053\u01e4\074" +
    "\u014f\001\002\000\004\053\u01e8\001\002\000\004\026\u01e5" +
    "\001\002\000\004\075\uff13\001\002\000\004\075\022\001" +
    "\002\000\062\003\uff12\006\uff12\007\uff12\010\uff12\012\uff12" +
    "\014\uff12\015\uff12\016\uff12\017\uff12\023\uff12\044\uff12\051" +
    "\uff12\054\uff12\055\uff12\056\uff12\057\uff12\060\uff12\061\uff12" +
    "\062\uff12\063\uff12\071\uff12\072\uff12\074\uff12\075\044\001" +
    "\002\000\004\026\u01e9\001\002\000\004\075\uff15\001\002" +
    "\000\004\075\022\001\002\000\062\003\uff14\006\uff14\007" +
    "\uff14\010\uff14\012\uff14\014\uff14\015\uff14\016\uff14\017\uff14" +
    "\023\uff14\044\uff14\051\uff14\054\uff14\055\uff14\056\uff14\057" +
    "\uff14\060\uff14\061\uff14\062\uff14\063\uff14\071\uff14\072\uff14" +
    "\074\uff14\075\044\001\002\000\016\003\u0152\033\u014e\041" +
    "\u0150\043\u0151\044\u014b\074\u014f\001\002\000\004\053\u01ee" +
    "\001\002\000\004\026\u01ef\001\002\000\004\075\022\001" +
    "\002\000\062\003\uff0d\006\uff0d\007\uff0d\010\uff0d\012\uff0d" +
    "\014\uff0d\015\uff0d\016\uff0d\017\uff0d\023\uff0d\044\uff0d\051" +
    "\uff0d\054\uff0d\055\uff0d\056\uff0d\057\uff0d\060\uff0d\061\uff0d" +
    "\062\uff0d\063\uff0d\071\uff0d\072\uff0d\074\uff0d\075\044\001" +
    "\002\000\004\044\u01f2\001\002\000\004\031\u01f3\001\002" +
    "\000\026\003\u01f4\033\uffec\043\uffec\044\uffec\050\uffec\052" +
    "\uffec\061\307\062\301\063\310\074\uffec\001\002\000\010" +
    "\026\uffe7\044\uffe7\052\uff0e\001\002\000\016\033\070\043" +
    "\072\044\065\050\076\052\075\074\071\001\002\000\004" +
    "\052\u01f7\001\002\000\020\003\u0152\033\u014e\041\u0150\043" +
    "\u0151\044\u014b\053\u01f9\074\u014f\001\002\000\004\053\u01fd" +
    "\001\002\000\004\026\u01fa\001\002\000\004\075\uff17\001" +
    "\002\000\004\075\022\001\002\000\062\003\uff16\006\uff16" +
    "\007\uff16\010\uff16\012\uff16\014\uff16\015\uff16\016\uff16\017" +
    "\uff16\023\uff16\044\uff16\051\uff16\054\uff16\055\uff16\056\uff16" +
    "\057\uff16\060\uff16\061\uff16\062\uff16\063\uff16\071\uff16\072" +
    "\uff16\074\uff16\075\044\001\002\000\004\026\u01fe\001\002" +
    "\000\004\075\uff19\001\002\000\004\075\022\001\002\000" +
    "\062\003\uff18\006\uff18\007\uff18\010\uff18\012\uff18\014\uff18" +
    "\015\uff18\016\uff18\017\uff18\023\uff18\044\uff18\051\uff18\054" +
    "\uff18\055\uff18\056\uff18\057\uff18\060\uff18\061\uff18\062\uff18" +
    "\063\uff18\071\uff18\072\uff18\074\uff18\075\044\001\002\000" +
    "\006\026\uffeb\044\uffeb\001\002\000\006\026\235\044\236" +
    "\001\002\000\062\003\uffea\006\uffea\007\uffea\010\uffea\012" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\023\uffea" +
    "\044\uffea\051\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\071\uffea\072\uffea\074\uffea" +
    "\001\002\000\006\026\235\044\236\001\002\000\062\003" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\023\uffe6\044\uffe6\051\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\063\uffe6\071\uffe6\072\uffe6\074\uffe6\001\002\000\016\003" +
    "\u0152\033\u014e\041\u0150\043\u0151\044\u014b\074\u014f\001\002" +
    "\000\004\053\u0208\001\002\000\004\026\u0209\001\002\000" +
    "\004\075\022\001\002\000\062\003\uff0c\006\uff0c\007\uff0c" +
    "\010\uff0c\012\uff0c\014\uff0c\015\uff0c\016\uff0c\017\uff0c\023" +
    "\uff0c\044\uff0c\051\uff0c\054\uff0c\055\uff0c\056\uff0c\057\uff0c" +
    "\060\uff0c\061\uff0c\062\uff0c\063\uff0c\071\uff0c\072\uff0c\074" +
    "\uff0c\075\044\001\002\000\004\022\uff54\001\002\000\004" +
    "\022\u020d\001\002\000\004\075\022\001\002\000\054\003" +
    "\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\023\uff8e\044\uff8e\056\uff8e\057\uff8e\060" +
    "\uff8e\061\uff8e\062\uff8e\063\uff8e\071\uff8e\072\uff8e\074\uff8e" +
    "\075\044\001\002\000\052\003\324\006\027\007\032\010" +
    "\026\012\331\014\320\015\300\016\303\017\323\023\uff8b" +
    "\044\322\056\356\057\313\060\305\061\307\062\301\063" +
    "\310\071\031\072\030\074\306\001\002\000\004\023\u0211" +
    "\001\002\000\004\015\u0212\001\002\000\004\052\u0213\001" +
    "\002\000\022\003\340\030\337\033\134\043\136\044\132" +
    "\050\142\052\141\074\135\001\002\000\010\053\u0215\067" +
    "\343\070\344\001\002\000\004\026\u0216\001\002\000\004" +
    "\075\022\001\002\000\062\003\uff53\006\uff53\007\uff53\010" +
    "\uff53\012\uff53\014\uff53\015\uff53\016\uff53\017\uff53\023\uff53" +
    "\044\uff53\051\uff53\054\uff53\055\uff53\056\uff53\057\uff53\060" +
    "\uff53\061\uff53\062\uff53\063\uff53\071\uff53\072\uff53\074\uff53" +
    "\075\044\001\002\000\004\052\u0219\001\002\000\022\003" +
    "\340\030\337\033\134\043\136\044\132\050\142\052\141" +
    "\074\135\001\002\000\010\053\uff56\067\343\070\344\001" +
    "\002\000\004\053\u021c\001\002\000\006\022\ufef7\075\007" +
    "\001\002\000\004\022\u021e\001\002\000\004\075\022\001" +
    "\002\000\054\003\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\023\uff8e\044\uff8e\056" +
    "\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\071\uff8e" +
    "\072\uff8e\074\uff8e\075\044\001\002\000\052\003\324\006" +
    "\027\007\032\010\026\012\331\014\320\015\300\016\303" +
    "\017\323\023\uff8b\044\322\056\356\057\313\060\305\061" +
    "\307\062\301\063\310\071\031\072\030\074\306\001\002" +
    "\000\004\023\u0222\001\002\000\004\075\022\001\002\000" +
    "\062\003\uff55\006\uff55\007\uff55\010\uff55\012\uff55\014\uff55" +
    "\015\uff55\016\uff55\017\uff55\023\uff55\044\uff55\051\uff55\054" +
    "\uff55\055\uff55\056\uff55\057\uff55\060\uff55\061\uff55\062\uff55" +
    "\063\uff55\071\uff55\072\uff55\074\uff55\075\044\001\002\000" +
    "\004\044\u0225\001\002\000\006\004\u0226\053\uffa4\001\002" +
    "\000\010\006\uffa2\007\uffa2\010\uffa2\001\002\000\006\022" +
    "\ufef7\075\007\001\002\000\004\022\uffa7\001\002\000\004" +
    "\022\u022a\001\002\000\004\075\022\001\002\000\052\003" +
    "\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\014\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\023\uff8e\044\uff8e\057\uff8e\060\uff8e\061" +
    "\uff8e\062\uff8e\063\uff8e\071\uff8e\072\uff8e\074\uff8e\075\044" +
    "\001\002\000\050\003\324\006\027\007\032\010\026\012" +
    "\331\014\320\015\300\016\303\017\323\023\uffa6\044\322" +
    "\057\313\060\305\061\307\062\301\063\310\071\031\072" +
    "\030\074\306\001\002\000\004\023\u022e\001\002\000\004" +
    "\075\022\001\002\000\030\003\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\020\uffa5\023\uffa5\044\uffa5\071\uffa5\072\uffa5\074\uffa5" +
    "\075\044\001\002\000\004\052\u0231\001\002\000\014\003" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\053\u0232\001\002\000\006" +
    "\022\uffaf\075\uffaf\001\002\000\012\003\267\006\uffa1\007" +
    "\uffa1\010\uffa1\001\002\000\004\053\u0235\001\002\000\006" +
    "\022\ufef7\075\007\001\002\000\004\022\uffb2\001\002\000" +
    "\004\022\u0238\001\002\000\004\075\022\001\002\000\054" +
    "\003\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\014\uff8e\015" +
    "\uff8e\016\uff8e\017\uff8e\023\uff8e\044\uff8e\056\uff8e\057\uff8e" +
    "\060\uff8e\061\uff8e\062\uff8e\063\uff8e\071\uff8e\072\uff8e\074" +
    "\uff8e\075\044\001\002\000\052\003\324\006\027\007\032" +
    "\010\026\012\331\014\320\015\300\016\303\017\323\023" +
    "\uff8b\044\322\056\356\057\313\060\305\061\307\062\301" +
    "\063\310\071\031\072\030\074\306\001\002\000\004\023" +
    "\uffb1\001\002\000\004\023\u023d\001\002\000\004\075\022" +
    "\001\002\000\030\003\uffb0\006\uffb0\007\uffb0\010\uffb0\020" +
    "\uffb0\023\uffb0\044\uffb0\071\uffb0\072\uffb0\074\uffb0\075\044" +
    "\001\002\000\006\022\ufef7\075\007\001\002\000\004\022" +
    "\u0241\001\002\000\004\075\022\001\002\000\054\003\uff8e" +
    "\006\uff8e\007\uff8e\010\uff8e\012\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\017\uff8e\023\uff8e\044\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\061\uff8e\062\uff8e\063\uff8e\071\uff8e\072\uff8e\074\uff8e\075" +
    "\044\001\002\000\052\003\324\006\027\007\032\010\026" +
    "\012\331\014\320\015\300\016\303\017\323\023\uff8b\044" +
    "\322\056\356\057\313\060\305\061\307\062\301\063\310" +
    "\071\031\072\030\074\306\001\002\000\004\023\uffae\001" +
    "\002\000\004\023\u0246\001\002\000\004\075\022\001\002" +
    "\000\030\003\uffad\006\uffad\007\uffad\010\uffad\020\uffad\023" +
    "\uffad\044\uffad\071\uffad\072\uffad\074\uffad\075\044\001\002" +
    "\000\004\023\ufff8\001\002\000\004\023\ufffa\001\002\000" +
    "\004\023\ufff7\001\002\000\142\004\u0162\005\u0175\006\u017f" +
    "\007\u0167\010\u0178\011\u0182\012\u0169\013\u0177\014\u0188\015" +
    "\u015f\016\u0184\017\u0164\020\u0171\021\u016a\022\u0161\023\u0160" +
    "\024\u0187\025\u0186\026\u017b\027\u015e\030\u0185\031\u0163\032" +
    "\u0170\033\u016d\034\u0174\035\u0181\036\u016f\037\u015c\040\u0179" +
    "\042\u0173\043\u016b\044\u017a\045\u0183\046\u0172\047\u016e\050" +
    "\u0180\051\u017e\052\u017d\053\u017c\054\u015b\055\u0166\056\u0189" +
    "\057\u0176\060\u015d\065\u0165\066\u016c\074\u0168\075\022\001" +
    "\002\000\064\003\ufefd\006\ufefd\007\ufefd\010\ufefd\012\ufefd" +
    "\014\ufefd\015\ufefd\016\ufefd\017\ufefd\020\ufefd\023\ufefd\044" +
    "\ufefd\051\ufefd\054\ufefd\055\ufefd\056\ufefd\057\ufefd\060\ufefd" +
    "\061\ufefd\062\ufefd\063\ufefd\071\ufefd\072\ufefd\074\ufefd\075" +
    "\044\001\002\000\144\004\u0255\005\u0269\006\u0273\007\u025a" +
    "\010\u026d\011\u0275\012\u025c\013\u026b\014\u027d\015\u0252\016" +
    "\u027b\017\u0257\020\u0265\021\u025d\022\u0254\023\u0253\024\u027c" +
    "\025\u0279\026\u026f\027\u0250\030\u027a\031\u0256\032\u0264\033" +
    "\u0261\034\u0268\035\u0276\036\u0263\037\u024f\040\u026c\042\u0267" +
    "\043\u025e\044\u026e\045\u0278\046\u0266\047\u0262\050\u0274\051" +
    "\u0272\052\u0271\053\u0270\054\u024e\055\u0259\056\u027e\057\u026a" +
    "\060\u0251\065\u0258\066\u0260\073\u025f\074\u025b\075\u0277\001" +
    "\002\000\144\004\ufebb\005\ufebb\006\ufebb\007\ufebb\010\ufebb" +
    "\011\ufebb\012\ufebb\013\ufebb\014\ufebb\015\ufebb\016\ufebb\017" +
    "\ufebb\020\ufebb\021\ufebb\022\ufebb\023\ufebb\024\ufebb\025\ufebb" +
    "\026\ufebb\027\ufebb\030\ufebb\031\ufebb\032\ufebb\033\ufebb\034" +
    "\ufebb\035\ufebb\036\ufebb\037\ufebb\040\ufebb\042\ufebb\043\ufebb" +
    "\044\ufebb\045\ufebb\046\ufebb\047\ufebb\050\ufebb\051\ufebb\052" +
    "\ufebb\053\ufebb\054\ufebb\055\ufebb\056\ufebb\057\ufebb\060\ufebb" +
    "\065\ufebb\066\ufebb\073\ufebb\074\ufebb\075\ufebb\001\002\000" +
    "\144\004\ufea0\005\ufea0\006\ufea0\007\ufea0\010\ufea0\011\ufea0" +
    "\012\ufea0\013\ufea0\014\ufea0\015\ufea0\016\ufea0\017\ufea0\020" +
    "\ufea0\021\ufea0\022\ufea0\023\ufea0\024\ufea0\025\ufea0\026\ufea0" +
    "\027\ufea0\030\ufea0\031\ufea0\032\ufea0\033\ufea0\034\ufea0\035" +
    "\ufea0\036\ufea0\037\ufea0\040\ufea0\042\ufea0\043\ufea0\044\ufea0" +
    "\045\ufea0\046\ufea0\047\ufea0\050\ufea0\051\ufea0\052\ufea0\053" +
    "\ufea0\054\ufea0\055\ufea0\056\ufea0\057\ufea0\060\ufea0\065\ufea0" +
    "\066\ufea0\073\ufea0\074\ufea0\075\ufea0\001\002\000\144\004" +
    "\ufeaa\005\ufeaa\006\ufeaa\007\ufeaa\010\ufeaa\011\ufeaa\012\ufeaa" +
    "\013\ufeaa\014\ufeaa\015\ufeaa\016\ufeaa\017\ufeaa\020\ufeaa\021" +
    "\ufeaa\022\ufeaa\023\ufeaa\024\ufeaa\025\ufeaa\026\ufeaa\027\ufeaa" +
    "\030\ufeaa\031\ufeaa\032\ufeaa\033\ufeaa\034\ufeaa\035\ufeaa\036" +
    "\ufeaa\037\ufeaa\040\ufeaa\042\ufeaa\043\ufeaa\044\ufeaa\045\ufeaa" +
    "\046\ufeaa\047\ufeaa\050\ufeaa\051\ufeaa\052\ufeaa\053\ufeaa\054" +
    "\ufeaa\055\ufeaa\056\ufeaa\057\ufeaa\060\ufeaa\065\ufeaa\066\ufeaa" +
    "\073\ufeaa\074\ufeaa\075\ufeaa\001\002\000\144\004\ufeb4\005" +
    "\ufeb4\006\ufeb4\007\ufeb4\010\ufeb4\011\ufeb4\012\ufeb4\013\ufeb4" +
    "\014\ufeb4\015\ufeb4\016\ufeb4\017\ufeb4\020\ufeb4\021\ufeb4\022" +
    "\ufeb4\023\ufeb4\024\ufeb4\025\ufeb4\026\ufeb4\027\ufeb4\030\ufeb4" +
    "\031\ufeb4\032\ufeb4\033\ufeb4\034\ufeb4\035\ufeb4\036\ufeb4\037" +
    "\ufeb4\040\ufeb4\042\ufeb4\043\ufeb4\044\ufeb4\045\ufeb4\046\ufeb4" +
    "\047\ufeb4\050\ufeb4\051\ufeb4\052\ufeb4\053\ufeb4\054\ufeb4\055" +
    "\ufeb4\056\ufeb4\057\ufeb4\060\ufeb4\065\ufeb4\066\ufeb4\073\ufeb4" +
    "\074\ufeb4\075\ufeb4\001\002\000\144\004\ufeba\005\ufeba\006" +
    "\ufeba\007\ufeba\010\ufeba\011\ufeba\012\ufeba\013\ufeba\014\ufeba" +
    "\015\ufeba\016\ufeba\017\ufeba\020\ufeba\021\ufeba\022\ufeba\023" +
    "\ufeba\024\ufeba\025\ufeba\026\ufeba\027\ufeba\030\ufeba\031\ufeba" +
    "\032\ufeba\033\ufeba\034\ufeba\035\ufeba\036\ufeba\037\ufeba\040" +
    "\ufeba\042\ufeba\043\ufeba\044\ufeba\045\ufeba\046\ufeba\047\ufeba" +
    "\050\ufeba\051\ufeba\052\ufeba\053\ufeba\054\ufeba\055\ufeba\056" +
    "\ufeba\057\ufeba\060\ufeba\065\ufeba\066\ufeba\073\ufeba\074\ufeba" +
    "\075\ufeba\001\002\000\144\004\ufeb0\005\ufeb0\006\ufeb0\007" +
    "\ufeb0\010\ufeb0\011\ufeb0\012\ufeb0\013\ufeb0\014\ufeb0\015\ufeb0" +
    "\016\ufeb0\017\ufeb0\020\ufeb0\021\ufeb0\022\ufeb0\023\ufeb0\024" +
    "\ufeb0\025\ufeb0\026\ufeb0\027\ufeb0\030\ufeb0\031\ufeb0\032\ufeb0" +
    "\033\ufeb0\034\ufeb0\035\ufeb0\036\ufeb0\037\ufeb0\040\ufeb0\042" +
    "\ufeb0\043\ufeb0\044\ufeb0\045\ufeb0\046\ufeb0\047\ufeb0\050\ufeb0" +
    "\051\ufeb0\052\ufeb0\053\ufeb0\054\ufeb0\055\ufeb0\056\ufeb0\057" +
    "\ufeb0\060\ufeb0\065\ufeb0\066\ufeb0\073\ufeb0\074\ufeb0\075\ufeb0" +
    "\001\002\000\144\004\ufeb1\005\ufeb1\006\ufeb1\007\ufeb1\010" +
    "\ufeb1\011\ufeb1\012\ufeb1\013\ufeb1\014\ufeb1\015\ufeb1\016\ufeb1" +
    "\017\ufeb1\020\ufeb1\021\ufeb1\022\ufeb1\023\ufeb1\024\ufeb1\025" +
    "\ufeb1\026\ufeb1\027\ufeb1\030\ufeb1\031\ufeb1\032\ufeb1\033\ufeb1" +
    "\034\ufeb1\035\ufeb1\036\ufeb1\037\ufeb1\040\ufeb1\042\ufeb1\043" +
    "\ufeb1\044\ufeb1\045\ufeb1\046\ufeb1\047\ufeb1\050\ufeb1\051\ufeb1" +
    "\052\ufeb1\053\ufeb1\054\ufeb1\055\ufeb1\056\ufeb1\057\ufeb1\060" +
    "\ufeb1\065\ufeb1\066\ufeb1\073\ufeb1\074\ufeb1\075\ufeb1\001\002" +
    "\000\144\004\ufec6\005\ufec6\006\ufec6\007\ufec6\010\ufec6\011" +
    "\ufec6\012\ufec6\013\ufec6\014\ufec6\015\ufec6\016\ufec6\017\ufec6" +
    "\020\ufec6\021\ufec6\022\ufec6\023\ufec6\024\ufec6\025\ufec6\026" +
    "\ufec6\027\ufec6\030\ufec6\031\ufec6\032\ufec6\033\ufec6\034\ufec6" +
    "\035\ufec6\036\ufec6\037\ufec6\040\ufec6\042\ufec6\043\ufec6\044" +
    "\ufec6\045\ufec6\046\ufec6\047\ufec6\050\ufec6\051\ufec6\052\ufec6" +
    "\053\ufec6\054\ufec6\055\ufec6\056\ufec6\057\ufec6\060\ufec6\065" +
    "\ufec6\066\ufec6\073\ufec6\074\ufec6\075\ufec6\001\002\000\144" +
    "\004\ufea8\005\ufea8\006\ufea8\007\ufea8\010\ufea8\011\ufea8\012" +
    "\ufea8\013\ufea8\014\ufea8\015\ufea8\016\ufea8\017\ufea8\020\ufea8" +
    "\021\ufea8\022\ufea8\023\ufea8\024\ufea8\025\ufea8\026\ufea8\027" +
    "\ufea8\030\ufea8\031\ufea8\032\ufea8\033\ufea8\034\ufea8\035\ufea8" +
    "\036\ufea8\037\ufea8\040\ufea8\042\ufea8\043\ufea8\044\ufea8\045" +
    "\ufea8\046\ufea8\047\ufea8\050\ufea8\051\ufea8\052\ufea8\053\ufea8" +
    "\054\ufea8\055\ufea8\056\ufea8\057\ufea8\060\ufea8\065\ufea8\066" +
    "\ufea8\073\ufea8\074\ufea8\075\ufea8\001\002\000\144\004\ufebc" +
    "\005\ufebc\006\ufebc\007\ufebc\010\ufebc\011\ufebc\012\ufebc\013" +
    "\ufebc\014\ufebc\015\ufebc\016\ufebc\017\ufebc\020\ufebc\021\ufebc" +
    "\022\ufebc\023\ufebc\024\ufebc\025\ufebc\026\ufebc\027\ufebc\030" +
    "\ufebc\031\ufebc\032\ufebc\033\ufebc\034\ufebc\035\ufebc\036\ufebc" +
    "\037\ufebc\040\ufebc\042\ufebc\043\ufebc\044\ufebc\045\ufebc\046" +
    "\ufebc\047\ufebc\050\ufebc\051\ufebc\052\ufebc\053\ufebc\054\ufebc" +
    "\055\ufebc\056\ufebc\057\ufebc\060\ufebc\065\ufebc\066\ufebc\073" +
    "\ufebc\074\ufebc\075\ufebc\001\002\000\144\004\ufe99\005\ufe99" +
    "\006\ufe99\007\ufe99\010\ufe99\011\ufe99\012\ufe99\013\ufe99\014" +
    "\ufe99\015\ufe99\016\ufe99\017\ufe99\020\ufe99\021\ufe99\022\ufe99" +
    "\023\ufe99\024\ufe99\025\ufe99\026\ufe99\027\ufe99\030\ufe99\031" +
    "\ufe99\032\ufe99\033\ufe99\034\ufe99\035\ufe99\036\ufe99\037\ufe99" +
    "\040\ufe99\042\ufe99\043\ufe99\044\ufe99\045\ufe99\046\ufe99\047" +
    "\ufe99\050\ufe99\051\ufe99\052\ufe99\053\ufe99\054\ufe99\055\ufe99" +
    "\056\ufe99\057\ufe99\060\ufe99\065\ufe99\066\ufe99\073\ufe99\074" +
    "\ufe99\075\ufe99\001\002\000\144\004\ufeb8\005\ufeb8\006\ufeb8" +
    "\007\ufeb8\010\ufeb8\011\ufeb8\012\ufeb8\013\ufeb8\014\ufeb8\015" +
    "\ufeb8\016\ufeb8\017\ufeb8\020\ufeb8\021\ufeb8\022\ufeb8\023\ufeb8" +
    "\024\ufeb8\025\ufeb8\026\ufeb8\027\ufeb8\030\ufeb8\031\ufeb8\032" +
    "\ufeb8\033\ufeb8\034\ufeb8\035\ufeb8\036\ufeb8\037\ufeb8\040\ufeb8" +
    "\042\ufeb8\043\ufeb8\044\ufeb8\045\ufeb8\046\ufeb8\047\ufeb8\050" +
    "\ufeb8\051\ufeb8\052\ufeb8\053\ufeb8\054\ufeb8\055\ufeb8\056\ufeb8" +
    "\057\ufeb8\060\ufeb8\065\ufeb8\066\ufeb8\073\ufeb8\074\ufeb8\075" +
    "\ufeb8\001\002\000\144\004\ufec3\005\ufec3\006\ufec3\007\ufec3" +
    "\010\ufec3\011\ufec3\012\ufec3\013\ufec3\014\ufec3\015\ufec3\016" +
    "\ufec3\017\ufec3\020\ufec3\021\ufec3\022\ufec3\023\ufec3\024\ufec3" +
    "\025\ufec3\026\ufec3\027\ufec3\030\ufec3\031\ufec3\032\ufec3\033" +
    "\ufec3\034\ufec3\035\ufec3\036\ufec3\037\ufec3\040\ufec3\042\ufec3" +
    "\043\ufec3\044\ufec3\045\ufec3\046\ufec3\047\ufec3\050\ufec3\051" +
    "\ufec3\052\ufec3\053\ufec3\054\ufec3\055\ufec3\056\ufec3\057\ufec3" +
    "\060\ufec3\065\ufec3\066\ufec3\073\ufec3\074\ufec3\075\ufec3\001" +
    "\002\000\144\004\ufeb5\005\ufeb5\006\ufeb5\007\ufeb5\010\ufeb5" +
    "\011\ufeb5\012\ufeb5\013\ufeb5\014\ufeb5\015\ufeb5\016\ufeb5\017" +
    "\ufeb5\020\ufeb5\021\ufeb5\022\ufeb5\023\ufeb5\024\ufeb5\025\ufeb5" +
    "\026\ufeb5\027\ufeb5\030\ufeb5\031\ufeb5\032\ufeb5\033\ufeb5\034" +
    "\ufeb5\035\ufeb5\036\ufeb5\037\ufeb5\040\ufeb5\042\ufeb5\043\ufeb5" +
    "\044\ufeb5\045\ufeb5\046\ufeb5\047\ufeb5\050\ufeb5\051\ufeb5\052" +
    "\ufeb5\053\ufeb5\054\ufeb5\055\ufeb5\056\ufeb5\057\ufeb5\060\ufeb5" +
    "\065\ufeb5\066\ufeb5\073\ufeb5\074\ufeb5\075\ufeb5\001\002\000" +
    "\144\004\ufec0\005\ufec0\006\ufec0\007\ufec0\010\ufec0\011\ufec0" +
    "\012\ufec0\013\ufec0\014\ufec0\015\ufec0\016\ufec0\017\ufec0\020" +
    "\ufec0\021\ufec0\022\ufec0\023\ufec0\024\ufec0\025\ufec0\026\ufec0" +
    "\027\ufec0\030\ufec0\031\ufec0\032\ufec0\033\ufec0\034\ufec0\035" +
    "\ufec0\036\ufec0\037\ufec0\040\ufec0\042\ufec0\043\ufec0\044\ufec0" +
    "\045\ufec0\046\ufec0\047\ufec0\050\ufec0\051\ufec0\052\ufec0\053" +
    "\ufec0\054\ufec0\055\ufec0\056\ufec0\057\ufec0\060\ufec0\065\ufec0" +
    "\066\ufec0\073\ufec0\074\ufec0\075\ufec0\001\002\000\144\004" +
    "\ufeb2\005\ufeb2\006\ufeb2\007\ufeb2\010\ufeb2\011\ufeb2\012\ufeb2" +
    "\013\ufeb2\014\ufeb2\015\ufeb2\016\ufeb2\017\ufeb2\020\ufeb2\021" +
    "\ufeb2\022\ufeb2\023\ufeb2\024\ufeb2\025\ufeb2\026\ufeb2\027\ufeb2" +
    "\030\ufeb2\031\ufeb2\032\ufeb2\033\ufeb2\034\ufeb2\035\ufeb2\036" +
    "\ufeb2\037\ufeb2\040\ufeb2\042\ufeb2\043\ufeb2\044\ufeb2\045\ufeb2" +
    "\046\ufeb2\047\ufeb2\050\ufeb2\051\ufeb2\052\ufeb2\053\ufeb2\054" +
    "\ufeb2\055\ufeb2\056\ufeb2\057\ufeb2\060\ufeb2\065\ufeb2\066\ufeb2" +
    "\073\ufeb2\074\ufeb2\075\ufeb2\001\002\000\144\004\ufe9c\005" +
    "\ufe9c\006\ufe9c\007\ufe9c\010\ufe9c\011\ufe9c\012\ufe9c\013\ufe9c" +
    "\014\ufe9c\015\ufe9c\016\ufe9c\017\ufe9c\020\ufe9c\021\ufe9c\022" +
    "\ufe9c\023\ufe9c\024\ufe9c\025\ufe9c\026\ufe9c\027\ufe9c\030\ufe9c" +
    "\031\ufe9c\032\ufe9c\033\ufe9c\034\ufe9c\035\ufe9c\036\ufe9c\037" +
    "\ufe9c\040\ufe9c\042\ufe9c\043\ufe9c\044\ufe9c\045\ufe9c\046\ufe9c" +
    "\047\ufe9c\050\ufe9c\051\ufe9c\052\ufe9c\053\ufe9c\054\ufe9c\055" +
    "\ufe9c\056\ufe9c\057\ufe9c\060\ufe9c\065\ufe9c\066\ufe9c\073\ufe9c" +
    "\074\ufe9c\075\ufe9c\001\002\000\004\075\022\001\002\000" +
    "\144\004\ufe98\005\ufe98\006\ufe98\007\ufe98\010\ufe98\011\ufe98" +
    "\012\ufe98\013\ufe98\014\ufe98\015\ufe98\016\ufe98\017\ufe98\020" +
    "\ufe98\021\ufe98\022\ufe98\023\ufe98\024\ufe98\025\ufe98\026\ufe98" +
    "\027\ufe98\030\ufe98\031\ufe98\032\ufe98\033\ufe98\034\ufe98\035" +
    "\ufe98\036\ufe98\037\ufe98\040\ufe98\042\ufe98\043\ufe98\044\ufe98" +
    "\045\ufe98\046\ufe98\047\ufe98\050\ufe98\051\ufe98\052\ufe98\053" +
    "\ufe98\054\ufe98\055\ufe98\056\ufe98\057\ufe98\060\ufe98\065\ufe98" +
    "\066\ufe98\073\ufe98\074\ufe98\075\ufe98\001\002\000\144\004" +
    "\ufea6\005\ufea6\006\ufea6\007\ufea6\010\ufea6\011\ufea6\012\ufea6" +
    "\013\ufea6\014\ufea6\015\ufea6\016\ufea6\017\ufea6\020\ufea6\021" +
    "\ufea6\022\ufea6\023\ufea6\024\ufea6\025\ufea6\026\ufea6\027\ufea6" +
    "\030\ufea6\031\ufea6\032\ufea6\033\ufea6\034\ufea6\035\ufea6\036" +
    "\ufea6\037\ufea6\040\ufea6\042\ufea6\043\ufea6\044\ufea6\045\ufea6" +
    "\046\ufea6\047\ufea6\050\ufea6\051\ufea6\052\ufea6\053\ufea6\054" +
    "\ufea6\055\ufea6\056\ufea6\057\ufea6\060\ufea6\065\ufea6\066\ufea6" +
    "\073\ufea6\074\ufea6\075\ufea6\001\002\000\144\004\ufea2\005" +
    "\ufea2\006\ufea2\007\ufea2\010\ufea2\011\ufea2\012\ufea2\013\ufea2" +
    "\014\ufea2\015\ufea2\016\ufea2\017\ufea2\020\ufea2\021\ufea2\022" +
    "\ufea2\023\ufea2\024\ufea2\025\ufea2\026\ufea2\027\ufea2\030\ufea2" +
    "\031\ufea2\032\ufea2\033\ufea2\034\ufea2\035\ufea2\036\ufea2\037" +
    "\ufea2\040\ufea2\042\ufea2\043\ufea2\044\ufea2\045\ufea2\046\ufea2" +
    "\047\ufea2\050\ufea2\051\ufea2\052\ufea2\053\ufea2\054\ufea2\055" +
    "\ufea2\056\ufea2\057\ufea2\060\ufea2\065\ufea2\066\ufea2\073\ufea2" +
    "\074\ufea2\075\ufea2\001\002\000\144\004\ufea3\005\ufea3\006" +
    "\ufea3\007\ufea3\010\ufea3\011\ufea3\012\ufea3\013\ufea3\014\ufea3" +
    "\015\ufea3\016\ufea3\017\ufea3\020\ufea3\021\ufea3\022\ufea3\023" +
    "\ufea3\024\ufea3\025\ufea3\026\ufea3\027\ufea3\030\ufea3\031\ufea3" +
    "\032\ufea3\033\ufea3\034\ufea3\035\ufea3\036\ufea3\037\ufea3\040" +
    "\ufea3\042\ufea3\043\ufea3\044\ufea3\045\ufea3\046\ufea3\047\ufea3" +
    "\050\ufea3\051\ufea3\052\ufea3\053\ufea3\054\ufea3\055\ufea3\056" +
    "\ufea3\057\ufea3\060\ufea3\065\ufea3\066\ufea3\073\ufea3\074\ufea3" +
    "\075\ufea3\001\002\000\144\004\ufea7\005\ufea7\006\ufea7\007" +
    "\ufea7\010\ufea7\011\ufea7\012\ufea7\013\ufea7\014\ufea7\015\ufea7" +
    "\016\ufea7\017\ufea7\020\ufea7\021\ufea7\022\ufea7\023\ufea7\024" +
    "\ufea7\025\ufea7\026\ufea7\027\ufea7\030\ufea7\031\ufea7\032\ufea7" +
    "\033\ufea7\034\ufea7\035\ufea7\036\ufea7\037\ufea7\040\ufea7\042" +
    "\ufea7\043\ufea7\044\ufea7\045\ufea7\046\ufea7\047\ufea7\050\ufea7" +
    "\051\ufea7\052\ufea7\053\ufea7\054\ufea7\055\ufea7\056\ufea7\057" +
    "\ufea7\060\ufea7\065\ufea7\066\ufea7\073\ufea7\074\ufea7\075\ufea7" +
    "\001\002\000\144\004\ufeb3\005\ufeb3\006\ufeb3\007\ufeb3\010" +
    "\ufeb3\011\ufeb3\012\ufeb3\013\ufeb3\014\ufeb3\015\ufeb3\016\ufeb3" +
    "\017\ufeb3\020\ufeb3\021\ufeb3\022\ufeb3\023\ufeb3\024\ufeb3\025" +
    "\ufeb3\026\ufeb3\027\ufeb3\030\ufeb3\031\ufeb3\032\ufeb3\033\ufeb3" +
    "\034\ufeb3\035\ufeb3\036\ufeb3\037\ufeb3\040\ufeb3\042\ufeb3\043" +
    "\ufeb3\044\ufeb3\045\ufeb3\046\ufeb3\047\ufeb3\050\ufeb3\051\ufeb3" +
    "\052\ufeb3\053\ufeb3\054\ufeb3\055\ufeb3\056\ufeb3\057\ufeb3\060" +
    "\ufeb3\065\ufeb3\066\ufeb3\073\ufeb3\074\ufeb3\075\ufeb3\001\002" +
    "\000\144\004\ufea1\005\ufea1\006\ufea1\007\ufea1\010\ufea1\011" +
    "\ufea1\012\ufea1\013\ufea1\014\ufea1\015\ufea1\016\ufea1\017\ufea1" +
    "\020\ufea1\021\ufea1\022\ufea1\023\ufea1\024\ufea1\025\ufea1\026" +
    "\ufea1\027\ufea1\030\ufea1\031\ufea1\032\ufea1\033\ufea1\034\ufea1" +
    "\035\ufea1\036\ufea1\037\ufea1\040\ufea1\042\ufea1\043\ufea1\044" +
    "\ufea1\045\ufea1\046\ufea1\047\ufea1\050\ufea1\051\ufea1\052\ufea1" +
    "\053\ufea1\054\ufea1\055\ufea1\056\ufea1\057\ufea1\060\ufea1\065" +
    "\ufea1\066\ufea1\073\ufea1\074\ufea1\075\ufea1\001\002\000\144" +
    "\004\ufe9d\005\ufe9d\006\ufe9d\007\ufe9d\010\ufe9d\011\ufe9d\012" +
    "\ufe9d\013\ufe9d\014\ufe9d\015\ufe9d\016\ufe9d\017\ufe9d\020\ufe9d" +
    "\021\ufe9d\022\ufe9d\023\ufe9d\024\ufe9d\025\ufe9d\026\ufe9d\027" +
    "\ufe9d\030\ufe9d\031\ufe9d\032\ufe9d\033\ufe9d\034\ufe9d\035\ufe9d" +
    "\036\ufe9d\037\ufe9d\040\ufe9d\042\ufe9d\043\ufe9d\044\ufe9d\045" +
    "\ufe9d\046\ufe9d\047\ufe9d\050\ufe9d\051\ufe9d\052\ufe9d\053\ufe9d" +
    "\054\ufe9d\055\ufe9d\056\ufe9d\057\ufe9d\060\ufe9d\065\ufe9d\066" +
    "\ufe9d\073\ufe9d\074\ufe9d\075\ufe9d\001\002\000\144\004\ufea5" +
    "\005\ufea5\006\ufea5\007\ufea5\010\ufea5\011\ufea5\012\ufea5\013" +
    "\ufea5\014\ufea5\015\ufea5\016\ufea5\017\ufea5\020\ufea5\021\ufea5" +
    "\022\ufea5\023\ufea5\024\ufea5\025\ufea5\026\ufea5\027\ufea5\030" +
    "\ufea5\031\ufea5\032\ufea5\033\ufea5\034\ufea5\035\ufea5\036\ufea5" +
    "\037\ufea5\040\ufea5\042\ufea5\043\ufea5\044\ufea5\045\ufea5\046" +
    "\ufea5\047\ufea5\050\ufea5\051\ufea5\052\ufea5\053\ufea5\054\ufea5" +
    "\055\ufea5\056\ufea5\057\ufea5\060\ufea5\065\ufea5\066\ufea5\073" +
    "\ufea5\074\ufea5\075\ufea5\001\002\000\144\004\ufec5\005\ufec5" +
    "\006\ufec5\007\ufec5\010\ufec5\011\ufec5\012\ufec5\013\ufec5\014" +
    "\ufec5\015\ufec5\016\ufec5\017\ufec5\020\ufec5\021\ufec5\022\ufec5" +
    "\023\ufec5\024\ufec5\025\ufec5\026\ufec5\027\ufec5\030\ufec5\031" +
    "\ufec5\032\ufec5\033\ufec5\034\ufec5\035\ufec5\036\ufec5\037\ufec5" +
    "\040\ufec5\042\ufec5\043\ufec5\044\ufec5\045\ufec5\046\ufec5\047" +
    "\ufec5\050\ufec5\051\ufec5\052\ufec5\053\ufec5\054\ufec5\055\ufec5" +
    "\056\ufec5\057\ufec5\060\ufec5\065\ufec5\066\ufec5\073\ufec5\074" +
    "\ufec5\075\ufec5\001\002\000\144\004\ufeb6\005\ufeb6\006\ufeb6" +
    "\007\ufeb6\010\ufeb6\011\ufeb6\012\ufeb6\013\ufeb6\014\ufeb6\015" +
    "\ufeb6\016\ufeb6\017\ufeb6\020\ufeb6\021\ufeb6\022\ufeb6\023\ufeb6" +
    "\024\ufeb6\025\ufeb6\026\ufeb6\027\ufeb6\030\ufeb6\031\ufeb6\032" +
    "\ufeb6\033\ufeb6\034\ufeb6\035\ufeb6\036\ufeb6\037\ufeb6\040\ufeb6" +
    "\042\ufeb6\043\ufeb6\044\ufeb6\045\ufeb6\046\ufeb6\047\ufeb6\050" +
    "\ufeb6\051\ufeb6\052\ufeb6\053\ufeb6\054\ufeb6\055\ufeb6\056\ufeb6" +
    "\057\ufeb6\060\ufeb6\065\ufeb6\066\ufeb6\073\ufeb6\074\ufeb6\075" +
    "\ufeb6\001\002\000\144\004\ufebf\005\ufebf\006\ufebf\007\ufebf" +
    "\010\ufebf\011\ufebf\012\ufebf\013\ufebf\014\ufebf\015\ufebf\016" +
    "\ufebf\017\ufebf\020\ufebf\021\ufebf\022\ufebf\023\ufebf\024\ufebf" +
    "\025\ufebf\026\ufebf\027\ufebf\030\ufebf\031\ufebf\032\ufebf\033" +
    "\ufebf\034\ufebf\035\ufebf\036\ufebf\037\ufebf\040\ufebf\042\ufebf" +
    "\043\ufebf\044\ufebf\045\ufebf\046\ufebf\047\ufebf\050\ufebf\051" +
    "\ufebf\052\ufebf\053\ufebf\054\ufebf\055\ufebf\056\ufebf\057\ufebf" +
    "\060\ufebf\065\ufebf\066\ufebf\073\ufebf\074\ufebf\075\ufebf\001" +
    "\002\000\144\004\ufe9f\005\ufe9f\006\ufe9f\007\ufe9f\010\ufe9f" +
    "\011\ufe9f\012\ufe9f\013\ufe9f\014\ufe9f\015\ufe9f\016\ufe9f\017" +
    "\ufe9f\020\ufe9f\021\ufe9f\022\ufe9f\023\ufe9f\024\ufe9f\025\ufe9f" +
    "\026\ufe9f\027\ufe9f\030\ufe9f\031\ufe9f\032\ufe9f\033\ufe9f\034" +
    "\ufe9f\035\ufe9f\036\ufe9f\037\ufe9f\040\ufe9f\042\ufe9f\043\ufe9f" +
    "\044\ufe9f\045\ufe9f\046\ufe9f\047\ufe9f\050\ufe9f\051\ufe9f\052" +
    "\ufe9f\053\ufe9f\054\ufe9f\055\ufe9f\056\ufe9f\057\ufe9f\060\ufe9f" +
    "\065\ufe9f\066\ufe9f\073\ufe9f\074\ufe9f\075\ufe9f\001\002\000" +
    "\144\004\ufec2\005\ufec2\006\ufec2\007\ufec2\010\ufec2\011\ufec2" +
    "\012\ufec2\013\ufec2\014\ufec2\015\ufec2\016\ufec2\017\ufec2\020" +
    "\ufec2\021\ufec2\022\ufec2\023\ufec2\024\ufec2\025\ufec2\026\ufec2" +
    "\027\ufec2\030\ufec2\031\ufec2\032\ufec2\033\ufec2\034\ufec2\035" +
    "\ufec2\036\ufec2\037\ufec2\040\ufec2\042\ufec2\043\ufec2\044\ufec2" +
    "\045\ufec2\046\ufec2\047\ufec2\050\ufec2\051\ufec2\052\ufec2\053" +
    "\ufec2\054\ufec2\055\ufec2\056\ufec2\057\ufec2\060\ufec2\065\ufec2" +
    "\066\ufec2\073\ufec2\074\ufec2\075\ufec2\001\002\000\144\004" +
    "\ufe9b\005\ufe9b\006\ufe9b\007\ufe9b\010\ufe9b\011\ufe9b\012\ufe9b" +
    "\013\ufe9b\014\ufe9b\015\ufe9b\016\ufe9b\017\ufe9b\020\ufe9b\021" +
    "\ufe9b\022\ufe9b\023\ufe9b\024\ufe9b\025\ufe9b\026\ufe9b\027\ufe9b" +
    "\030\ufe9b\031\ufe9b\032\ufe9b\033\ufe9b\034\ufe9b\035\ufe9b\036" +
    "\ufe9b\037\ufe9b\040\ufe9b\042\ufe9b\043\ufe9b\044\ufe9b\045\ufe9b" +
    "\046\ufe9b\047\ufe9b\050\ufe9b\051\ufe9b\052\ufe9b\053\ufe9b\054" +
    "\ufe9b\055\ufe9b\056\ufe9b\057\ufe9b\060\ufe9b\065\ufe9b\066\ufe9b" +
    "\073\ufe9b\074\ufe9b\075\ufe9b\001\002\000\144\004\ufeab\005" +
    "\ufeab\006\ufeab\007\ufeab\010\ufeab\011\ufeab\012\ufeab\013\ufeab" +
    "\014\ufeab\015\ufeab\016\ufeab\017\ufeab\020\ufeab\021\ufeab\022" +
    "\ufeab\023\ufeab\024\ufeab\025\ufeab\026\ufeab\027\ufeab\030\ufeab" +
    "\031\ufeab\032\ufeab\033\ufeab\034\ufeab\035\ufeab\036\ufeab\037" +
    "\ufeab\040\ufeab\042\ufeab\043\ufeab\044\ufeab\045\ufeab\046\ufeab" +
    "\047\ufeab\050\ufeab\051\ufeab\052\ufeab\053\ufeab\054\ufeab\055" +
    "\ufeab\056\ufeab\057\ufeab\060\ufeab\065\ufeab\066\ufeab\073\ufeab" +
    "\074\ufeab\075\ufeab\001\002\000\144\004\ufeac\005\ufeac\006" +
    "\ufeac\007\ufeac\010\ufeac\011\ufeac\012\ufeac\013\ufeac\014\ufeac" +
    "\015\ufeac\016\ufeac\017\ufeac\020\ufeac\021\ufeac\022\ufeac\023" +
    "\ufeac\024\ufeac\025\ufeac\026\ufeac\027\ufeac\030\ufeac\031\ufeac" +
    "\032\ufeac\033\ufeac\034\ufeac\035\ufeac\036\ufeac\037\ufeac\040" +
    "\ufeac\042\ufeac\043\ufeac\044\ufeac\045\ufeac\046\ufeac\047\ufeac" +
    "\050\ufeac\051\ufeac\052\ufeac\053\ufeac\054\ufeac\055\ufeac\056" +
    "\ufeac\057\ufeac\060\ufeac\065\ufeac\066\ufeac\073\ufeac\074\ufeac" +
    "\075\ufeac\001\002\000\144\004\ufead\005\ufead\006\ufead\007" +
    "\ufead\010\ufead\011\ufead\012\ufead\013\ufead\014\ufead\015\ufead" +
    "\016\ufead\017\ufead\020\ufead\021\ufead\022\ufead\023\ufead\024" +
    "\ufead\025\ufead\026\ufead\027\ufead\030\ufead\031\ufead\032\ufead" +
    "\033\ufead\034\ufead\035\ufead\036\ufead\037\ufead\040\ufead\042" +
    "\ufead\043\ufead\044\ufead\045\ufead\046\ufead\047\ufead\050\ufead" +
    "\051\ufead\052\ufead\053\ufead\054\ufead\055\ufead\056\ufead\057" +
    "\ufead\060\ufead\065\ufead\066\ufead\073\ufead\074\ufead\075\ufead" +
    "\001\002\000\144\004\ufeb9\005\ufeb9\006\ufeb9\007\ufeb9\010" +
    "\ufeb9\011\ufeb9\012\ufeb9\013\ufeb9\014\ufeb9\015\ufeb9\016\ufeb9" +
    "\017\ufeb9\020\ufeb9\021\ufeb9\022\ufeb9\023\ufeb9\024\ufeb9\025" +
    "\ufeb9\026\ufeb9\027\ufeb9\030\ufeb9\031\ufeb9\032\ufeb9\033\ufeb9" +
    "\034\ufeb9\035\ufeb9\036\ufeb9\037\ufeb9\040\ufeb9\042\ufeb9\043" +
    "\ufeb9\044\ufeb9\045\ufeb9\046\ufeb9\047\ufeb9\050\ufeb9\051\ufeb9" +
    "\052\ufeb9\053\ufeb9\054\ufeb9\055\ufeb9\056\ufeb9\057\ufeb9\060" +
    "\ufeb9\065\ufeb9\066\ufeb9\073\ufeb9\074\ufeb9\075\ufeb9\001\002" +
    "\000\144\004\ufec4\005\ufec4\006\ufec4\007\ufec4\010\ufec4\011" +
    "\ufec4\012\ufec4\013\ufec4\014\ufec4\015\ufec4\016\ufec4\017\ufec4" +
    "\020\ufec4\021\ufec4\022\ufec4\023\ufec4\024\ufec4\025\ufec4\026" +
    "\ufec4\027\ufec4\030\ufec4\031\ufec4\032\ufec4\033\ufec4\034\ufec4" +
    "\035\ufec4\036\ufec4\037\ufec4\040\ufec4\042\ufec4\043\ufec4\044" +
    "\ufec4\045\ufec4\046\ufec4\047\ufec4\050\ufec4\051\ufec4\052\ufec4" +
    "\053\ufec4\054\ufec4\055\ufec4\056\ufec4\057\ufec4\060\ufec4\065" +
    "\ufec4\066\ufec4\073\ufec4\074\ufec4\075\ufec4\001\002\000\144" +
    "\004\ufe9e\005\ufe9e\006\ufe9e\007\ufe9e\010\ufe9e\011\ufe9e\012" +
    "\ufe9e\013\ufe9e\014\ufe9e\015\ufe9e\016\ufe9e\017\ufe9e\020\ufe9e" +
    "\021\ufe9e\022\ufe9e\023\ufe9e\024\ufe9e\025\ufe9e\026\ufe9e\027" +
    "\ufe9e\030\ufe9e\031\ufe9e\032\ufe9e\033\ufe9e\034\ufe9e\035\ufe9e" +
    "\036\ufe9e\037\ufe9e\040\ufe9e\042\ufe9e\043\ufe9e\044\ufe9e\045" +
    "\ufe9e\046\ufe9e\047\ufe9e\050\ufe9e\051\ufe9e\052\ufe9e\053\ufe9e" +
    "\054\ufe9e\055\ufe9e\056\ufe9e\057\ufe9e\060\ufe9e\065\ufe9e\066" +
    "\ufe9e\073\ufe9e\074\ufe9e\075\ufe9e\001\002\000\144\004\ufec1" +
    "\005\ufec1\006\ufec1\007\ufec1\010\ufec1\011\ufec1\012\ufec1\013" +
    "\ufec1\014\ufec1\015\ufec1\016\ufec1\017\ufec1\020\ufec1\021\ufec1" +
    "\022\ufec1\023\ufec1\024\ufec1\025\ufec1\026\ufec1\027\ufec1\030" +
    "\ufec1\031\ufec1\032\ufec1\033\ufec1\034\ufec1\035\ufec1\036\ufec1" +
    "\037\ufec1\040\ufec1\042\ufec1\043\ufec1\044\ufec1\045\ufec1\046" +
    "\ufec1\047\ufec1\050\ufec1\051\ufec1\052\ufec1\053\ufec1\054\ufec1" +
    "\055\ufec1\056\ufec1\057\ufec1\060\ufec1\065\ufec1\066\ufec1\073" +
    "\ufec1\074\ufec1\075\ufec1\001\002\000\144\004\ufea4\005\ufea4" +
    "\006\ufea4\007\ufea4\010\ufea4\011\ufea4\012\ufea4\013\ufea4\014" +
    "\ufea4\015\ufea4\016\ufea4\017\ufea4\020\ufea4\021\ufea4\022\ufea4" +
    "\023\ufea4\024\ufea4\025\ufea4\026\ufea4\027\ufea4\030\ufea4\031" +
    "\ufea4\032\ufea4\033\ufea4\034\ufea4\035\ufea4\036\ufea4\037\ufea4" +
    "\040\ufea4\042\ufea4\043\ufea4\044\ufea4\045\ufea4\046\ufea4\047" +
    "\ufea4\050\ufea4\051\ufea4\052\ufea4\053\ufea4\054\ufea4\055\ufea4" +
    "\056\ufea4\057\ufea4\060\ufea4\065\ufea4\066\ufea4\073\ufea4\074" +
    "\ufea4\075\ufea4\001\002\000\144\004\ufe9a\005\ufe9a\006\ufe9a" +
    "\007\ufe9a\010\ufe9a\011\ufe9a\012\ufe9a\013\ufe9a\014\ufe9a\015" +
    "\ufe9a\016\ufe9a\017\ufe9a\020\ufe9a\021\ufe9a\022\ufe9a\023\ufe9a" +
    "\024\ufe9a\025\ufe9a\026\ufe9a\027\ufe9a\030\ufe9a\031\ufe9a\032" +
    "\ufe9a\033\ufe9a\034\ufe9a\035\ufe9a\036\ufe9a\037\ufe9a\040\ufe9a" +
    "\042\ufe9a\043\ufe9a\044\ufe9a\045\ufe9a\046\ufe9a\047\ufe9a\050" +
    "\ufe9a\051\ufe9a\052\ufe9a\053\ufe9a\054\ufe9a\055\ufe9a\056\ufe9a" +
    "\057\ufe9a\060\ufe9a\065\ufe9a\066\ufe9a\073\ufe9a\074\ufe9a\075" +
    "\ufe9a\001\002\000\144\004\ufe97\005\ufe97\006\ufe97\007\ufe97" +
    "\010\ufe97\011\ufe97\012\ufe97\013\ufe97\014\ufe97\015\ufe97\016" +
    "\ufe97\017\ufe97\020\ufe97\021\ufe97\022\ufe97\023\ufe97\024\ufe97" +
    "\025\ufe97\026\ufe97\027\ufe97\030\ufe97\031\ufe97\032\ufe97\033" +
    "\ufe97\034\ufe97\035\ufe97\036\ufe97\037\ufe97\040\ufe97\042\ufe97" +
    "\043\ufe97\044\ufe97\045\ufe97\046\ufe97\047\ufe97\050\ufe97\051" +
    "\ufe97\052\ufe97\053\ufe97\054\ufe97\055\ufe97\056\ufe97\057\ufe97" +
    "\060\ufe97\065\ufe97\066\ufe97\073\ufe97\074\ufe97\075\ufe97\001" +
    "\002\000\144\004\ufeae\005\ufeae\006\ufeae\007\ufeae\010\ufeae" +
    "\011\ufeae\012\ufeae\013\ufeae\014\ufeae\015\ufeae\016\ufeae\017" +
    "\ufeae\020\ufeae\021\ufeae\022\ufeae\023\ufeae\024\ufeae\025\ufeae" +
    "\026\ufeae\027\ufeae\030\ufeae\031\ufeae\032\ufeae\033\ufeae\034" +
    "\ufeae\035\ufeae\036\ufeae\037\ufeae\040\ufeae\042\ufeae\043\ufeae" +
    "\044\ufeae\045\ufeae\046\ufeae\047\ufeae\050\ufeae\051\ufeae\052" +
    "\ufeae\053\ufeae\054\ufeae\055\ufeae\056\ufeae\057\ufeae\060\ufeae" +
    "\065\ufeae\066\ufeae\073\ufeae\074\ufeae\075\ufeae\001\002\000" +
    "\144\004\ufea9\005\ufea9\006\ufea9\007\ufea9\010\ufea9\011\ufea9" +
    "\012\ufea9\013\ufea9\014\ufea9\015\ufea9\016\ufea9\017\ufea9\020" +
    "\ufea9\021\ufea9\022\ufea9\023\ufea9\024\ufea9\025\ufea9\026\ufea9" +
    "\027\ufea9\030\ufea9\031\ufea9\032\ufea9\033\ufea9\034\ufea9\035" +
    "\ufea9\036\ufea9\037\ufea9\040\ufea9\042\ufea9\043\ufea9\044\ufea9" +
    "\045\ufea9\046\ufea9\047\ufea9\050\ufea9\051\ufea9\052\ufea9\053" +
    "\ufea9\054\ufea9\055\ufea9\056\ufea9\057\ufea9\060\ufea9\065\ufea9" +
    "\066\ufea9\073\ufea9\074\ufea9\075\ufea9\001\002\000\144\004" +
    "\ufebd\005\ufebd\006\ufebd\007\ufebd\010\ufebd\011\ufebd\012\ufebd" +
    "\013\ufebd\014\ufebd\015\ufebd\016\ufebd\017\ufebd\020\ufebd\021" +
    "\ufebd\022\ufebd\023\ufebd\024\ufebd\025\ufebd\026\ufebd\027\ufebd" +
    "\030\ufebd\031\ufebd\032\ufebd\033\ufebd\034\ufebd\035\ufebd\036" +
    "\ufebd\037\ufebd\040\ufebd\042\ufebd\043\ufebd\044\ufebd\045\ufebd" +
    "\046\ufebd\047\ufebd\050\ufebd\051\ufebd\052\ufebd\053\ufebd\054" +
    "\ufebd\055\ufebd\056\ufebd\057\ufebd\060\ufebd\065\ufebd\066\ufebd" +
    "\073\ufebd\074\ufebd\075\ufebd\001\002\000\144\004\ufeaf\005" +
    "\ufeaf\006\ufeaf\007\ufeaf\010\ufeaf\011\ufeaf\012\ufeaf\013\ufeaf" +
    "\014\ufeaf\015\ufeaf\016\ufeaf\017\ufeaf\020\ufeaf\021\ufeaf\022" +
    "\ufeaf\023\ufeaf\024\ufeaf\025\ufeaf\026\ufeaf\027\ufeaf\030\ufeaf" +
    "\031\ufeaf\032\ufeaf\033\ufeaf\034\ufeaf\035\ufeaf\036\ufeaf\037" +
    "\ufeaf\040\ufeaf\042\ufeaf\043\ufeaf\044\ufeaf\045\ufeaf\046\ufeaf" +
    "\047\ufeaf\050\ufeaf\051\ufeaf\052\ufeaf\053\ufeaf\054\ufeaf\055" +
    "\ufeaf\056\ufeaf\057\ufeaf\060\ufeaf\065\ufeaf\066\ufeaf\073\ufeaf" +
    "\074\ufeaf\075\ufeaf\001\002\000\144\004\ufebe\005\ufebe\006" +
    "\ufebe\007\ufebe\010\ufebe\011\ufebe\012\ufebe\013\ufebe\014\ufebe" +
    "\015\ufebe\016\ufebe\017\ufebe\020\ufebe\021\ufebe\022\ufebe\023" +
    "\ufebe\024\ufebe\025\ufebe\026\ufebe\027\ufebe\030\ufebe\031\ufebe" +
    "\032\ufebe\033\ufebe\034\ufebe\035\ufebe\036\ufebe\037\ufebe\040" +
    "\ufebe\042\ufebe\043\ufebe\044\ufebe\045\ufebe\046\ufebe\047\ufebe" +
    "\050\ufebe\051\ufebe\052\ufebe\053\ufebe\054\ufebe\055\ufebe\056" +
    "\ufebe\057\ufebe\060\ufebe\065\ufebe\066\ufebe\073\ufebe\074\ufebe" +
    "\075\ufebe\001\002\000\144\004\ufeb7\005\ufeb7\006\ufeb7\007" +
    "\ufeb7\010\ufeb7\011\ufeb7\012\ufeb7\013\ufeb7\014\ufeb7\015\ufeb7" +
    "\016\ufeb7\017\ufeb7\020\ufeb7\021\ufeb7\022\ufeb7\023\ufeb7\024" +
    "\ufeb7\025\ufeb7\026\ufeb7\027\ufeb7\030\ufeb7\031\ufeb7\032\ufeb7" +
    "\033\ufeb7\034\ufeb7\035\ufeb7\036\ufeb7\037\ufeb7\040\ufeb7\042" +
    "\ufeb7\043\ufeb7\044\ufeb7\045\ufeb7\046\ufeb7\047\ufeb7\050\ufeb7" +
    "\051\ufeb7\052\ufeb7\053\ufeb7\054\ufeb7\055\ufeb7\056\ufeb7\057" +
    "\ufeb7\060\ufeb7\065\ufeb7\066\ufeb7\073\ufeb7\074\ufeb7\075\ufeb7" +
    "\001\002\000\064\003\ufefc\006\ufefc\007\ufefc\010\ufefc\012" +
    "\ufefc\014\ufefc\015\ufefc\016\ufefc\017\ufefc\020\ufefc\023\ufefc" +
    "\044\ufefc\051\ufefc\054\ufefc\055\ufefc\056\ufefc\057\ufefc\060" +
    "\ufefc\061\ufefc\062\ufefc\063\ufefc\071\ufefc\072\ufefc\074\ufefc" +
    "\075\044\001\002\000\004\044\u0281\001\002\000\004\031" +
    "\u0282\001\002\000\020\003\u0283\033\uffec\043\uffec\044\uffec" +
    "\050\uffec\052\uffec\074\uffec\001\002\000\006\026\uffe7\044" +
    "\uffe7\001\002\000\004\023\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0282\000\010\002\004\023\005\024\003\001\001\000" +
    "\004\003\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\005\024\016\001\001\000" +
    "\004\104\017\001\001\000\002\001\001\000\004\023\022" +
    "\001\001\000\002\001\001\000\022\004\036\005\033\006" +
    "\023\020\034\021\032\026\042\027\041\035\044\001\001" +
    "\000\022\004\u0283\005\033\006\023\020\034\021\032\026" +
    "\042\027\041\035\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\u024c\001\001\000" +
    "\004\034\u024a\001\001\000\002\001\001\000\022\004\u0249" +
    "\005\033\006\023\020\034\021\032\026\042\027\041\035" +
    "\044\001\001\000\022\004\u0248\005\033\006\023\020\034" +
    "\021\032\026\042\027\041\035\044\001\001\000\022\004" +
    "\u0247\005\033\006\023\020\034\021\032\026\042\027\041" +
    "\035\044\001\001\000\004\040\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\226\005\033\006\023" +
    "\020\034\021\032\026\042\027\041\035\044\001\001\000" +
    "\022\004\225\005\033\006\023\020\034\021\032\026\042" +
    "\027\041\035\044\001\001\000\022\004\224\005\033\006" +
    "\023\020\034\021\032\026\042\027\041\035\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\105\046\001" +
    "\001\000\004\073\050\001\001\000\012\067\072\070\066" +
    "\071\065\072\063\001\001\000\004\106\051\001\001\000" +
    "\004\012\054\001\001\000\002\001\001\000\004\023\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\115" +
    "\057\001\001\000\004\073\060\001\001\000\004\116\061" +
    "\001\001\000\004\012\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\067\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\067\072\070\102\071\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\067" +
    "\072\070\115\071\065\001\001\000\010\067\072\070\114" +
    "\071\065\001\001\000\010\067\072\070\113\071\065\001" +
    "\001\000\010\067\072\070\112\071\065\001\001\000\010" +
    "\067\072\070\111\071\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\062\127\063\125\064\126\001\001\000\002\001\001\000" +
    "\010\065\136\066\132\067\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\065\146\066\132\067\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\065\161\066\132\067\137\001\001\000\010\065\160\066" +
    "\132\067\137\001\001\000\010\065\157\066\132\067\137" +
    "\001\001\000\010\065\156\066\132\067\137\001\001\000" +
    "\010\065\155\066\132\067\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\067\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\230\001\001\000\012\067\072\070\066" +
    "\071\065\072\247\001\001\000\004\113\232\001\001\000" +
    "\004\013\233\001\001\000\002\001\001\000\004\023\246" +
    "\001\001\000\002\001\001\000\004\117\240\001\001\000" +
    "\004\121\244\001\001\000\012\067\072\070\066\071\065" +
    "\072\241\001\001\000\004\120\242\001\001\000\004\013" +
    "\243\001\001\000\002\001\001\000\004\013\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\110\250\001" +
    "\001\000\004\013\251\001\001\000\002\001\001\000\004" +
    "\023\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\127" +
    "\265\132\264\001\001\000\002\001\001\000\006\042\270" +
    "\043\267\001\001\000\002\001\001\000\004\035\u0223\001" +
    "\001\000\002\001\001\000\006\023\005\024\272\001\001" +
    "\000\004\130\273\001\001\000\002\001\001\000\004\023" +
    "\275\001\001\000\004\045\276\001\001\000\040\005\315" +
    "\011\331\021\313\025\301\026\325\027\324\030\326\035" +
    "\044\036\314\051\311\053\327\054\303\055\320\056\310" +
    "\131\316\001\001\000\004\152\u0217\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\005\024\u020a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\145\u019d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\155" +
    "\u0120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\136\333\001\001\000\014" +
    "\065\335\066\132\067\137\100\334\101\340\001\001\000" +
    "\002\001\001\000\004\102\u0114\001\001\000\012\065\335" +
    "\066\132\067\137\100\u0110\001\001\000\002\001\001\000" +
    "\004\137\341\001\001\000\002\001\001\000\014\065\335" +
    "\066\132\067\137\100\334\101\346\001\001\000\004\162" +
    "\344\001\001\000\014\065\335\066\132\067\137\100\334" +
    "\101\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\005\024\350\001\001\000\002\001\001\000\004" +
    "\023\352\001\001\000\004\045\353\001\001\000\040\005" +
    "\315\011\331\021\313\025\301\026\325\027\324\030\326" +
    "\035\044\036\314\051\311\053\327\054\303\055\320\056" +
    "\310\060\354\001\001\000\002\001\001\000\004\135\357" +
    "\001\001\000\002\001\001\000\010\067\072\070\360\071" +
    "\065\001\001\000\002\001\001\000\004\023\362\001\001" +
    "\000\002\001\001\000\004\023\364\001\001\000\002\001" +
    "\001\000\004\140\366\001\001\000\006\023\371\052\367" +
    "\001\001\000\002\001\001\000\006\023\005\024\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\144\374" +
    "\001\001\000\002\001\001\000\004\023\376\001\001\000" +
    "\004\045\377\001\001\000\040\005\315\011\331\021\313" +
    "\025\301\026\325\027\324\030\326\035\044\036\314\051" +
    "\311\053\327\054\303\055\320\056\310\060\u0100\001\001" +
    "\000\002\001\001\000\004\023\u0102\001\001\000\002\001" +
    "\001\000\004\141\u0104\001\001\000\014\065\335\066\132" +
    "\067\137\100\334\101\u0105\001\001\000\004\142\u0106\001" +
    "\001\000\002\001\001\000\006\023\005\024\u0108\001\001" +
    "\000\002\001\001\000\004\023\u010a\001\001\000\004\045" +
    "\u010b\001\001\000\040\005\315\011\331\021\313\025\301" +
    "\026\325\027\324\030\326\035\044\036\314\051\311\053" +
    "\327\054\303\055\320\056\310\060\u010c\001\001\000\002" +
    "\001\001\000\004\143\u010e\001\001\000\006\023\371\052" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\065\u0113\066\132\067\137\100\u0112\001\001\000\002\001" +
    "\001\000\004\102\u0114\001\001\000\010\065\u011e\066\132" +
    "\067\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\075\u0124\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\156\u0129\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u012c\001\001\000\004" +
    "\057\u012e\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\u0130\001\001\000\002\001\001\000\004\023\u0132" +
    "\001\001\000\004\157\u0133\001\001\000\004\045\u0134\001" +
    "\001\000\042\005\315\011\331\021\313\025\301\026\325" +
    "\027\324\030\326\035\044\036\314\051\311\053\327\054" +
    "\303\055\320\056\310\060\u0136\061\u0135\001\001\000\004" +
    "\160\u013a\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u0139\001\001\000\002\001\001\000\004\057\u013b" +
    "\001\001\000\002\001\001\000\004\023\u013d\001\001\000" +
    "\002\001\001\000\004\023\u013f\001\001\000\004\161\u0140" +
    "\001\001\000\004\045\u0141\001\001\000\042\005\315\011" +
    "\331\021\313\025\301\026\325\027\324\030\326\035\044" +
    "\036\314\051\311\053\327\054\303\055\320\056\310\060" +
    "\u0136\061\u0142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\062\127\063\125\064\u0199\001" +
    "\001\000\006\036\u0148\107\230\001\001\000\004\113\232" +
    "\001\001\000\002\001\001\000\006\031\u014c\033\u014b\001" +
    "\001\000\002\001\001\000\004\171\u0197\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\u0158\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\164\u0154\001\001\000\004\023\u0155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\172\u0189\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u018a\001\001\000\002\001\001" +
    "\000\006\031\u018c\033\u014b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\163\u0195\001\001\000\004\023\u0196\001\001" +
    "\000\002\001\001\000\004\032\u0198\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u019c" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u01a1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\146\u01a3\001\001\000\002\001\001\000" +
    "\004\050\u01a6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\147\u01b2\001\001\000\014\065\335\066\132" +
    "\067\137\100\334\101\u01b3\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\074\u01b7\001\001\000\004\151\u01c1" +
    "\001\001\000\002\001\001\000\004\150\u01b9\001\001\000" +
    "\006\023\005\024\u01ba\001\001\000\002\001\001\000\004" +
    "\023\u01bc\001\001\000\004\045\u01bd\001\001\000\036\005" +
    "\315\011\331\021\313\025\301\026\325\027\324\030\326" +
    "\035\044\036\314\051\311\053\327\054\303\055\320\056" +
    "\310\001\001\000\004\023\u01bf\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\076\u01c4\077\u01c6\001\001\000" +
    "\006\076\u01dd\077\u01c6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\076\u01da\077\u01c6\001\001\000\006\076\u01d9\077\u01c6\001" +
    "\001\000\006\076\u01d8\077\u01c6\001\001\000\006\076\u01d7" +
    "\077\u01c6\001\001\000\006\076\u01d6\077\u01c6\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u01e0" +
    "\001\001\000\002\001\001\000\006\031\u01e2\033\u014b\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\170\u01e5" +
    "\001\001\000\004\023\u01e6\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\167\u01e9\001\001\000\004\023\u01ea" +
    "\001\001\000\002\001\001\000\006\031\u01ec\033\u014b\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u01ef" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\u01f5\111\u01f4\001\001\000\004\114\u0203" +
    "\001\001\000\012\067\072\070\066\071\065\072\u0200\001" +
    "\001\000\002\001\001\000\006\031\u01f7\033\u014b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\166\u01fa\001" +
    "\001\000\004\023\u01fb\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\165\u01fe\001\001\000\004\023\u01ff\001" +
    "\001\000\002\001\001\000\004\112\u0201\001\001\000\004" +
    "\013\u0202\001\001\000\002\001\001\000\004\013\u0204\001" +
    "\001\000\002\001\001\000\006\031\u0206\033\u014b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0209\001" +
    "\001\000\002\001\001\000\004\154\u020b\001\001\000\002" +
    "\001\001\000\004\023\u020d\001\001\000\004\045\u020e\001" +
    "\001\000\040\005\315\011\331\021\313\025\301\026\325" +
    "\027\324\030\326\035\044\036\314\051\311\053\327\054" +
    "\303\055\320\056\310\060\u020f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\065\335\066" +
    "\132\067\137\100\334\101\u0213\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u0216\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\065\335\066\132\067\137" +
    "\100\334\101\u0219\001\001\000\004\153\u021a\001\001\000" +
    "\002\001\001\000\006\023\005\024\u021c\001\001\000\002" +
    "\001\001\000\004\023\u021e\001\001\000\004\045\u021f\001" +
    "\001\000\040\005\315\011\331\021\313\025\301\026\325" +
    "\027\324\030\326\035\044\036\314\051\311\053\327\054" +
    "\303\055\320\056\310\060\u0220\001\001\000\002\001\001" +
    "\000\004\023\u0222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\005" +
    "\024\u0227\001\001\000\004\133\u0228\001\001\000\002\001" +
    "\001\000\004\023\u022a\001\001\000\004\045\u022b\001\001" +
    "\000\040\005\315\011\331\021\313\025\301\026\325\027" +
    "\324\030\326\035\044\036\314\051\311\053\327\054\303" +
    "\055\320\056\310\134\u022c\001\001\000\002\001\001\000" +
    "\004\023\u022e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\u0232\001\001\000\004\125\u023e\001\001\000" +
    "\006\042\u0233\043\267\001\001\000\002\001\001\000\006" +
    "\023\005\024\u0235\001\001\000\004\123\u0236\001\001\000" +
    "\002\001\001\000\004\023\u0238\001\001\000\004\045\u0239" +
    "\001\001\000\040\005\315\011\331\021\313\025\301\026" +
    "\325\027\324\030\326\035\044\036\314\051\311\053\327" +
    "\054\303\055\320\056\310\060\u023a\001\001\000\004\124" +
    "\u023b\001\001\000\002\001\001\000\004\023\u023d\001\001" +
    "\000\002\001\001\000\006\023\005\024\u023f\001\001\000" +
    "\002\001\001\000\004\023\u0241\001\001\000\004\045\u0242" +
    "\001\001\000\040\005\315\011\331\021\313\025\301\026" +
    "\325\027\324\030\326\035\044\036\314\051\311\053\327" +
    "\054\303\055\320\056\310\060\u0243\001\001\000\004\126" +
    "\u0244\001\001\000\002\001\001\000\004\023\u0246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u024b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u027e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\111\u01f4\001\001\000" +
    "\004\114\u0203\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxJAVA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxJAVA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxJAVA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public int jerarquia = 0;
    public String tipoActual = "";
    public TablaSimbolos tabla;
    public OperacionesJAVA op = new OperacionesJAVA();
    public VerifJAVA verif = new VerifJAVA();
    public static boolean todoCorrecto = true;
    public String tipoMetodo = "";

    /*Variables para los cuartetos*/

    public int contVars = 0;
    public String idSwitch = "";
    ArrayList<String> arrayFinales = new ArrayList<>();
    public int contFinales = 0;
    public static String aux2, aux3;
    public ArrayList<Nodo> auxCuarpeta = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaFor = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaCuarpeta = new ArrayList<>();
    public ArrayList<ArrayList<Nodo>> pilaFalsas = new ArrayList<>();
    public ArrayList<Boolean> usoPila = new ArrayList<>();
    public static boolean inst = false;
    public ArrayList<String> pilaEtInst = new ArrayList<>();
    public static String etInst = "";
    public ManejoCondiciones manejo = new ManejoCondiciones();
    public ManejoJava manejoJV = new ManejoJava();
    
    /*---------------------------------------- CODIGO EJECUTABLE ---------------------------------------------*/

    public String metodo = "", clase = "";
    public ExeJava exe = new ExeJava();

    public SintaxJAVA(AnalizadorLexico lex, TablaSimbolos tabla){
        super(lex);
        this.tabla = tabla;
        contVars = tabla.getObJava().getContVars();
    }

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
        int fila = s.left + PanelPrincipal.totalLineas;
        setAccion("ERROR", "Error sintaxis columna: "+s.right+" fila: "+fila,"");   
        PanelPrincipal.errores += "Fila: "+fila+" Columna:"+s.right+" Tipo de error: SINTACTICO.\n";
    }

   /* public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        int fila = s.left + PanelPrincipal.totalLineas;
        PanelPrincipal.errores += "Fila: "+fila+" Columna:"+s.right+" Tipo de error: SINTACTICO.\n";
    }*/


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxJAVA$actions {
  private final SintaxJAVA parser;

  /** Constructor */
  CUP$SintaxJAVA$actions(SintaxJAVA parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxJAVA$do_action(
    int                        CUP$SintaxJAVA$act_num,
    java_cup.runtime.lr_parser CUP$SintaxJAVA$parser,
    java.util.Stack            CUP$SintaxJAVA$stack,
    int                        CUP$SintaxJAVA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxJAVA$result;

      /* select the action based on the action number */
      switch (CUP$SintaxJAVA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // TEXTO_PLANO2 ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // TEXTO_PLANO2 ::= TEXTO_PLANO2 resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condTrue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condFalse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT= a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // TEXTO_PLANO2 ::= TEXTO_PLANO2 enter 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT = a + " " + "\n"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // TEXTO_PLANO2 ::= TEXTO_PLANO2 id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // TEXTO_PLANO2 ::= TEXTO_PLANO2 numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // TEXTO_PLANO2 ::= TEXTO_PLANO2 guionBajo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TEXTO_PLANO2 ::= TEXTO_PLANO2 comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TEXTO_PLANO2 ::= TEXTO_PLANO2 pleca 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // TEXTO_PLANO2 ::= TEXTO_PLANO2 ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TEXTO_PLANO2 ::= TEXTO_PLANO2 mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TEXTO_PLANO2 ::= TEXTO_PLANO2 menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // TEXTO_PLANO2 ::= TEXTO_PLANO2 porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // TEXTO_PLANO2 ::= TEXTO_PLANO2 div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // TEXTO_PLANO2 ::= TEXTO_PLANO2 por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // TEXTO_PLANO2 ::= TEXTO_PLANO2 menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // TEXTO_PLANO2 ::= TEXTO_PLANO2 mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // TEXTO_PLANO2 ::= TEXTO_PLANO2 igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // TEXTO_PLANO2 ::= TEXTO_PLANO2 admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // TEXTO_PLANO2 ::= TEXTO_PLANO2 dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // TEXTO_PLANO2 ::= TEXTO_PLANO2 puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // TEXTO_PLANO2 ::= TEXTO_PLANO2 parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // TEXTO_PLANO2 ::= TEXTO_PLANO2 parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // TEXTO_PLANO2 ::= TEXTO_PLANO2 agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TEXTO_PLANO2 ::= TEXTO_PLANO2 agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TEXTO_PLANO2 ::= TEXTO_PLANO2 llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TEXTO_PLANO2 ::= TEXTO_PLANO2 llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TEXTO_PLANO2 ::= TEXTO_PLANO2 clase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TEXTO_PLANO2 ::= TEXTO_PLANO2 tipoPublic 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TEXTO_PLANO2 ::= TEXTO_PLANO2 mensaje2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condThis 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TEXTO_PLANO2 ::= TEXTO_PLANO2 mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TEXTO_PLANO2 ::= TEXTO_PLANO2 retorno 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TEXTO_PLANO2 ::= TEXTO_PLANO2 def 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TEXTO_PLANO2 ::= TEXTO_PLANO2 quiebre 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TEXTO_PLANO2 ::= TEXTO_PLANO2 noCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condSwitch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // TEXTO_PLANO2 ::= TEXTO_PLANO2 condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // TEXTO_PLANO2 ::= TEXTO_PLANO2 tipoVoid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // TEXTO_PLANO2 ::= TEXTO_PLANO2 tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // TEXTO_PLANO2 ::= TEXTO_PLANO2 tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TEXTO_PLANO2 ::= TEXTO_PLANO2 tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TEXTO_PLANO2 ::= TEXTO_PLANO2 punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TEXTO_PLANO2 ::= TEXTO_PLANO2 coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO2",31, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TEXTO_PLANO ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TEXTO_PLANO ::= TEXTO_PLANO resto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TEXTO_PLANO ::= TEXTO_PLANO condTrue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TEXTO_PLANO ::= TEXTO_PLANO condFalse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT= a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TEXTO_PLANO ::= TEXTO_PLANO id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TEXTO_PLANO ::= TEXTO_PLANO numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TEXTO_PLANO ::= TEXTO_PLANO guionBajo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TEXTO_PLANO ::= TEXTO_PLANO comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TEXTO_PLANO ::= TEXTO_PLANO pleca 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TEXTO_PLANO ::= TEXTO_PLANO ampersand 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // TEXTO_PLANO ::= TEXTO_PLANO mayor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TEXTO_PLANO ::= TEXTO_PLANO menor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TEXTO_PLANO ::= TEXTO_PLANO porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // TEXTO_PLANO ::= TEXTO_PLANO div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // TEXTO_PLANO ::= TEXTO_PLANO por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // TEXTO_PLANO ::= TEXTO_PLANO menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TEXTO_PLANO ::= TEXTO_PLANO mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TEXTO_PLANO ::= TEXTO_PLANO igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // TEXTO_PLANO ::= TEXTO_PLANO admiracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TEXTO_PLANO ::= TEXTO_PLANO dosPuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TEXTO_PLANO ::= TEXTO_PLANO puntoComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TEXTO_PLANO ::= TEXTO_PLANO parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TEXTO_PLANO ::= TEXTO_PLANO condThis 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TEXTO_PLANO ::= TEXTO_PLANO parentesis_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TEXTO_PLANO ::= TEXTO_PLANO agrupacion_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // TEXTO_PLANO ::= TEXTO_PLANO agrupacion_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // TEXTO_PLANO ::= TEXTO_PLANO llave_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // TEXTO_PLANO ::= TEXTO_PLANO llave_a 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // TEXTO_PLANO ::= TEXTO_PLANO clase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // TEXTO_PLANO ::= TEXTO_PLANO tipoPublic 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // TEXTO_PLANO ::= TEXTO_PLANO mensaje2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // TEXTO_PLANO ::= TEXTO_PLANO mensaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // TEXTO_PLANO ::= TEXTO_PLANO condFor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // TEXTO_PLANO ::= TEXTO_PLANO retorno 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // TEXTO_PLANO ::= TEXTO_PLANO def 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // TEXTO_PLANO ::= TEXTO_PLANO quiebre 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // TEXTO_PLANO ::= TEXTO_PLANO condWhile 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // TEXTO_PLANO ::= TEXTO_PLANO noCase 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // TEXTO_PLANO ::= TEXTO_PLANO condSwitch 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // TEXTO_PLANO ::= TEXTO_PLANO condDo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // TEXTO_PLANO ::= TEXTO_PLANO condElse 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // TEXTO_PLANO ::= TEXTO_PLANO condIf 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // TEXTO_PLANO ::= TEXTO_PLANO tipoVoid 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // TEXTO_PLANO ::= TEXTO_PLANO tipoFloat 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // TEXTO_PLANO ::= TEXTO_PLANO tipoChar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // TEXTO_PLANO ::= TEXTO_PLANO tipoInt 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // TEXTO_PLANO ::= TEXTO_PLANO punto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // TEXTO_PLANO ::= TEXTO_PLANO coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a + " " + b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO_PLANO",26, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // ENTER2 ::= 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ENTER2",18, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // ENTER2 ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ENTER2",18, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ENTER2 ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ENTER2",18, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // ENTER ::= enter 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ENTER",17, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ENTER ::= ENTER enter 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ENTER",17, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // COMENTARIO_B ::= comentario_b TEXTO_PLANO2 comentario_c ENTER 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("COMENTARIO_B",21, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // COMENTARIO_A ::= comentario_a TEXTO_PLANO ENTER 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("COMENTARIO_A",20, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // TEXTO2 ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO2",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // TEXTO2 ::= mas TEXTO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO2",24, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // VAL_TEXTO ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // VAL_TEXTO ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // VAL_TEXTO ::= menos id 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Float", aleft+PanelPrincipal.totalLineas, aright); 
                                                                        String devolver = parser.manejoJV.devolverVarSwitch(parser.tabla, a.toString(), parser.metodo, parser.clase, false);
                                                                        RESULT = b.toString()+devolver; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // VAL_TEXTO ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // VAL_TEXTO ::= condThis punto id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), 0, parser.tabla.getObJava().getMisClases().size()-1, "Float", aleft+PanelPrincipal.totalLineas, aright);
                                                                        RESULT = parser.manejoJV.retornarValThis(parser.tabla, a.toString(), parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // VAL_TEXTO ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // VAL_TEXTO ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Float", aleft+PanelPrincipal.totalLineas, aright); 
                                                                        RESULT = parser.manejoJV.devolverVarSwitch(parser.tabla, a.toString(), parser.metodo, parser.clase, false); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_TEXTO",25, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // TEXTO ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en  declaracion de instruccion System.out.print\n"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // TEXTO ::= comilla TEXTO_PLANO comilla NT$54 TEXTO2 
            {
              String RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // NT$54 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 String et = a.toString()+b+c.toString(); 
                                                           parser.manejoJV.mostrarMensaje(parser.tabla.getObJava(), et, null);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$54",120, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // TEXTO ::= VAL_TEXTO NT$53 TEXTO2 
            {
              String RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TEXTO",23, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // NT$53 ::= 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.manejoJV.mostrarMensaje(parser.tabla.getObJava(), a, "%f"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$53",119, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // MENSAJE ::= mensaje2 parentesis_a TEXTO parentesis_b puntoComa ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		  parser.manejoJV.mostrarQuiebre(parser.tabla); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("MENSAJE",7, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // MENSAJE ::= mensaje parentesis_a TEXTO parentesis_b puntoComa ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("MENSAJE",7, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TIPO_INPUT ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de tipos, se esperaba un tipo de dato\n"; 
                                               RESULT = "Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TIPO_INPUT ::= floatInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT="Float"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TIPO_INPUT ::= charInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT="Char"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TIPO_INPUT ::= intInput 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_INPUT",28, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // LECTURA_DATOS ::= TIPO_INPUT parentesis_a parentesis_b puntoComa NT$52 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // NT$52 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
  parser.manejoJV.crearScanf(parser.tabla, "", a, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$52",118, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // LECTURA_DATOS ::= TIPO_INPUT parentesis_a TEXTO parentesis_b puntoComa NT$51 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // NT$51 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
  parser.manejoJV.mostrarQuiebre(parser.tabla);
                                                                                                                parser.manejoJV.crearScanf(parser.tabla, "", a, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$51",117, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // LECTURA_DATOS ::= condThis punto id igual TIPO_INPUT parentesis_a parentesis_b puntoComa NT$50 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$50 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
  parser.manejoJV.crearScanf2(parser.tabla, a.toString(), b, parser.clase);
                                                                                                                parser.verif.verifInput(parser.tabla.getObJava(), a.toString(), b, aleft+PanelPrincipal.totalLineas, aright, parser.jerarquia, true);    
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$50",116, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // LECTURA_DATOS ::= condThis punto id igual TIPO_INPUT parentesis_a TEXTO parentesis_b puntoComa NT$49 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NT$49 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
  parser.manejoJV.mostrarQuiebre(parser.tabla);
                                                                                                                parser.manejoJV.crearScanf2(parser.tabla, a.toString(), b, parser.clase);  
                                                                                                                parser.verif.verifInput(parser.tabla.getObJava(), a.toString(), b, aleft+PanelPrincipal.totalLineas, aright, parser.jerarquia, true);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$49",115, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // LECTURA_DATOS ::= id igual TIPO_INPUT parentesis_a parentesis_b puntoComa NT$48 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$48 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
  parser.manejoJV.crearScanf(parser.tabla, a.toString(), b, parser.metodo, parser.clase);   
                                                                                                                parser.verif.verifInput(parser.tabla.getObJava(), a.toString(), b, aleft+PanelPrincipal.totalLineas, aright, parser.jerarquia, false); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$48",114, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // LECTURA_DATOS ::= id igual TIPO_INPUT parentesis_a TEXTO parentesis_b puntoComa NT$47 ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("LECTURA_DATOS",19, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$47 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
  parser.manejoJV.mostrarQuiebre(parser.tabla);
                                                                                                                parser.manejoJV.crearScanf(parser.tabla, a.toString(), b, parser.metodo, parser.clase);  
                                                                                                                parser.verif.verifInput(parser.tabla.getObJava(), a.toString(), b, aleft+PanelPrincipal.totalLineas, aright, parser.jerarquia, false); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$47",113, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // OP2 ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en sentencia de operador logico\n"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // OP2 ::= admiracion igual 
            {
              String RESULT =null;
		 RESULT="!="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // OP2 ::= igual igual 
            {
              String RESULT =null;
		 RESULT="=="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // OP2 ::= menor igual 
            {
              String RESULT =null;
		 RESULT="<="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // OP2 ::= menor 
            {
              String RESULT =null;
		 RESULT="<"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // OP2 ::= mayor igual 
            {
              String RESULT =null;
		 RESULT=">="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // OP2 ::= mayor 
            {
              String RESULT =null;
		 RESULT=">"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP2",64, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // VAL_COND ::= menos numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()+d.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // VAL_COND ::= menos numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()+b.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // VAL_COND ::= menos id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tip=parser.op.buscarVariable(parser.tabla.getObJava(), a.toString(), parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright);  
                                                                        RESULT = parser.manejoJV.devEtiquetaId(parser.tabla, a.toString(), tip, parser.metodo, parser.clase, true); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // VAL_COND ::= menos comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // VAL_COND ::= menos comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", d.toString()+a.toString()+b.toString()+c.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // VAL_COND ::= comillaSimple numero comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // VAL_COND ::= comillaSimple id comillaSimple 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Char", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // VAL_COND ::= menos condThis punto METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String et = "-"+a.getId();
                                                                        RESULT = new NodoBoolean(a.getTipo(), et); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // VAL_COND ::= condThis punto METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // VAL_COND ::= menos METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String et = "-"+a.getId();
                                                                        RESULT = new NodoBoolean(a.getTipo(), et); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // VAL_COND ::= METODO_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // VAL_COND ::= numero punto numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Float", a.toString()+b.toString()+c.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // VAL_COND ::= numero 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT = new NodoBoolean("Integer", a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // VAL_COND ::= menos condThis punto id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tip = parser.op.buscarVariable(parser.tabla.getObJava(), a.toString(), 0, aleft+PanelPrincipal.totalLineas, aright);
                                                                        String et = "-"+parser.manejoJV.retornarValThis(parser.tabla, a.toString(), parser.clase);
                                                                        RESULT = new NodoBoolean(tip, et); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // VAL_COND ::= condThis punto id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tip = parser.op.buscarVariable(parser.tabla.getObJava(), a.toString(), 0, aleft+PanelPrincipal.totalLineas, aright);
                                                                        String et = parser.manejoJV.retornarValThis(parser.tabla, a.toString(), parser.clase); 
                                                                        RESULT = new NodoBoolean(tip, et); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // VAL_COND ::= id 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tip = parser.op.buscarVariable(parser.tabla.getObJava(), a.toString(), parser.jerarquia, aleft+PanelPrincipal.totalLineas, aright); 
                                                                        RESULT = parser.manejoJV.devEtiquetaId(parser.tabla, a.toString(), tip, parser.metodo, parser.clase, false); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_COND",52, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // OP_COND ::= VAL_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // OP_COND ::= OP_COND porcentaje OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "modulo"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // OP_COND ::= OP_COND div OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "div"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // OP_COND ::= OP_COND por OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "mult"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // OP_COND ::= OP_COND menos OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "resta"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // OP_COND ::= OP_COND mas OP_COND 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.concatenarOperacion(parser.tabla, a, b, "suma"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // OP_COND ::= parentesis_a OP_COND parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_COND",51, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // BOOLEAN3 ::= OP_COND OP2 OP_COND 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=parser.manejoJV.agregarBooleans(parser.tabla.getObJava(), parser.pilaFalsas, a, b, c, parser.jerarquia);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("BOOLEAN3",62, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXT2 ::= error 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de booleano\n";
                                                                   RESULT = new ArrayList<>();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXT2 ::= admiracion BOOLEAN3 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.cambiarGotos(a); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXT2 ::= admiracion parentesis_a BOOLEAN3 parentesis_b 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT = parser.manejoJV.cambiarGotos(a); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXT2 ::= BOOLEAN3 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a;  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXT2 ::= EXT2 or NT$46 EXT2 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.manejoJV.manejoOr(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta,  a, b, parser.jerarquia);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NT$46 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
 parser.aux3 = parser.aux2; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$46",112, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXT2 ::= EXT2 and EXT2 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> b = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.manejoAnd(a, b); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("EXT2",63, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // VAL_SWITCH ::= condThis punto id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verifVarSwitch(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright, true); 
                                                           RESULT = parser.manejoJV.retornarValThis(parser.tabla, a.toString(), parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_SWITCH",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // VAL_SWITCH ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_SWITCH",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // VAL_SWITCH ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_SWITCH",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // VAL_SWITCH ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verifVarSwitch(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright, false); 
                                                           RESULT = parser.manejoJV.devolverVarSwitch(parser.tabla, a.toString(), parser.metodo, parser.clase, true);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_SWITCH",59, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // RETORNO_SWITCH ::= RETORNO 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO_SWITCH",47, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // RETORNO_SWITCH ::= quiebre puntoComa ENTER 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO_SWITCH",47, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CASOS_SWITCH ::= 
            {
              Boolean RESULT =null;
		  RESULT = false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CASOS_SWITCH",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CASOS_SWITCH ::= def dosPuntos ENTER NT$45 CUERPO_METODO RETORNO_SWITCH 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                            parser.jerarquia--;  
                                                                            RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CASOS_SWITCH",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$45 ::= 
            {
              Boolean RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$45",111, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CASOS_SWITCH ::= noCase VAL_SWITCH dosPuntos ENTER NT$43 CUERPO_METODO RETORNO_SWITCH NT$44 CASOS_SWITCH 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=parser.op.retornarBoolCase(a, b, c); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CASOS_SWITCH",45, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$44 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.manejoJV.agregarFinCase(parser.tabla.getObJava(), parser.arrayFinales, parser.jerarquia);  
                                                                            parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                            parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$44",110, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$43 ::= 
            {
              Boolean RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
  parser.jerarquia++; 
                                                                            parser.manejoJV.agregarCaseSwitch(parser.tabla.getObJava(), parser.jerarquia, parser.idSwitch, h, "==");  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$43",109, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SWITCH ::= condSwitch NT$41 parentesis_a VAL_SWITCH NT$42 parentesis_b llave_a ENTER CASOS_SWITCH llave_b ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  parser.tabla.getObJava().getCuarpeta().add(new Nodo("ETIQUETA", parser.arrayFinales.get(parser.arrayFinales.size()-1), null, null, parser.jerarquia)); 
                                                                            parser.arrayFinales.remove(parser.arrayFinales.size()-1); 
                                                                            parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); parser.jerarquia--; 
                                                                            RESULT = c; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("SWITCH",44, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$42 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.arrayFinales.add("etFinal_"+parser.contFinales); 
                                                                            parser.contFinales++;  
                                                                            parser.idSwitch = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$42",108, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$41 ::= 
            {
              Boolean RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$41",107, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DO_WHILE ::= condDo ENTER2 NT$40 llave_a ENTER CUERPO_METODO RETORNO llave_b condWhile parentesis_a EXT2 parentesis_b puntoComa ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		  parser.manejoJV.agregarCondicionWhile(parser.tabla.getObJava(), parser.usoPila, h, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                                                                                    parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                                                                    parser.jerarquia--; 
                                                                                                                                    if(a != null){ 
                                                                                                                                        RESULT=false; 
                                                                                                                                    } else { 
                                                                                                                                        RESULT=null; 
                                                                                                                                    } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("DO_WHILE",43, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$40 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false);  
                                                                                                                                    parser.jerarquia++; 
                                                                                                                                    parser.pilaFalsas.add(new ArrayList<>());  
                                                                                                                                    parser.manejoJV.agregarDoWhile(parser.tabla.getObJava(), parser.jerarquia);      
                                                                                                                                    /*parser.manejo.agregarDoWhile(parser.tabla.getObJava(), parser.jerarquia);*/ 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$40",106, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // WHILE ::= condWhile NT$38 parentesis_a EXT2 NT$39 parentesis_b ENTER2 llave_a ENTER CUERPO_METODO RETORNO llave_b ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  parser.manejoJV.retornoWhile(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                                                parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                                parser.jerarquia--;  
                                                                                                if(a != null){ 
                                                                                                    RESULT=false; 
                                                                                                } else { 
                                                                                                    RESULT=null; 
                                                                                                } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("WHILE",42, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$39 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.manejoJV.agregarWhile(parser.tabla.getObJava(), h, parser.jerarquia);     
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$39",105, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$38 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false); 
                                                                                                parser.jerarquia++; 
                                                                                                parser.pilaFalsas.add(new ArrayList<>());
                                                                                                parser.manejoJV.agregarPreludioWhile(parser.tabla.getObJava(), parser.jerarquia); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$38",104, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VAL_FOR ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",38, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VAL_FOR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",38, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VAL_FOR ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer", bleft+PanelPrincipal.totalLineas, bright); 
                                                RESULT="-"+parser.manejoJV.etiquetaId(parser.tabla, b.toString(), parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",38, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VAL_FOR ::= menos condThis punto id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), 0, parser.tabla.getObJava().getMisClases().size()-1, "Integer", aleft+PanelPrincipal.totalLineas, aright);
                                                RESULT = "-"+parser.manejoJV.retornarValThis(parser.tabla, a.toString(), parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",38, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // VAL_FOR ::= condThis punto id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), 0, parser.tabla.getObJava().getMisClases().size()-1, "Integer", aleft+PanelPrincipal.totalLineas, aright);
                                                RESULT = parser.manejoJV.retornarValThis(parser.tabla, a.toString(), parser.clase);    
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",38, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // VAL_FOR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer", aleft+PanelPrincipal.totalLineas, aright); 
                                                RESULT = parser.manejoJV.etiquetaId(parser.tabla, a.toString(), parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAL_FOR",38, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OP ::= admiracion igual 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",65, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OP ::= igual igual 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",65, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OP ::= igual 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",65, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OP ::= mayor 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",65, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OP ::= mayor igual 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",65, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OP ::= menor 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",65, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OP ::= menor igual 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP",65, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPO_FOR ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",61, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPO_FOR ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",61, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPO_FOR ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright); 
                                                                   RESULT=a.toString()+parser.manejoJV.etiquetaId(parser.tabla, b.toString(), parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",61, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPO_FOR ::= comillaSimple numero comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",61, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPO_FOR ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",61, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPO_FOR ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT=a.toString()+b.toString()+c.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",61, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TIPO_FOR ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), aleft+PanelPrincipal.totalLineas, aright);  RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",61, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TIPO_FOR ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); 
                                                                   RESULT = parser.manejoJV.etiquetaId(parser.tabla, a.toString(), parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_FOR",61, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OP_FOR ::= TIPO_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP_FOR ::= OP_FOR porcentaje OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "modulo"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP_FOR ::= OP_FOR div OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "div"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP_FOR ::= OP_FOR por OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "mult"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_FOR ::= OP_FOR menos OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "resta"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP_FOR ::= OP_FOR mas OP_FOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacionFor(parser.tabla, parser.pilaFor, a, b, "suma"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP_FOR ::= parentesis_a OP_FOR parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OP_FOR",60, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // INC ::= igual error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de incremento en for, se esperaba una operacion aritmetica\n";    
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("INC",58, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // INC ::= igual NT$37 OP_FOR 
            {
              String RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("INC",58, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$37 ::= 
            {
              String RESULT =null;
  parser.tipoActual="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$37",103, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // INT ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de tipo en for, se esperaba tipo 'int'\n"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("INT",29, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // INT ::= 
            {
              String RESULT =null;
		 RESULT=""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("INT",29, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // INT ::= tipoInt 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("INT",29, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FOR ::= condFor NT$33 parentesis_a INT id NT$34 igual VAL_FOR puntoComa NT$35 EXT2 puntoComa id INC parentesis_b NT$36 ENTER2 llave_a ENTER CUERPO_METODO llave_b ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-18)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-18)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-18)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-17)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-17)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-17)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-14)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-14)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-14)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean j = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  parser.manejoJV.retornoFor(parser.tabla, parser.usoPila, parser.pilaFor, f.toString(), parser.pilaCuarpeta, parser.pilaFalsas, g, parser.jerarquia, parser.metodo, parser.clase);  
                                                                                    parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia);  
                                                                                    parser.jerarquia--;  
                                                                                    if(j!=null){ 
                                                                                        RESULT=false; 
                                                                                    } else { 
                                                                                        RESULT=null; 
                                                                                    }  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("FOR",41, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-21)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$36 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		ArrayList<Nodo> d = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.manejoJV.agregarFor(parser.tabla, b.toString(), c, d, parser.jerarquia, parser.metodo, parser.clase);  
                                                                                    boolean idInc = parser.verif.verificarTipadoVar(parser.tabla.getObJava(), f.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, "Integer", fleft+PanelPrincipal.totalLineas, fright);  
                                                                                    parser.verif.comprobarFor(parser.tabla.getObJava(), b.toString(), a.toString(), parser.jerarquia); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$36",102, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$35 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.manejoJV.agregarPreludioFor(parser.tabla, b.toString(), c, parser.jerarquia, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$35",101, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$34 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.verif.agregarVarFor(parser.tabla.getObJava(), b.toString(), a, parser.jerarquia, bleft+PanelPrincipal.totalLineas, bright);
                                                                                    if(!a.equals("")){
                                                                                        parser.exe.agregarVariable(parser.tabla, b.toString(), parser.metodo, parser.clase, a); 
                                                                                    } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$34",100, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$33 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false); 
                                                                                    parser.jerarquia++; 
                                                                                    parser.pilaFor.add(new ArrayList<>()); 
                                                                                    parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$33",99, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ELSE ::= ENTER 
            {
              Boolean RESULT =null;
		  parser.manejo.agregarEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia);  
                                                                                RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ELSE",40, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ELSE ::= condElse ENTER2 NT$32 llave_a ENTER CUERPO_METODO RETORNO llave_b ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.manejo.agregarEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.jerarquia--; 
                                                                                if(a != null){ 
                                                                                    if(a && b){ 
                                                                                        RESULT=null; 
                                                                                    } else if((!a && b) || (a && !b)){ 
                                                                                        RESULT=true; 
                                                                                    } else if(!a && !b){ 
                                                                                        RESULT=false; 
                                                                                    } 
                                                                                } else { 
                                                                                    RESULT=null; 
                                                                                } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ELSE",40, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$32 ::= 
            {
              Boolean RESULT =null;
  parser.jerarquia++; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$32",98, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ELSE ::= condElse condIf parentesis_a NT$29 EXT2 NT$30 parentesis_b ENTER2 llave_a ENTER CUERPO_METODO RETORNO llave_b NT$31 ELSE 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=parser.op.retornoIf(a, b, c); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ELSE",40, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-14)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$31 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.manejoJV.segundoChequeoIf(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);  
                                                                                parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$31",97, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$30 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.jerarquia++;  
                                                                                parser.manejoJV.primerChequeoIf(parser.tabla.getObJava(), h); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$30",96, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$29 ::= 
            {
              Boolean RESULT =null;
  parser.usoPila.add(false); 
                                                                                parser.pilaFalsas.add(new ArrayList<>()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$29",95, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IF ::= condIf parentesis_a NT$26 EXT2 NT$27 parentesis_b ENTER2 llave_a ENTER CUERPO_METODO RETORNO llave_b NT$28 ELSE 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=parser.op.retornoIf(a, b, c); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("IF",39, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$28 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.manejo.irEtiquetaFin(parser.tabla.getObJava(), parser.jerarquia);     
                                                                                    parser.manejoJV.segundoChequeoIf(parser.tabla.getObJava(), parser.usoPila, parser.pilaCuarpeta, parser.pilaFalsas, parser.jerarquia);      
                                                                                    parser.op.eliminarAmbito(parser.tabla.getObJava(), parser.jerarquia); 
                                                                                    parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$28",94, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$27 ::= 
            {
              Boolean RESULT =(Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.jerarquia++; 
                                                                                    parser.manejoJV.primerChequeoIf(parser.tabla.getObJava(), h);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$27",93, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$26 ::= 
            {
              Boolean RESULT =null;
  parser.pilaFalsas.add(new ArrayList<>()); 
                                                                                    parser.usoPila.add(false); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$26",92, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RETORNO ::= retorno error puntoComa ENTER 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de return, se esperaba una operacion aritmetica\n"; 
                                                            RESULT = false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO",46, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RETORNO ::= 
            {
              Boolean RESULT =null;
		  RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO",46, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // RETORNO ::= retorno NT$25 OPERACION puntoComa ENTER 
            {
              Boolean RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Boolean) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		  parser.manejoJV.crearReturn(parser.tabla, a, parser.metodo, parser.clase);  
                                                            RESULT=true; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("RETORNO",46, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$25 ::= 
            {
              Boolean RESULT =null;
  parser.tipoActual = parser.tipoMetodo; 
                                                            parser.exe.agregarReturn(parser.tabla, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$25",91, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CUERPO_METODO ::= 
            {
              Boolean RESULT =null;
		 RESULT=false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CUERPO_METODO ::= CUERPO_METODO METODO_VOID 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CUERPO_METODO ::= CUERPO_METODO COMENTARIO_A 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CUERPO_METODO ::= CUERPO_METODO COMENTARIO_B 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CUERPO_METODO ::= CUERPO_METODO LECTURA_DATOS 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CUERPO_METODO ::= CUERPO_METODO SWITCH 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CUERPO_METODO ::= CUERPO_METODO MENSAJE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CUERPO_METODO ::= CUERPO_METODO DO_WHILE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CUERPO_METODO ::= CUERPO_METODO WHILE 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CUERPO_METODO ::= CUERPO_METODO FOR 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPO_METODO ::= CUERPO_METODO IF 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=b; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPO_METODO ::= CUERPO_METODO ASIGNACIONES 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPO_METODO ::= CUERPO_METODO VARIABLES 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 if(a != null){ if(a){ int linea = aleft+PanelPrincipal.totalLineas;   PanelPrincipal.errores += "Linea: "+linea+" Columna: "+aright+" Tipo de error: SEMANTICO - Causa: Lineas escritas luego de instruccion return.\n"; } else { RESULT=a; } } else { RESULT=null; } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CUERPO_METODO",35, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPO_METODO ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de tipo a un metodo, se esperaba un tipo de dato\n";
                                   RESULT = "Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPO_METODO ::= tipoVoid 
            {
              String RESULT =null;
		 RESULT="void"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPO_METODO ::= tipoInt 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPO_METODO ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO_METODO ::= tipoChar 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_METODO",30, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMETROS2 ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de parametros, se esperaba un id\n"; 
                                                            RESULT = ""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",33, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMETROS2 ::= 
            {
              String RESULT =null;
		  RESULT=""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",33, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETROS2 ::= PARAMETROS2 VAR id coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		  parser.op.agregarVarMetodo(c.toString(), parser.tabla.getObJava(), b, true, parser.jerarquia, cleft+PanelPrincipal.totalLineas, cright);   
                                                            parser.op.agregarParametrosMetodo(c.toString(), parser.tabla.getObJava(), b, cleft+PanelPrincipal.totalLineas, cright);
                                                            parser.exe.agregarParametro(parser.tabla, c.toString(), parser.clase, parser.metodo, b);
                                                            if(a.equals("")){
                                                                RESULT = b.toString();
                                                            } else {
                                                                RESULT = a + "_" + b.toString();
                                                            } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",33, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMETROS ::= error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de parametros, se esperaba un id\n"; 
                                                            RESULT = ""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAMETROS",32, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMETROS ::= PARAMETROS2 VAR id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.op.agregarVarMetodo(c.toString(), parser.tabla.getObJava(), b, true, parser.jerarquia, cleft+PanelPrincipal.totalLineas, cright);  
                                                            parser.exe.agregarParametro(parser.tabla, c.toString(), parser.clase, parser.metodo, b);
                                                            parser.op.agregarParametrosMetodo(c.toString(), parser.tabla.getObJava(), b, cleft+PanelPrincipal.totalLineas, cright);
                                                            if(a.equals("")){
                                                                RESULT = b.toString();
                                                            } else {
                                                                RESULT = a + "_" + b.toString();
                                                            } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAMETROS",32, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONSTRUCTOR ::= tipoPublic id parentesis_a NT$22 parentesis_b ENTER2 NT$23 llave_a ENTER CUERPO_METODO NT$24 llave_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		  parser.manejoJV.finMetodo(parser.tabla.getObJava());
                                                            parser.metodo = "";
                                                            parser.jerarquia--;  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",14, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  if(b){ 
                                                                System.out.println("Constructor incapaz de retornar un valor"); 
                                                            }   
                                                            //parser.exe.agregarReturn(parser.tabla, parser.metodo, parser.clase);    
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$24",90, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
  parser.manejoJV.crearMetodo(parser.tabla.getObJava(), a.toString(), "", "void");  
                                                            parser.manejoJV.inicializarThis(parser.tabla, parser.metodo, parser.clase);
                                                            parser.exe.actualizarParametrosMetodo(parser.tabla, parser.clase, parser.metodo); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$23",89, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$22 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.jerarquia++; 
                                                            parser.metodo = a.toString();
                                                            parser.exe.agregarConstructor(parser.tabla, a.toString());
                                                            parser.op.agregarNuevoConstructor(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$22",88, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONSTRUCTOR ::= tipoPublic id parentesis_a NT$19 PARAMETROS parentesis_b ENTER2 NT$20 llave_a ENTER CUERPO_METODO NT$21 llave_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		  parser.manejoJV.finMetodo(parser.tabla.getObJava()); 
                                                            parser.metodo = "";
                                                            parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",14, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  if(b){                      
                                                                System.out.println("Constructor incapaz de retornar un valor"); 
                                                            }  
                                                            //parser.exe.agregarReturn(parser.tabla, parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$21",87, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
  parser.manejoJV.crearMetodo(parser.tabla.getObJava(), a.toString(), h, "void");
                                                            parser.exe.agregarParametros(parser.tabla, parser.metodo, parser.clase, h);  
                                                            if(!h.equals("")){
                                                                parser.metodo = a.toString()+"_"+h;
                                                                parser.exe.actualizarParametrosMetodo(parser.tabla, parser.clase, parser.metodo);
                                                            }    
                                                            parser.manejoJV.inicializarThis(parser.tabla, parser.metodo, parser.clase);    
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$20",86, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$19 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.jerarquia++; 
                                                            parser.metodo = a.toString();
                                                            parser.exe.agregarConstructor(parser.tabla, a.toString());
                                                            parser.op.agregarNuevoConstructor(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$19",85, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // METODOS ::= tipoPublic TIPO_METODO id parentesis_a parentesis_b NT$17 ENTER2 llave_a ENTER CUERPO_METODO RETORNO NT$18 llave_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		  parser.metodo = "";
                                                                            parser.manejoJV.finMetodo(parser.tabla.getObJava());  
                                                                            parser.jerarquia--; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODOS",4, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.op.comprobarReturnMetodo(parser.tabla.getObJava(), f, g, b.toString(), a); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$18",84, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$17 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
  parser.tipoMetodo=a; 
                                                                            parser.jerarquia++; 
                                                                            parser.metodo = b.toString();
                                                                            parser.exe.agregarMetodo(parser.tabla, b.toString(), a, parser.clase);
                                                                            parser.op.agregarNuevoMetodo(b.toString(), parser.tabla.getObJava(), parser.tabla.getObJava().getMisClases().size()-1, a.toString(), bleft+PanelPrincipal.totalLineas, bright);  
                                                                            parser.manejoJV.crearMetodo(parser.tabla.getObJava(), b.toString(), "", a);   
                                                                            parser.exe.actualizarParametrosMetodo(parser.tabla, parser.clase, parser.metodo); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$17",83, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // METODOS ::= tipoPublic TIPO_METODO id parentesis_a NT$14 PARAMETROS parentesis_b ENTER2 NT$15 llave_a ENTER CUERPO_METODO RETORNO NT$16 llave_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-13)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		  parser.manejoJV.finMetodo(parser.tabla.getObJava());  
                                                                            parser.jerarquia--;
                                                                            parser.metodo = ""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODOS",4, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-15)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Boolean g = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.op.comprobarReturnMetodo(parser.tabla.getObJava(), f, g, b.toString(), a);     
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$16",82, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
  
                                                                            parser.exe.agregarParametros(parser.tabla, parser.metodo, parser.clase, h);
                                                                            parser.metodo = b.toString();
                                                                            if(!h.equals("")){
                                                                                parser.metodo = b.toString() + "_"+h;
                                                                                parser.exe.actualizarParametrosMetodo(parser.tabla, parser.clase, parser.metodo);
                                                                            }
                                                                            parser.manejoJV.crearMetodo(parser.tabla.getObJava(), b.toString(), h, a);      
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$15",81, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$14 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.tipoMetodo=a; 
                                                                            parser.jerarquia++;
                                                                            parser.metodo = b.toString();
                                                                            parser.exe.agregarMetodo(parser.tabla, b.toString(), a, parser.clase);
                                                                            parser.op.agregarNuevoMetodo(b.toString(), parser.tabla.getObJava(), parser.tabla.getObJava().getMisClases().size()-1, a.toString(), bleft+PanelPrincipal.totalLineas, bright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$14",80, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAM2 ::= error 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de parametros, se esperaba una variable\n";  
                                                                    RESULT = new ArrayList<>();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM2",49, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAM2 ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		  RESULT = new ArrayList<>(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM2",49, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAM2 ::= PARAM2 OP_COND coma 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		  if(a != null){
                                                                        if(!b.getTipo().equals("")){
                                                                            a.add(b);
                                                                            RESULT = a;
                                                                        } else {
                                                                            RESULT = null;
                                                                        }
                                                                    } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM2",49, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAM ::= error 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en declaracion de parametros, se esperaba una variable\n"; 
                                                                       RESULT = new ArrayList<>(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM",48, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAM ::= PARAM2 OP_COND 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean b = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  if(a != null){
                                                                        if(!b.getTipo().equals("")){
                                                                            a.add(b);
                                                                            RESULT = a;
                                                                        } else {
                                                                            RESULT = null;
                                                                        }
                                                                    }  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM",48, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAM_METODOS ::= 
            {
              ArrayList<NodoBoolean> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAM_METODOS ::= PARAM 
            {
              ArrayList<NodoBoolean> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		ArrayList<NodoBoolean> a = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PARAM_METODOS",50, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // METODO_VOID ::= id parentesis_a PARAM_METODOS parentesis_b puntoComa ENTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		   parser.verif.verificarMetodo(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                                            parser.manejoJV.invocarMetodo(parser.tabla, a.toString(), parser.clase, b, aleft+PanelPrincipal.totalLineas);   
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODO_VOID",22, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METODO_OP ::= id parentesis_a PARAM_METODOS parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		  parser.verif.verificarMetodo(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                                    RESULT = parser.manejoJV.devolverEtiquetaMetodo(parser.tabla, a.toString(), parser.clase, b, aleft+PanelPrincipal.totalLineas);   
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODO_OP",34, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // METODO_COND ::= id parentesis_a PARAM_METODOS parentesis_b 
            {
              NodoBoolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		ArrayList<NodoBoolean> b = (ArrayList<NodoBoolean>)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		  boolean existe = parser.verif.verificarMetodo(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas, aright);
                                                                                    String et = parser.manejoJV.devolverEtiquetaMetodo(parser.tabla, a.toString(), parser.clase, b, aleft+PanelPrincipal.totalLineas);
                                                                                    String tip = "";
                                                                                    if(existe){
                                                                                        tip = parser.tabla.getObJava().getMisClases().get(parser.tabla.getObJava().getMisClases().size()-1).getMisMetodos().get(VerifJAVA.iterador).getRetorno();
                                                                                    }
                                                                                    RESULT = new NodoBoolean(tip, et);   
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("METODO_COND",53, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO_VAL ::= menos numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO_VAL ::= menos numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), bleft+PanelPrincipal.totalLineas, bright); RESULT=a.toString()+b.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO_VAL ::= menos id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, bleft+PanelPrincipal.totalLineas, bright); 
                                                                        RESULT=a.toString()+parser.manejoJV.etiquetaId(parser.tabla, b.toString(), parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO_VAL ::= menos comillaSimple numero comillaSimple 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=d.toString()+a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO_VAL ::= menos comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=d.toString()+a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO_VAL ::= comillaSimple numero comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO_VAL ::= comillaSimple id comillaSimple 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  RESULT=a.toString()+b.toString()+c.toString();  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO_VAL ::= numero punto numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tipo="Float"; parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString()+b.toString()+c.toString(), aleft+PanelPrincipal.totalLineas, aright); RESULT=a.toString()+b.toString()+c.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO_VAL ::= menos condThis punto METODO_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  if(!a.getTipo().equals(parser.tipoActual)){
                                                                            if(!parser.verif.verificarPadreVar(parser.tabla.getObJava(), a.getTipo(), parser.tipoActual)){
                                                                                PanelPrincipal.errores += "Fila: " + aleft+PanelPrincipal.totalLineas + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                            }
                                                                        }
                                                                        RESULT = "-"+a.getId(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO_VAL ::= condThis punto METODO_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  if(!a.getTipo().equals(parser.tipoActual)){
                                                                            if(!parser.verif.verificarPadreVar(parser.tabla.getObJava(), a.getTipo(), parser.tipoActual)){
                                                                                PanelPrincipal.errores += "Fila: " + aleft+PanelPrincipal.totalLineas + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                            }
                                                                        }
                                                                        RESULT = a.getId(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO_VAL ::= menos METODO_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  if(!a.getTipo().equals(parser.tipoActual)){
                                                                            if(!parser.verif.verificarPadreVar(parser.tabla.getObJava(), a.getTipo(), parser.tipoActual)){
                                                                                PanelPrincipal.errores += "Fila: " + aleft+PanelPrincipal.totalLineas + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                            }
                                                                        }
                                                                        RESULT = "-"+a.getId(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO_VAL ::= METODO_COND 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		NodoBoolean a = (NodoBoolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  if(!a.getTipo().equals(parser.tipoActual)){
                                                                            if(!parser.verif.verificarPadreVar(parser.tabla.getObJava(), a.getTipo(), parser.tipoActual)){
                                                                                PanelPrincipal.errores += "Fila: " + aleft+PanelPrincipal.totalLineas + " Columna: " + aright + " Tipo de error: SEMANTICO - Causa: Conflicto en tipadoL: "+a.getTipo() +" - "+ parser.tipoActual +".\n";
                                                                            }
                                                                        }
                                                                        RESULT = a.getId(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO_VAL ::= menos condThis punto id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), 0, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright);
                                                                        String et = parser.manejoJV.retornarValThis(parser.tabla, a.toString(), parser.clase);
                                                                        RESULT = "-"+et; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_VAL ::= condThis punto id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), 0, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright);
                                                                        RESULT = parser.manejoJV.retornarValThis(parser.tabla, a.toString(), parser.clase);  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_VAL ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  String tipo ="Integer";  parser.verif.verificarNumero(tipo, parser.tabla.getObJava(), parser.tipoActual, a.toString(), aleft+PanelPrincipal.totalLineas, aright);  RESULT=a.toString(); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_VAL ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		  parser.verif.verificarTipadoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, parser.tipoActual, aleft+PanelPrincipal.totalLineas, aright); 
                                                                        RESULT = parser.manejoJV.etiquetaId(parser.tabla, a.toString(), parser.metodo, parser.clase); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("TIPO_VAL",55, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION ::= TIPO_VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION ::= OPERACION porcentaje OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "modulo"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION ::= OPERACION div OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "div");  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION ::= OPERACION por OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "mult"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION ::= OPERACION menos OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "resta"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= OPERACION mas OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT = parser.manejoJV.agregarOperacion(parser.tabla, a, b, "suma"); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION ::= parentesis_a OPERACION parentesis_b 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("OPERACION",54, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALOR ::= OPERACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VALOR",56, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VAR ::= tipoFloat 
            {
              String RESULT =null;
		 RESULT="Float"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VAR ::= tipoChar 
            {
              String RESULT =null;
		 RESULT="Char"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VAR ::= tipoInt 
            {
              String RESULT =null;
		 RESULT="Integer"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // C ::= igual error 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 int linea = aleft+PanelPrincipal.totalLineas;  PanelPrincipal.errores += "Fila: " + linea + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de valor hacia una variable\n";    
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // C ::= 
            {
              String RESULT =null;
		 RESULT= null; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // C ::= igual VALOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
		 RESULT=a; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONC_VAR_AS ::= id igual error NT$13 CONC_VAR_AS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_AS",9, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + bright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de valor en variable: "+a.toString()+"\n"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$13",79, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONC_VAR_AS ::= puntoComa ENTER 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_AS",9, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONC_VAR_AS ::= id igual NT$11 VALOR NT$12 CONC_VAR_AS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_AS",9, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.manejoJV.agregarValVariable(parser.tabla, a.toString(), b, parser.metodo, parser.clase, parser.jerarquia);
                                                    parser.op.agregarValorVar(parser.tabla.getObJava(), parser.jerarquia, a.toString()); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$12",78, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.tipoActual=""; 
                                                    parser.tipoActual = parser.op.devolverTipoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$11",77, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONC_VAR_DEF ::= puntoComa ENTER 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_DEF",8, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONC_VAR_DEF ::= coma id NT$9 C NT$10 CONC_VAR_DEF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("CONC_VAR_DEF",8, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  if(c!=null){ 
                                                        parser.manejoJV.agregarValVariable(parser.tabla, a.toString(), c, parser.metodo, parser.clase, parser.jerarquia);
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, a.toString(), parser.tipoActual, true, aleft+PanelPrincipal.totalLineas, aright); 
                                                    } else { 
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, a.toString(), parser.tipoActual, false, aleft+PanelPrincipal.totalLineas, aright); 
                                                    } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$10",76, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 parser.exe.agregarVariable(parser.tabla, a.toString(), parser.metodo, parser.clase, parser.tipoActual); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$9",75, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACIONES ::= condThis punto id igual error NT$8 CONC_VAR_AS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",15, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-6)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
 int linea = aleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + bright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de valor en variable: "+a.toString()+"\n"; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$8",74, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACIONES ::= id igual error NT$7 CONC_VAR_AS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",15, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  int linea = bleft+PanelPrincipal.totalLineas; PanelPrincipal.errores += "Fila: " + linea + " Columna: " + bright + " Tipo de error: SINTACTICO - Causa: Error en asignacion de valor en variable: "+a.toString()+"\n";    
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$7",73, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACIONES ::= condThis punto id igual NT$5 VALOR NT$6 CONC_VAR_AS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",15, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.manejoJV.agregarValVariable2(parser.tabla, a.toString(), b, parser.metodo, parser.clase);
                                                            parser.op.agregarValorVar(parser.tabla.getObJava(), 0, a.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$6",72, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.tipoActual = ""; 
                                                            parser.tipoActual = parser.op.devolverTipoVar(parser.tabla.getObJava(), a.toString(), 0, parser.tabla.getObJava().getMisClases().size()-1, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$5",71, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACIONES ::= id igual NT$3 VALOR NT$4 CONC_VAR_AS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",15, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.manejoJV.agregarValVariable(parser.tabla, a.toString(), b, parser.metodo, parser.clase, parser.jerarquia);
                                                            parser.op.agregarValorVar(parser.tabla.getObJava(), parser.jerarquia, a.toString());  
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$4",70, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  parser.tipoActual = ""; 
                                                            parser.tipoActual = parser.op.devolverTipoVar(parser.tabla.getObJava(), a.toString(), parser.jerarquia, parser.tabla.getObJava().getMisClases().size()-1, aleft+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$3",69, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLES ::= VAR id NT$1 C NT$2 CONC_VAR_DEF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  if(c!=null){   
                                                        /*VER ESTE IF Y REVISAR QUE PROCEDE*/
                                                        parser.manejoJV.agregarValVariable(parser.tabla, b.toString(), c, parser.metodo, parser.clase, parser.jerarquia);
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, b.toString(), a.toString(), true, bleft+PanelPrincipal.totalLineas, bright);  
                                                    } else { 
                                                        parser.op.agregarVariable(parser.tabla.getObJava(), parser.jerarquia, b.toString(), a.toString(), false, bleft+PanelPrincipal.totalLineas, bright); 
                                                    } 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$2",68, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.peek()).value;
  parser.tipoActual = a;
                                                    parser.exe.agregarVariable(parser.tabla, b.toString(), parser.metodo, parser.clase, a); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$1",67, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // B ::= error B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // B ::= 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // B ::= COMENTARIO_B B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // B ::= COMENTARIO_A B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // B ::= ASIGNACIONES B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // B ::= CONSTRUCTOR B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // B ::= METODOS B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // B ::= VARIABLES B 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("B",2, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PUBLIC ::= 
            {
              Boolean RESULT =null;
		  RESULT = false; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PUBLIC",36, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PUBLIC ::= tipoPublic 
            {
              Boolean RESULT =null;
		  RESULT = true; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("PUBLIC",36, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= A PUBLIC clase id ENTER2 NT$0 llave_a ENTER B llave_b ENTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-5)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-7)).value;
		  parser.manejoJV.constructorPorDefecto(parser.tabla, parser.clase);
                                                    parser.tabla.getObJava().setAuxiliar(new ArrayList<>());
                                                    parser.clase = ""; 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-10)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).right;
		Boolean z = (Boolean)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
  if(!z){
                                                        PanelPrincipal.errores += "Fila: " + aleft+PanelPrincipal.totalLineas + " Columna: " + aright + " Tipo de error: SINTACTICO - Causa: Falta de valor 'public' en clase: "+a.toString()+"\n";
                                                    }
                                                    parser.clase = a.toString();
                                                    parser.exe.agregarClase(parser.tabla, a.toString());
                                                    parser.op.agregarNuevaClase(parser.tabla.getObJava(), a.toString(), aleft+PanelPrincipal.totalLineas+PanelPrincipal.totalLineas, aright); 
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("NT$0",66, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // AA ::= ENTER2 A 
            {
              Object RESULT =null;

              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("AA",0, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          return CUP$SintaxJAVA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= AA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)).value;
		RESULT = start_val;
              CUP$SintaxJAVA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.elementAt(CUP$SintaxJAVA$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxJAVA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxJAVA$parser.done_parsing();
          return CUP$SintaxJAVA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

